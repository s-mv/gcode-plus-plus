
// Generated from /home/smv/code/accelus/linuxcnc/src/emc/sterp/antlr4/lexer_antlr4.g4 by ANTLR 4.13.2


#include "lexer_antlr4.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct Lexer_antlr4StaticData final {
  Lexer_antlr4StaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  Lexer_antlr4StaticData(const Lexer_antlr4StaticData&) = delete;
  Lexer_antlr4StaticData(Lexer_antlr4StaticData&&) = delete;
  Lexer_antlr4StaticData& operator=(const Lexer_antlr4StaticData&) = delete;
  Lexer_antlr4StaticData& operator=(Lexer_antlr4StaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag lexer_antlr4LexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<Lexer_antlr4StaticData> lexer_antlr4LexerStaticData = nullptr;

void lexer_antlr4LexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (lexer_antlr4LexerStaticData != nullptr) {
    return;
  }
#else
  assert(lexer_antlr4LexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<Lexer_antlr4StaticData>(
    std::vector<std::string>{
      "IF", "THEN", "DO", "WHILE", "FOR", "FROM", "TO", "ELSE", "END", "ENDIF", 
      "ENDWHILE", "ENDFOR", "BREAK", "CONTINUE", "IMPORT", "FILENAME", "SUBROUTINE", 
      "M99", "PERCENT", "DIGIT", "LETTER", "DOLLAR", "PLUS", "MINUS", "DOT", 
      "LEFT_BRACKET", "RIGHT_BRACKET", "POWER", "SLASH", "MODULO", "TIMES", 
      "LOGICAL_AND", "EXCLUSIVE_OR", "NON_EXCLUSIVE_OR", "EQ", "NE", "LT", 
      "LE", "GT", "GE", "ABSOLUTE_VALUE", "ARC_COSINE", "ARC_SINE", "COSINE", 
      "E_RAISED_TO", "FIX_DOWN", "FIX_UP", "NATURAL_LOG_OF", "ROUND_OPERATION", 
      "SINE", "SQUARE_ROOT", "TANGENT", "ARC_TANGENT", "PARAMETER_SIGN", 
      "EQUAL_SIGN", "COMMENT", "NAMED_PARAMETER", "EOL", "WS", "A", "B", 
      "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", 
      "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "'%'", "", "", "'$'", "'+'", "'-'", "'.'", "'['", "']'", "'**'", 
      "'/'", "", "'*'", "", "", "", "", "", "'<'", "'<='", "'>'", "'>='", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "'#'", "'='"
    },
    std::vector<std::string>{
      "", "IF", "THEN", "DO", "WHILE", "FOR", "FROM", "TO", "ELSE", "END", 
      "ENDIF", "ENDWHILE", "ENDFOR", "BREAK", "CONTINUE", "IMPORT", "FILENAME", 
      "SUBROUTINE", "M99", "PERCENT", "DIGIT", "LETTER", "DOLLAR", "PLUS", 
      "MINUS", "DOT", "LEFT_BRACKET", "RIGHT_BRACKET", "POWER", "SLASH", 
      "MODULO", "TIMES", "LOGICAL_AND", "EXCLUSIVE_OR", "NON_EXCLUSIVE_OR", 
      "EQ", "NE", "LT", "LE", "GT", "GE", "ABSOLUTE_VALUE", "ARC_COSINE", 
      "ARC_SINE", "COSINE", "E_RAISED_TO", "FIX_DOWN", "FIX_UP", "NATURAL_LOG_OF", 
      "ROUND_OPERATION", "SINE", "SQUARE_ROOT", "TANGENT", "ARC_TANGENT", 
      "PARAMETER_SIGN", "EQUAL_SIGN", "COMMENT", "NAMED_PARAMETER", "EOL", 
      "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,59,510,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,
  	1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
  	7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
  	10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,
  	12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,
  	14,1,14,1,14,1,14,1,14,1,15,1,15,5,15,256,8,15,10,15,12,15,259,9,15,1,
  	15,1,15,1,16,1,16,1,17,1,17,5,17,267,8,17,10,17,12,17,270,9,17,1,17,1,
  	17,1,17,1,17,4,17,276,8,17,11,17,12,17,277,3,17,280,8,17,1,18,1,18,1,
  	19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,
  	26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,31,1,
  	31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,
  	35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,
  	40,1,40,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,
  	43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,
  	47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,1,
  	50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,53,1,
  	53,1,54,1,54,1,55,1,55,5,55,401,8,55,10,55,12,55,404,9,55,1,55,1,55,1,
  	55,5,55,409,8,55,10,55,12,55,412,9,55,3,55,414,8,55,1,56,1,56,1,56,4,
  	56,419,8,56,11,56,12,56,420,1,56,1,56,1,56,1,56,4,56,427,8,56,11,56,12,
  	56,428,1,56,1,56,1,56,1,56,3,56,435,8,56,1,56,1,56,1,56,5,56,440,8,56,
  	10,56,12,56,443,9,56,3,56,445,8,56,1,57,1,57,1,57,3,57,450,8,57,1,58,
  	4,58,453,8,58,11,58,12,58,454,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,
  	1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,
  	1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,
  	1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,
  	1,83,1,83,1,84,1,84,0,0,85,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
  	10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
  	43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
  	33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
  	89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,
  	111,56,113,57,115,58,117,59,119,0,121,0,123,0,125,0,127,0,129,0,131,0,
  	133,0,135,0,137,0,139,0,141,0,143,0,145,0,147,0,149,0,151,0,153,0,155,
  	0,157,0,159,0,161,0,163,0,165,0,167,0,169,0,1,0,32,3,0,10,10,13,13,34,
  	34,2,0,65,90,97,122,1,0,41,41,2,0,10,10,13,13,4,0,45,46,91,91,93,93,95,
  	95,2,0,9,9,32,32,2,0,65,65,97,97,2,0,66,66,98,98,2,0,67,67,99,99,2,0,
  	68,68,100,100,2,0,69,69,101,101,2,0,70,70,102,102,2,0,71,71,103,103,2,
  	0,72,72,104,104,2,0,73,73,105,105,2,0,74,74,106,106,2,0,75,75,107,107,
  	2,0,76,76,108,108,2,0,77,77,109,109,2,0,78,78,110,110,2,0,79,79,111,111,
  	2,0,80,80,112,112,2,0,81,81,113,113,2,0,82,82,114,114,2,0,83,83,115,115,
  	2,0,84,84,116,116,2,0,85,85,117,117,2,0,86,86,118,118,2,0,87,87,119,119,
  	2,0,88,88,120,120,2,0,89,89,121,121,2,0,90,90,122,122,502,0,1,1,0,0,0,
  	0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
  	0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
  	0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
  	1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
  	0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
  	0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
  	1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,
  	0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,
  	0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
  	1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,
  	1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,1,171,
  	1,0,0,0,3,174,1,0,0,0,5,179,1,0,0,0,7,182,1,0,0,0,9,188,1,0,0,0,11,192,
  	1,0,0,0,13,197,1,0,0,0,15,200,1,0,0,0,17,205,1,0,0,0,19,209,1,0,0,0,21,
  	215,1,0,0,0,23,224,1,0,0,0,25,231,1,0,0,0,27,237,1,0,0,0,29,246,1,0,0,
  	0,31,253,1,0,0,0,33,262,1,0,0,0,35,264,1,0,0,0,37,281,1,0,0,0,39,283,
  	1,0,0,0,41,285,1,0,0,0,43,287,1,0,0,0,45,289,1,0,0,0,47,291,1,0,0,0,49,
  	293,1,0,0,0,51,295,1,0,0,0,53,297,1,0,0,0,55,299,1,0,0,0,57,302,1,0,0,
  	0,59,304,1,0,0,0,61,308,1,0,0,0,63,310,1,0,0,0,65,314,1,0,0,0,67,318,
  	1,0,0,0,69,321,1,0,0,0,71,324,1,0,0,0,73,327,1,0,0,0,75,329,1,0,0,0,77,
  	332,1,0,0,0,79,334,1,0,0,0,81,337,1,0,0,0,83,341,1,0,0,0,85,346,1,0,0,
  	0,87,351,1,0,0,0,89,355,1,0,0,0,91,359,1,0,0,0,93,363,1,0,0,0,95,367,
  	1,0,0,0,97,370,1,0,0,0,99,376,1,0,0,0,101,380,1,0,0,0,103,385,1,0,0,0,
  	105,389,1,0,0,0,107,394,1,0,0,0,109,396,1,0,0,0,111,413,1,0,0,0,113,444,
  	1,0,0,0,115,449,1,0,0,0,117,452,1,0,0,0,119,458,1,0,0,0,121,460,1,0,0,
  	0,123,462,1,0,0,0,125,464,1,0,0,0,127,466,1,0,0,0,129,468,1,0,0,0,131,
  	470,1,0,0,0,133,472,1,0,0,0,135,474,1,0,0,0,137,476,1,0,0,0,139,478,1,
  	0,0,0,141,480,1,0,0,0,143,482,1,0,0,0,145,484,1,0,0,0,147,486,1,0,0,0,
  	149,488,1,0,0,0,151,490,1,0,0,0,153,492,1,0,0,0,155,494,1,0,0,0,157,496,
  	1,0,0,0,159,498,1,0,0,0,161,500,1,0,0,0,163,502,1,0,0,0,165,504,1,0,0,
  	0,167,506,1,0,0,0,169,508,1,0,0,0,171,172,3,135,67,0,172,173,3,129,64,
  	0,173,2,1,0,0,0,174,175,3,157,78,0,175,176,3,133,66,0,176,177,3,127,63,
  	0,177,178,3,145,72,0,178,4,1,0,0,0,179,180,3,125,62,0,180,181,3,147,73,
  	0,181,6,1,0,0,0,182,183,3,163,81,0,183,184,3,133,66,0,184,185,3,135,67,
  	0,185,186,3,141,70,0,186,187,3,127,63,0,187,8,1,0,0,0,188,189,3,129,64,
  	0,189,190,3,147,73,0,190,191,3,153,76,0,191,10,1,0,0,0,192,193,3,129,
  	64,0,193,194,3,153,76,0,194,195,3,147,73,0,195,196,3,143,71,0,196,12,
  	1,0,0,0,197,198,3,157,78,0,198,199,3,147,73,0,199,14,1,0,0,0,200,201,
  	3,127,63,0,201,202,3,141,70,0,202,203,3,155,77,0,203,204,3,127,63,0,204,
  	16,1,0,0,0,205,206,3,127,63,0,206,207,3,145,72,0,207,208,3,125,62,0,208,
  	18,1,0,0,0,209,210,3,127,63,0,210,211,3,145,72,0,211,212,3,125,62,0,212,
  	213,3,135,67,0,213,214,3,129,64,0,214,20,1,0,0,0,215,216,3,127,63,0,216,
  	217,3,145,72,0,217,218,3,125,62,0,218,219,3,163,81,0,219,220,3,133,66,
  	0,220,221,3,135,67,0,221,222,3,141,70,0,222,223,3,127,63,0,223,22,1,0,
  	0,0,224,225,3,127,63,0,225,226,3,145,72,0,226,227,3,125,62,0,227,228,
  	3,129,64,0,228,229,3,147,73,0,229,230,3,153,76,0,230,24,1,0,0,0,231,232,
  	3,121,60,0,232,233,3,153,76,0,233,234,3,127,63,0,234,235,3,119,59,0,235,
  	236,3,139,69,0,236,26,1,0,0,0,237,238,3,123,61,0,238,239,3,147,73,0,239,
  	240,3,145,72,0,240,241,3,157,78,0,241,242,3,135,67,0,242,243,3,145,72,
  	0,243,244,3,159,79,0,244,245,3,127,63,0,245,28,1,0,0,0,246,247,3,135,
  	67,0,247,248,3,143,71,0,248,249,3,149,74,0,249,250,3,147,73,0,250,251,
  	3,153,76,0,251,252,3,157,78,0,252,30,1,0,0,0,253,257,5,34,0,0,254,256,
  	8,0,0,0,255,254,1,0,0,0,256,259,1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,
  	0,258,260,1,0,0,0,259,257,1,0,0,0,260,261,5,34,0,0,261,32,1,0,0,0,262,
  	263,3,147,73,0,263,34,1,0,0,0,264,268,3,143,71,0,265,267,5,48,0,0,266,
  	265,1,0,0,0,267,270,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,271,1,
  	0,0,0,270,268,1,0,0,0,271,272,5,57,0,0,272,279,5,57,0,0,273,275,3,49,
  	24,0,274,276,5,48,0,0,275,274,1,0,0,0,276,277,1,0,0,0,277,275,1,0,0,0,
  	277,278,1,0,0,0,278,280,1,0,0,0,279,273,1,0,0,0,279,280,1,0,0,0,280,36,
  	1,0,0,0,281,282,5,37,0,0,282,38,1,0,0,0,283,284,2,48,57,0,284,40,1,0,
  	0,0,285,286,7,1,0,0,286,42,1,0,0,0,287,288,5,36,0,0,288,44,1,0,0,0,289,
  	290,5,43,0,0,290,46,1,0,0,0,291,292,5,45,0,0,292,48,1,0,0,0,293,294,5,
  	46,0,0,294,50,1,0,0,0,295,296,5,91,0,0,296,52,1,0,0,0,297,298,5,93,0,
  	0,298,54,1,0,0,0,299,300,5,42,0,0,300,301,5,42,0,0,301,56,1,0,0,0,302,
  	303,5,47,0,0,303,58,1,0,0,0,304,305,3,143,71,0,305,306,3,147,73,0,306,
  	307,3,125,62,0,307,60,1,0,0,0,308,309,5,42,0,0,309,62,1,0,0,0,310,311,
  	3,119,59,0,311,312,3,145,72,0,312,313,3,125,62,0,313,64,1,0,0,0,314,315,
  	3,165,82,0,315,316,3,147,73,0,316,317,3,153,76,0,317,66,1,0,0,0,318,319,
  	3,147,73,0,319,320,3,153,76,0,320,68,1,0,0,0,321,322,3,127,63,0,322,323,
  	3,151,75,0,323,70,1,0,0,0,324,325,3,145,72,0,325,326,3,127,63,0,326,72,
  	1,0,0,0,327,328,5,60,0,0,328,74,1,0,0,0,329,330,5,60,0,0,330,331,5,61,
  	0,0,331,76,1,0,0,0,332,333,5,62,0,0,333,78,1,0,0,0,334,335,5,62,0,0,335,
  	336,5,61,0,0,336,80,1,0,0,0,337,338,3,119,59,0,338,339,3,121,60,0,339,
  	340,3,155,77,0,340,82,1,0,0,0,341,342,3,119,59,0,342,343,3,123,61,0,343,
  	344,3,147,73,0,344,345,3,155,77,0,345,84,1,0,0,0,346,347,3,119,59,0,347,
  	348,3,155,77,0,348,349,3,135,67,0,349,350,3,145,72,0,350,86,1,0,0,0,351,
  	352,3,123,61,0,352,353,3,147,73,0,353,354,3,155,77,0,354,88,1,0,0,0,355,
  	356,3,127,63,0,356,357,3,165,82,0,357,358,3,149,74,0,358,90,1,0,0,0,359,
  	360,3,129,64,0,360,361,3,135,67,0,361,362,3,165,82,0,362,92,1,0,0,0,363,
  	364,3,129,64,0,364,365,3,159,79,0,365,366,3,149,74,0,366,94,1,0,0,0,367,
  	368,3,141,70,0,368,369,3,145,72,0,369,96,1,0,0,0,370,371,3,153,76,0,371,
  	372,3,147,73,0,372,373,3,159,79,0,373,374,3,145,72,0,374,375,3,125,62,
  	0,375,98,1,0,0,0,376,377,3,155,77,0,377,378,3,135,67,0,378,379,3,145,
  	72,0,379,100,1,0,0,0,380,381,3,155,77,0,381,382,3,151,75,0,382,383,3,
  	153,76,0,383,384,3,157,78,0,384,102,1,0,0,0,385,386,3,157,78,0,386,387,
  	3,119,59,0,387,388,3,145,72,0,388,104,1,0,0,0,389,390,3,119,59,0,390,
  	391,3,157,78,0,391,392,3,119,59,0,392,393,3,145,72,0,393,106,1,0,0,0,
  	394,395,5,35,0,0,395,108,1,0,0,0,396,397,5,61,0,0,397,110,1,0,0,0,398,
  	402,5,40,0,0,399,401,8,2,0,0,400,399,1,0,0,0,401,404,1,0,0,0,402,400,
  	1,0,0,0,402,403,1,0,0,0,403,405,1,0,0,0,404,402,1,0,0,0,405,414,5,41,
  	0,0,406,410,5,59,0,0,407,409,8,3,0,0,408,407,1,0,0,0,409,412,1,0,0,0,
  	410,408,1,0,0,0,410,411,1,0,0,0,411,414,1,0,0,0,412,410,1,0,0,0,413,398,
  	1,0,0,0,413,406,1,0,0,0,414,112,1,0,0,0,415,418,5,35,0,0,416,419,3,41,
  	20,0,417,419,5,95,0,0,418,416,1,0,0,0,418,417,1,0,0,0,419,420,1,0,0,0,
  	420,418,1,0,0,0,420,421,1,0,0,0,421,422,1,0,0,0,422,426,5,40,0,0,423,
  	427,3,41,20,0,424,427,3,39,19,0,425,427,7,4,0,0,426,423,1,0,0,0,426,424,
  	1,0,0,0,426,425,1,0,0,0,427,428,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,
  	0,429,430,1,0,0,0,430,445,5,41,0,0,431,434,5,35,0,0,432,435,3,41,20,0,
  	433,435,5,95,0,0,434,432,1,0,0,0,434,433,1,0,0,0,435,441,1,0,0,0,436,
  	440,3,41,20,0,437,440,3,39,19,0,438,440,5,95,0,0,439,436,1,0,0,0,439,
  	437,1,0,0,0,439,438,1,0,0,0,440,443,1,0,0,0,441,439,1,0,0,0,441,442,1,
  	0,0,0,442,445,1,0,0,0,443,441,1,0,0,0,444,415,1,0,0,0,444,431,1,0,0,0,
  	445,114,1,0,0,0,446,450,7,3,0,0,447,448,5,13,0,0,448,450,5,10,0,0,449,
  	446,1,0,0,0,449,447,1,0,0,0,450,116,1,0,0,0,451,453,7,5,0,0,452,451,1,
  	0,0,0,453,454,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,456,1,0,0,0,
  	456,457,6,58,0,0,457,118,1,0,0,0,458,459,7,6,0,0,459,120,1,0,0,0,460,
  	461,7,7,0,0,461,122,1,0,0,0,462,463,7,8,0,0,463,124,1,0,0,0,464,465,7,
  	9,0,0,465,126,1,0,0,0,466,467,7,10,0,0,467,128,1,0,0,0,468,469,7,11,0,
  	0,469,130,1,0,0,0,470,471,7,12,0,0,471,132,1,0,0,0,472,473,7,13,0,0,473,
  	134,1,0,0,0,474,475,7,14,0,0,475,136,1,0,0,0,476,477,7,15,0,0,477,138,
  	1,0,0,0,478,479,7,16,0,0,479,140,1,0,0,0,480,481,7,17,0,0,481,142,1,0,
  	0,0,482,483,7,18,0,0,483,144,1,0,0,0,484,485,7,19,0,0,485,146,1,0,0,0,
  	486,487,7,20,0,0,487,148,1,0,0,0,488,489,7,21,0,0,489,150,1,0,0,0,490,
  	491,7,22,0,0,491,152,1,0,0,0,492,493,7,23,0,0,493,154,1,0,0,0,494,495,
  	7,24,0,0,495,156,1,0,0,0,496,497,7,25,0,0,497,158,1,0,0,0,498,499,7,26,
  	0,0,499,160,1,0,0,0,500,501,7,27,0,0,501,162,1,0,0,0,502,503,7,28,0,0,
  	503,164,1,0,0,0,504,505,7,29,0,0,505,166,1,0,0,0,506,507,7,30,0,0,507,
  	168,1,0,0,0,508,509,7,31,0,0,509,170,1,0,0,0,18,0,257,268,277,279,402,
  	410,413,418,420,426,428,434,439,441,444,449,454,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  lexer_antlr4LexerStaticData = std::move(staticData);
}

}

lexer_antlr4::lexer_antlr4(CharStream *input) : Lexer(input) {
  lexer_antlr4::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *lexer_antlr4LexerStaticData->atn, lexer_antlr4LexerStaticData->decisionToDFA, lexer_antlr4LexerStaticData->sharedContextCache);
}

lexer_antlr4::~lexer_antlr4() {
  delete _interpreter;
}

std::string lexer_antlr4::getGrammarFileName() const {
  return "lexer_antlr4.g4";
}

const std::vector<std::string>& lexer_antlr4::getRuleNames() const {
  return lexer_antlr4LexerStaticData->ruleNames;
}

const std::vector<std::string>& lexer_antlr4::getChannelNames() const {
  return lexer_antlr4LexerStaticData->channelNames;
}

const std::vector<std::string>& lexer_antlr4::getModeNames() const {
  return lexer_antlr4LexerStaticData->modeNames;
}

const dfa::Vocabulary& lexer_antlr4::getVocabulary() const {
  return lexer_antlr4LexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView lexer_antlr4::getSerializedATN() const {
  return lexer_antlr4LexerStaticData->serializedATN;
}

const atn::ATN& lexer_antlr4::getATN() const {
  return *lexer_antlr4LexerStaticData->atn;
}




void lexer_antlr4::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  lexer_antlr4LexerInitialize();
#else
  ::antlr4::internal::call_once(lexer_antlr4LexerOnceFlag, lexer_antlr4LexerInitialize);
#endif
}
