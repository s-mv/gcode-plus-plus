
// Generated from lexer_antlr4.g4 by ANTLR 4.13.2


#include "lexer_antlr4.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct Lexer_antlr4StaticData final {
  Lexer_antlr4StaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  Lexer_antlr4StaticData(const Lexer_antlr4StaticData&) = delete;
  Lexer_antlr4StaticData(Lexer_antlr4StaticData&&) = delete;
  Lexer_antlr4StaticData& operator=(const Lexer_antlr4StaticData&) = delete;
  Lexer_antlr4StaticData& operator=(Lexer_antlr4StaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag lexer_antlr4LexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<Lexer_antlr4StaticData> lexer_antlr4LexerStaticData = nullptr;

void lexer_antlr4LexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (lexer_antlr4LexerStaticData != nullptr) {
    return;
  }
#else
  assert(lexer_antlr4LexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<Lexer_antlr4StaticData>(
    std::vector<std::string>{
      "IF", "THEN", "DO", "WHILE", "FOR", "FROM", "TO", "ELSE", "END", "BREAK", 
      "CONTINUE", "DIGIT", "LETTER", "PLUS", "MINUS", "DOT", "LEFT_BRACKET", 
      "RIGHT_BRACKET", "POWER", "SLASH", "MODULO", "TIMES", "LOGICAL_AND", 
      "EXCLUSIVE_OR", "NON_EXCLUSIVE_OR", "EQ", "NE", "LT", "LE", "GT", 
      "GE", "ABSOLUTE_VALUE", "ARC_COSINE", "ARC_SINE", "COSINE", "E_RAISED_TO", 
      "FIX_DOWN", "FIX_UP", "NATURAL_LOG_OF", "ROUND_OPERATION", "SINE", 
      "SQUARE_ROOT", "TANGENT", "ARC_TANGENT", "PARAMETER_SIGN", "EQUAL_SIGN", 
      "COMMENT", "NAMED_PARAMETER", "EOL", "WS", "A", "B", "C", "D", "E", 
      "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", 
      "T", "U", "V", "W", "X", "Y", "Z"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'+'", "'-'", 
      "'.'", "'['", "']'", "'**'", "'/'", "", "'*'", "", "", "", "", "", 
      "'<'", "'<='", "'>'", "'>='", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "'#'", "'='"
    },
    std::vector<std::string>{
      "", "IF", "THEN", "DO", "WHILE", "FOR", "FROM", "TO", "ELSE", "END", 
      "BREAK", "CONTINUE", "DIGIT", "LETTER", "PLUS", "MINUS", "DOT", "LEFT_BRACKET", 
      "RIGHT_BRACKET", "POWER", "SLASH", "MODULO", "TIMES", "LOGICAL_AND", 
      "EXCLUSIVE_OR", "NON_EXCLUSIVE_OR", "EQ", "NE", "LT", "LE", "GT", 
      "GE", "ABSOLUTE_VALUE", "ARC_COSINE", "ARC_SINE", "COSINE", "E_RAISED_TO", 
      "FIX_DOWN", "FIX_UP", "NATURAL_LOG_OF", "ROUND_OPERATION", "SINE", 
      "SQUARE_ROOT", "TANGENT", "ARC_TANGENT", "PARAMETER_SIGN", "EQUAL_SIGN", 
      "COMMENT", "NAMED_PARAMETER", "EOL", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,50,410,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,1,0,1,0,1,0,1,
  	1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,
  	1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
  	9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
  	11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,
  	18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,
  	22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,
  	27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,
  	32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,
  	35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,
  	38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,
  	41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,45,1,
  	45,1,46,1,46,5,46,322,8,46,10,46,12,46,325,9,46,1,46,1,46,1,46,5,46,330,
  	8,46,10,46,12,46,333,9,46,3,46,335,8,46,1,47,1,47,1,47,1,47,1,47,5,47,
  	342,8,47,10,47,12,47,345,9,47,1,48,1,48,1,48,3,48,350,8,48,1,49,4,49,
  	353,8,49,11,49,12,49,354,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,
  	1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,
  	1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,
  	1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,
  	1,74,1,75,1,75,0,0,76,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
  	11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
  	45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
  	34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,
  	91,46,93,47,95,48,97,49,99,50,101,0,103,0,105,0,107,0,109,0,111,0,113,
  	0,115,0,117,0,119,0,121,0,123,0,125,0,127,0,129,0,131,0,133,0,135,0,137,
  	0,139,0,141,0,143,0,145,0,147,0,149,0,151,0,1,0,30,2,0,65,90,97,122,1,
  	0,41,41,2,0,10,10,13,13,2,0,9,9,32,32,2,0,65,65,97,97,2,0,66,66,98,98,
  	2,0,67,67,99,99,2,0,68,68,100,100,2,0,69,69,101,101,2,0,70,70,102,102,
  	2,0,71,71,103,103,2,0,72,72,104,104,2,0,73,73,105,105,2,0,74,74,106,106,
  	2,0,75,75,107,107,2,0,76,76,108,108,2,0,77,77,109,109,2,0,78,78,110,110,
  	2,0,79,79,111,111,2,0,80,80,112,112,2,0,81,81,113,113,2,0,82,82,114,114,
  	2,0,83,83,115,115,2,0,84,84,116,116,2,0,85,85,117,117,2,0,86,86,118,118,
  	2,0,87,87,119,119,2,0,88,88,120,120,2,0,89,89,121,121,2,0,90,90,122,122,
  	391,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
  	1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
  	0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
  	0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
  	1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
  	0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
  	0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
  	1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,
  	0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,
  	0,97,1,0,0,0,0,99,1,0,0,0,1,153,1,0,0,0,3,156,1,0,0,0,5,161,1,0,0,0,7,
  	164,1,0,0,0,9,170,1,0,0,0,11,174,1,0,0,0,13,179,1,0,0,0,15,182,1,0,0,
  	0,17,187,1,0,0,0,19,191,1,0,0,0,21,197,1,0,0,0,23,206,1,0,0,0,25,208,
  	1,0,0,0,27,210,1,0,0,0,29,212,1,0,0,0,31,214,1,0,0,0,33,216,1,0,0,0,35,
  	218,1,0,0,0,37,220,1,0,0,0,39,223,1,0,0,0,41,225,1,0,0,0,43,229,1,0,0,
  	0,45,231,1,0,0,0,47,235,1,0,0,0,49,239,1,0,0,0,51,242,1,0,0,0,53,245,
  	1,0,0,0,55,248,1,0,0,0,57,250,1,0,0,0,59,253,1,0,0,0,61,255,1,0,0,0,63,
  	258,1,0,0,0,65,262,1,0,0,0,67,267,1,0,0,0,69,272,1,0,0,0,71,276,1,0,0,
  	0,73,280,1,0,0,0,75,284,1,0,0,0,77,288,1,0,0,0,79,291,1,0,0,0,81,297,
  	1,0,0,0,83,301,1,0,0,0,85,306,1,0,0,0,87,310,1,0,0,0,89,315,1,0,0,0,91,
  	317,1,0,0,0,93,334,1,0,0,0,95,336,1,0,0,0,97,349,1,0,0,0,99,352,1,0,0,
  	0,101,358,1,0,0,0,103,360,1,0,0,0,105,362,1,0,0,0,107,364,1,0,0,0,109,
  	366,1,0,0,0,111,368,1,0,0,0,113,370,1,0,0,0,115,372,1,0,0,0,117,374,1,
  	0,0,0,119,376,1,0,0,0,121,378,1,0,0,0,123,380,1,0,0,0,125,382,1,0,0,0,
  	127,384,1,0,0,0,129,386,1,0,0,0,131,388,1,0,0,0,133,390,1,0,0,0,135,392,
  	1,0,0,0,137,394,1,0,0,0,139,396,1,0,0,0,141,398,1,0,0,0,143,400,1,0,0,
  	0,145,402,1,0,0,0,147,404,1,0,0,0,149,406,1,0,0,0,151,408,1,0,0,0,153,
  	154,3,117,58,0,154,155,3,111,55,0,155,2,1,0,0,0,156,157,3,139,69,0,157,
  	158,3,115,57,0,158,159,3,109,54,0,159,160,3,127,63,0,160,4,1,0,0,0,161,
  	162,3,107,53,0,162,163,3,129,64,0,163,6,1,0,0,0,164,165,3,145,72,0,165,
  	166,3,115,57,0,166,167,3,117,58,0,167,168,3,123,61,0,168,169,3,109,54,
  	0,169,8,1,0,0,0,170,171,3,111,55,0,171,172,3,129,64,0,172,173,3,135,67,
  	0,173,10,1,0,0,0,174,175,3,111,55,0,175,176,3,135,67,0,176,177,3,129,
  	64,0,177,178,3,125,62,0,178,12,1,0,0,0,179,180,3,139,69,0,180,181,3,129,
  	64,0,181,14,1,0,0,0,182,183,3,109,54,0,183,184,3,123,61,0,184,185,3,137,
  	68,0,185,186,3,109,54,0,186,16,1,0,0,0,187,188,3,109,54,0,188,189,3,127,
  	63,0,189,190,3,107,53,0,190,18,1,0,0,0,191,192,3,103,51,0,192,193,3,135,
  	67,0,193,194,3,109,54,0,194,195,3,101,50,0,195,196,3,121,60,0,196,20,
  	1,0,0,0,197,198,3,105,52,0,198,199,3,129,64,0,199,200,3,127,63,0,200,
  	201,3,139,69,0,201,202,3,117,58,0,202,203,3,127,63,0,203,204,3,141,70,
  	0,204,205,3,109,54,0,205,22,1,0,0,0,206,207,2,48,57,0,207,24,1,0,0,0,
  	208,209,7,0,0,0,209,26,1,0,0,0,210,211,5,43,0,0,211,28,1,0,0,0,212,213,
  	5,45,0,0,213,30,1,0,0,0,214,215,5,46,0,0,215,32,1,0,0,0,216,217,5,91,
  	0,0,217,34,1,0,0,0,218,219,5,93,0,0,219,36,1,0,0,0,220,221,5,42,0,0,221,
  	222,5,42,0,0,222,38,1,0,0,0,223,224,5,47,0,0,224,40,1,0,0,0,225,226,3,
  	125,62,0,226,227,3,129,64,0,227,228,3,107,53,0,228,42,1,0,0,0,229,230,
  	5,42,0,0,230,44,1,0,0,0,231,232,3,101,50,0,232,233,3,127,63,0,233,234,
  	3,107,53,0,234,46,1,0,0,0,235,236,3,147,73,0,236,237,3,129,64,0,237,238,
  	3,135,67,0,238,48,1,0,0,0,239,240,3,129,64,0,240,241,3,135,67,0,241,50,
  	1,0,0,0,242,243,3,109,54,0,243,244,3,133,66,0,244,52,1,0,0,0,245,246,
  	3,127,63,0,246,247,3,109,54,0,247,54,1,0,0,0,248,249,5,60,0,0,249,56,
  	1,0,0,0,250,251,5,60,0,0,251,252,5,61,0,0,252,58,1,0,0,0,253,254,5,62,
  	0,0,254,60,1,0,0,0,255,256,5,62,0,0,256,257,5,61,0,0,257,62,1,0,0,0,258,
  	259,3,101,50,0,259,260,3,103,51,0,260,261,3,137,68,0,261,64,1,0,0,0,262,
  	263,3,101,50,0,263,264,3,105,52,0,264,265,3,129,64,0,265,266,3,137,68,
  	0,266,66,1,0,0,0,267,268,3,101,50,0,268,269,3,137,68,0,269,270,3,117,
  	58,0,270,271,3,127,63,0,271,68,1,0,0,0,272,273,3,105,52,0,273,274,3,129,
  	64,0,274,275,3,137,68,0,275,70,1,0,0,0,276,277,3,109,54,0,277,278,3,147,
  	73,0,278,279,3,131,65,0,279,72,1,0,0,0,280,281,3,111,55,0,281,282,3,117,
  	58,0,282,283,3,147,73,0,283,74,1,0,0,0,284,285,3,111,55,0,285,286,3,141,
  	70,0,286,287,3,131,65,0,287,76,1,0,0,0,288,289,3,123,61,0,289,290,3,127,
  	63,0,290,78,1,0,0,0,291,292,3,135,67,0,292,293,3,129,64,0,293,294,3,141,
  	70,0,294,295,3,127,63,0,295,296,3,107,53,0,296,80,1,0,0,0,297,298,3,137,
  	68,0,298,299,3,117,58,0,299,300,3,127,63,0,300,82,1,0,0,0,301,302,3,137,
  	68,0,302,303,3,133,66,0,303,304,3,135,67,0,304,305,3,139,69,0,305,84,
  	1,0,0,0,306,307,3,139,69,0,307,308,3,101,50,0,308,309,3,127,63,0,309,
  	86,1,0,0,0,310,311,3,101,50,0,311,312,3,139,69,0,312,313,3,101,50,0,313,
  	314,3,127,63,0,314,88,1,0,0,0,315,316,5,35,0,0,316,90,1,0,0,0,317,318,
  	5,61,0,0,318,92,1,0,0,0,319,323,5,40,0,0,320,322,8,1,0,0,321,320,1,0,
  	0,0,322,325,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,326,1,0,0,0,325,
  	323,1,0,0,0,326,335,5,41,0,0,327,331,5,59,0,0,328,330,8,2,0,0,329,328,
  	1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,335,1,0,0,
  	0,333,331,1,0,0,0,334,319,1,0,0,0,334,327,1,0,0,0,335,94,1,0,0,0,336,
  	337,5,35,0,0,337,343,3,25,12,0,338,342,3,25,12,0,339,342,3,23,11,0,340,
  	342,5,95,0,0,341,338,1,0,0,0,341,339,1,0,0,0,341,340,1,0,0,0,342,345,
  	1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,96,1,0,0,0,345,343,1,0,0,
  	0,346,350,7,2,0,0,347,348,5,13,0,0,348,350,5,10,0,0,349,346,1,0,0,0,349,
  	347,1,0,0,0,350,98,1,0,0,0,351,353,7,3,0,0,352,351,1,0,0,0,353,354,1,
  	0,0,0,354,352,1,0,0,0,354,355,1,0,0,0,355,356,1,0,0,0,356,357,6,49,0,
  	0,357,100,1,0,0,0,358,359,7,4,0,0,359,102,1,0,0,0,360,361,7,5,0,0,361,
  	104,1,0,0,0,362,363,7,6,0,0,363,106,1,0,0,0,364,365,7,7,0,0,365,108,1,
  	0,0,0,366,367,7,8,0,0,367,110,1,0,0,0,368,369,7,9,0,0,369,112,1,0,0,0,
  	370,371,7,10,0,0,371,114,1,0,0,0,372,373,7,11,0,0,373,116,1,0,0,0,374,
  	375,7,12,0,0,375,118,1,0,0,0,376,377,7,13,0,0,377,120,1,0,0,0,378,379,
  	7,14,0,0,379,122,1,0,0,0,380,381,7,15,0,0,381,124,1,0,0,0,382,383,7,16,
  	0,0,383,126,1,0,0,0,384,385,7,17,0,0,385,128,1,0,0,0,386,387,7,18,0,0,
  	387,130,1,0,0,0,388,389,7,19,0,0,389,132,1,0,0,0,390,391,7,20,0,0,391,
  	134,1,0,0,0,392,393,7,21,0,0,393,136,1,0,0,0,394,395,7,22,0,0,395,138,
  	1,0,0,0,396,397,7,23,0,0,397,140,1,0,0,0,398,399,7,24,0,0,399,142,1,0,
  	0,0,400,401,7,25,0,0,401,144,1,0,0,0,402,403,7,26,0,0,403,146,1,0,0,0,
  	404,405,7,27,0,0,405,148,1,0,0,0,406,407,7,28,0,0,407,150,1,0,0,0,408,
  	409,7,29,0,0,409,152,1,0,0,0,8,0,323,331,334,341,343,349,354,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  lexer_antlr4LexerStaticData = std::move(staticData);
}

}

lexer_antlr4::lexer_antlr4(CharStream *input) : Lexer(input) {
  lexer_antlr4::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *lexer_antlr4LexerStaticData->atn, lexer_antlr4LexerStaticData->decisionToDFA, lexer_antlr4LexerStaticData->sharedContextCache);
}

lexer_antlr4::~lexer_antlr4() {
  delete _interpreter;
}

std::string lexer_antlr4::getGrammarFileName() const {
  return "lexer_antlr4.g4";
}

const std::vector<std::string>& lexer_antlr4::getRuleNames() const {
  return lexer_antlr4LexerStaticData->ruleNames;
}

const std::vector<std::string>& lexer_antlr4::getChannelNames() const {
  return lexer_antlr4LexerStaticData->channelNames;
}

const std::vector<std::string>& lexer_antlr4::getModeNames() const {
  return lexer_antlr4LexerStaticData->modeNames;
}

const dfa::Vocabulary& lexer_antlr4::getVocabulary() const {
  return lexer_antlr4LexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView lexer_antlr4::getSerializedATN() const {
  return lexer_antlr4LexerStaticData->serializedATN;
}

const atn::ATN& lexer_antlr4::getATN() const {
  return *lexer_antlr4LexerStaticData->atn;
}




void lexer_antlr4::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  lexer_antlr4LexerInitialize();
#else
  ::antlr4::internal::call_once(lexer_antlr4LexerOnceFlag, lexer_antlr4LexerInitialize);
#endif
}
