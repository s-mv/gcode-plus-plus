
// Generated from lexer_antlr4.g4 by ANTLR 4.13.2


#include "lexer_antlr4.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct Lexer_antlr4StaticData final {
  Lexer_antlr4StaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  Lexer_antlr4StaticData(const Lexer_antlr4StaticData&) = delete;
  Lexer_antlr4StaticData(Lexer_antlr4StaticData&&) = delete;
  Lexer_antlr4StaticData& operator=(const Lexer_antlr4StaticData&) = delete;
  Lexer_antlr4StaticData& operator=(Lexer_antlr4StaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag lexer_antlr4LexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<Lexer_antlr4StaticData> lexer_antlr4LexerStaticData = nullptr;

void lexer_antlr4LexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (lexer_antlr4LexerStaticData != nullptr) {
    return;
  }
#else
  assert(lexer_antlr4LexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<Lexer_antlr4StaticData>(
    std::vector<std::string>{
      "IF", "THEN", "DO", "WHILE", "FOR", "FROM", "TO", "ELSE", "END", "ENDIF", 
      "ENDWHILE", "ENDFOR", "BREAK", "CONTINUE", "SUBROUTINE", "M99", "DIGIT", 
      "LETTER", "PLUS", "MINUS", "DOT", "LEFT_BRACKET", "RIGHT_BRACKET", 
      "POWER", "SLASH", "MODULO", "TIMES", "LOGICAL_AND", "EXCLUSIVE_OR", 
      "NON_EXCLUSIVE_OR", "EQ", "NE", "LT", "LE", "GT", "GE", "ABSOLUTE_VALUE", 
      "ARC_COSINE", "ARC_SINE", "COSINE", "E_RAISED_TO", "FIX_DOWN", "FIX_UP", 
      "NATURAL_LOG_OF", "ROUND_OPERATION", "SINE", "SQUARE_ROOT", "TANGENT", 
      "ARC_TANGENT", "PARAMETER_SIGN", "EQUAL_SIGN", "COMMENT", "NAMED_PARAMETER", 
      "EOL", "WS", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", 
      "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", 
      "Z"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "'+'", "'-'", "'.'", "'['", "']'", "'**'", "'/'", "", "'*'", 
      "", "", "", "", "", "'<'", "'<='", "'>'", "'>='", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "'#'", "'='"
    },
    std::vector<std::string>{
      "", "IF", "THEN", "DO", "WHILE", "FOR", "FROM", "TO", "ELSE", "END", 
      "ENDIF", "ENDWHILE", "ENDFOR", "BREAK", "CONTINUE", "SUBROUTINE", 
      "M99", "DIGIT", "LETTER", "PLUS", "MINUS", "DOT", "LEFT_BRACKET", 
      "RIGHT_BRACKET", "POWER", "SLASH", "MODULO", "TIMES", "LOGICAL_AND", 
      "EXCLUSIVE_OR", "NON_EXCLUSIVE_OR", "EQ", "NE", "LT", "LE", "GT", 
      "GE", "ABSOLUTE_VALUE", "ARC_COSINE", "ARC_SINE", "COSINE", "E_RAISED_TO", 
      "FIX_DOWN", "FIX_UP", "NATURAL_LOG_OF", "ROUND_OPERATION", "SINE", 
      "SQUARE_ROOT", "TANGENT", "ARC_TANGENT", "PARAMETER_SIGN", "EQUAL_SIGN", 
      "COMMENT", "NAMED_PARAMETER", "EOL", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,55,461,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,
  	2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
  	1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,
  	9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
  	11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
  	13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,5,15,243,8,15,10,15,12,15,246,9,
  	15,1,15,1,15,1,15,1,15,4,15,252,8,15,11,15,12,15,253,3,15,256,8,15,1,
  	16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,
  	23,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,
  	27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,
  	32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,
  	37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,
  	40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,
  	43,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,
  	46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,50,1,
  	50,1,51,1,51,5,51,373,8,51,10,51,12,51,376,9,51,1,51,1,51,1,51,5,51,381,
  	8,51,10,51,12,51,384,9,51,3,51,386,8,51,1,52,1,52,1,52,1,52,1,52,5,52,
  	393,8,52,10,52,12,52,396,9,52,1,53,1,53,1,53,3,53,401,8,53,1,54,4,54,
  	404,8,54,11,54,12,54,405,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,
  	1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,
  	1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,
  	1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,1,79,
  	1,79,1,80,1,80,0,0,81,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
  	11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
  	45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
  	34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,
  	91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,
  	0,113,0,115,0,117,0,119,0,121,0,123,0,125,0,127,0,129,0,131,0,133,0,135,
  	0,137,0,139,0,141,0,143,0,145,0,147,0,149,0,151,0,153,0,155,0,157,0,159,
  	0,161,0,1,0,30,2,0,65,90,97,122,1,0,41,41,2,0,10,10,13,13,2,0,9,9,32,
  	32,2,0,65,65,97,97,2,0,66,66,98,98,2,0,67,67,99,99,2,0,68,68,100,100,
  	2,0,69,69,101,101,2,0,70,70,102,102,2,0,71,71,103,103,2,0,72,72,104,104,
  	2,0,73,73,105,105,2,0,74,74,106,106,2,0,75,75,107,107,2,0,76,76,108,108,
  	2,0,77,77,109,109,2,0,78,78,110,110,2,0,79,79,111,111,2,0,80,80,112,112,
  	2,0,81,81,113,113,2,0,82,82,114,114,2,0,83,83,115,115,2,0,84,84,116,116,
  	2,0,85,85,117,117,2,0,86,86,118,118,2,0,87,87,119,119,2,0,88,88,120,120,
  	2,0,89,89,121,121,2,0,90,90,122,122,445,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
  	0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
  	0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
  	1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
  	0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
  	0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
  	1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,
  	0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
  	0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
  	1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,
  	0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,1,163,1,0,
  	0,0,3,166,1,0,0,0,5,171,1,0,0,0,7,174,1,0,0,0,9,180,1,0,0,0,11,184,1,
  	0,0,0,13,189,1,0,0,0,15,192,1,0,0,0,17,197,1,0,0,0,19,201,1,0,0,0,21,
  	207,1,0,0,0,23,216,1,0,0,0,25,223,1,0,0,0,27,229,1,0,0,0,29,238,1,0,0,
  	0,31,240,1,0,0,0,33,257,1,0,0,0,35,259,1,0,0,0,37,261,1,0,0,0,39,263,
  	1,0,0,0,41,265,1,0,0,0,43,267,1,0,0,0,45,269,1,0,0,0,47,271,1,0,0,0,49,
  	274,1,0,0,0,51,276,1,0,0,0,53,280,1,0,0,0,55,282,1,0,0,0,57,286,1,0,0,
  	0,59,290,1,0,0,0,61,293,1,0,0,0,63,296,1,0,0,0,65,299,1,0,0,0,67,301,
  	1,0,0,0,69,304,1,0,0,0,71,306,1,0,0,0,73,309,1,0,0,0,75,313,1,0,0,0,77,
  	318,1,0,0,0,79,323,1,0,0,0,81,327,1,0,0,0,83,331,1,0,0,0,85,335,1,0,0,
  	0,87,339,1,0,0,0,89,342,1,0,0,0,91,348,1,0,0,0,93,352,1,0,0,0,95,357,
  	1,0,0,0,97,361,1,0,0,0,99,366,1,0,0,0,101,368,1,0,0,0,103,385,1,0,0,0,
  	105,387,1,0,0,0,107,400,1,0,0,0,109,403,1,0,0,0,111,409,1,0,0,0,113,411,
  	1,0,0,0,115,413,1,0,0,0,117,415,1,0,0,0,119,417,1,0,0,0,121,419,1,0,0,
  	0,123,421,1,0,0,0,125,423,1,0,0,0,127,425,1,0,0,0,129,427,1,0,0,0,131,
  	429,1,0,0,0,133,431,1,0,0,0,135,433,1,0,0,0,137,435,1,0,0,0,139,437,1,
  	0,0,0,141,439,1,0,0,0,143,441,1,0,0,0,145,443,1,0,0,0,147,445,1,0,0,0,
  	149,447,1,0,0,0,151,449,1,0,0,0,153,451,1,0,0,0,155,453,1,0,0,0,157,455,
  	1,0,0,0,159,457,1,0,0,0,161,459,1,0,0,0,163,164,3,127,63,0,164,165,3,
  	121,60,0,165,2,1,0,0,0,166,167,3,149,74,0,167,168,3,125,62,0,168,169,
  	3,119,59,0,169,170,3,137,68,0,170,4,1,0,0,0,171,172,3,117,58,0,172,173,
  	3,139,69,0,173,6,1,0,0,0,174,175,3,155,77,0,175,176,3,125,62,0,176,177,
  	3,127,63,0,177,178,3,133,66,0,178,179,3,119,59,0,179,8,1,0,0,0,180,181,
  	3,121,60,0,181,182,3,139,69,0,182,183,3,145,72,0,183,10,1,0,0,0,184,185,
  	3,121,60,0,185,186,3,145,72,0,186,187,3,139,69,0,187,188,3,135,67,0,188,
  	12,1,0,0,0,189,190,3,149,74,0,190,191,3,139,69,0,191,14,1,0,0,0,192,193,
  	3,119,59,0,193,194,3,133,66,0,194,195,3,147,73,0,195,196,3,119,59,0,196,
  	16,1,0,0,0,197,198,3,119,59,0,198,199,3,137,68,0,199,200,3,117,58,0,200,
  	18,1,0,0,0,201,202,3,119,59,0,202,203,3,137,68,0,203,204,3,117,58,0,204,
  	205,3,127,63,0,205,206,3,121,60,0,206,20,1,0,0,0,207,208,3,119,59,0,208,
  	209,3,137,68,0,209,210,3,117,58,0,210,211,3,155,77,0,211,212,3,125,62,
  	0,212,213,3,127,63,0,213,214,3,133,66,0,214,215,3,119,59,0,215,22,1,0,
  	0,0,216,217,3,119,59,0,217,218,3,137,68,0,218,219,3,117,58,0,219,220,
  	3,121,60,0,220,221,3,139,69,0,221,222,3,145,72,0,222,24,1,0,0,0,223,224,
  	3,113,56,0,224,225,3,145,72,0,225,226,3,119,59,0,226,227,3,111,55,0,227,
  	228,3,131,65,0,228,26,1,0,0,0,229,230,3,115,57,0,230,231,3,139,69,0,231,
  	232,3,137,68,0,232,233,3,149,74,0,233,234,3,127,63,0,234,235,3,137,68,
  	0,235,236,3,151,75,0,236,237,3,119,59,0,237,28,1,0,0,0,238,239,3,139,
  	69,0,239,30,1,0,0,0,240,244,3,135,67,0,241,243,5,48,0,0,242,241,1,0,0,
  	0,243,246,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,247,1,0,0,0,246,
  	244,1,0,0,0,247,248,5,57,0,0,248,255,5,57,0,0,249,251,3,41,20,0,250,252,
  	5,48,0,0,251,250,1,0,0,0,252,253,1,0,0,0,253,251,1,0,0,0,253,254,1,0,
  	0,0,254,256,1,0,0,0,255,249,1,0,0,0,255,256,1,0,0,0,256,32,1,0,0,0,257,
  	258,2,48,57,0,258,34,1,0,0,0,259,260,7,0,0,0,260,36,1,0,0,0,261,262,5,
  	43,0,0,262,38,1,0,0,0,263,264,5,45,0,0,264,40,1,0,0,0,265,266,5,46,0,
  	0,266,42,1,0,0,0,267,268,5,91,0,0,268,44,1,0,0,0,269,270,5,93,0,0,270,
  	46,1,0,0,0,271,272,5,42,0,0,272,273,5,42,0,0,273,48,1,0,0,0,274,275,5,
  	47,0,0,275,50,1,0,0,0,276,277,3,135,67,0,277,278,3,139,69,0,278,279,3,
  	117,58,0,279,52,1,0,0,0,280,281,5,42,0,0,281,54,1,0,0,0,282,283,3,111,
  	55,0,283,284,3,137,68,0,284,285,3,117,58,0,285,56,1,0,0,0,286,287,3,157,
  	78,0,287,288,3,139,69,0,288,289,3,145,72,0,289,58,1,0,0,0,290,291,3,139,
  	69,0,291,292,3,145,72,0,292,60,1,0,0,0,293,294,3,119,59,0,294,295,3,143,
  	71,0,295,62,1,0,0,0,296,297,3,137,68,0,297,298,3,119,59,0,298,64,1,0,
  	0,0,299,300,5,60,0,0,300,66,1,0,0,0,301,302,5,60,0,0,302,303,5,61,0,0,
  	303,68,1,0,0,0,304,305,5,62,0,0,305,70,1,0,0,0,306,307,5,62,0,0,307,308,
  	5,61,0,0,308,72,1,0,0,0,309,310,3,111,55,0,310,311,3,113,56,0,311,312,
  	3,147,73,0,312,74,1,0,0,0,313,314,3,111,55,0,314,315,3,115,57,0,315,316,
  	3,139,69,0,316,317,3,147,73,0,317,76,1,0,0,0,318,319,3,111,55,0,319,320,
  	3,147,73,0,320,321,3,127,63,0,321,322,3,137,68,0,322,78,1,0,0,0,323,324,
  	3,115,57,0,324,325,3,139,69,0,325,326,3,147,73,0,326,80,1,0,0,0,327,328,
  	3,119,59,0,328,329,3,157,78,0,329,330,3,141,70,0,330,82,1,0,0,0,331,332,
  	3,121,60,0,332,333,3,127,63,0,333,334,3,157,78,0,334,84,1,0,0,0,335,336,
  	3,121,60,0,336,337,3,151,75,0,337,338,3,141,70,0,338,86,1,0,0,0,339,340,
  	3,133,66,0,340,341,3,137,68,0,341,88,1,0,0,0,342,343,3,145,72,0,343,344,
  	3,139,69,0,344,345,3,151,75,0,345,346,3,137,68,0,346,347,3,117,58,0,347,
  	90,1,0,0,0,348,349,3,147,73,0,349,350,3,127,63,0,350,351,3,137,68,0,351,
  	92,1,0,0,0,352,353,3,147,73,0,353,354,3,143,71,0,354,355,3,145,72,0,355,
  	356,3,149,74,0,356,94,1,0,0,0,357,358,3,149,74,0,358,359,3,111,55,0,359,
  	360,3,137,68,0,360,96,1,0,0,0,361,362,3,111,55,0,362,363,3,149,74,0,363,
  	364,3,111,55,0,364,365,3,137,68,0,365,98,1,0,0,0,366,367,5,35,0,0,367,
  	100,1,0,0,0,368,369,5,61,0,0,369,102,1,0,0,0,370,374,5,40,0,0,371,373,
  	8,1,0,0,372,371,1,0,0,0,373,376,1,0,0,0,374,372,1,0,0,0,374,375,1,0,0,
  	0,375,377,1,0,0,0,376,374,1,0,0,0,377,386,5,41,0,0,378,382,5,59,0,0,379,
  	381,8,2,0,0,380,379,1,0,0,0,381,384,1,0,0,0,382,380,1,0,0,0,382,383,1,
  	0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,385,370,1,0,0,0,385,378,1,0,0,0,
  	386,104,1,0,0,0,387,388,5,35,0,0,388,394,3,35,17,0,389,393,3,35,17,0,
  	390,393,3,33,16,0,391,393,5,95,0,0,392,389,1,0,0,0,392,390,1,0,0,0,392,
  	391,1,0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,394,395,1,0,0,0,395,106,1,
  	0,0,0,396,394,1,0,0,0,397,401,7,2,0,0,398,399,5,13,0,0,399,401,5,10,0,
  	0,400,397,1,0,0,0,400,398,1,0,0,0,401,108,1,0,0,0,402,404,7,3,0,0,403,
  	402,1,0,0,0,404,405,1,0,0,0,405,403,1,0,0,0,405,406,1,0,0,0,406,407,1,
  	0,0,0,407,408,6,54,0,0,408,110,1,0,0,0,409,410,7,4,0,0,410,112,1,0,0,
  	0,411,412,7,5,0,0,412,114,1,0,0,0,413,414,7,6,0,0,414,116,1,0,0,0,415,
  	416,7,7,0,0,416,118,1,0,0,0,417,418,7,8,0,0,418,120,1,0,0,0,419,420,7,
  	9,0,0,420,122,1,0,0,0,421,422,7,10,0,0,422,124,1,0,0,0,423,424,7,11,0,
  	0,424,126,1,0,0,0,425,426,7,12,0,0,426,128,1,0,0,0,427,428,7,13,0,0,428,
  	130,1,0,0,0,429,430,7,14,0,0,430,132,1,0,0,0,431,432,7,15,0,0,432,134,
  	1,0,0,0,433,434,7,16,0,0,434,136,1,0,0,0,435,436,7,17,0,0,436,138,1,0,
  	0,0,437,438,7,18,0,0,438,140,1,0,0,0,439,440,7,19,0,0,440,142,1,0,0,0,
  	441,442,7,20,0,0,442,144,1,0,0,0,443,444,7,21,0,0,444,146,1,0,0,0,445,
  	446,7,22,0,0,446,148,1,0,0,0,447,448,7,23,0,0,448,150,1,0,0,0,449,450,
  	7,24,0,0,450,152,1,0,0,0,451,452,7,25,0,0,452,154,1,0,0,0,453,454,7,26,
  	0,0,454,156,1,0,0,0,455,456,7,27,0,0,456,158,1,0,0,0,457,458,7,28,0,0,
  	458,160,1,0,0,0,459,460,7,29,0,0,460,162,1,0,0,0,11,0,244,253,255,374,
  	382,385,392,394,400,405,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  lexer_antlr4LexerStaticData = std::move(staticData);
}

}

lexer_antlr4::lexer_antlr4(CharStream *input) : Lexer(input) {
  lexer_antlr4::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *lexer_antlr4LexerStaticData->atn, lexer_antlr4LexerStaticData->decisionToDFA, lexer_antlr4LexerStaticData->sharedContextCache);
}

lexer_antlr4::~lexer_antlr4() {
  delete _interpreter;
}

std::string lexer_antlr4::getGrammarFileName() const {
  return "lexer_antlr4.g4";
}

const std::vector<std::string>& lexer_antlr4::getRuleNames() const {
  return lexer_antlr4LexerStaticData->ruleNames;
}

const std::vector<std::string>& lexer_antlr4::getChannelNames() const {
  return lexer_antlr4LexerStaticData->channelNames;
}

const std::vector<std::string>& lexer_antlr4::getModeNames() const {
  return lexer_antlr4LexerStaticData->modeNames;
}

const dfa::Vocabulary& lexer_antlr4::getVocabulary() const {
  return lexer_antlr4LexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView lexer_antlr4::getSerializedATN() const {
  return lexer_antlr4LexerStaticData->serializedATN;
}

const atn::ATN& lexer_antlr4::getATN() const {
  return *lexer_antlr4LexerStaticData->atn;
}




void lexer_antlr4::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  lexer_antlr4LexerInitialize();
#else
  ::antlr4::internal::call_once(lexer_antlr4LexerOnceFlag, lexer_antlr4LexerInitialize);
#endif
}
