# 0 "emc/sterp/sterp.cc"
# 1 "/home/smv/code/accelus/linuxcnc/src//"
# 0 "<built-in>"
#define __STDC__ 1
# 0 "<built-in>"
#define __cplusplus 201703L
# 0 "<built-in>"
#define __STDC_UTF_16__ 1
# 0 "<built-in>"
#define __STDC_UTF_32__ 1
# 0 "<built-in>"
#define __STDC_HOSTED__ 1
# 0 "<built-in>"
#define __STDC_EMBED_NOT_FOUND__ 0
# 0 "<built-in>"
#define __STDC_EMBED_FOUND__ 1
# 0 "<built-in>"
#define __STDC_EMBED_EMPTY__ 2
# 0 "<built-in>"
#define __GNUC__ 15
# 0 "<built-in>"
#define __GNUC_MINOR__ 1
# 0 "<built-in>"
#define __GNUC_PATCHLEVEL__ 1
# 0 "<built-in>"
#define __VERSION__ "15.1.1 20250425"
# 0 "<built-in>"
#define __ATOMIC_RELAXED 0
# 0 "<built-in>"
#define __ATOMIC_SEQ_CST 5
# 0 "<built-in>"
#define __ATOMIC_ACQUIRE 2
# 0 "<built-in>"
#define __ATOMIC_RELEASE 3
# 0 "<built-in>"
#define __ATOMIC_ACQ_REL 4
# 0 "<built-in>"
#define __ATOMIC_CONSUME 1
# 0 "<built-in>"
#define __pic__ 2
# 0 "<built-in>"
#define __PIC__ 2
# 0 "<built-in>"
#define __OPTIMIZE_SIZE__ 1
# 0 "<built-in>"
#define __OPTIMIZE__ 1
# 0 "<built-in>"
#define __FINITE_MATH_ONLY__ 0
# 0 "<built-in>"
#define _LP64 1
# 0 "<built-in>"
#define __LP64__ 1
# 0 "<built-in>"
#define __SIZEOF_INT__ 4
# 0 "<built-in>"
#define __SIZEOF_LONG__ 8
# 0 "<built-in>"
#define __SIZEOF_LONG_LONG__ 8
# 0 "<built-in>"
#define __SIZEOF_SHORT__ 2
# 0 "<built-in>"
#define __SIZEOF_FLOAT__ 4
# 0 "<built-in>"
#define __SIZEOF_DOUBLE__ 8
# 0 "<built-in>"
#define __SIZEOF_LONG_DOUBLE__ 16
# 0 "<built-in>"
#define __SIZEOF_SIZE_T__ 8
# 0 "<built-in>"
#define __CHAR_BIT__ 8
# 0 "<built-in>"
#define __BIGGEST_ALIGNMENT__ 16
# 0 "<built-in>"
#define __ORDER_LITTLE_ENDIAN__ 1234
# 0 "<built-in>"
#define __ORDER_BIG_ENDIAN__ 4321
# 0 "<built-in>"
#define __ORDER_PDP_ENDIAN__ 3412
# 0 "<built-in>"
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
# 0 "<built-in>"
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
# 0 "<built-in>"
#define __SIZEOF_POINTER__ 8
# 0 "<built-in>"
#define __GNUC_EXECUTION_CHARSET_NAME "UTF-8"
# 0 "<built-in>"
#define __GNUC_WIDE_EXECUTION_CHARSET_NAME "UTF-32LE"
# 0 "<built-in>"
#define __GNUG__ 15
# 0 "<built-in>"
#define __SIZE_TYPE__ long unsigned int
# 0 "<built-in>"
#define __PTRDIFF_TYPE__ long int
# 0 "<built-in>"
#define __WCHAR_TYPE__ int
# 0 "<built-in>"
#define __WINT_TYPE__ unsigned int
# 0 "<built-in>"
#define __INTMAX_TYPE__ long int
# 0 "<built-in>"
#define __UINTMAX_TYPE__ long unsigned int
# 0 "<built-in>"
#define __CHAR16_TYPE__ short unsigned int
# 0 "<built-in>"
#define __CHAR32_TYPE__ unsigned int
# 0 "<built-in>"
#define __SIG_ATOMIC_TYPE__ int
# 0 "<built-in>"
#define __INT8_TYPE__ signed char
# 0 "<built-in>"
#define __INT16_TYPE__ short int
# 0 "<built-in>"
#define __INT32_TYPE__ int
# 0 "<built-in>"
#define __INT64_TYPE__ long int
# 0 "<built-in>"
#define __UINT8_TYPE__ unsigned char
# 0 "<built-in>"
#define __UINT16_TYPE__ short unsigned int
# 0 "<built-in>"
#define __UINT32_TYPE__ unsigned int
# 0 "<built-in>"
#define __UINT64_TYPE__ long unsigned int
# 0 "<built-in>"
#define __INT_LEAST8_TYPE__ signed char
# 0 "<built-in>"
#define __INT_LEAST16_TYPE__ short int
# 0 "<built-in>"
#define __INT_LEAST32_TYPE__ int
# 0 "<built-in>"
#define __INT_LEAST64_TYPE__ long int
# 0 "<built-in>"
#define __UINT_LEAST8_TYPE__ unsigned char
# 0 "<built-in>"
#define __UINT_LEAST16_TYPE__ short unsigned int
# 0 "<built-in>"
#define __UINT_LEAST32_TYPE__ unsigned int
# 0 "<built-in>"
#define __UINT_LEAST64_TYPE__ long unsigned int
# 0 "<built-in>"
#define __INT_FAST8_TYPE__ signed char
# 0 "<built-in>"
#define __INT_FAST16_TYPE__ long int
# 0 "<built-in>"
#define __INT_FAST32_TYPE__ long int
# 0 "<built-in>"
#define __INT_FAST64_TYPE__ long int
# 0 "<built-in>"
#define __UINT_FAST8_TYPE__ unsigned char
# 0 "<built-in>"
#define __UINT_FAST16_TYPE__ long unsigned int
# 0 "<built-in>"
#define __UINT_FAST32_TYPE__ long unsigned int
# 0 "<built-in>"
#define __UINT_FAST64_TYPE__ long unsigned int
# 0 "<built-in>"
#define __INTPTR_TYPE__ long int
# 0 "<built-in>"
#define __UINTPTR_TYPE__ long unsigned int
# 0 "<built-in>"
#define __GXX_WEAK__ 1
# 0 "<built-in>"
#define __DEPRECATED 1
# 0 "<built-in>"
#define __GXX_RTTI 1
# 0 "<built-in>"
#define __cpp_rtti 199711L
# 0 "<built-in>"
#define __GXX_EXPERIMENTAL_CXX0X__ 1
# 0 "<built-in>"
#define __GXX_CONSTEXPR_ASM__ 1
# 0 "<built-in>"
#define __cpp_binary_literals 201304L
# 0 "<built-in>"
#define __cpp_hex_float 201603L
# 0 "<built-in>"
#define __cpp_runtime_arrays 198712L
# 0 "<built-in>"
#define __cpp_raw_strings 200710L
# 0 "<built-in>"
#define __cpp_unicode_literals 200710L
# 0 "<built-in>"
#define __cpp_user_defined_literals 200809L
# 0 "<built-in>"
#define __cpp_lambdas 200907L
# 0 "<built-in>"
#define __cpp_decltype 200707L
# 0 "<built-in>"
#define __cpp_attributes 200809L
# 0 "<built-in>"
#define __cpp_rvalue_reference 200610L
# 0 "<built-in>"
#define __cpp_rvalue_references 200610L
# 0 "<built-in>"
#define __cpp_variadic_templates 200704L
# 0 "<built-in>"
#define __cpp_initializer_lists 200806L
# 0 "<built-in>"
#define __cpp_delegating_constructors 200604L
# 0 "<built-in>"
#define __cpp_nsdmi 200809L
# 0 "<built-in>"
#define __cpp_inheriting_constructors 201511L
# 0 "<built-in>"
#define __cpp_ref_qualifiers 200710L
# 0 "<built-in>"
#define __cpp_alias_templates 200704L
# 0 "<built-in>"
#define __cpp_return_type_deduction 201304L
# 0 "<built-in>"
#define __cpp_init_captures 201304L
# 0 "<built-in>"
#define __cpp_generic_lambdas 201304L
# 0 "<built-in>"
#define __cpp_decltype_auto 201304L
# 0 "<built-in>"
#define __cpp_aggregate_nsdmi 201304L
# 0 "<built-in>"
#define __cpp_variable_templates 201304L
# 0 "<built-in>"
#define __cpp_digit_separators 201309L
# 0 "<built-in>"
#define __cpp_unicode_characters 201411L
# 0 "<built-in>"
#define __cpp_static_assert 201411L
# 0 "<built-in>"
#define __cpp_namespace_attributes 201411L
# 0 "<built-in>"
#define __cpp_enumerator_attributes 201411L
# 0 "<built-in>"
#define __cpp_nested_namespace_definitions 201411L
# 0 "<built-in>"
#define __cpp_fold_expressions 201603L
# 0 "<built-in>"
#define __cpp_nontype_template_args 201411L
# 0 "<built-in>"
#define __cpp_range_based_for 201603L
# 0 "<built-in>"
#define __cpp_constexpr 201603L
# 0 "<built-in>"
#define __cpp_if_constexpr 201606L
# 0 "<built-in>"
#define __cpp_capture_star_this 201603L
# 0 "<built-in>"
#define __cpp_inline_variables 201606L
# 0 "<built-in>"
#define __cpp_aggregate_bases 201603L
# 0 "<built-in>"
#define __cpp_deduction_guides 201703L
# 0 "<built-in>"
#define __cpp_noexcept_function_type 201510L
# 0 "<built-in>"
#define __cpp_template_auto 201606L
# 0 "<built-in>"
#define __cpp_structured_bindings 201606L
# 0 "<built-in>"
#define __cpp_variadic_using 201611L
# 0 "<built-in>"
#define __cpp_guaranteed_copy_elision 201606L
# 0 "<built-in>"
#define __cpp_nontype_template_parameter_auto 201606L
# 0 "<built-in>"
#define __cpp_sized_deallocation 201309L
# 0 "<built-in>"
#define __cpp_aligned_new 201606L
# 0 "<built-in>"
#define __STDCPP_DEFAULT_NEW_ALIGNMENT__ 16
# 0 "<built-in>"
#define __cpp_template_template_args 201611L
# 0 "<built-in>"
#define __cpp_threadsafe_static_init 200806L
# 0 "<built-in>"
#define __STDCPP_THREADS__ 1
# 0 "<built-in>"
#define __EXCEPTIONS 1
# 0 "<built-in>"
#define __cpp_exceptions 199711L
# 0 "<built-in>"
#define __GXX_ABI_VERSION 1020
# 0 "<built-in>"
#define __SCHAR_MAX__ 0x7f
# 0 "<built-in>"
#define __SHRT_MAX__ 0x7fff
# 0 "<built-in>"
#define __INT_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __LONG_MAX__ 0x7fffffffffffffffL
# 0 "<built-in>"
#define __LONG_LONG_MAX__ 0x7fffffffffffffffLL
# 0 "<built-in>"
#define __WCHAR_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __WCHAR_MIN__ (-__WCHAR_MAX__ - 1)
# 0 "<built-in>"
#define __WINT_MAX__ 0xffffffffU
# 0 "<built-in>"
#define __WINT_MIN__ 0U
# 0 "<built-in>"
#define __PTRDIFF_MAX__ 0x7fffffffffffffffL
# 0 "<built-in>"
#define __SIZE_MAX__ 0xffffffffffffffffUL
# 0 "<built-in>"
#define __SCHAR_WIDTH__ 8
# 0 "<built-in>"
#define __SHRT_WIDTH__ 16
# 0 "<built-in>"
#define __INT_WIDTH__ 32
# 0 "<built-in>"
#define __LONG_WIDTH__ 64
# 0 "<built-in>"
#define __LONG_LONG_WIDTH__ 64
# 0 "<built-in>"
#define __WCHAR_WIDTH__ 32
# 0 "<built-in>"
#define __WINT_WIDTH__ 32
# 0 "<built-in>"
#define __PTRDIFF_WIDTH__ 64
# 0 "<built-in>"
#define __SIZE_WIDTH__ 64
# 0 "<built-in>"
#define __GLIBCXX_TYPE_INT_N_0 __int128
# 0 "<built-in>"
#define __GLIBCXX_BITSIZE_INT_N_0 128
# 0 "<built-in>"
#define __INTMAX_MAX__ 0x7fffffffffffffffL
# 0 "<built-in>"
#define __INTMAX_C(c) c ## L
# 0 "<built-in>"
#define __UINTMAX_MAX__ 0xffffffffffffffffUL
# 0 "<built-in>"
#define __UINTMAX_C(c) c ## UL
# 0 "<built-in>"
#define __INTMAX_WIDTH__ 64
# 0 "<built-in>"
#define __SIG_ATOMIC_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
# 0 "<built-in>"
#define __SIG_ATOMIC_WIDTH__ 32
# 0 "<built-in>"
#define __INT8_MAX__ 0x7f
# 0 "<built-in>"
#define __INT16_MAX__ 0x7fff
# 0 "<built-in>"
#define __INT32_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __INT64_MAX__ 0x7fffffffffffffffL
# 0 "<built-in>"
#define __UINT8_MAX__ 0xff
# 0 "<built-in>"
#define __UINT16_MAX__ 0xffff
# 0 "<built-in>"
#define __UINT32_MAX__ 0xffffffffU
# 0 "<built-in>"
#define __UINT64_MAX__ 0xffffffffffffffffUL
# 0 "<built-in>"
#define __INT_LEAST8_MAX__ 0x7f
# 0 "<built-in>"
#define __INT8_C(c) c
# 0 "<built-in>"
#define __INT_LEAST8_WIDTH__ 8
# 0 "<built-in>"
#define __INT_LEAST16_MAX__ 0x7fff
# 0 "<built-in>"
#define __INT16_C(c) c
# 0 "<built-in>"
#define __INT_LEAST16_WIDTH__ 16
# 0 "<built-in>"
#define __INT_LEAST32_MAX__ 0x7fffffff
# 0 "<built-in>"
#define __INT32_C(c) c
# 0 "<built-in>"
#define __INT_LEAST32_WIDTH__ 32
# 0 "<built-in>"
#define __INT_LEAST64_MAX__ 0x7fffffffffffffffL
# 0 "<built-in>"
#define __INT64_C(c) c ## L
# 0 "<built-in>"
#define __INT_LEAST64_WIDTH__ 64
# 0 "<built-in>"
#define __UINT_LEAST8_MAX__ 0xff
# 0 "<built-in>"
#define __UINT8_C(c) c
# 0 "<built-in>"
#define __UINT_LEAST16_MAX__ 0xffff
# 0 "<built-in>"
#define __UINT16_C(c) c
# 0 "<built-in>"
#define __UINT_LEAST32_MAX__ 0xffffffffU
# 0 "<built-in>"
#define __UINT32_C(c) c ## U
# 0 "<built-in>"
#define __UINT_LEAST64_MAX__ 0xffffffffffffffffUL
# 0 "<built-in>"
#define __UINT64_C(c) c ## UL
# 0 "<built-in>"
#define __INT_FAST8_MAX__ 0x7f
# 0 "<built-in>"
#define __INT_FAST8_WIDTH__ 8
# 0 "<built-in>"
#define __INT_FAST16_MAX__ 0x7fffffffffffffffL
# 0 "<built-in>"
#define __INT_FAST16_WIDTH__ 64
# 0 "<built-in>"
#define __INT_FAST32_MAX__ 0x7fffffffffffffffL
# 0 "<built-in>"
#define __INT_FAST32_WIDTH__ 64
# 0 "<built-in>"
#define __INT_FAST64_MAX__ 0x7fffffffffffffffL
# 0 "<built-in>"
#define __INT_FAST64_WIDTH__ 64
# 0 "<built-in>"
#define __UINT_FAST8_MAX__ 0xff
# 0 "<built-in>"
#define __UINT_FAST16_MAX__ 0xffffffffffffffffUL
# 0 "<built-in>"
#define __UINT_FAST32_MAX__ 0xffffffffffffffffUL
# 0 "<built-in>"
#define __UINT_FAST64_MAX__ 0xffffffffffffffffUL
# 0 "<built-in>"
#define __INTPTR_MAX__ 0x7fffffffffffffffL
# 0 "<built-in>"
#define __INTPTR_WIDTH__ 64
# 0 "<built-in>"
#define __UINTPTR_MAX__ 0xffffffffffffffffUL
# 0 "<built-in>"
#define __GCC_IEC_559 2
# 0 "<built-in>"
#define __GCC_IEC_559_COMPLEX 2
# 0 "<built-in>"
#define __FLT_EVAL_METHOD__ 0
# 0 "<built-in>"
#define __FLT_EVAL_METHOD_TS_18661_3__ 0
# 0 "<built-in>"
#define __DEC_EVAL_METHOD__ 2
# 0 "<built-in>"
#define __FLT_RADIX__ 2
# 0 "<built-in>"
#define __FLT_MANT_DIG__ 24
# 0 "<built-in>"
#define __FLT_DIG__ 6
# 0 "<built-in>"
#define __FLT_MIN_EXP__ (-125)
# 0 "<built-in>"
#define __FLT_MIN_10_EXP__ (-37)
# 0 "<built-in>"
#define __FLT_MAX_EXP__ 128
# 0 "<built-in>"
#define __FLT_MAX_10_EXP__ 38
# 0 "<built-in>"
#define __FLT_DECIMAL_DIG__ 9
# 0 "<built-in>"
#define __FLT_MAX__ 3.40282346638528859811704183484516925e+38F
# 0 "<built-in>"
#define __FLT_NORM_MAX__ 3.40282346638528859811704183484516925e+38F
# 0 "<built-in>"
#define __FLT_MIN__ 1.17549435082228750796873653722224568e-38F
# 0 "<built-in>"
#define __FLT_EPSILON__ 1.19209289550781250000000000000000000e-7F
# 0 "<built-in>"
#define __FLT_DENORM_MIN__ 1.40129846432481707092372958328991613e-45F
# 0 "<built-in>"
#define __FLT_HAS_DENORM__ 1
# 0 "<built-in>"
#define __FLT_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __FLT_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __FLT_IS_IEC_60559__ 1
# 0 "<built-in>"
#define __DBL_MANT_DIG__ 53
# 0 "<built-in>"
#define __DBL_DIG__ 15
# 0 "<built-in>"
#define __DBL_MIN_EXP__ (-1021)
# 0 "<built-in>"
#define __DBL_MIN_10_EXP__ (-307)
# 0 "<built-in>"
#define __DBL_MAX_EXP__ 1024
# 0 "<built-in>"
#define __DBL_MAX_10_EXP__ 308
# 0 "<built-in>"
#define __DBL_DECIMAL_DIG__ 17
# 0 "<built-in>"
#define __DBL_MAX__ double(1.79769313486231570814527423731704357e+308L)
# 0 "<built-in>"
#define __DBL_NORM_MAX__ double(1.79769313486231570814527423731704357e+308L)
# 0 "<built-in>"
#define __DBL_MIN__ double(2.22507385850720138309023271733240406e-308L)
# 0 "<built-in>"
#define __DBL_EPSILON__ double(2.22044604925031308084726333618164062e-16L)
# 0 "<built-in>"
#define __DBL_DENORM_MIN__ double(4.94065645841246544176568792868221372e-324L)
# 0 "<built-in>"
#define __DBL_HAS_DENORM__ 1
# 0 "<built-in>"
#define __DBL_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __DBL_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __DBL_IS_IEC_60559__ 1
# 0 "<built-in>"
#define __LDBL_MANT_DIG__ 64
# 0 "<built-in>"
#define __LDBL_DIG__ 18
# 0 "<built-in>"
#define __LDBL_MIN_EXP__ (-16381)
# 0 "<built-in>"
#define __LDBL_MIN_10_EXP__ (-4931)
# 0 "<built-in>"
#define __LDBL_MAX_EXP__ 16384
# 0 "<built-in>"
#define __LDBL_MAX_10_EXP__ 4932
# 0 "<built-in>"
#define __DECIMAL_DIG__ 21
# 0 "<built-in>"
#define __LDBL_DECIMAL_DIG__ 21
# 0 "<built-in>"
#define __LDBL_MAX__ 1.18973149535723176502126385303097021e+4932L
# 0 "<built-in>"
#define __LDBL_NORM_MAX__ 1.18973149535723176502126385303097021e+4932L
# 0 "<built-in>"
#define __LDBL_MIN__ 3.36210314311209350626267781732175260e-4932L
# 0 "<built-in>"
#define __LDBL_EPSILON__ 1.08420217248550443400745280086994171e-19L
# 0 "<built-in>"
#define __LDBL_DENORM_MIN__ 3.64519953188247460252840593361941982e-4951L
# 0 "<built-in>"
#define __LDBL_HAS_DENORM__ 1
# 0 "<built-in>"
#define __LDBL_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __LDBL_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __LDBL_IS_IEC_60559__ 1
# 0 "<built-in>"
#define __FLT16_MANT_DIG__ 11
# 0 "<built-in>"
#define __FLT16_DIG__ 3
# 0 "<built-in>"
#define __FLT16_MIN_EXP__ (-13)
# 0 "<built-in>"
#define __FLT16_MIN_10_EXP__ (-4)
# 0 "<built-in>"
#define __FLT16_MAX_EXP__ 16
# 0 "<built-in>"
#define __FLT16_MAX_10_EXP__ 4
# 0 "<built-in>"
#define __FLT16_DECIMAL_DIG__ 5
# 0 "<built-in>"
#define __FLT16_MAX__ 6.55040000000000000000000000000000000e+4F16
# 0 "<built-in>"
#define __FLT16_NORM_MAX__ 6.55040000000000000000000000000000000e+4F16
# 0 "<built-in>"
#define __FLT16_MIN__ 6.10351562500000000000000000000000000e-5F16
# 0 "<built-in>"
#define __FLT16_EPSILON__ 9.76562500000000000000000000000000000e-4F16
# 0 "<built-in>"
#define __FLT16_DENORM_MIN__ 5.96046447753906250000000000000000000e-8F16
# 0 "<built-in>"
#define __FLT16_HAS_DENORM__ 1
# 0 "<built-in>"
#define __FLT16_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __FLT16_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __FLT16_IS_IEC_60559__ 1
# 0 "<built-in>"
#define __FLT32_MANT_DIG__ 24
# 0 "<built-in>"
#define __FLT32_DIG__ 6
# 0 "<built-in>"
#define __FLT32_MIN_EXP__ (-125)
# 0 "<built-in>"
#define __FLT32_MIN_10_EXP__ (-37)
# 0 "<built-in>"
#define __FLT32_MAX_EXP__ 128
# 0 "<built-in>"
#define __FLT32_MAX_10_EXP__ 38
# 0 "<built-in>"
#define __FLT32_DECIMAL_DIG__ 9
# 0 "<built-in>"
#define __FLT32_MAX__ 3.40282346638528859811704183484516925e+38F32
# 0 "<built-in>"
#define __FLT32_NORM_MAX__ 3.40282346638528859811704183484516925e+38F32
# 0 "<built-in>"
#define __FLT32_MIN__ 1.17549435082228750796873653722224568e-38F32
# 0 "<built-in>"
#define __FLT32_EPSILON__ 1.19209289550781250000000000000000000e-7F32
# 0 "<built-in>"
#define __FLT32_DENORM_MIN__ 1.40129846432481707092372958328991613e-45F32
# 0 "<built-in>"
#define __FLT32_HAS_DENORM__ 1
# 0 "<built-in>"
#define __FLT32_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __FLT32_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __FLT32_IS_IEC_60559__ 1
# 0 "<built-in>"
#define __FLT64_MANT_DIG__ 53
# 0 "<built-in>"
#define __FLT64_DIG__ 15
# 0 "<built-in>"
#define __FLT64_MIN_EXP__ (-1021)
# 0 "<built-in>"
#define __FLT64_MIN_10_EXP__ (-307)
# 0 "<built-in>"
#define __FLT64_MAX_EXP__ 1024
# 0 "<built-in>"
#define __FLT64_MAX_10_EXP__ 308
# 0 "<built-in>"
#define __FLT64_DECIMAL_DIG__ 17
# 0 "<built-in>"
#define __FLT64_MAX__ 1.79769313486231570814527423731704357e+308F64
# 0 "<built-in>"
#define __FLT64_NORM_MAX__ 1.79769313486231570814527423731704357e+308F64
# 0 "<built-in>"
#define __FLT64_MIN__ 2.22507385850720138309023271733240406e-308F64
# 0 "<built-in>"
#define __FLT64_EPSILON__ 2.22044604925031308084726333618164062e-16F64
# 0 "<built-in>"
#define __FLT64_DENORM_MIN__ 4.94065645841246544176568792868221372e-324F64
# 0 "<built-in>"
#define __FLT64_HAS_DENORM__ 1
# 0 "<built-in>"
#define __FLT64_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __FLT64_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __FLT64_IS_IEC_60559__ 1
# 0 "<built-in>"
#define __FLT128_MANT_DIG__ 113
# 0 "<built-in>"
#define __FLT128_DIG__ 33
# 0 "<built-in>"
#define __FLT128_MIN_EXP__ (-16381)
# 0 "<built-in>"
#define __FLT128_MIN_10_EXP__ (-4931)
# 0 "<built-in>"
#define __FLT128_MAX_EXP__ 16384
# 0 "<built-in>"
#define __FLT128_MAX_10_EXP__ 4932
# 0 "<built-in>"
#define __FLT128_DECIMAL_DIG__ 36
# 0 "<built-in>"
#define __FLT128_MAX__ 1.18973149535723176508575932662800702e+4932F128
# 0 "<built-in>"
#define __FLT128_NORM_MAX__ 1.18973149535723176508575932662800702e+4932F128
# 0 "<built-in>"
#define __FLT128_MIN__ 3.36210314311209350626267781732175260e-4932F128
# 0 "<built-in>"
#define __FLT128_EPSILON__ 1.92592994438723585305597794258492732e-34F128
# 0 "<built-in>"
#define __FLT128_DENORM_MIN__ 6.47517511943802511092443895822764655e-4966F128
# 0 "<built-in>"
#define __FLT128_HAS_DENORM__ 1
# 0 "<built-in>"
#define __FLT128_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __FLT128_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __FLT128_IS_IEC_60559__ 1
# 0 "<built-in>"
#define __FLT32X_MANT_DIG__ 53
# 0 "<built-in>"
#define __FLT32X_DIG__ 15
# 0 "<built-in>"
#define __FLT32X_MIN_EXP__ (-1021)
# 0 "<built-in>"
#define __FLT32X_MIN_10_EXP__ (-307)
# 0 "<built-in>"
#define __FLT32X_MAX_EXP__ 1024
# 0 "<built-in>"
#define __FLT32X_MAX_10_EXP__ 308
# 0 "<built-in>"
#define __FLT32X_DECIMAL_DIG__ 17
# 0 "<built-in>"
#define __FLT32X_MAX__ 1.79769313486231570814527423731704357e+308F32x
# 0 "<built-in>"
#define __FLT32X_NORM_MAX__ 1.79769313486231570814527423731704357e+308F32x
# 0 "<built-in>"
#define __FLT32X_MIN__ 2.22507385850720138309023271733240406e-308F32x
# 0 "<built-in>"
#define __FLT32X_EPSILON__ 2.22044604925031308084726333618164062e-16F32x
# 0 "<built-in>"
#define __FLT32X_DENORM_MIN__ 4.94065645841246544176568792868221372e-324F32x
# 0 "<built-in>"
#define __FLT32X_HAS_DENORM__ 1
# 0 "<built-in>"
#define __FLT32X_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __FLT32X_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __FLT32X_IS_IEC_60559__ 1
# 0 "<built-in>"
#define __FLT64X_MANT_DIG__ 64
# 0 "<built-in>"
#define __FLT64X_DIG__ 18
# 0 "<built-in>"
#define __FLT64X_MIN_EXP__ (-16381)
# 0 "<built-in>"
#define __FLT64X_MIN_10_EXP__ (-4931)
# 0 "<built-in>"
#define __FLT64X_MAX_EXP__ 16384
# 0 "<built-in>"
#define __FLT64X_MAX_10_EXP__ 4932
# 0 "<built-in>"
#define __FLT64X_DECIMAL_DIG__ 21
# 0 "<built-in>"
#define __FLT64X_MAX__ 1.18973149535723176502126385303097021e+4932F64x
# 0 "<built-in>"
#define __FLT64X_NORM_MAX__ 1.18973149535723176502126385303097021e+4932F64x
# 0 "<built-in>"
#define __FLT64X_MIN__ 3.36210314311209350626267781732175260e-4932F64x
# 0 "<built-in>"
#define __FLT64X_EPSILON__ 1.08420217248550443400745280086994171e-19F64x
# 0 "<built-in>"
#define __FLT64X_DENORM_MIN__ 3.64519953188247460252840593361941982e-4951F64x
# 0 "<built-in>"
#define __FLT64X_HAS_DENORM__ 1
# 0 "<built-in>"
#define __FLT64X_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __FLT64X_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __FLT64X_IS_IEC_60559__ 1
# 0 "<built-in>"
#define __BFLT16_MANT_DIG__ 8
# 0 "<built-in>"
#define __BFLT16_DIG__ 2
# 0 "<built-in>"
#define __BFLT16_MIN_EXP__ (-125)
# 0 "<built-in>"
#define __BFLT16_MIN_10_EXP__ (-37)
# 0 "<built-in>"
#define __BFLT16_MAX_EXP__ 128
# 0 "<built-in>"
#define __BFLT16_MAX_10_EXP__ 38
# 0 "<built-in>"
#define __BFLT16_DECIMAL_DIG__ 4
# 0 "<built-in>"
#define __BFLT16_MAX__ 3.38953138925153547590470800371487867e+38BF16
# 0 "<built-in>"
#define __BFLT16_NORM_MAX__ 3.38953138925153547590470800371487867e+38BF16
# 0 "<built-in>"
#define __BFLT16_MIN__ 1.17549435082228750796873653722224568e-38BF16
# 0 "<built-in>"
#define __BFLT16_EPSILON__ 7.81250000000000000000000000000000000e-3BF16
# 0 "<built-in>"
#define __BFLT16_DENORM_MIN__ 9.18354961579912115600575419704879436e-41BF16
# 0 "<built-in>"
#define __BFLT16_HAS_DENORM__ 1
# 0 "<built-in>"
#define __BFLT16_HAS_INFINITY__ 1
# 0 "<built-in>"
#define __BFLT16_HAS_QUIET_NAN__ 1
# 0 "<built-in>"
#define __BFLT16_IS_IEC_60559__ 0
# 0 "<built-in>"
#define __DEC32_MANT_DIG__ 7
# 0 "<built-in>"
#define __DEC32_MIN_EXP__ (-94)
# 0 "<built-in>"
#define __DEC32_MAX_EXP__ 97
# 0 "<built-in>"
#define __DEC32_MIN__ 1E-95DF
# 0 "<built-in>"
#define __DEC32_MAX__ 9.999999E96DF
# 0 "<built-in>"
#define __DEC32_EPSILON__ 1E-6DF
# 0 "<built-in>"
#define __DEC32_SUBNORMAL_MIN__ 0.000001E-95DF
# 0 "<built-in>"
#define __DEC64_MANT_DIG__ 16
# 0 "<built-in>"
#define __DEC64_MIN_EXP__ (-382)
# 0 "<built-in>"
#define __DEC64_MAX_EXP__ 385
# 0 "<built-in>"
#define __DEC64_MIN__ 1E-383DD
# 0 "<built-in>"
#define __DEC64_MAX__ 9.999999999999999E384DD
# 0 "<built-in>"
#define __DEC64_EPSILON__ 1E-15DD
# 0 "<built-in>"
#define __DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD
# 0 "<built-in>"
#define __DEC128_MANT_DIG__ 34
# 0 "<built-in>"
#define __DEC128_MIN_EXP__ (-6142)
# 0 "<built-in>"
#define __DEC128_MAX_EXP__ 6145
# 0 "<built-in>"
#define __DEC128_MIN__ 1E-6143DL
# 0 "<built-in>"
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
# 0 "<built-in>"
#define __DEC128_EPSILON__ 1E-33DL
# 0 "<built-in>"
#define __DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143DL
# 0 "<built-in>"
#define __DEC64X_MANT_DIG__ 34
# 0 "<built-in>"
#define __DEC64X_MIN_EXP__ (-6142)
# 0 "<built-in>"
#define __DEC64X_MAX_EXP__ 6145
# 0 "<built-in>"
#define __DEC64X_MIN__ 1E-6143D64x
# 0 "<built-in>"
#define __DEC64X_MAX__ 9.999999999999999999999999999999999E6144D64x
# 0 "<built-in>"
#define __DEC64X_EPSILON__ 1E-33D64x
# 0 "<built-in>"
#define __DEC64X_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143D64x
# 0 "<built-in>"
#define __REGISTER_PREFIX__ 
# 0 "<built-in>"
#define __USER_LABEL_PREFIX__ 
# 0 "<built-in>"
#define __GNUC_STDC_INLINE__ 1
# 0 "<built-in>"
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
# 0 "<built-in>"
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
# 0 "<built-in>"
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
# 0 "<built-in>"
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 1
# 0 "<built-in>"
#define __GCC_ATOMIC_BOOL_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_CHAR_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_SHORT_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_INT_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_LONG_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_LLONG_LOCK_FREE 2
# 0 "<built-in>"
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
# 0 "<built-in>"
#define __GCC_DESTRUCTIVE_SIZE 64
# 0 "<built-in>"
#define __GCC_CONSTRUCTIVE_SIZE 64
# 0 "<built-in>"
#define __GCC_ATOMIC_POINTER_LOCK_FREE 2
# 0 "<built-in>"
#define __HAVE_SPECULATION_SAFE_VALUE 1
# 0 "<built-in>"
#define __GCC_HAVE_DWARF2_CFI_ASM 1
# 0 "<built-in>"
#define __PRAGMA_REDEFINE_EXTNAME 1
# 0 "<built-in>"
#define __SSP_STRONG__ 3
# 0 "<built-in>"
#define __SIZEOF_INT128__ 16
# 0 "<built-in>"
#define __SIZEOF_WCHAR_T__ 4
# 0 "<built-in>"
#define __SIZEOF_WINT_T__ 4
# 0 "<built-in>"
#define __SIZEOF_PTRDIFF_T__ 8
# 0 "<built-in>"
#define __amd64 1
# 0 "<built-in>"
#define __amd64__ 1
# 0 "<built-in>"
#define __x86_64 1
# 0 "<built-in>"
#define __x86_64__ 1
# 0 "<built-in>"
#define __SIZEOF_FLOAT80__ 16
# 0 "<built-in>"
#define __SIZEOF_FLOAT128__ 16
# 0 "<built-in>"
#define __ATOMIC_HLE_ACQUIRE 65536
# 0 "<built-in>"
#define __ATOMIC_HLE_RELEASE 131072
# 0 "<built-in>"
#define __GCC_ASM_FLAG_OUTPUTS__ 1
# 0 "<built-in>"
#define __k8 1
# 0 "<built-in>"
#define __k8__ 1
# 0 "<built-in>"
#define __code_model_small__ 1
# 0 "<built-in>"
#define __MMX__ 1
# 0 "<built-in>"
#define __SSE__ 1
# 0 "<built-in>"
#define __SSE2__ 1
# 0 "<built-in>"
#define __FXSR__ 1
# 0 "<built-in>"
#define __SSE_MATH__ 1
# 0 "<built-in>"
#define __SSE2_MATH__ 1
# 0 "<built-in>"
#define __MMX_WITH_SSE__ 1
# 0 "<built-in>"
#define __SEG_FS 1
# 0 "<built-in>"
#define __SEG_GS 1
# 0 "<built-in>"
#define __gnu_linux__ 1
# 0 "<built-in>"
#define __linux 1
# 0 "<built-in>"
#define __linux__ 1
# 0 "<built-in>"
#define linux 1
# 0 "<built-in>"
#define __unix 1
# 0 "<built-in>"
#define __unix__ 1
# 0 "<built-in>"
#define unix 1
# 0 "<built-in>"
#define __ELF__ 1
# 0 "<built-in>"
#define __DECIMAL_BID_FORMAT__ 1
# 0 "<command-line>"
#define _GNU_SOURCE 1
# 0 "<command-line>"
#define ULAPI 1
# 0 "<command-line>"
#define _FORTIFY_SOURCE 2
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 19 "/usr/include/stdc-predef.h" 3 4
#define _STDC_PREDEF_H 1
# 38 "/usr/include/stdc-predef.h" 3 4
#define __STDC_IEC_559__ 1
#define __STDC_IEC_60559_BFP__ 201404L
# 48 "/usr/include/stdc-predef.h" 3 4
#define __STDC_IEC_559_COMPLEX__ 1
#define __STDC_IEC_60559_COMPLEX__ 201404L
# 62 "/usr/include/stdc-predef.h" 3 4
#define __STDC_ISO_10646__ 201706L
# 0 "<command-line>" 2
# 1 "emc/sterp/sterp.cc"






# 1 "./config.h" 1
# 18 "./config.h"
#define EMC2_CONFIG_H 



#define EMC2_BIN_DIR "/home/smv/code/accelus/linuxcnc/bin"


#define EMC2_DEFAULT_NMLFILE "/home/smv/code/accelus/linuxcnc/configs/common/linuxcnc.nml"


#define EMC2_DEFAULT_TOOLTABLE "/home/smv/code/accelus/linuxcnc/configs/sim/sim.tbl"


#define EMC2_HELP_DIR "/home/smv/code/accelus/linuxcnc/docs/help"


#define EMC2_HOME "/home/smv/code/accelus/linuxcnc"


#define EMC2_IMAGE_DIR "/home/smv/code/accelus/linuxcnc"


#define EMC2_LANG_DIR "/home/smv/code/accelus/linuxcnc/src/objects"


#define EMC2_NCFILES_DIR "/home/smv/code/accelus/linuxcnc/nc_files"


#define EMC2_PO_DIR "/home/smv/code/accelus/linuxcnc/share/locale"


#define EMC2_RTLIB_DIR "/home/smv/code/accelus/linuxcnc/rtlib"


#define EMC2_TCL_DIR "/home/smv/code/accelus/linuxcnc/tcl"


#define HAVE_BOOST 


#define HAVE_BOOST_PYTHON 


#define HAVE_CLOCK_NANOSLEEP 1


#define HAVE_CXX17 1


#define HAVE_INTTYPES_H 1





#define HAVE_LIBINTL_H 1


#define HAVE_LIBMODBUS3 yes


#define HAVE_LIBTIRPC 1


#define HAVE_LIBUSB10 yes


#define HAVE_LIBXINERAMA 1


#define HAVE_LOCALE_H 1





#define HAVE_PYTHON "3.13"



#define HAVE_READLINE 


#define HAVE_READLINE_HISTORY_H 1


#define HAVE_READLINE_READLINE_H 1


#define HAVE_SEMTIMEDOP 1


#define HAVE_SETLOCALE 1


#define HAVE_STDINT_H 1


#define HAVE_STDIO_H 1


#define HAVE_STDLIB_H 1


#define HAVE_STRINGS_H 1


#define HAVE_STRING_H 1


#define HAVE_SYS_IO_H 1


#define HAVE_SYS_STAT_H 1


#define HAVE_SYS_TYPES_H 1


#define HAVE_SYS_WAIT_H 1
# 146 "./config.h"
#define HAVE_UNISTD_H 1


#define HAVE_X11_EXTENSIONS_XINERAMA_H 1


#define HAVE_X11_XMU_XMU_H 1


#define HIDRAW_H_USABLE 



#define LIBDL $LIBDL





#define MODULE_EXT ".so"


#define PACKAGE_BUGREPORT "emc-developers@lists.sourceforge.net"


#define PACKAGE_NAME "LinuxCNC"


#define PACKAGE_STRING "LinuxCNC 2.9.4"


#define PACKAGE_TARNAME "linuxcnc"


#define PACKAGE_URL ""


#define PACKAGE_VERSION "2.9.4"
# 192 "./config.h"
#define RTAPI_USPACE 


#define RTDIR "/home/smv/code/accelus/linuxcnc/src"




#define STDC_HEADERS 1
# 8 "emc/sterp/sterp.cc" 2
# 1 "./emc/linuxcnc.h" 1
# 14 "./emc/linuxcnc.h"
#define LINUXCNC_H 



#define LINELEN 255


#define BUFFERLEN 80


#define MM_PER_INCH 25.4
#define INCH_PER_MM (1.0/MM_PER_INCH)
# 9 "emc/sterp/sterp.cc" 2
# 1 "./emc/nml_intf/canon.hh" 1
# 14 "./emc/nml_intf/canon.hh"
#define CANON_HH 

# 1 "/usr/include/stdio.h" 1 3 4
# 25 "/usr/include/stdio.h" 3 4
#define _STDIO_H 1

#define __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION 
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 31 "/usr/include/bits/libc-header-start.h" 3 4
#undef __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION

# 1 "/usr/include/features.h" 1 3 4
# 19 "/usr/include/features.h" 3 4
#define _FEATURES_H 1
# 129 "/usr/include/features.h" 3 4
#undef __USE_ISOC11
#undef __USE_ISOC99
#undef __USE_ISOC95
#undef __USE_ISOCXX11
#undef __USE_POSIX
#undef __USE_POSIX2
#undef __USE_POSIX199309
#undef __USE_POSIX199506
#undef __USE_XOPEN
#undef __USE_XOPEN_EXTENDED
#undef __USE_UNIX98
#undef __USE_XOPEN2K
#undef __USE_XOPEN2KXSI
#undef __USE_XOPEN2K8
#undef __USE_XOPEN2K8XSI
#undef __USE_LARGEFILE
#undef __USE_LARGEFILE64
#undef __USE_FILE_OFFSET64
#undef __USE_MISC
#undef __USE_ATFILE
#undef __USE_DYNAMIC_STACK_SIZE
#undef __USE_GNU
#undef __USE_FORTIFY_LEVEL
#undef __KERNEL_STRICT_NAMES
#undef __GLIBC_USE_ISOC23
#undef __GLIBC_USE_ISOC2Y
#undef __GLIBC_USE_DEPRECATED_GETS
#undef __GLIBC_USE_DEPRECATED_SCANF
#undef __GLIBC_USE_C23_STRTOL




#define __KERNEL_STRICT_NAMES 
# 173 "/usr/include/features.h" 3 4
#define __GNUC_PREREQ(maj,min) ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
# 187 "/usr/include/features.h" 3 4
#define __glibc_clang_prereq(maj,min) 0



#define __GLIBC_USE(F) __GLIBC_USE_ ## F
# 213 "/usr/include/features.h" 3 4
#undef _ISOC95_SOURCE
#define _ISOC95_SOURCE 1
#undef _ISOC99_SOURCE
#define _ISOC99_SOURCE 1
#undef _ISOC11_SOURCE
#define _ISOC11_SOURCE 1
#undef _ISOC23_SOURCE
#define _ISOC23_SOURCE 1
#undef _ISOC2Y_SOURCE
#define _ISOC2Y_SOURCE 1
#undef _POSIX_SOURCE
#define _POSIX_SOURCE 1
#undef _POSIX_C_SOURCE
#define _POSIX_C_SOURCE 200809L
#undef _XOPEN_SOURCE
#define _XOPEN_SOURCE 700
#undef _XOPEN_SOURCE_EXTENDED
#define _XOPEN_SOURCE_EXTENDED 1
#undef _LARGEFILE64_SOURCE
#define _LARGEFILE64_SOURCE 1
#undef _DEFAULT_SOURCE
#define _DEFAULT_SOURCE 1
#undef _ATFILE_SOURCE
#define _ATFILE_SOURCE 1
#undef _DYNAMIC_STACK_SIZE_SOURCE
#define _DYNAMIC_STACK_SIZE_SOURCE 1
# 249 "/usr/include/features.h" 3 4
#undef _DEFAULT_SOURCE
#define _DEFAULT_SOURCE 1





#define __GLIBC_USE_ISOC2Y 1







#define __GLIBC_USE_ISOC23 1
# 273 "/usr/include/features.h" 3 4
#define __USE_ISOC11 1






#define __USE_ISOC99 1






#define __USE_ISOC95 1





#define __USE_ISOC11 1




#define __USE_ISOCXX11 1
#define __USE_ISOC99 1
# 310 "/usr/include/features.h" 3 4
#undef _POSIX_SOURCE
#define _POSIX_SOURCE 1
#undef _POSIX_C_SOURCE
#define _POSIX_C_SOURCE 200809L
# 348 "/usr/include/features.h" 3 4
#define __USE_POSIX 1



#define __USE_POSIX2 1



#define __USE_POSIX199309 1



#define __USE_POSIX199506 1



#define __USE_XOPEN2K 1
#undef __USE_ISOC95
#define __USE_ISOC95 1
#undef __USE_ISOC99
#define __USE_ISOC99 1



#define __USE_XOPEN2K8 1
#undef _ATFILE_SOURCE
#define _ATFILE_SOURCE 1



#define __USE_XOPEN 1

#define __USE_XOPEN_EXTENDED 1
#define __USE_UNIX98 1
#undef _LARGEFILE_SOURCE
#define _LARGEFILE_SOURCE 1


#define __USE_XOPEN2K8 1
#define __USE_XOPEN2K8XSI 1

#define __USE_XOPEN2K 1
#define __USE_XOPEN2KXSI 1
#undef __USE_ISOC95
#define __USE_ISOC95 1
#undef __USE_ISOC99
#define __USE_ISOC99 1
# 404 "/usr/include/features.h" 3 4
#define __USE_LARGEFILE 1



#define __USE_LARGEFILE64 1






# 1 "/usr/include/features-time64.h" 1 3 4
# 20 "/usr/include/features-time64.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64






#define __WORDSIZE_TIME64_COMPAT32 1



#define __SYSCALL_WORDSIZE 64
# 21 "/usr/include/features-time64.h" 2 3 4
# 1 "/usr/include/bits/timesize.h" 1 3 4
# 19 "/usr/include/bits/timesize.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64






#define __WORDSIZE_TIME64_COMPAT32 1



#define __SYSCALL_WORDSIZE 64
# 20 "/usr/include/bits/timesize.h" 2 3 4






#define __TIMESIZE __WORDSIZE
# 22 "/usr/include/features-time64.h" 2 3 4
# 37 "/usr/include/features-time64.h" 3 4
#define __USE_TIME_BITS64 1
# 416 "/usr/include/features.h" 2 3 4


#define __USE_MISC 1



#define __USE_ATFILE 1



#define __USE_DYNAMIC_STACK_SIZE 1



#define __USE_GNU 1
# 449 "/usr/include/features.h" 3 4
#define __USE_FORTIFY_LEVEL 2
# 463 "/usr/include/features.h" 3 4
#define __GLIBC_USE_DEPRECATED_GETS 0
# 486 "/usr/include/features.h" 3 4
#define __GLIBC_USE_DEPRECATED_SCANF 0
# 495 "/usr/include/features.h" 3 4
#define __GLIBC_USE_C23_STRTOL 1
# 510 "/usr/include/features.h" 3 4
#undef __GNU_LIBRARY__
#define __GNU_LIBRARY__ 6



#define __GLIBC__ 2
#define __GLIBC_MINOR__ 41

#define __GLIBC_PREREQ(maj,min) ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min))





# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 20 "/usr/include/sys/cdefs.h" 3 4
#define _SYS_CDEFS_H 1
# 35 "/usr/include/sys/cdefs.h" 3 4
#undef __P
#undef __PMT
# 45 "/usr/include/sys/cdefs.h" 3 4
#define __glibc_has_attribute(attr) __has_attribute (attr)




#define __glibc_has_builtin(name) __has_builtin (name)




#define __glibc_has_extension(ext) __has_extension (ext)
# 65 "/usr/include/sys/cdefs.h" 3 4
#define __LEAF , __leaf__
#define __LEAF_ATTR __attribute__ ((__leaf__))
# 86 "/usr/include/sys/cdefs.h" 3 4
#define __THROW noexcept (true)



#define __THROWNL __THROW
#define __NTH(fct) __LEAF_ATTR fct __THROW
#define __NTHNL(fct) fct __THROW
# 102 "/usr/include/sys/cdefs.h" 3 4
#define __COLD __attribute__ ((__cold__))
# 125 "/usr/include/sys/cdefs.h" 3 4
#define __P(args) args
#define __PMT(args) args




#define __CONCAT(x,y) x ## y
#define __STRING(x) #x


#define __ptr_t void *




#define __BEGIN_DECLS extern "C" {
#define __END_DECLS }
# 153 "/usr/include/sys/cdefs.h" 3 4
#define __attribute_overloadable__ 



#define __bos(ptr) __builtin_object_size (ptr, __USE_FORTIFY_LEVEL > 1)
#define __bos0(ptr) __builtin_object_size (ptr, 0)







#define __glibc_objsize0(__o) __bos0 (__o)
#define __glibc_objsize(__o) __bos (__o)







#define __glibc_safe_len_cond(__l,__s,__osz) ((__l) <= (__osz) / (__s))
#define __glibc_unsigned_or_positive(__l) ((__typeof (__l)) 0 < (__typeof (__l)) -1 || (__builtin_constant_p (__l) && (__l) > 0))





#define __glibc_safe_or_unknown_len(__l,__s,__osz) ((__builtin_constant_p (__osz) && (__osz) == (__SIZE_TYPE__) -1) || (__glibc_unsigned_or_positive (__l) && __builtin_constant_p (__glibc_safe_len_cond ((__SIZE_TYPE__) (__l), (__s), (__osz))) && __glibc_safe_len_cond ((__SIZE_TYPE__) (__l), (__s), (__osz))))
# 192 "/usr/include/sys/cdefs.h" 3 4
#define __glibc_unsafe_len(__l,__s,__osz) (__glibc_unsigned_or_positive (__l) && __builtin_constant_p (__glibc_safe_len_cond ((__SIZE_TYPE__) (__l), __s, __osz)) && !__glibc_safe_len_cond ((__SIZE_TYPE__) (__l), __s, __osz))
# 313 "/usr/include/sys/cdefs.h" 3 4
#define __fortify_use_clang 0
#define __fortify_clang_warning(__c,__msg) 
#define __fortify_clang_warning_only_if_bos0_lt(__n,__buf,__complaint) 
#define __fortify_clang_warning_only_if_bos0_lt2(__n,__buf,__div,complaint) 
#define __fortify_clang_warning_only_if_bos_lt(__n,__buf,__complaint) 
#define __fortify_clang_warning_only_if_bos_lt2(__n,__buf,div,__complaint) 
#define __fortify_clang_overload_arg(__type,__attr,__name) __type __attr __name

#define __fortify_clang_overload_arg0(__type,__attr,__name) __fortify_clang_overload_arg (__type, __attr, __name)

#define __fortify_clang_warn_if_src_too_large(__dest,__src) 
#define __fortify_clang_warn_if_dest_too_small(__dest,__len) 
#define __fortify_clang_warn_if_dest_too_small0(__dest,__len) 







#define __glibc_fortify(f,__l,__s,__osz,...) (__glibc_safe_or_unknown_len (__l, __s, __osz) ? __ ## f ## _alias (__VA_ARGS__) : (__glibc_unsafe_len (__l, __s, __osz) ? __ ## f ## _chk_warn (__VA_ARGS__, __osz) : __ ## f ## _chk (__VA_ARGS__, __osz)))
# 350 "/usr/include/sys/cdefs.h" 3 4
#define __glibc_fortify_n(f,__l,__s,__osz,...) (__glibc_safe_or_unknown_len (__l, __s, __osz) ? __ ## f ## _alias (__VA_ARGS__) : (__glibc_unsafe_len (__l, __s, __osz) ? __ ## f ## _chk_warn (__VA_ARGS__, (__osz) / (__s)) : __ ## f ## _chk (__VA_ARGS__, (__osz) / (__s))))
# 366 "/usr/include/sys/cdefs.h" 3 4
#define __warnattr(msg) __attribute__((__warning__ (msg)))
#define __errordecl(name,msg) extern void name (void) __attribute__((__error__ (msg)))
# 384 "/usr/include/sys/cdefs.h" 3 4
#define __flexarr []
#define __glibc_c99_flexarr_available 1
# 410 "/usr/include/sys/cdefs.h" 3 4
#define __REDIRECT(name,proto,alias) name proto __asm__ (__ASMNAME (#alias))

#define __REDIRECT_NTH(name,proto,alias) name proto __THROW __asm__ (__ASMNAME (#alias))

#define __REDIRECT_NTHNL(name,proto,alias) name proto __THROWNL __asm__ (__ASMNAME (#alias))







#define __ASMNAME(cname) __ASMNAME2 (__USER_LABEL_PREFIX__, cname)
#define __ASMNAME2(prefix,cname) __STRING (prefix) cname


#define __REDIRECT_FORTIFY __REDIRECT



#define __REDIRECT_FORTIFY_NTH __REDIRECT_NTH
# 452 "/usr/include/sys/cdefs.h" 3 4
#define __attribute_malloc__ __attribute__ ((__malloc__))







#define __attribute_alloc_size__(params) __attribute__ ((__alloc_size__ params))
# 469 "/usr/include/sys/cdefs.h" 3 4
#define __attribute_alloc_align__(param) __attribute__ ((__alloc_align__ param))
# 479 "/usr/include/sys/cdefs.h" 3 4
#define __attribute_pure__ __attribute__ ((__pure__))






#define __attribute_const__ __attribute__ ((__const__))





#define __attribute_maybe_unused__ __attribute__ ((__unused__))
# 501 "/usr/include/sys/cdefs.h" 3 4
#define __attribute_used__ __attribute__ ((__used__))
#define __attribute_noinline__ __attribute__ ((__noinline__))







#define __attribute_deprecated__ __attribute__ ((__deprecated__))
# 520 "/usr/include/sys/cdefs.h" 3 4
#define __attribute_deprecated_msg__(msg) __attribute__ ((__deprecated__ (msg)))
# 533 "/usr/include/sys/cdefs.h" 3 4
#define __attribute_format_arg__(x) __attribute__ ((__format_arg__ (x)))
# 543 "/usr/include/sys/cdefs.h" 3 4
#define __attribute_format_strfmon__(a,b) __attribute__ ((__format__ (__strfmon__, a, b)))
# 555 "/usr/include/sys/cdefs.h" 3 4
#define __attribute_nonnull__(params) __attribute__ ((__nonnull__ params))





#define __nonnull(params) __attribute_nonnull__ (params)






#define __returns_nonnull __attribute__ ((__returns_nonnull__))
# 577 "/usr/include/sys/cdefs.h" 3 4
#define __attribute_warn_unused_result__ __attribute__ ((__warn_unused_result__))


#define __wur __attribute_warn_unused_result__
# 594 "/usr/include/sys/cdefs.h" 3 4
#undef __always_inline
#define __always_inline __inline __attribute__ ((__always_inline__))
# 604 "/usr/include/sys/cdefs.h" 3 4
#define __attribute_artificial__ __attribute__ ((__artificial__))
# 622 "/usr/include/sys/cdefs.h" 3 4
#define __extern_inline extern __inline __attribute__ ((__gnu_inline__))
#define __extern_always_inline extern __always_inline __attribute__ ((__gnu_inline__))
# 632 "/usr/include/sys/cdefs.h" 3 4
#define __fortify_function __extern_always_inline __attribute_artificial__





#define __va_arg_pack() __builtin_va_arg_pack ()
#define __va_arg_pack_len() __builtin_va_arg_pack_len ()
# 669 "/usr/include/sys/cdefs.h" 3 4
#define __restrict_arr 
# 681 "/usr/include/sys/cdefs.h" 3 4
#define __glibc_unlikely(cond) __builtin_expect ((cond), 0)
#define __glibc_likely(cond) __builtin_expect ((cond), 1)
# 703 "/usr/include/sys/cdefs.h" 3 4
#define __attribute_nonstring__ __attribute__ ((__nonstring__))





#undef __attribute_copy__



#define __attribute_copy__(arg) __attribute__ ((__copy__ (arg)))
# 730 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64






#define __WORDSIZE_TIME64_COMPAT32 1



#define __SYSCALL_WORDSIZE 64
# 731 "/usr/include/sys/cdefs.h" 2 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 21 "/usr/include/bits/long-double.h" 3 4
#define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
# 732 "/usr/include/sys/cdefs.h" 2 3 4
# 788 "/usr/include/sys/cdefs.h" 3 4
#define __LDBL_REDIR1(name,proto,alias) name proto
#define __LDBL_REDIR(name,proto) name proto
#define __LDBL_REDIR1_NTH(name,proto,alias) name proto __THROW
#define __LDBL_REDIR_NTH(name,proto) name proto __THROW
#define __LDBL_REDIR2_DECL(name) 
#define __LDBL_REDIR_DECL(name) 

#define __REDIRECT_LDBL(name,proto,alias) __REDIRECT (name, proto, alias)
#define __REDIRECT_NTH_LDBL(name,proto,alias) __REDIRECT_NTH (name, proto, alias)
# 807 "/usr/include/sys/cdefs.h" 3 4
#define __glibc_macro_warning1(message) _Pragma (#message)
#define __glibc_macro_warning(message) __glibc_macro_warning1 (GCC warning message)
# 828 "/usr/include/sys/cdefs.h" 3 4
#define __HAVE_GENERIC_SELECTION 0
# 837 "/usr/include/sys/cdefs.h" 3 4
#define __attr_access(x) __attribute__ ((__access__ x))







#define __fortified_attr_access(a,o,s) __attr_access ((a, o, s))


#define __attr_access_none(argno) __attribute__ ((__access__ (__none__, argno)))
# 861 "/usr/include/sys/cdefs.h" 3 4
#define __attr_dealloc(dealloc,argno) __attribute__ ((__malloc__ (dealloc, argno)))

#define __attr_dealloc_free __attr_dealloc (__builtin_free, 1)
# 872 "/usr/include/sys/cdefs.h" 3 4
#define __attribute_returns_twice__ __attribute__ ((__returns_twice__))
# 881 "/usr/include/sys/cdefs.h" 3 4
#define __attribute_struct_may_alias__ __attribute__ ((__may_alias__))
# 525 "/usr/include/features.h" 2 3 4
# 548 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4
# 10 "/usr/include/gnu/stubs.h" 3 4
# 1 "/usr/include/gnu/stubs-64.h" 1 3 4
# 10 "/usr/include/gnu/stubs-64.h" 3 4
#define __stub___compat_bdflush 
#define __stub_chflags 
#define __stub_fchflags 
#define __stub_gtty 
#define __stub_revoke 
#define __stub_setlogin 
#define __stub_sigreturn 
#define __stub_stty 
# 11 "/usr/include/gnu/stubs.h" 2 3 4
# 549 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/bits/libc-header-start.h" 2 3 4



#undef __GLIBC_USE_LIB_EXT2


#define __GLIBC_USE_LIB_EXT2 1
# 67 "/usr/include/bits/libc-header-start.h" 3 4
#undef __GLIBC_USE_IEC_60559_BFP_EXT

#define __GLIBC_USE_IEC_60559_BFP_EXT 1



#undef __GLIBC_USE_IEC_60559_BFP_EXT_C23

#define __GLIBC_USE_IEC_60559_BFP_EXT_C23 1



#undef __GLIBC_USE_IEC_60559_EXT

#define __GLIBC_USE_IEC_60559_EXT 1
# 90 "/usr/include/bits/libc-header-start.h" 3 4
#undef __GLIBC_USE_IEC_60559_FUNCS_EXT

#define __GLIBC_USE_IEC_60559_FUNCS_EXT 1



#undef __GLIBC_USE_IEC_60559_FUNCS_EXT_C23

#define __GLIBC_USE_IEC_60559_FUNCS_EXT_C23 1






#undef __GLIBC_USE_IEC_60559_TYPES_EXT

#define __GLIBC_USE_IEC_60559_TYPES_EXT 1
# 29 "/usr/include/stdio.h" 2 3 4


# 30 "/usr/include/stdio.h" 3 4
extern "C" {

#define __need_size_t 
#define __need_NULL 
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 1 3 4
# 200 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#define __size_t__ 
#define __SIZE_T__ 
#define _SIZE_T 
#define _SYS_SIZE_T_H 
#define _T_SIZE_ 
#define _T_SIZE 
#define __SIZE_T 
#define _SIZE_T_ 
#define _BSD_SIZE_T_ 
#define _SIZE_T_DEFINED_ 
#define _SIZE_T_DEFINED 
#define _BSD_SIZE_T_DEFINED_ 
#define _SIZE_T_DECLARED 
#define __DEFINED_size_t 
#define ___int_size_t_h 
#define _GCC_SIZE_T 
#define _SIZET_ 






#define __size_t 





typedef long unsigned int size_t;
# 252 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_size_t
# 414 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef NULL

#define NULL __null
# 425 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_NULL
# 35 "/usr/include/stdio.h" 2 3 4

#define __need___va_list 
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stdarg.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stdarg.h" 3 4
#undef __need___va_list




#define __GNUC_VA_LIST 
typedef __builtin_va_list __gnuc_va_list;
# 38 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/bits/types.h" 1 3 4
# 24 "/usr/include/bits/types.h" 3 4
#define _BITS_TYPES_H 1


# 1 "/usr/include/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64






#define __WORDSIZE_TIME64_COMPAT32 1



#define __SYSCALL_WORDSIZE 64
# 28 "/usr/include/bits/types.h" 2 3 4
# 1 "/usr/include/bits/timesize.h" 1 3 4
# 19 "/usr/include/bits/timesize.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64






#define __WORDSIZE_TIME64_COMPAT32 1



#define __SYSCALL_WORDSIZE 64
# 20 "/usr/include/bits/timesize.h" 2 3 4






#define __TIMESIZE __WORDSIZE
# 29 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 109 "/usr/include/bits/types.h" 3 4
#define __S16_TYPE short int
#define __U16_TYPE unsigned short int
#define __S32_TYPE int
#define __U32_TYPE unsigned int
#define __SLONGWORD_TYPE long int
#define __ULONGWORD_TYPE unsigned long int
# 128 "/usr/include/bits/types.h" 3 4
#define __SQUAD_TYPE long int
#define __UQUAD_TYPE unsigned long int
#define __SWORD_TYPE long int
#define __UWORD_TYPE unsigned long int
#define __SLONG32_TYPE int
#define __ULONG32_TYPE unsigned int
#define __S64_TYPE long int
#define __U64_TYPE unsigned long int

#define __STD_TYPE typedef



# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 24 "/usr/include/bits/typesizes.h" 3 4
#define _BITS_TYPESIZES_H 1
# 34 "/usr/include/bits/typesizes.h" 3 4
#define __SYSCALL_SLONG_TYPE __SLONGWORD_TYPE
#define __SYSCALL_ULONG_TYPE __ULONGWORD_TYPE


#define __DEV_T_TYPE __UQUAD_TYPE
#define __UID_T_TYPE __U32_TYPE
#define __GID_T_TYPE __U32_TYPE
#define __INO_T_TYPE __SYSCALL_ULONG_TYPE
#define __INO64_T_TYPE __UQUAD_TYPE
#define __MODE_T_TYPE __U32_TYPE

#define __NLINK_T_TYPE __SYSCALL_ULONG_TYPE
#define __FSWORD_T_TYPE __SYSCALL_SLONG_TYPE




#define __OFF_T_TYPE __SYSCALL_SLONG_TYPE
#define __OFF64_T_TYPE __SQUAD_TYPE
#define __PID_T_TYPE __S32_TYPE
#define __RLIM_T_TYPE __SYSCALL_ULONG_TYPE
#define __RLIM64_T_TYPE __UQUAD_TYPE
#define __BLKCNT_T_TYPE __SYSCALL_SLONG_TYPE
#define __BLKCNT64_T_TYPE __SQUAD_TYPE
#define __FSBLKCNT_T_TYPE __SYSCALL_ULONG_TYPE
#define __FSBLKCNT64_T_TYPE __UQUAD_TYPE
#define __FSFILCNT_T_TYPE __SYSCALL_ULONG_TYPE
#define __FSFILCNT64_T_TYPE __UQUAD_TYPE
#define __ID_T_TYPE __U32_TYPE
#define __CLOCK_T_TYPE __SYSCALL_SLONG_TYPE
#define __TIME_T_TYPE __SYSCALL_SLONG_TYPE
#define __USECONDS_T_TYPE __U32_TYPE
#define __SUSECONDS_T_TYPE __SYSCALL_SLONG_TYPE
#define __SUSECONDS64_T_TYPE __SQUAD_TYPE
#define __DADDR_T_TYPE __S32_TYPE
#define __KEY_T_TYPE __S32_TYPE
#define __CLOCKID_T_TYPE __S32_TYPE
#define __TIMER_T_TYPE void *
#define __BLKSIZE_T_TYPE __SYSCALL_SLONG_TYPE
#define __FSID_T_TYPE struct { int __val[2]; }
#define __SSIZE_T_TYPE __SWORD_TYPE
#define __CPU_MASK_TYPE __SYSCALL_ULONG_TYPE





#define __OFF_T_MATCHES_OFF64_T 1


#define __INO_T_MATCHES_INO64_T 1


#define __RLIM_T_MATCHES_RLIM64_T 1


#define __STATFS_MATCHES_STATFS64 1


#define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
# 103 "/usr/include/bits/typesizes.h" 3 4
#define __FD_SETSIZE 1024
# 142 "/usr/include/bits/types.h" 2 3 4
# 1 "/usr/include/bits/time64.h" 1 3 4
# 24 "/usr/include/bits/time64.h" 3 4
#define _BITS_TIME64_H 1





#define __TIME64_T_TYPE __TIME_T_TYPE
# 143 "/usr/include/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 226 "/usr/include/bits/types.h" 3 4
#undef __STD_TYPE
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/__fpos_t.h" 1 3 4

#define _____fpos_t_defined 1


# 1 "/usr/include/bits/types/__mbstate_t.h" 1 3 4

#define ____mbstate_t_defined 1
# 13 "/usr/include/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/__fpos64_t.h" 1 3 4

#define _____fpos64_t_defined 1







typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/__FILE.h" 1 3 4

#define ____FILE_defined 1

struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/FILE.h" 1 3 4

#define __FILE_defined 1

struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 44 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/struct_FILE.h" 1 3 4
# 20 "/usr/include/bits/types/struct_FILE.h" 3 4
#define __struct_FILE_defined 1
# 36 "/usr/include/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2:24;

  char _short_backupbuf[1];
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  struct _IO_FILE **_prevchain;
  int _mode;

  char _unused2[15 * sizeof (int) - 5 * sizeof (void *)];
};


#define __getc_unlocked_body(_fp) (__glibc_unlikely ((_fp)->_IO_read_ptr >= (_fp)->_IO_read_end) ? __uflow (_fp) : *(unsigned char *) (_fp)->_IO_read_ptr++)



#define __putc_unlocked_body(_ch,_fp) (__glibc_unlikely ((_fp)->_IO_write_ptr >= (_fp)->_IO_write_end) ? __overflow (_fp, (unsigned char) (_ch)) : (unsigned char) (*(_fp)->_IO_write_ptr++ = (_ch)))




#define _IO_EOF_SEEN 0x0010
#define __feof_unlocked_body(_fp) (((_fp)->_flags & _IO_EOF_SEEN) != 0)

#define _IO_ERR_SEEN 0x0020
#define __ferror_unlocked_body(_fp) (((_fp)->_flags & _IO_ERR_SEEN) != 0)

#define _IO_USER_LOCK 0x8000
# 45 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/bits/types/cookie_io_functions_t.h" 1 3 4
# 19 "/usr/include/bits/types/cookie_io_functions_t.h" 3 4
#define __cookie_io_functions_t_defined 1







typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 48 "/usr/include/stdio.h" 2 3 4





typedef __gnuc_va_list va_list;
#define _VA_LIST_DEFINED 
# 64 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;



#define __off_t_defined 


typedef __off64_t off64_t;
#define __off64_t_defined 





typedef __ssize_t ssize_t;
#define __ssize_t_defined 





typedef __fpos_t fpos_t;




typedef __fpos64_t fpos64_t;



#define _IOFBF 0
#define _IOLBF 1
#define _IONBF 2



#define BUFSIZ 8192




#define EOF (-1)




#define SEEK_SET 0
#define SEEK_CUR 1
#define SEEK_END 2

#define SEEK_DATA 3
#define SEEK_HOLE 4





#define P_tmpdir "/tmp"


#define L_tmpnam 20
#define TMP_MAX 238328



# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 20 "/usr/include/bits/stdio_lim.h" 3 4
#define _BITS_STDIO_LIM_H 1





#define FILENAME_MAX 4096
# 130 "/usr/include/stdio.h" 2 3 4


#define L_ctermid 9

#define L_cuserid 9



#undef FOPEN_MAX
#define FOPEN_MAX 16




#define _PRINTF_NAN_LEN_MAX 4




extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;

#define stdin stdin
#define stdout stdout
#define stderr stderr


extern int remove (const char *__filename) noexcept (true);

extern int rename (const char *__old, const char *__new) noexcept (true);



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) noexcept (true);




#define RENAME_NOREPLACE (1 << 0)
#define RENAME_EXCHANGE (1 << 1)
#define RENAME_WHITEOUT (1 << 2)



extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) noexcept (true);






extern int fclose (FILE *__stream) __attribute__ ((__nonnull__ (1)));

#undef __attr_dealloc_fclose
#define __attr_dealloc_fclose __attr_dealloc (fclose, 1)






extern FILE *tmpfile (void)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) __attribute__ ((__warn_unused_result__));
# 206 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void)
   __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) __attribute__ ((__warn_unused_result__));



extern char *tmpnam (char[20]) noexcept (true) __attribute__ ((__warn_unused_result__));




extern char *tmpnam_r (char __s[20]) noexcept (true) __attribute__ ((__warn_unused_result__));
# 228 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
   noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__malloc__ (__builtin_free, 1)));






extern int fflush (FILE *__stream);
# 245 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 255 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 264 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) __attribute__ ((__warn_unused_result__));




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (3)));
# 289 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) __attribute__ ((__warn_unused_result__));
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (3)));




extern FILE *fdopen (int __fd, const char *__modes) noexcept (true)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) __attribute__ ((__warn_unused_result__));





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) noexcept (true)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) __attribute__ ((__warn_unused_result__));




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) __attribute__ ((__warn_unused_result__));




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) noexcept (true)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1))) __attribute__ ((__warn_unused_result__));
# 334 "/usr/include/stdio.h" 3 4
extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) noexcept (true)
  __attribute__ ((__nonnull__ (1)));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) noexcept (true) __attribute__ ((__nonnull__ (1)));




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern void setlinebuf (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...) __attribute__ ((__nonnull__ (1)));




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) noexcept (true);





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nonnull__ (1)));




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) noexcept (true);



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     noexcept (true) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     noexcept (true) __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 0))) __attribute__ ((__warn_unused_result__));
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (1)));




extern int scanf (const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) noexcept (true);





# 1 "/usr/include/bits/floatn.h" 1 3 4
# 20 "/usr/include/bits/floatn.h" 3 4
#define _BITS_FLOATN_H 
# 37 "/usr/include/bits/floatn.h" 3 4
#define __HAVE_FLOAT128 1







#define __HAVE_DISTINCT_FLOAT128 1







#define __HAVE_FLOAT64X 1





#define __HAVE_FLOAT64X_LONG_DOUBLE 1
# 72 "/usr/include/bits/floatn.h" 3 4
#define __f128(x) x ##f128
# 86 "/usr/include/bits/floatn.h" 3 4
#define __CFLOAT128 _Complex _Float128
# 131 "/usr/include/bits/floatn.h" 3 4
# 1 "/usr/include/bits/floatn-common.h" 1 3 4
# 21 "/usr/include/bits/floatn-common.h" 3 4
#define _BITS_FLOATN_COMMON_H 


# 1 "/usr/include/bits/long-double.h" 1 3 4
# 21 "/usr/include/bits/long-double.h" 3 4
#define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
# 25 "/usr/include/bits/floatn-common.h" 2 3 4
# 34 "/usr/include/bits/floatn-common.h" 3 4
#define __HAVE_FLOAT16 0
#define __HAVE_FLOAT32 1
#define __HAVE_FLOAT64 1
#define __HAVE_FLOAT32X 1
#define __HAVE_FLOAT128X 0
# 52 "/usr/include/bits/floatn-common.h" 3 4
#define __HAVE_DISTINCT_FLOAT16 __HAVE_FLOAT16
#define __HAVE_DISTINCT_FLOAT32 0
#define __HAVE_DISTINCT_FLOAT64 0
#define __HAVE_DISTINCT_FLOAT32X 0
#define __HAVE_DISTINCT_FLOAT64X 0
#define __HAVE_DISTINCT_FLOAT128X __HAVE_FLOAT128X





#define __HAVE_FLOAT128_UNLIKE_LDBL (__HAVE_DISTINCT_FLOAT128 && __LDBL_MANT_DIG__ != 113)
# 72 "/usr/include/bits/floatn-common.h" 3 4
#define __HAVE_FLOATN_NOT_TYPEDEF 0
# 93 "/usr/include/bits/floatn-common.h" 3 4
#define __f32(x) x ##f32
# 105 "/usr/include/bits/floatn-common.h" 3 4
#define __f64(x) x ##f64







#define __f32x(x) x ##f32x
# 125 "/usr/include/bits/floatn-common.h" 3 4
#define __f64x(x) x ##f64x
# 151 "/usr/include/bits/floatn-common.h" 3 4
#define __CFLOAT32 _Complex _Float32
# 163 "/usr/include/bits/floatn-common.h" 3 4
#define __CFLOAT64 _Complex _Float64







#define __CFLOAT32X _Complex _Float32x
# 183 "/usr/include/bits/floatn-common.h" 3 4
#define __CFLOAT64X _Complex _Float64x
# 132 "/usr/include/bits/floatn.h" 2 3 4
# 438 "/usr/include/stdio.h" 2 3 4




extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc23_fscanf")

                          __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (1)));
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc23_scanf")
                         __attribute__ ((__warn_unused_result__));
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) noexcept (true) __asm__ ("" "__isoc23_sscanf")

                      ;
# 490 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (1)));





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     noexcept (true) __attribute__ ((__format__ (__scanf__, 2, 0)));






extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc23_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (1)));
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc23_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) noexcept (true) __asm__ ("" "__isoc23_vsscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 575 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream) __attribute__ ((__nonnull__ (1)));
extern int getc (FILE *__stream) __attribute__ ((__nonnull__ (1)));





extern int getchar (void);






extern int getc_unlocked (FILE *__stream) __attribute__ ((__nonnull__ (1)));
extern int getchar_unlocked (void);
# 600 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream) __attribute__ ((__nonnull__ (1)));
# 611 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream) __attribute__ ((__nonnull__ (2)));
extern int putc (int __c, FILE *__stream) __attribute__ ((__nonnull__ (2)));





extern int putchar (int __c);
# 627 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream) __attribute__ ((__nonnull__ (2)));







extern int putc_unlocked (int __c, FILE *__stream) __attribute__ ((__nonnull__ (2)));
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream) __attribute__ ((__nonnull__ (1)));


extern int putw (int __w, FILE *__stream) __attribute__ ((__nonnull__ (2)));







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 2))) __attribute__ ((__nonnull__ (3)));
# 677 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__write_only__, 1, 2))) __attribute__ ((__nonnull__ (3)));
# 689 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (4)));
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (4)));


extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (3)));







extern int fputs (const char *__restrict __s, FILE *__restrict __stream)
  __attribute__ ((__nonnull__ (2)));





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream) __attribute__ ((__nonnull__ (2)));






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__))
  __attribute__ ((__nonnull__ (4)));




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s) __attribute__ ((__nonnull__ (4)));
# 745 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream) __attribute__ ((__nonnull__ (2)));
# 756 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__))
  __attribute__ ((__nonnull__ (4)));
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream)
  __attribute__ ((__nonnull__ (4)));







extern int fseek (FILE *__stream, long int __off, int __whence)
  __attribute__ ((__nonnull__ (1)));




extern long int ftell (FILE *__stream) __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (1)));




extern void rewind (FILE *__stream) __attribute__ ((__nonnull__ (1)));
# 793 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence)
  __attribute__ ((__nonnull__ (1)));




extern __off_t ftello (FILE *__stream) __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (1)));
# 819 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos)
  __attribute__ ((__nonnull__ (1)));




extern int fsetpos (FILE *__stream, const fpos_t *__pos) __attribute__ ((__nonnull__ (1)));
# 841 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence)
  __attribute__ ((__nonnull__ (1)));
extern __off64_t ftello64 (FILE *__stream) __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (1)));
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos)
  __attribute__ ((__nonnull__ (1)));
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos) __attribute__ ((__nonnull__ (1)));



extern void clearerr (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));

extern int feof (FILE *__stream) noexcept (true) __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (1)));

extern int ferror (FILE *__stream) noexcept (true) __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (1)));



extern void clearerr_unlocked (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));
extern int feof_unlocked (FILE *__stream) noexcept (true) __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (1)));
extern int ferror_unlocked (FILE *__stream) noexcept (true) __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (1)));







extern void perror (const char *__s) __attribute__ ((__cold__));




extern int fileno (FILE *__stream) noexcept (true) __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (1)));




extern int fileno_unlocked (FILE *__stream) noexcept (true) __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (1)));
# 887 "/usr/include/stdio.h" 3 4
extern int pclose (FILE *__stream) __attribute__ ((__nonnull__ (1)));





extern FILE *popen (const char *__command, const char *__modes)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (pclose, 1))) __attribute__ ((__warn_unused_result__));






extern char *ctermid (char *__s) noexcept (true)
  __attribute__ ((__access__ (__write_only__, 1)));





extern char *cuserid (char *__s)
  __attribute__ ((__access__ (__write_only__, 1)));




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     noexcept (true) __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int ftrylockfile (FILE *__stream) noexcept (true) __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (1)));


extern void funlockfile (FILE *__stream) noexcept (true) __attribute__ ((__nonnull__ (1)));
# 949 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);



# 1 "/usr/include/bits/stdio2-decl.h" 1 3 4
# 20 "/usr/include/bits/stdio2-decl.h" 3 4
#define _BITS_STDIO2_DEC_H 1





extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
     const char *__restrict __format, ...) noexcept (true)
    __attribute__ ((__access__ (__write_only__, 1, 3)));
extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
      const char *__restrict __format,
      __gnuc_va_list __ap) noexcept (true)
    __attribute__ ((__access__ (__write_only__, 1, 3)));



extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
      size_t __slen, const char *__restrict __format,
      ...) noexcept (true)
    __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
       size_t __slen, const char *__restrict __format,
       __gnuc_va_list __ap) noexcept (true)
    __attribute__ ((__access__ (__write_only__, 1, 2)));





extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
     const char *__restrict __format, ...)
    __attribute__ ((__nonnull__ (1)));
extern int __printf_chk (int __flag, const char *__restrict __format, ...);
extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
      const char *__restrict __format,
      __gnuc_va_list __ap) __attribute__ ((__nonnull__ (1)));
extern int __vprintf_chk (int __flag, const char *__restrict __format,
     __gnuc_va_list __ap);


extern int __dprintf_chk (int __fd, int __flag, const char *__restrict __fmt,
     ...) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __vdprintf_chk (int __fd, int __flag,
      const char *__restrict __fmt, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 3, 0)));




extern int __asprintf_chk (char **__restrict __ptr, int __flag,
      const char *__restrict __fmt, ...)
     noexcept (true) __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__warn_unused_result__));
extern int __vasprintf_chk (char **__restrict __ptr, int __flag,
       const char *__restrict __fmt, __gnuc_va_list __arg)
     noexcept (true) __attribute__ ((__format__ (__printf__, 3, 0))) __attribute__ ((__warn_unused_result__));
extern int __obstack_printf_chk (struct obstack *__restrict __obstack,
     int __flag, const char *__restrict __format,
     ...)
     noexcept (true) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __obstack_vprintf_chk (struct obstack *__restrict __obstack,
      int __flag,
      const char *__restrict __format,
      __gnuc_va_list __args)
     noexcept (true) __attribute__ ((__format__ (__printf__, 3, 0)));
# 96 "/usr/include/bits/stdio2-decl.h" 3 4
extern char *__fgets_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets")


    __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern char *__fgets_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets called with bigger size than length " "of destination buffer")))
                                 ;

extern char *__fgets_chk (char *__restrict __s, size_t __size, int __n,
     FILE *__restrict __stream)
    __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 3))) __attribute__ ((__nonnull__ (4)));

extern size_t __fread_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread")


            __attribute__ ((__warn_unused_result__));
extern size_t __fread_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread called with bigger size * nmemb than length " "of destination buffer")))
                                 ;

extern size_t __fread_chk (void *__restrict __ptr, size_t __ptrlen,
      size_t __size, size_t __n,
      FILE *__restrict __stream) __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (5)));


extern char *__fgets_unlocked_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets_unlocked")


    __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern char *__fgets_unlocked_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_unlocked_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets_unlocked called with bigger size than length " "of destination buffer")))
                                 ;


extern char *__fgets_unlocked_chk (char *__restrict __s, size_t __size,
       int __n, FILE *__restrict __stream)
    __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 3))) __attribute__ ((__nonnull__ (4)));



#undef fread_unlocked
extern size_t __fread_unlocked_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread_unlocked")


                     __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_unlocked_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread_unlocked called with bigger size * nmemb than " "length of destination buffer")))
                                        ;

extern size_t __fread_unlocked_chk (void *__restrict __ptr, size_t __ptrlen,
        size_t __size, size_t __n,
        FILE *__restrict __stream)
    __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (5)));
# 955 "/usr/include/stdio.h" 2 3 4
# 970 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio2.h" 1 3 4
# 20 "/usr/include/bits/stdio2.h" 3 4
#define _BITS_STDIO2_H 1






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) sprintf (char *__restrict __s, const char *__restrict __fmt, ...) noexcept (true)
{
  return __builtin___sprintf_chk (__s, 2 - 1,
      __builtin_object_size (__s, 2 > 1), __fmt,
      __builtin_va_arg_pack ());
}
# 54 "/usr/include/bits/stdio2.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vsprintf (char * __restrict __s, const char *__restrict __fmt, __gnuc_va_list __ap) noexcept (true)

{
  return __builtin___vsprintf_chk (__s, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) snprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, ...) noexcept (true)

{
  return __builtin___snprintf_chk (__s, __n, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt,
       __builtin_va_arg_pack ());
}
# 92 "/usr/include/bits/stdio2.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vsnprintf (char * __restrict __s, size_t __n, const char *__restrict __fmt, __gnuc_va_list __ap) noexcept (true)


    


{
  return __builtin___vsnprintf_chk (__s, __n, 2 - 1,
        __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}





extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (1))) int
fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
{
  return __fprintf_chk (__stream, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (2 - 1, __fmt, __builtin_va_arg_pack ());
}
# 151 "/usr/include/bits/stdio2.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vprintf (const char * __restrict __fmt,
  __gnuc_va_list __ap)
{



  return __vprintf_chk (2 - 1, __fmt, __ap);

}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (1))) int
vfprintf (FILE *__restrict __stream,
   const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfprintf_chk (__stream, 2 - 1, __fmt, __ap);
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
dprintf (int __fd, const char *__restrict __fmt, ...)
{
  return __dprintf_chk (__fd, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}
# 194 "/usr/include/bits/stdio2.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vdprintf (int __fd, const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vdprintf_chk (__fd, 2 - 1, __fmt, __ap);
}




extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...) noexcept (true)
{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) __asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...) noexcept (true)

{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) obstack_printf (struct obstack *__restrict __obstack, const char *__restrict __fmt, ...) noexcept (true)

{
  return __obstack_printf_chk (__obstack, 2 - 1, __fmt,
          __builtin_va_arg_pack ());
}
# 271 "/usr/include/bits/stdio2.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vasprintf (char **__restrict __ptr, const char *__restrict __fmt, __gnuc_va_list __ap) noexcept (true)

{
  return __vasprintf_chk (__ptr, 2 - 1, __fmt, __ap);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) obstack_vprintf (struct obstack *__restrict __obstack, const char *__restrict __fmt, __gnuc_va_list __ap) noexcept (true)

{
  return __obstack_vprintf_chk (__obstack, 2 - 1, __fmt,
    __ap);
}
# 303 "/usr/include/bits/stdio2.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 2)))
__attribute__ ((__nonnull__ (3))) char *
fgets (char * __restrict __s, int __n,
       FILE *__restrict __stream)
    


{
  size_t __sz = __builtin_object_size (__s, 2 > 1);
  if (((__builtin_constant_p (__sz) && (__sz) == (long unsigned int) -1) || (((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= ((__sz)) / ((sizeof (char))))) && (((long unsigned int) (__n)) <= ((__sz)) / ((sizeof (char)))))))
    return __fgets_alias (__s, __n, __stream);

  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__sz) / (sizeof (char)))) && !(((long unsigned int) (__n)) <= (__sz) / (sizeof (char)))))
    return __fgets_chk_warn (__s, __sz, __n, __stream);

  return __fgets_chk (__s, __sz, __n, __stream);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (4))) size_t
fread (void * __restrict __ptr,
       size_t __size, size_t __n, FILE *__restrict __stream)
    



{
  size_t __sz = __builtin_object_size (__ptr, 0);
  if (((__builtin_constant_p (__sz) && (__sz) == (long unsigned int) -1) || (((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= ((__sz)) / ((__size)))) && (((long unsigned int) (__n)) <= ((__sz)) / ((__size))))))
    return __fread_alias (__ptr, __size, __n, __stream);

  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__sz) / (__size))) && !(((long unsigned int) (__n)) <= (__sz) / (__size))))
    return __fread_chk_warn (__ptr, __sz, __size, __n, __stream);

  return __fread_chk (__ptr, __sz, __size, __n, __stream);
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 2)))
__attribute__ ((__nonnull__ (3))) char *
fgets_unlocked (char * __restrict __s,
  int __n, FILE *__restrict __stream)
    


{
  size_t __sz = __builtin_object_size (__s, 2 > 1);
  if (((__builtin_constant_p (__sz) && (__sz) == (long unsigned int) -1) || (((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= ((__sz)) / ((sizeof (char))))) && (((long unsigned int) (__n)) <= ((__sz)) / ((sizeof (char)))))))
    return __fgets_unlocked_alias (__s, __n, __stream);

  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__sz) / (sizeof (char)))) && !(((long unsigned int) (__n)) <= (__sz) / (sizeof (char)))))
    return __fgets_unlocked_chk_warn (__s, __sz, __n, __stream);

  return __fgets_unlocked_chk (__s, __sz, __n, __stream);
}



#undef fread_unlocked
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) __attribute__ ((__nonnull__ (4))) size_t
fread_unlocked (void * __restrict __ptr,
  size_t __size, size_t __n, FILE *__restrict __stream)
    



{
  size_t __sz = __builtin_object_size (__ptr, 0);
  if (((__builtin_constant_p (__sz) && (__sz) == (long unsigned int) -1) || (((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= ((__sz)) / ((__size)))) && (((long unsigned int) (__n)) <= ((__sz)) / ((__size))))))
    {
# 393 "/usr/include/bits/stdio2.h" 3 4
      return __fread_unlocked_alias (__ptr, __size, __n, __stream);
    }

  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__sz) / (__size))) && !(((long unsigned int) (__n)) <= (__sz) / (__size))))
    return __fread_unlocked_chk_warn (__ptr, __sz, __size, __n, __stream);

  return __fread_unlocked_chk (__ptr, __sz, __size, __n, __stream);

}
# 971 "/usr/include/stdio.h" 2 3 4


}
# 17 "./emc/nml_intf/canon.hh" 2
# 1 "/usr/include/c++/15.1.1/vector" 1 3
# 56 "/usr/include/c++/15.1.1/vector" 3
#define _GLIBCXX_VECTOR 1





# 1 "/usr/include/c++/15.1.1/bits/requires_hosted.h" 1 3
# 29 "/usr/include/c++/15.1.1/bits/requires_hosted.h" 3
#define _REQUIRES_FREESTANDING_H 1

# 1 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 1 3
# 31 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_CXX_CONFIG_H 1





 
# 37 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvariadic-macros"

#pragma GCC diagnostic ignored "-Wc++11-extensions"
#pragma GCC diagnostic ignored "-Wc++23-extensions"



#define _GLIBCXX_RELEASE 15


#undef __GLIBCXX__
#define __GLIBCXX__ 20250425
# 58 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_PURE __attribute__ ((__pure__))



#define _GLIBCXX_CONST __attribute__ ((__const__))



#define _GLIBCXX_NORETURN __attribute__ ((__noreturn__))
# 79 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY 1


#define _GLIBCXX_VISIBILITY(V) __attribute__ ((__visibility__ (#V)))
# 106 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_USE_DEPRECATED 1



#define _GLIBCXX_DEPRECATED __attribute__ ((__deprecated__))
#define _GLIBCXX_DEPRECATED_SUGGEST(ALT) __attribute__ ((__deprecated__ ("use '" ALT "' instead")))







#define _GLIBCXX11_DEPRECATED _GLIBCXX_DEPRECATED
#define _GLIBCXX11_DEPRECATED_SUGGEST(ALT) _GLIBCXX_DEPRECATED_SUGGEST(ALT)






#define _GLIBCXX14_DEPRECATED _GLIBCXX_DEPRECATED
#define _GLIBCXX14_DEPRECATED_SUGGEST(ALT) _GLIBCXX_DEPRECATED_SUGGEST(ALT)






#define _GLIBCXX17_DEPRECATED [[__deprecated__]]
#define _GLIBCXX17_DEPRECATED_SUGGEST(ALT) _GLIBCXX_DEPRECATED_SUGGEST(ALT)
# 146 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX20_DEPRECATED 
#define _GLIBCXX20_DEPRECATED_SUGGEST(ALT) 






#define _GLIBCXX23_DEPRECATED 
#define _GLIBCXX23_DEPRECATED_SUGGEST(ALT) 






#define _GLIBCXX26_DEPRECATED 
#define _GLIBCXX26_DEPRECATED_SUGGEST(ALT) 




#define _GLIBCXX_ABI_TAG_CXX11 __attribute ((__abi_tag__ ("cxx11")))




#define _GLIBCXX_NODISCARD [[__nodiscard__]]
# 185 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_CONSTEXPR constexpr
#define _GLIBCXX_USE_CONSTEXPR constexpr
# 195 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX14_CONSTEXPR constexpr







#define _GLIBCXX17_CONSTEXPR constexpr
# 213 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX20_CONSTEXPR 







#define _GLIBCXX23_CONSTEXPR 







#define _GLIBCXX26_CONSTEXPR 





#define _GLIBCXX17_INLINE inline
# 244 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_NOEXCEPT noexcept
#define _GLIBCXX_NOEXCEPT_IF(...) noexcept(__VA_ARGS__)
#define _GLIBCXX_USE_NOEXCEPT noexcept
#define _GLIBCXX_THROW(_EXC) 
# 257 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_NOTHROW _GLIBCXX_USE_NOEXCEPT




#define _GLIBCXX_THROW_OR_ABORT(_EXC) (throw (_EXC))






#define _GLIBCXX_NOEXCEPT_PARM , bool _NE
#define _GLIBCXX_NOEXCEPT_QUAL noexcept (_NE)
# 286 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_EXTERN_TEMPLATE 1
# 336 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;


#pragma GCC visibility push(default)


  extern "C++" __attribute__ ((__noreturn__, __always_inline__))
  inline void __terminate() noexcept
  {
    void terminate() noexcept __attribute__ ((__noreturn__,__cold__));
    terminate();
  }
#pragma GCC visibility pop
}

#define _GLIBCXX_USE_DUAL_ABI 1







#define _GLIBCXX_USE_CXX11_ABI 1



namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
#define _GLIBCXX_NAMESPACE_CXX11 __cxx11::
#define _GLIBCXX_BEGIN_NAMESPACE_CXX11 namespace __cxx11 {
#define _GLIBCXX_END_NAMESPACE_CXX11 }
#define _GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_ABI_TAG_CXX11
# 389 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_INLINE_VERSION 0
# 423 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_BEGIN_NAMESPACE_VERSION 
#define _GLIBCXX_END_NAMESPACE_VERSION 

#define _GLIBCXX_BEGIN_INLINE_ABI_NAMESPACE(X) inline namespace X {
#define _GLIBCXX_END_INLINE_ABI_NAMESPACE(X) }
# 492 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_STD_C std
#define _GLIBCXX_BEGIN_NAMESPACE_CONTAINER 
#define _GLIBCXX_END_NAMESPACE_CONTAINER 
# 503 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_STD_A std
#define _GLIBCXX_BEGIN_NAMESPACE_ALGO 
#define _GLIBCXX_END_NAMESPACE_ALGO 




#undef _GLIBCXX_LONG_DOUBLE_COMPAT
# 520 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#undef _GLIBCXX_CLANG





#undef _GLIBCXX_LONG_DOUBLE_ALT128_COMPAT
# 556 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_NAMESPACE_LDBL 
#define _GLIBCXX_BEGIN_NAMESPACE_LDBL 
#define _GLIBCXX_END_NAMESPACE_LDBL 



#define _GLIBCXX_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_NAMESPACE_CXX11
#define _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_BEGIN_NAMESPACE_CXX11
#define _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_END_NAMESPACE_CXX11
# 573 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace std
{
#pragma GCC visibility push(default)




  __attribute__((__always_inline__))
  constexpr inline bool
  __is_constant_evaluated() noexcept
  {




#define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();



  }
#pragma GCC visibility pop
}
# 613 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_VERBOSE_ASSERT 1



namespace std
{
#pragma GCC visibility push(default)

  extern "C++" __attribute__ ((__noreturn__)) __attribute__((__cold__))
  void
  __glibcxx_assert_fail
    (const char* __file, int __line, const char* __function,
     const char* __condition)
  noexcept;
#pragma GCC visibility pop
}
#define _GLIBCXX_ASSERT_FAIL(_Condition) std::__glibcxx_assert_fail(__FILE__, __LINE__, __PRETTY_FUNCTION__, #_Condition)
# 648 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace std
{
  __attribute__((__always_inline__,__visibility__("default")))
  inline void
  __glibcxx_assert_fail()
  { }
}
#define __glibcxx_assert(cond) do { if (std::__is_constant_evaluated() && !bool(cond)) std::__glibcxx_assert_fail(); } while (false)
# 697 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(A) 


#define _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(A) 



#define _GLIBCXX_BEGIN_EXTERN_C extern "C" {
#define _GLIBCXX_END_EXTERN_C }

#define _GLIBCXX_USE_ALLOCATOR_NEW 1
# 727 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
# 1 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/os_defines.h" 1 3
# 31 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/os_defines.h" 3
#define _GLIBCXX_OS_DEFINES 1





#define __NO_CTYPE 1







#undef _GLIBCXX_HAVE_GETS




#define _GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC __GLIBC_PREREQ(2,23)
# 60 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/os_defines.h" 3
#define _GLIBCXX_HAVE_FLOAT128_MATH 1





#define _GLIBCXX_MAY_HAVE___CXA_THREAD_ATEXIT_IMPL 1






#define _GLIBCXX_NATIVE_THREAD_ID pthread_self()
# 86 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/os_defines.h" 3
#define _GLIBCXX_GTHREAD_USE_WEAK 0
# 728 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 2 3


# 1 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/cpu_defines.h" 1 3
# 31 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/cpu_defines.h" 3
#define _GLIBCXX_CPU_DEFINES 1
# 731 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 2 3




#define _GLIBCXX_PSEUDO_VISIBILITY(V) 






#define _GLIBCXX_WEAK_DEFINITION 







#define _GLIBCXX_USE_WEAK_REF __GXX_WEAK__
# 763 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_TXN_SAFE 
#define _GLIBCXX_TXN_SAFE_DYN 




#define _GLIBCXX_USE_STD_SPEC_FUNCS 1
# 782 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_FAST_MATH 0






#define __N(msgid) (msgid)


#undef min
#undef max





#define _GLIBCXX_USE_C99_MATH _GLIBCXX11_USE_C99_MATH


#define _GLIBCXX_USE_C99_COMPLEX _GLIBCXX11_USE_C99_COMPLEX


#define _GLIBCXX_USE_C99_STDIO _GLIBCXX11_USE_C99_STDIO


#define _GLIBCXX_USE_C99_STDLIB _GLIBCXX11_USE_C99_STDLIB


#define _GLIBCXX_USE_C99_WCHAR _GLIBCXX11_USE_C99_WCHAR
# 846 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_USE_FLOAT128 1







#define _GLIBCXX_FLOAT_IS_IEEE_BINARY32 1






#define _GLIBCXX_DOUBLE_IS_IEEE_BINARY64 1
# 887 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace __gnu_cxx
{
  typedef __decltype(0.0bf16) __bfloat16_t;
}







#define _GLIBCXX_HAS_BUILTIN(B) __has_builtin(B)




#define _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP 1



#define _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE 1



#define _GLIBCXX_HAVE_BUILTIN_LAUNDER 1







#define _GLIBCXX_USE_BUILTIN_TRAIT(BT) _GLIBCXX_HAS_BUILTIN(BT)





#define _GLIBCXX_DOXYGEN_ONLY(X) 
# 937 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_USE_TBB_PAR_BACKEND __has_include(<tbb/tbb.h>)





#define _PSTL_PAR_BACKEND_SERIAL 


#define _PSTL_ASSERT(_Condition) __glibcxx_assert(_Condition)
#define _PSTL_ASSERT_MSG(_Condition,_Message) __glibcxx_assert(_Condition)

# 1 "/usr/include/c++/15.1.1/pstl/pstl_config.h" 1 3
# 11 "/usr/include/c++/15.1.1/pstl/pstl_config.h" 3
#define _PSTL_CONFIG_H 


#define _PSTL_VERSION 17000
#define _PSTL_VERSION_MAJOR (_PSTL_VERSION / 1000)
#define _PSTL_VERSION_MINOR ((_PSTL_VERSION % 1000) / 10)
#define _PSTL_VERSION_PATCH (_PSTL_VERSION % 10)
# 29 "/usr/include/c++/15.1.1/pstl/pstl_config.h" 3
#define _PSTL_USAGE_WARNINGS 0






#define _PSTL_PRAGMA(x) _Pragma(#x)


#define _PSTL_STRING_AUX(x) #x
#define _PSTL_STRING(x) _PSTL_STRING_AUX(x)
#define _PSTL_STRING_CONCAT(x,y) x #y






#define _PSTL_HIDE_FROM_ABI_PUSH 
#define _PSTL_HIDE_FROM_ABI_POP 




#define _PSTL_GCC_VERSION (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)
# 66 "/usr/include/c++/15.1.1/pstl/pstl_config.h" 3
#define _PSTL_PRAGMA_SIMD _PSTL_PRAGMA(omp simd)
#define _PSTL_PRAGMA_DECLARE_SIMD _PSTL_PRAGMA(omp declare simd)
#define _PSTL_PRAGMA_SIMD_REDUCTION(PRM) _PSTL_PRAGMA(omp simd reduction(PRM))
# 82 "/usr/include/c++/15.1.1/pstl/pstl_config.h" 3
#define _PSTL_PRAGMA_FORCEINLINE 




#define _PSTL_PRAGMA_SIMD_SCAN(PRM) _PSTL_PRAGMA(omp simd reduction(inscan, PRM))
#define _PSTL_PRAGMA_SIMD_INCLUSIVE_SCAN(PRM) _PSTL_PRAGMA(omp scan inclusive(PRM))
#define _PSTL_PRAGMA_SIMD_EXCLUSIVE_SCAN(PRM) _PSTL_PRAGMA(omp scan exclusive(PRM))







#define _PSTL_CPP17_EXECUTION_POLICIES_PRESENT (_MSC_VER >= 1912 && _MSVC_LANG >= 201703L) || (_GLIBCXX_RELEASE >= 9 && __GLIBCXX__ >= 20190503 && __cplusplus >= 201703L)





#define _PSTL_CPP14_2RANGE_MISMATCH_EQUAL_PRESENT 




#define _PSTL_CPP14_MAKE_REVERSE_ITERATOR_PRESENT 


#define _PSTL_CPP14_INTEGER_SEQUENCE_PRESENT 




#define _PSTL_CPP14_VARIABLE_TEMPLATES_PRESENT 
# 127 "/usr/include/c++/15.1.1/pstl/pstl_config.h" 3
#define _PSTL_UDR_PRESENT 




#define _PSTL_UDS_PRESENT 





#define _PSTL_PRAGMA_SIMD_EARLYEXIT 






#define _PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC(PRM) 
#define _PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC_2ARGS(PRM1,PRM2) 
# 156 "/usr/include/c++/15.1.1/pstl/pstl_config.h" 3
#define _PSTL_PRAGMA_DECLARE_REDUCTION(NAME,OP) _PSTL_PRAGMA(omp declare reduction(NAME:OP : omp_out(omp_in)) initializer(omp_priv = omp_orig))





#define _PSTL_PRAGMA_VECTOR_UNALIGNED 






#define _PSTL_USE_NONTEMPORAL_STORES_IF_ALLOWED 





#define _PSTL_PRAGMA_LOCATION " [Parallel STL message]: "


#define _PSTL_PRAGMA_MESSAGE_IMPL(x) _PSTL_PRAGMA(message(_PSTL_STRING_CONCAT(_PSTL_PRAGMA_LOCATION, x)))





#define _PSTL_PRAGMA_MESSAGE(x) 
#define _PSTL_PRAGMA_MESSAGE_POLICIES(x) 
# 950 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 2 3



#pragma GCC diagnostic pop






#define _GLIBCXX_HAVE_ACOSF 1


#define _GLIBCXX_HAVE_ACOSL 1


#define _GLIBCXX_HAVE_ALIGNED_ALLOC 1


#define _GLIBCXX_HAVE_ARC4RANDOM 1


#define _GLIBCXX_HAVE_ARPA_INET_H 1


#define _GLIBCXX_HAVE_ASINF 1


#define _GLIBCXX_HAVE_ASINL 1


#define _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE 1


#define _GLIBCXX_HAVE_ATAN2F 1


#define _GLIBCXX_HAVE_ATAN2L 1


#define _GLIBCXX_HAVE_ATANF 1


#define _GLIBCXX_HAVE_ATANL 1


#define _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY 1


#define _GLIBCXX_HAVE_AT_QUICK_EXIT 1



#define _GLIBCXX_HAVE_C99_FLT_EVAL_TYPES 1





#define _GLIBCXX_HAVE_CEILF 1


#define _GLIBCXX_HAVE_CEILL 1


#define _GLIBCXX_HAVE_COMPLEX_H 1


#define _GLIBCXX_HAVE_COSF 1


#define _GLIBCXX_HAVE_COSHF 1


#define _GLIBCXX_HAVE_COSHL 1


#define _GLIBCXX_HAVE_COSL 1



#define _GLIBCXX_HAVE_DECL_STRNLEN 1


#define _GLIBCXX_HAVE_DIRENT_H 1


#define _GLIBCXX_HAVE_DIRFD 1


#define _GLIBCXX_HAVE_DLFCN_H 1


#define _GLIBCXX_HAVE_ENDIAN_H 1


#define _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46 1


#define _GLIBCXX_HAVE_EXECINFO_H 1


#define _GLIBCXX_HAVE_EXPF 1


#define _GLIBCXX_HAVE_EXPL 1


#define _GLIBCXX_HAVE_FABSF 1


#define _GLIBCXX_HAVE_FABSL 1


#define _GLIBCXX_HAVE_FCNTL_H 1


#define _GLIBCXX_HAVE_FDOPENDIR 1


#define _GLIBCXX_HAVE_FENV_H 1


#define _GLIBCXX_HAVE_FINITE 1


#define _GLIBCXX_HAVE_FINITEF 1


#define _GLIBCXX_HAVE_FINITEL 1


#define _GLIBCXX_HAVE_FLOAT_H 1


#define _GLIBCXX_HAVE_FLOORF 1


#define _GLIBCXX_HAVE_FLOORL 1


#define _GLIBCXX_HAVE_FMODF 1


#define _GLIBCXX_HAVE_FMODL 1
# 1103 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_HAVE_FREXPF 1


#define _GLIBCXX_HAVE_FREXPL 1


#define _GLIBCXX_HAVE_GETENTROPY 1


#define _GLIBCXX_HAVE_GETIPINFO 1


#define _GLIBCXX_HAVE_GETS 1


#define _GLIBCXX_HAVE_HYPOT 1


#define _GLIBCXX_HAVE_HYPOTF 1


#define _GLIBCXX_HAVE_HYPOTL 1


#define _GLIBCXX_HAVE_ICONV 1





#define _GLIBCXX_HAVE_INTTYPES_H 1





#define _GLIBCXX_HAVE_ISINFF 1


#define _GLIBCXX_HAVE_ISINFL 1





#define _GLIBCXX_HAVE_ISNANF 1


#define _GLIBCXX_HAVE_ISNANL 1


#define _GLIBCXX_HAVE_ISWBLANK 1


#define _GLIBCXX_HAVE_LC_MESSAGES 1


#define _GLIBCXX_HAVE_LDEXPF 1


#define _GLIBCXX_HAVE_LDEXPL 1


#define _GLIBCXX_HAVE_LIBINTL_H 1


#define _GLIBCXX_HAVE_LIMIT_AS 1


#define _GLIBCXX_HAVE_LIMIT_DATA 1


#define _GLIBCXX_HAVE_LIMIT_FSIZE 1


#define _GLIBCXX_HAVE_LIMIT_RSS 1


#define _GLIBCXX_HAVE_LIMIT_VMEM 0


#define _GLIBCXX_HAVE_LINK 1


#define _GLIBCXX_HAVE_LINK_H 1


#define _GLIBCXX_HAVE_LINUX_FUTEX 1


#define _GLIBCXX_HAVE_LINUX_RANDOM_H 1


#define _GLIBCXX_HAVE_LINUX_TYPES_H 1


#define _GLIBCXX_HAVE_LOCALE_H 1


#define _GLIBCXX_HAVE_LOG10F 1


#define _GLIBCXX_HAVE_LOG10L 1


#define _GLIBCXX_HAVE_LOGF 1


#define _GLIBCXX_HAVE_LOGL 1


#define _GLIBCXX_HAVE_LSEEK 1
# 1223 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_HAVE_MBSTATE_T 1


#define _GLIBCXX_HAVE_MEMALIGN 1


#define _GLIBCXX_HAVE_MEMORY_H 1


#define _GLIBCXX_HAVE_MODF 1


#define _GLIBCXX_HAVE_MODFF 1


#define _GLIBCXX_HAVE_MODFL 1





#define _GLIBCXX_HAVE_NETDB_H 1


#define _GLIBCXX_HAVE_NETINET_IN_H 1


#define _GLIBCXX_HAVE_NETINET_TCP_H 1
# 1259 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_HAVE_OPENAT 1


#define _GLIBCXX_HAVE_O_NONBLOCK 1


#define _GLIBCXX_HAVE_POLL 1


#define _GLIBCXX_HAVE_POLL_H 1


#define _GLIBCXX_HAVE_POSIX_MEMALIGN 1



#define _GLIBCXX_HAVE_POSIX_SEMAPHORE 1


#define _GLIBCXX_HAVE_POWF 1


#define _GLIBCXX_HAVE_POWL 1





#define _GLIBCXX_HAVE_QUICK_EXIT 1


#define _GLIBCXX_HAVE_READLINK 1


#define _GLIBCXX_HAVE_SECURE_GETENV 1


#define _GLIBCXX_HAVE_SETENV 1


#define _GLIBCXX_HAVE_SINCOS 1


#define _GLIBCXX_HAVE_SINCOSF 1


#define _GLIBCXX_HAVE_SINCOSL 1


#define _GLIBCXX_HAVE_SINF 1


#define _GLIBCXX_HAVE_SINHF 1


#define _GLIBCXX_HAVE_SINHL 1


#define _GLIBCXX_HAVE_SINL 1





#define _GLIBCXX_HAVE_SOCKATMARK 1


#define _GLIBCXX_HAVE_SQRTF 1


#define _GLIBCXX_HAVE_SQRTL 1


#define _GLIBCXX_HAVE_STACKTRACE 1


#define _GLIBCXX_HAVE_STDALIGN_H 1


#define _GLIBCXX_HAVE_STDBOOL_H 1


#define _GLIBCXX_HAVE_STDINT_H 1


#define _GLIBCXX_HAVE_STDLIB_H 1


#define _GLIBCXX_HAVE_STRERROR_L 1


#define _GLIBCXX_HAVE_STRERROR_R 1


#define _GLIBCXX_HAVE_STRINGS_H 1


#define _GLIBCXX_HAVE_STRING_H 1


#define _GLIBCXX_HAVE_STRTOF 1


#define _GLIBCXX_HAVE_STRTOLD 1


#define _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE 1


#define _GLIBCXX_HAVE_STRXFRM_L 1


#define _GLIBCXX_HAVE_SYMLINK 1



#define _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT 1





#define _GLIBCXX_HAVE_SYS_IOCTL_H 1


#define _GLIBCXX_HAVE_SYS_IPC_H 1
# 1393 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_HAVE_SYS_MMAN_H 1


#define _GLIBCXX_HAVE_SYS_PARAM_H 1


#define _GLIBCXX_HAVE_SYS_RESOURCE_H 1


#define _GLIBCXX_HAVE_SYS_SDT_H 1


#define _GLIBCXX_HAVE_SYS_SEM_H 1


#define _GLIBCXX_HAVE_SYS_SOCKET_H 1


#define _GLIBCXX_HAVE_SYS_STATVFS_H 1


#define _GLIBCXX_HAVE_SYS_STAT_H 1


#define _GLIBCXX_HAVE_SYS_SYSINFO_H 1


#define _GLIBCXX_HAVE_SYS_TIME_H 1


#define _GLIBCXX_HAVE_SYS_TYPES_H 1


#define _GLIBCXX_HAVE_SYS_UIO_H 1





#define _GLIBCXX_HAVE_S_ISREG 1


#define _GLIBCXX_HAVE_TANF 1


#define _GLIBCXX_HAVE_TANHF 1


#define _GLIBCXX_HAVE_TANHL 1


#define _GLIBCXX_HAVE_TANL 1


#define _GLIBCXX_HAVE_TGMATH_H 1


#define _GLIBCXX_HAVE_TIMESPEC_GET 1





#define _GLIBCXX_HAVE_TLS 1


#define _GLIBCXX_HAVE_TRUNCATE 1


#define _GLIBCXX_HAVE_UCHAR_H 1


#define _GLIBCXX_HAVE_UNISTD_H 1


#define _GLIBCXX_HAVE_UNLINKAT 1


#define _GLIBCXX_HAVE_USELOCALE 1





#define _GLIBCXX_HAVE_UTIME_H 1


#define _GLIBCXX_HAVE_VFWSCANF 1


#define _GLIBCXX_HAVE_VSWSCANF 1


#define _GLIBCXX_HAVE_VWSCANF 1


#define _GLIBCXX_HAVE_WCHAR_H 1


#define _GLIBCXX_HAVE_WCSTOF 1


#define _GLIBCXX_HAVE_WCTYPE_H 1





#define _GLIBCXX_HAVE_WRITEV 1
# 1516 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL 1


#define _GLIBCXX_ICONV_CONST 



#define _GLIBCXX_LT_OBJDIR ".libs/"





#define _GLIBCXX_PACKAGE_BUGREPORT ""


#define _GLIBCXX_PACKAGE_NAME "package-unused"


#define _GLIBCXX_PACKAGE_STRING "package-unused version-unused"


#define _GLIBCXX_PACKAGE_TARNAME "libstdc++"


#define _GLIBCXX_PACKAGE_URL ""


#define _GLIBCXX_PACKAGE__GLIBCXX_VERSION "version-unused"


#define _GLIBCXX_STDC_HEADERS 1






#define _GLIBCXX_DARWIN_USE_64_BIT_INODE 1
# 1563 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX11_USE_C99_COMPLEX 1



#define _GLIBCXX11_USE_C99_MATH 1



#define _GLIBCXX11_USE_C99_STDIO 1



#define _GLIBCXX11_USE_C99_STDLIB 1



#define _GLIBCXX11_USE_C99_WCHAR 1




#define _GLIBCXX98_USE_C99_COMPLEX 1



#define _GLIBCXX98_USE_C99_MATH 1



#define _GLIBCXX98_USE_C99_STDIO 1



#define _GLIBCXX98_USE_C99_STDLIB 1



#define _GLIBCXX98_USE_C99_WCHAR 1


#define _GLIBCXX_ATOMIC_BUILTINS 1



#define _GLIBCXX_CAN_ALIGNAS_DESTRUCTIVE_SIZE 1






#define _GLIBCXX_FULLY_DYNAMIC_STRING 0


#define _GLIBCXX_HAS_GTHREADS 1


#define _GLIBCXX_HOSTED __STDC_HOSTED__







#define _GLIBCXX_MANGLE_SIZE_T m
# 1640 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_RES_LIMITS 1





#define _GLIBCXX_STATIC_TZDATA 1


#define _GLIBCXX_STDIO_EOF -1


#define _GLIBCXX_STDIO_SEEK_CUR 1


#define _GLIBCXX_STDIO_SEEK_END 2


#define _GLIBCXX_SYMVER 1





#define _GLIBCXX_SYMVER_GNU 1
# 1674 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_USE_C11_UCHAR_CXX11 1



#define _GLIBCXX_USE_C99 1




#define _GLIBCXX_USE_C99_COMPLEX_ARC 1




#define _GLIBCXX_USE_C99_COMPLEX_TR1 1



#define _GLIBCXX_USE_C99_CTYPE 1



#define _GLIBCXX_USE_C99_CTYPE_TR1 1



#define _GLIBCXX_USE_C99_FENV 1



#define _GLIBCXX_USE_C99_FENV_TR1 1



#define _GLIBCXX_USE_C99_INTTYPES 1



#define _GLIBCXX_USE_C99_INTTYPES_TR1 1



#define _GLIBCXX_USE_C99_INTTYPES_WCHAR_T 1



#define _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1 1



#define _GLIBCXX_USE_C99_MATH_FUNCS 1



#define _GLIBCXX_USE_C99_MATH_TR1 1



#define _GLIBCXX_USE_C99_STDINT 1



#define _GLIBCXX_USE_C99_STDINT_TR1 1


#define _GLIBCXX_USE_CHDIR 1


#define _GLIBCXX_USE_CHMOD 1






#define _GLIBCXX_USE_CLOCK_MONOTONIC 1


#define _GLIBCXX_USE_CLOCK_REALTIME 1






#define _GLIBCXX_USE_DECIMAL_FLOAT 1



#define _GLIBCXX_USE_DEV_RANDOM 1


#define _GLIBCXX_USE_FCHMOD 1


#define _GLIBCXX_USE_FCHMODAT 1


#define _GLIBCXX_USE_FSEEKO_FTELLO 1


#define _GLIBCXX_USE_GETCWD 1


#define _GLIBCXX_USE_GETTIMEOFDAY 1


#define _GLIBCXX_USE_GET_NPROCS 1


#define _GLIBCXX_USE_INIT_PRIORITY_ATTRIBUTE 1


#define _GLIBCXX_USE_LFS 1


#define _GLIBCXX_USE_LONG_LONG 1


#define _GLIBCXX_USE_LSTAT 1


#define _GLIBCXX_USE_MKDIR 1


#define _GLIBCXX_USE_NANOSLEEP 1


#define _GLIBCXX_USE_NLS 1


#define _GLIBCXX_USE_NL_LANGINFO_L 1





#define _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT 1


#define _GLIBCXX_USE_PTHREAD_MUTEX_CLOCKLOCK (_GLIBCXX_TSAN==0)



#define _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK 1


#define _GLIBCXX_USE_PTHREAD_RWLOCK_T 1



#define _GLIBCXX_USE_RANDOM_TR1 1


#define _GLIBCXX_USE_REALPATH 1


#define _GLIBCXX_USE_SCHED_YIELD 1


#define _GLIBCXX_USE_SC_NPROCESSORS_ONLN 1





#define _GLIBCXX_USE_SENDFILE 1





#define _GLIBCXX_USE_STRUCT_TM_TM_ZONE 1


#define _GLIBCXX_USE_ST_MTIM 1





#define _GLIBCXX_USE_TMPNAM 1



#define _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20 1



#define _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T 1


#define _GLIBCXX_USE_UTIME 1



#define _GLIBCXX_USE_UTIMENSAT 1


#define _GLIBCXX_USE_WCHAR_T 1
# 1882 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++config.h" 3
#define _GLIBCXX_VERBOSE 1


#define _GLIBCXX_X86_RDRAND 1


#define _GLIBCXX_X86_RDSEED 1


#define _GLIBCXX_ZONEINFO_DIR "/usr/share/zoneinfo"


#define _GTHREAD_USE_MUTEX_TIMEDLOCK 1
# 32 "/usr/include/c++/15.1.1/bits/requires_hosted.h" 2 3
# 63 "/usr/include/c++/15.1.1/vector" 2 3

# 1 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 1 3
# 57 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
#define _STL_ALGOBASE_H 1


# 1 "/usr/include/c++/15.1.1/bits/functexcept.h" 1 3
# 37 "/usr/include/c++/15.1.1/bits/functexcept.h" 3
#define _FUNCTEXCEPT_H 1


# 1 "/usr/include/c++/15.1.1/bits/exception_defines.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/exception_defines.h" 3
#define _EXCEPTION_DEFINES_H 1
# 40 "/usr/include/c++/15.1.1/bits/exception_defines.h" 3
#define __try try
#define __catch(X) catch(X)
#define __throw_exception_again throw
# 41 "/usr/include/c++/15.1.1/bits/functexcept.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));

  void
  __throw_bad_array_new_length(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__,__cold__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__,__cold__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__,__cold__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__,__cold__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__,__cold__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__,__cold__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__,__cold__));

  void
  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__,__cold__))
    __attribute__((__format__(__gnu_printf__, 1, 2)));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__,__cold__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__,__cold__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__,__cold__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__,__cold__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__,__cold__));

  void
  __throw_ios_failure(const char*, int) __attribute__((__noreturn__,__cold__));


  void
  __throw_system_error(int) __attribute__((__noreturn__,__cold__));


  void
  __throw_future_error(int) __attribute__((__noreturn__,__cold__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__,__cold__));
# 140 "/usr/include/c++/15.1.1/bits/functexcept.h" 3

}
# 61 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/15.1.1/bits/cpp_type_traits.h" 1 3
# 33 "/usr/include/c++/15.1.1/bits/cpp_type_traits.h" 3
#define _CPP_TYPE_TRAITS_H 1






# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 55 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_incomplete_container_elements 201505L





#undef __glibcxx_want_incomplete_container_elements



#define __glibcxx_uncaught_exceptions 201411L





#undef __glibcxx_want_uncaught_exceptions



#define __glibcxx_allocator_traits_is_always_equal 201411L





#undef __glibcxx_want_allocator_traits_is_always_equal



#define __glibcxx_is_null_pointer 201309L





#undef __glibcxx_want_is_null_pointer



#define __glibcxx_result_of_sfinae 201210L





#undef __glibcxx_want_result_of_sfinae
# 110 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_shared_ptr_arrays 201611L





#undef __glibcxx_want_shared_ptr_arrays



#define __glibcxx_is_swappable 201603L





#undef __glibcxx_want_is_swappable



#define __glibcxx_void_t 201411L





#undef __glibcxx_want_void_t



#define __glibcxx_enable_shared_from_this 201603L





#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine



#define __glibcxx_exchange_function 201304L





#undef __glibcxx_want_exchange_function



#define __glibcxx_integer_sequence 201304L





#undef __glibcxx_want_integer_sequence



#define __glibcxx_integral_constant_callable 201304L





#undef __glibcxx_want_integral_constant_callable



#define __glibcxx_is_final 201402L





#undef __glibcxx_want_is_final



#define __glibcxx_make_reverse_iterator 201402L





#undef __glibcxx_want_make_reverse_iterator



#define __glibcxx_null_iterators 201304L





#undef __glibcxx_want_null_iterators



#define __glibcxx_transformation_trait_aliases 201304L





#undef __glibcxx_want_transformation_trait_aliases



#define __glibcxx_transparent_operators 201510L





#undef __glibcxx_want_transparent_operators



#define __glibcxx_tuple_element_t 201402L





#undef __glibcxx_want_tuple_element_t



#define __glibcxx_tuples_by_type 201304L





#undef __glibcxx_want_tuples_by_type



#define __glibcxx_robust_nonmodifying_seq_ops 201304L





#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 285 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_to_chars 201611L





#undef __glibcxx_want_to_chars



#define __glibcxx_chrono_udls 201304L





#undef __glibcxx_want_chrono_udls



#define __glibcxx_complex_udls 201309L





#undef __glibcxx_want_complex_udls



#define __glibcxx_generic_associative_lookup 201304L





#undef __glibcxx_want_generic_associative_lookup



#define __glibcxx_make_unique 201304L





#undef __glibcxx_want_make_unique



#define __glibcxx_quoted_string_io 201304L





#undef __glibcxx_want_quoted_string_io



#define __glibcxx_shared_timed_mutex 201402L





#undef __glibcxx_want_shared_timed_mutex



#define __glibcxx_string_udls 201304L





#undef __glibcxx_want_string_udls



#define __glibcxx_addressof_constexpr 201603L





#undef __glibcxx_want_addressof_constexpr



#define __glibcxx_any 201606L





#undef __glibcxx_want_any



#define __glibcxx_apply 201603L





#undef __glibcxx_want_apply



#define __glibcxx_as_const 201510L





#undef __glibcxx_want_as_const



#define __glibcxx_atomic_is_always_lock_free 201603L





#undef __glibcxx_want_atomic_is_always_lock_free



#define __glibcxx_bool_constant 201505L





#undef __glibcxx_want_bool_constant



#define __glibcxx_byte 201603L





#undef __glibcxx_want_byte



#define __glibcxx_has_unique_object_representations 201606L





#undef __glibcxx_want_has_unique_object_representations



#define __glibcxx_hardware_interference_size 201703L





#undef __glibcxx_want_hardware_interference_size



#define __glibcxx_invoke 201411L





#undef __glibcxx_want_invoke



#define __glibcxx_is_aggregate 201703L





#undef __glibcxx_want_is_aggregate



#define __glibcxx_is_invocable 201703L





#undef __glibcxx_want_is_invocable



#define __glibcxx_launder 201606L





#undef __glibcxx_want_launder



#define __glibcxx_logical_traits 201510L





#undef __glibcxx_want_logical_traits



#define __glibcxx_make_from_tuple 201606L





#undef __glibcxx_want_make_from_tuple



#define __glibcxx_not_fn 201603L





#undef __glibcxx_want_not_fn



#define __glibcxx_type_trait_variable_templates 201510L





#undef __glibcxx_want_type_trait_variable_templates
# 545 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_variant 202102L





#undef __glibcxx_want_variant



#define __glibcxx_lcm 201606L





#undef __glibcxx_want_lcm



#define __glibcxx_gcd 201606L





#undef __glibcxx_want_gcd



#define __glibcxx_gcd_lcm 201606L





#undef __glibcxx_want_gcd_lcm
# 590 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_raw_memory_algorithms 201606L





#undef __glibcxx_want_raw_memory_algorithms
# 605 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_array_constexpr 201803L





#undef __glibcxx_want_array_constexpr



#define __glibcxx_nonmember_container_access 201411L





#undef __glibcxx_want_nonmember_container_access



#define __glibcxx_clamp 201603L





#undef __glibcxx_want_clamp



#define __glibcxx_sample 201603L





#undef __glibcxx_want_sample



#define __glibcxx_boyer_moore_searcher 201603L





#undef __glibcxx_want_boyer_moore_searcher
# 660 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_chrono 201611L





#undef __glibcxx_want_chrono



#define __glibcxx_execution 201902L





#undef __glibcxx_want_execution



#define __glibcxx_filesystem 201703L





#undef __glibcxx_want_filesystem



#define __glibcxx_hypot 201603L





#undef __glibcxx_want_hypot



#define __glibcxx_map_try_emplace 201411L





#undef __glibcxx_want_map_try_emplace



#define __glibcxx_math_special_functions 201603L





#undef __glibcxx_want_math_special_functions



#define __glibcxx_memory_resource 201603L
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource



#define __glibcxx_node_extract 201606L





#undef __glibcxx_want_node_extract



#define __glibcxx_parallel_algorithm 201603L





#undef __glibcxx_want_parallel_algorithm



#define __glibcxx_scoped_lock 201703L





#undef __glibcxx_want_scoped_lock



#define __glibcxx_shared_mutex 201505L





#undef __glibcxx_want_shared_mutex



#define __glibcxx_shared_ptr_weak_type 201606L





#undef __glibcxx_want_shared_ptr_weak_type
# 790 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_string_view 201803L





#undef __glibcxx_want_string_view



#define __glibcxx_unordered_map_try_emplace 201411L





#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 950 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_optional 201606L





#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1025 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_char_traits 201611L





#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1390 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_string 201611L





#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 41 "/usr/include/c++/15.1.1/bits/cpp_type_traits.h" 2 3

# 1 "/usr/include/c++/15.1.1/type_traits" 1 3
# 30 "/usr/include/c++/15.1.1/type_traits" 3
#define _GLIBCXX_TYPE_TRAITS 1
# 42 "/usr/include/c++/15.1.1/type_traits" 3
#define __glibcxx_want_bool_constant 
#define __glibcxx_want_bounded_array_traits 
#define __glibcxx_want_has_unique_object_representations 
#define __glibcxx_want_integral_constant_callable 
#define __glibcxx_want_is_aggregate 
#define __glibcxx_want_is_constant_evaluated 
#define __glibcxx_want_is_final 
#define __glibcxx_want_is_invocable 
#define __glibcxx_want_is_layout_compatible 
#define __glibcxx_want_is_nothrow_convertible 
#define __glibcxx_want_is_null_pointer 
#define __glibcxx_want_is_pointer_interconvertible 
#define __glibcxx_want_is_scoped_enum 
#define __glibcxx_want_is_swappable 
#define __glibcxx_want_is_virtual_base_of 
#define __glibcxx_want_logical_traits 
#define __glibcxx_want_reference_from_temporary 
#define __glibcxx_want_remove_cvref 
#define __glibcxx_want_result_of_sfinae 
#define __glibcxx_want_transformation_trait_aliases 
#define __glibcxx_want_type_identity 
#define __glibcxx_want_type_trait_variable_templates 
#define __glibcxx_want_unwrap_ref 
#define __glibcxx_want_void_t 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 55 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_incomplete_container_elements 201505L





#undef __glibcxx_want_incomplete_container_elements



#define __glibcxx_uncaught_exceptions 201411L





#undef __glibcxx_want_uncaught_exceptions



#define __glibcxx_allocator_traits_is_always_equal 201411L





#undef __glibcxx_want_allocator_traits_is_always_equal



#define __glibcxx_is_null_pointer 201309L

#define __cpp_lib_is_null_pointer 201309L



#undef __glibcxx_want_is_null_pointer



#define __glibcxx_result_of_sfinae 201210L

#define __cpp_lib_result_of_sfinae 201210L



#undef __glibcxx_want_result_of_sfinae
# 110 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_shared_ptr_arrays 201611L





#undef __glibcxx_want_shared_ptr_arrays



#define __glibcxx_is_swappable 201603L

#define __cpp_lib_is_swappable 201603L



#undef __glibcxx_want_is_swappable



#define __glibcxx_void_t 201411L

#define __cpp_lib_void_t 201411L



#undef __glibcxx_want_void_t



#define __glibcxx_enable_shared_from_this 201603L





#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine



#define __glibcxx_exchange_function 201304L





#undef __glibcxx_want_exchange_function



#define __glibcxx_integer_sequence 201304L





#undef __glibcxx_want_integer_sequence



#define __glibcxx_integral_constant_callable 201304L

#define __cpp_lib_integral_constant_callable 201304L



#undef __glibcxx_want_integral_constant_callable



#define __glibcxx_is_final 201402L

#define __cpp_lib_is_final 201402L



#undef __glibcxx_want_is_final



#define __glibcxx_make_reverse_iterator 201402L





#undef __glibcxx_want_make_reverse_iterator



#define __glibcxx_null_iterators 201304L





#undef __glibcxx_want_null_iterators



#define __glibcxx_transformation_trait_aliases 201304L

#define __cpp_lib_transformation_trait_aliases 201304L



#undef __glibcxx_want_transformation_trait_aliases



#define __glibcxx_transparent_operators 201510L





#undef __glibcxx_want_transparent_operators



#define __glibcxx_tuple_element_t 201402L





#undef __glibcxx_want_tuple_element_t



#define __glibcxx_tuples_by_type 201304L





#undef __glibcxx_want_tuples_by_type



#define __glibcxx_robust_nonmodifying_seq_ops 201304L





#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 285 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_to_chars 201611L





#undef __glibcxx_want_to_chars



#define __glibcxx_chrono_udls 201304L





#undef __glibcxx_want_chrono_udls



#define __glibcxx_complex_udls 201309L





#undef __glibcxx_want_complex_udls



#define __glibcxx_generic_associative_lookup 201304L





#undef __glibcxx_want_generic_associative_lookup



#define __glibcxx_make_unique 201304L





#undef __glibcxx_want_make_unique



#define __glibcxx_quoted_string_io 201304L





#undef __glibcxx_want_quoted_string_io



#define __glibcxx_shared_timed_mutex 201402L





#undef __glibcxx_want_shared_timed_mutex



#define __glibcxx_string_udls 201304L





#undef __glibcxx_want_string_udls



#define __glibcxx_addressof_constexpr 201603L





#undef __glibcxx_want_addressof_constexpr



#define __glibcxx_any 201606L





#undef __glibcxx_want_any



#define __glibcxx_apply 201603L





#undef __glibcxx_want_apply



#define __glibcxx_as_const 201510L





#undef __glibcxx_want_as_const



#define __glibcxx_atomic_is_always_lock_free 201603L





#undef __glibcxx_want_atomic_is_always_lock_free



#define __glibcxx_bool_constant 201505L

#define __cpp_lib_bool_constant 201505L



#undef __glibcxx_want_bool_constant



#define __glibcxx_byte 201603L





#undef __glibcxx_want_byte



#define __glibcxx_has_unique_object_representations 201606L

#define __cpp_lib_has_unique_object_representations 201606L



#undef __glibcxx_want_has_unique_object_representations



#define __glibcxx_hardware_interference_size 201703L





#undef __glibcxx_want_hardware_interference_size



#define __glibcxx_invoke 201411L





#undef __glibcxx_want_invoke



#define __glibcxx_is_aggregate 201703L

#define __cpp_lib_is_aggregate 201703L



#undef __glibcxx_want_is_aggregate



#define __glibcxx_is_invocable 201703L

#define __cpp_lib_is_invocable 201703L



#undef __glibcxx_want_is_invocable



#define __glibcxx_launder 201606L





#undef __glibcxx_want_launder



#define __glibcxx_logical_traits 201510L

#define __cpp_lib_logical_traits 201510L



#undef __glibcxx_want_logical_traits



#define __glibcxx_make_from_tuple 201606L





#undef __glibcxx_want_make_from_tuple



#define __glibcxx_not_fn 201603L





#undef __glibcxx_want_not_fn



#define __glibcxx_type_trait_variable_templates 201510L

#define __cpp_lib_type_trait_variable_templates 201510L



#undef __glibcxx_want_type_trait_variable_templates
# 545 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_variant 202102L





#undef __glibcxx_want_variant



#define __glibcxx_lcm 201606L





#undef __glibcxx_want_lcm



#define __glibcxx_gcd 201606L





#undef __glibcxx_want_gcd



#define __glibcxx_gcd_lcm 201606L





#undef __glibcxx_want_gcd_lcm
# 590 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_raw_memory_algorithms 201606L





#undef __glibcxx_want_raw_memory_algorithms
# 605 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_array_constexpr 201803L





#undef __glibcxx_want_array_constexpr



#define __glibcxx_nonmember_container_access 201411L





#undef __glibcxx_want_nonmember_container_access



#define __glibcxx_clamp 201603L





#undef __glibcxx_want_clamp



#define __glibcxx_sample 201603L





#undef __glibcxx_want_sample



#define __glibcxx_boyer_moore_searcher 201603L





#undef __glibcxx_want_boyer_moore_searcher
# 660 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_chrono 201611L





#undef __glibcxx_want_chrono



#define __glibcxx_execution 201902L





#undef __glibcxx_want_execution



#define __glibcxx_filesystem 201703L





#undef __glibcxx_want_filesystem



#define __glibcxx_hypot 201603L





#undef __glibcxx_want_hypot



#define __glibcxx_map_try_emplace 201411L





#undef __glibcxx_want_map_try_emplace



#define __glibcxx_math_special_functions 201603L





#undef __glibcxx_want_math_special_functions



#define __glibcxx_memory_resource 201603L
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource



#define __glibcxx_node_extract 201606L





#undef __glibcxx_want_node_extract



#define __glibcxx_parallel_algorithm 201603L





#undef __glibcxx_want_parallel_algorithm



#define __glibcxx_scoped_lock 201703L





#undef __glibcxx_want_scoped_lock



#define __glibcxx_shared_mutex 201505L





#undef __glibcxx_want_shared_mutex



#define __glibcxx_shared_ptr_weak_type 201606L





#undef __glibcxx_want_shared_ptr_weak_type
# 790 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_string_view 201803L





#undef __glibcxx_want_string_view



#define __glibcxx_unordered_map_try_emplace 201411L





#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 950 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_optional 201606L





#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1025 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_char_traits 201611L





#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1390 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_string 201611L





#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 67 "/usr/include/c++/15.1.1/type_traits" 2 3

extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp>
    class reference_wrapper;
# 91 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      using value_type = _Tp;
      using type = integral_constant<_Tp, __v>;
      constexpr operator value_type() const noexcept { return value; }


      constexpr value_type operator()() const noexcept { return value; }

    };
# 111 "/usr/include/c++/15.1.1/type_traits" 3
  template<bool __v>
    using __bool_constant = integral_constant<bool, __v>;



  using true_type = __bool_constant<true>;


  using false_type = __bool_constant<false>;




  template<bool __v>
    using bool_constant = __bool_constant<__v>;






  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { using type = _Tp; };


  template<bool _Cond, typename _Tp = void>
    using __enable_if_t = typename enable_if<_Cond, _Tp>::type;

  template<bool>
    struct __conditional
    {
      template<typename _Tp, typename>
 using type = _Tp;
    };

  template<>
    struct __conditional<false>
    {
      template<typename, typename _Up>
 using type = _Up;
    };


  template<bool _Cond, typename _If, typename _Else>
    using __conditional_t
      = typename __conditional<_Cond>::template type<_If, _Else>;


  template <typename _Type>
    struct __type_identity
    { using type = _Type; };

  template<typename _Tp>
    using __type_identity_t = typename __type_identity<_Tp>::type;

  namespace __detail
  {

    template<typename _Tp, typename...>
      using __first_t = _Tp;


    template<typename... _Bn>
      auto __or_fn(int) -> __first_t<false_type,
         __enable_if_t<!bool(_Bn::value)>...>;

    template<typename... _Bn>
      auto __or_fn(...) -> true_type;

    template<typename... _Bn>
      auto __and_fn(int) -> __first_t<true_type,
          __enable_if_t<bool(_Bn::value)>...>;

    template<typename... _Bn>
      auto __and_fn(...) -> false_type;
  }




  template<typename... _Bn>
    struct __or_
    : decltype(__detail::__or_fn<_Bn...>(0))
    { };

  template<typename... _Bn>
    struct __and_
    : decltype(__detail::__and_fn<_Bn...>(0))
    { };

  template<typename _Pp>
    struct __not_
    : __bool_constant<!bool(_Pp::value)>
    { };





  template<typename... _Bn>
    inline constexpr bool __or_v = __or_<_Bn...>::value;
  template<typename... _Bn>
    inline constexpr bool __and_v = __and_<_Bn...>::value;

  namespace __detail
  {
    template<typename , typename _B1, typename... _Bn>
      struct __disjunction_impl
      { using type = _B1; };

    template<typename _B1, typename _B2, typename... _Bn>
      struct __disjunction_impl<__enable_if_t<!bool(_B1::value)>, _B1, _B2, _Bn...>
      { using type = typename __disjunction_impl<void, _B2, _Bn...>::type; };

    template<typename , typename _B1, typename... _Bn>
      struct __conjunction_impl
      { using type = _B1; };

    template<typename _B1, typename _B2, typename... _Bn>
      struct __conjunction_impl<__enable_if_t<bool(_B1::value)>, _B1, _B2, _Bn...>
      { using type = typename __conjunction_impl<void, _B2, _Bn...>::type; };
  }


  template<typename... _Bn>
    struct conjunction
    : __detail::__conjunction_impl<void, _Bn...>::type
    { };

  template<>
    struct conjunction<>
    : true_type
    { };

  template<typename... _Bn>
    struct disjunction
    : __detail::__disjunction_impl<void, _Bn...>::type
    { };

  template<>
    struct disjunction<>
    : false_type
    { };

  template<typename _Pp>
    struct negation
    : __not_<_Pp>::type
    { };




  template<typename... _Bn>
    inline constexpr bool conjunction_v = conjunction<_Bn...>::value;

  template<typename... _Bn>
    inline constexpr bool disjunction_v = disjunction<_Bn...>::value;

  template<typename _Pp>
    inline constexpr bool negation_v = negation<_Pp>::value;





  template<typename>
    struct is_reference;
  template<typename>
    struct is_function;
  template<typename>
    struct is_void;
  template<typename>
    struct remove_cv;
  template<typename>
    struct is_const;


  template<typename>
    struct __is_array_unknown_bounds;




  template <typename _Tp, size_t = sizeof(_Tp)>
    constexpr true_type __is_complete_or_unbounded(__type_identity<_Tp>)
    { return {}; }

  template <typename _TypeIdentity,
      typename _NestedType = typename _TypeIdentity::type>
    constexpr typename __or_<
      is_reference<_NestedType>,
      is_function<_NestedType>,
      is_void<_NestedType>,
      __is_array_unknown_bounds<_NestedType>
    >::type __is_complete_or_unbounded(_TypeIdentity)
    { return {}; }


  template<typename _Tp>
    using __remove_cv_t = typename remove_cv<_Tp>::type;





  template<typename _Tp>
    struct is_void
    : public false_type { };

  template<>
    struct is_void<void>
    : public true_type { };

  template<>
    struct is_void<const void>
    : public true_type { };

  template<>
    struct is_void<volatile void>
    : public true_type { };

  template<>
    struct is_void<const volatile void>
    : public true_type { };


  template<typename>
    struct __is_integral_helper
    : public false_type { };

  template<>
    struct __is_integral_helper<bool>
    : public true_type { };

  template<>
    struct __is_integral_helper<char>
    : public true_type { };

  template<>
    struct __is_integral_helper<signed char>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned char>
    : public true_type { };




  template<>
    struct __is_integral_helper<wchar_t>
    : public true_type { };







  template<>
    struct __is_integral_helper<char16_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<char32_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<short>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned short>
    : public true_type { };

  template<>
    struct __is_integral_helper<int>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned int>
    : public true_type { };

  template<>
    struct __is_integral_helper<long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long>
    : public true_type { };

  template<>
    struct __is_integral_helper<long long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long long>
    : public true_type { };




  __extension__
  template<>
    struct __is_integral_helper<__int128>
    : public true_type { };

  __extension__
  template<>
    struct __is_integral_helper<unsigned __int128>
    : public true_type { };
# 465 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Tp>
    struct is_integral
    : public __is_integral_helper<__remove_cv_t<_Tp>>::type
    { };


  template<typename>
    struct __is_floating_point_helper
    : public false_type { };

  template<>
    struct __is_floating_point_helper<float>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<double>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<long double>
    : public true_type { };
# 518 "/usr/include/c++/15.1.1/type_traits" 3
  template<>
    struct __is_floating_point_helper<__float128>
    : public true_type { };




  template<typename _Tp>
    struct is_floating_point
    : public __is_floating_point_helper<__remove_cv_t<_Tp>>::type
    { };



  template<typename _Tp>
    struct is_array
    : public __bool_constant<__is_array(_Tp)>
    { };
# 552 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Tp>
    struct is_pointer
    : public __bool_constant<__is_pointer(_Tp)>
    { };
# 579 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };



  template<typename _Tp>
    struct is_member_object_pointer
    : public __bool_constant<__is_member_object_pointer(_Tp)>
    { };
# 620 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Tp>
    struct is_member_function_pointer
    : public __bool_constant<__is_member_function_pointer(_Tp)>
    { };
# 641 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Tp>
    struct is_enum
    : public __bool_constant<__is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public __bool_constant<__is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public __bool_constant<__is_class(_Tp)>
    { };



  template<typename _Tp>
    struct is_function
    : public __bool_constant<__is_function(_Tp)>
    { };
# 680 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Tp>
    struct is_null_pointer
    : public false_type { };

  template<>
    struct is_null_pointer<std::nullptr_t>
    : public true_type { };

  template<>
    struct is_null_pointer<const std::nullptr_t>
    : public true_type { };

  template<>
    struct is_null_pointer<volatile std::nullptr_t>
    : public true_type { };

  template<>
    struct is_null_pointer<const volatile std::nullptr_t>
    : public true_type { };



  template<typename _Tp>
    struct __is_nullptr_t
    : public is_null_pointer<_Tp>
    { } __attribute__ ((__deprecated__ ("use '" "std::is_null_pointer" "' instead")));






  template<typename _Tp>
    struct is_reference
    : public __bool_constant<__is_reference(_Tp)>
    { };
# 734 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Tp>
    struct is_arithmetic
    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_fundamental
    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,
     is_null_pointer<_Tp>>::type
    { };



  template<typename _Tp>
    struct is_object
    : public __bool_constant<__is_object(_Tp)>
    { };
# 760 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,
                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_compound
    : public __bool_constant<!is_fundamental<_Tp>::value> { };



  template<typename _Tp>
    struct is_member_pointer
    : public __bool_constant<__is_member_pointer(_Tp)>
    { };
# 798 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename, typename>
    struct is_same;


  template<typename _Tp, typename... _Types>
    using __is_one_of = __or_<is_same<_Tp, _Types>...>;


  __extension__
  template<typename _Tp>
    using __is_signed_integer = __is_one_of<__remove_cv_t<_Tp>,
   signed char, signed short, signed int, signed long,
   signed long long

   , signed __int128
# 823 "/usr/include/c++/15.1.1/type_traits" 3
   >;


  __extension__
  template<typename _Tp>
    using __is_unsigned_integer = __is_one_of<__remove_cv_t<_Tp>,
   unsigned char, unsigned short, unsigned int, unsigned long,
   unsigned long long

   , unsigned __int128
# 843 "/usr/include/c++/15.1.1/type_traits" 3
   >;


  template<typename _Tp>
    using __is_standard_integer
      = __or_<__is_signed_integer<_Tp>, __is_unsigned_integer<_Tp>>;


  template<typename...> using __void_t = void;






  template<typename _Tp>
    struct is_const
    : public __bool_constant<__is_const(_Tp)>
    { };
# 874 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Tp>
    struct is_volatile
    : public __bool_constant<__is_volatile(_Tp)>
    { };
# 895 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Tp>
    struct
   
    is_trivial
    : public __bool_constant<__is_trivial(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_copyable
    : public __bool_constant<__is_trivially_copyable(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_standard_layout
    : public __bool_constant<__is_standard_layout(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };






  template<typename _Tp>
    struct
   
    is_pod
    : public __bool_constant<__is_pod(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };





  template<typename _Tp>
    struct
    [[__deprecated__]]
    is_literal_type
    : public __bool_constant<__is_literal_type(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_empty
    : public __bool_constant<__is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public __bool_constant<__is_polymorphic(_Tp)>
    { };




  template<typename _Tp>
    struct is_final
    : public __bool_constant<__is_final(_Tp)>
    { };



  template<typename _Tp>
    struct is_abstract
    : public __bool_constant<__is_abstract(_Tp)>
    { };


  template<typename _Tp,
    bool = is_arithmetic<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true>
    : public __bool_constant<_Tp(-1) < _Tp(0)>
    { };



  template<typename _Tp>
    struct is_signed
    : public __is_signed_helper<_Tp>::type
    { };


  template<typename _Tp>
    struct is_unsigned
    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>::type
    { };


  template<typename _Tp, typename _Up = _Tp&&>
    _Up
    __declval(int);

  template<typename _Tp>
    _Tp
    __declval(long);


  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0));

  template<typename>
    struct remove_all_extents;


  template<typename _Tp>
    struct __is_array_known_bounds
    : public false_type
    { };

  template<typename _Tp, size_t _Size>
    struct __is_array_known_bounds<_Tp[_Size]>
    : public true_type
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds
    : public false_type
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds<_Tp[]>
    : public true_type
    { };
# 1047 "/usr/include/c++/15.1.1/type_traits" 3
  struct __do_is_destructible_impl
  {
    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_destructible_impl
    : public __do_is_destructible_impl
    {
      using type = decltype(__test<_Tp>(0));
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_destructible_safe;

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, false>
    : public __is_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, true>
    : public true_type { };



  template<typename _Tp>
    struct is_destructible
    : public __is_destructible_safe<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };







  struct __do_is_nt_destructible_impl
  {
    template<typename _Tp>
      static __bool_constant<noexcept(declval<_Tp&>().~_Tp())>
      __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_nt_destructible_impl
    : public __do_is_nt_destructible_impl
    {
      using type = decltype(__test<_Tp>(0));
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_nt_destructible_safe;

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, false>
    : public __is_nt_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, true>
    : public true_type { };



  template<typename _Tp>
    struct is_nothrow_destructible
    : public __is_nt_destructible_safe<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename... _Args>
    using __is_constructible_impl
      = __bool_constant<__is_constructible(_Tp, _Args...)>;



  template<typename _Tp, typename... _Args>
    struct is_constructible
      : public __is_constructible_impl<_Tp, _Args...>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_default_constructible
    : public __is_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    using __add_lval_ref_t = __add_lvalue_reference(_Tp);
# 1191 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Tp>
    struct is_copy_constructible
    : public __is_constructible_impl<_Tp, __add_lval_ref_t<const _Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    using __add_rval_ref_t = __add_rvalue_reference(_Tp);
# 1218 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Tp>
    struct is_move_constructible
    : public __is_constructible_impl<_Tp, __add_rval_ref_t<_Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename... _Args>
    using __is_nothrow_constructible_impl
      = __bool_constant<__is_nothrow_constructible(_Tp, _Args...)>;



  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public __is_nothrow_constructible_impl<_Tp, _Args...>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_nothrow_default_constructible
    : public __is_nothrow_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_nothrow_copy_constructible
    : public __is_nothrow_constructible_impl<_Tp, __add_lval_ref_t<const _Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_nothrow_move_constructible
    : public __is_nothrow_constructible_impl<_Tp, __add_rval_ref_t<_Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename _Up>
    using __is_assignable_impl = __bool_constant<__is_assignable(_Tp, _Up)>;



  template<typename _Tp, typename _Up>
    struct is_assignable
    : public __is_assignable_impl<_Tp, _Up>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_copy_assignable
    : public __is_assignable_impl<__add_lval_ref_t<_Tp>,
      __add_lval_ref_t<const _Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_move_assignable
    : public __is_assignable_impl<__add_lval_ref_t<_Tp>, __add_rval_ref_t<_Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename _Up>
    using __is_nothrow_assignable_impl
      = __bool_constant<__is_nothrow_assignable(_Tp, _Up)>;



  template<typename _Tp, typename _Up>
    struct is_nothrow_assignable
    : public __is_nothrow_assignable_impl<_Tp, _Up>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_nothrow_copy_assignable
    : public __is_nothrow_assignable_impl<__add_lval_ref_t<_Tp>,
       __add_lval_ref_t<const _Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_nothrow_move_assignable
    : public __is_nothrow_assignable_impl<__add_lval_ref_t<_Tp>,
       __add_rval_ref_t<_Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename... _Args>
    using __is_trivially_constructible_impl
      = __bool_constant<__is_trivially_constructible(_Tp, _Args...)>;



  template<typename _Tp, typename... _Args>
    struct is_trivially_constructible
    : public __is_trivially_constructible_impl<_Tp, _Args...>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_default_constructible
    : public __is_trivially_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };
# 1370 "/usr/include/c++/15.1.1/type_traits" 3
  struct __do_is_implicitly_default_constructible_impl
  {
    template <typename _Tp>
    static void __helper(const _Tp&);

    template <typename _Tp>
    static true_type __test(const _Tp&,
                            decltype(__helper<const _Tp&>({}))* = 0);

    static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_impl
    : public __do_is_implicitly_default_constructible_impl
    {
      using type = decltype(__test(declval<_Tp>()));
    };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_safe
    : public __is_implicitly_default_constructible_impl<_Tp>::type
    { };

  template <typename _Tp>
    struct __is_implicitly_default_constructible
    : public __and_<__is_constructible_impl<_Tp>,
      __is_implicitly_default_constructible_safe<_Tp>>::type
    { };



  template<typename _Tp>
    struct is_trivially_copy_constructible
    : public __is_trivially_constructible_impl<_Tp, __add_lval_ref_t<const _Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_move_constructible
    : public __is_trivially_constructible_impl<_Tp, __add_rval_ref_t<_Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename _Up>
    using __is_trivially_assignable_impl
      = __bool_constant<__is_trivially_assignable(_Tp, _Up)>;



  template<typename _Tp, typename _Up>
    struct is_trivially_assignable
    : public __is_trivially_assignable_impl<_Tp, _Up>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_copy_assignable
    : public __is_trivially_assignable_impl<__add_lval_ref_t<_Tp>,
         __add_lval_ref_t<const _Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_move_assignable
    : public __is_trivially_assignable_impl<__add_lval_ref_t<_Tp>,
         __add_rval_ref_t<_Tp>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_destructible
    : public __and_<__is_destructible_safe<_Tp>,
      __bool_constant<__has_trivial_destructor(_Tp)>>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    struct has_virtual_destructor
    : public __bool_constant<__has_virtual_destructor(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };





  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, alignof(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };




  template<typename _Tp>
    struct rank
    : public integral_constant<std::size_t, __array_rank(_Tp)> { };
# 1507 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename, unsigned _Uint = 0>
    struct extent
    : public integral_constant<size_t, 0> { };

  template<typename _Tp, size_t _Size>
    struct extent<_Tp[_Size], 0>
    : public integral_constant<size_t, _Size> { };

  template<typename _Tp, unsigned _Uint, size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public extent<_Tp, _Uint - 1>::type { };

  template<typename _Tp>
    struct extent<_Tp[], 0>
    : public integral_constant<size_t, 0> { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public extent<_Tp, _Uint - 1>::type { };






  template<typename _Tp, typename _Up>
    struct is_same
    : public __bool_constant<__is_same(_Tp, _Up)>
    { };
# 1549 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Base, typename _Derived>
    struct is_base_of
    : public __bool_constant<__is_base_of(_Base, _Derived)>
    { };
# 1564 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _From, typename _To>
    struct is_convertible
    : public __bool_constant<__is_convertible(_From, _To)>
    { };
# 1607 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _ToElementType, typename _FromElementType>
    using __is_array_convertible
      = is_convertible<_FromElementType(*)[], _ToElementType(*)[]>;
# 1667 "/usr/include/c++/15.1.1/type_traits" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++14-extensions"
  template<typename _Tp, typename... _Args>
    struct __is_nothrow_new_constructible_impl
    : __bool_constant<
 noexcept(::new(std::declval<void*>()) _Tp(std::declval<_Args>()...))
      >
    { };

  template<typename _Tp, typename... _Args>
    inline constexpr bool __is_nothrow_new_constructible
      = __and_<is_constructible<_Tp, _Args...>,
        __is_nothrow_new_constructible_impl<_Tp, _Args...>>::value;
#pragma GCC diagnostic pop




  template<typename _Tp>
    struct remove_const
    { using type = _Tp; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { using type = _Tp; };


  template<typename _Tp>
    struct remove_volatile
    { using type = _Tp; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { using type = _Tp; };



  template<typename _Tp>
    struct remove_cv
    { using type = __remove_cv(_Tp); };
# 1726 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Tp>
    struct add_const
    { using type = _Tp const; };


  template<typename _Tp>
    struct add_volatile
    { using type = _Tp volatile; };


  template<typename _Tp>
    struct add_cv
    { using type = _Tp const volatile; };



  template<typename _Tp>
    using remove_const_t = typename remove_const<_Tp>::type;


  template<typename _Tp>
    using remove_volatile_t = typename remove_volatile<_Tp>::type;


  template<typename _Tp>
    using remove_cv_t = typename remove_cv<_Tp>::type;


  template<typename _Tp>
    using add_const_t = typename add_const<_Tp>::type;


  template<typename _Tp>
    using add_volatile_t = typename add_volatile<_Tp>::type;


  template<typename _Tp>
    using add_cv_t = typename add_cv<_Tp>::type;






  template<typename _Tp>
    struct remove_reference
    { using type = __remove_reference(_Tp); };
# 1788 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Tp>
    struct add_lvalue_reference
    { using type = __add_lval_ref_t<_Tp>; };


  template<typename _Tp>
    struct add_rvalue_reference
    { using type = __add_rval_ref_t<_Tp>; };



  template<typename _Tp>
    using remove_reference_t = typename remove_reference<_Tp>::type;


  template<typename _Tp>
    using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;


  template<typename _Tp>
    using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;







  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { using __type = _Unqualified; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { using __type = volatile _Unqualified; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { using __type = const _Unqualified; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { using __type = const volatile _Unqualified; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      using __match = __cv_selector<_Unqualified, _IsConst, _IsVol>;

    public:
      using __type = typename __match::__type;
    };


  template<typename _Tp>
    struct __make_unsigned
    { using __type = _Tp; };

  template<>
    struct __make_unsigned<char>
    { using __type = unsigned char; };

  template<>
    struct __make_unsigned<signed char>
    { using __type = unsigned char; };

  template<>
    struct __make_unsigned<short>
    { using __type = unsigned short; };

  template<>
    struct __make_unsigned<int>
    { using __type = unsigned int; };

  template<>
    struct __make_unsigned<long>
    { using __type = unsigned long; };

  template<>
    struct __make_unsigned<long long>
    { using __type = unsigned long long; };


  __extension__
  template<>
    struct __make_unsigned<__int128>
    { using __type = unsigned __int128; };
# 1901 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = __is_enum(_Tp)>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      using __unsigned_type
 = typename __make_unsigned<__remove_cv_t<_Tp>>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;
    };

  class __make_unsigned_selector_base
  {
  protected:
    template<typename...> struct _List { };

    template<typename _Tp, typename... _Up>
      struct _List<_Tp, _Up...> : _List<_Up...>
      { static constexpr size_t __size = sizeof(_Tp); };

    template<size_t _Sz, typename _Tp, bool = (_Sz <= _Tp::__size)>
      struct __select;

    template<size_t _Sz, typename _Uint, typename... _UInts>
      struct __select<_Sz, _List<_Uint, _UInts...>, true>
      { using __type = _Uint; };

    template<size_t _Sz, typename _Uint, typename... _UInts>
      struct __select<_Sz, _List<_Uint, _UInts...>, false>
      : __select<_Sz, _List<_UInts...>>
      { };
  };


  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    : __make_unsigned_selector_base
    {

      using _UInts = _List<unsigned char, unsigned short, unsigned int,
      unsigned long, unsigned long long>;

      using __unsigned_type = typename __select<sizeof(_Tp), _UInts>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;
    };





  template<>
    struct __make_unsigned<wchar_t>
    {
      using __type
 = typename __make_unsigned_selector<wchar_t, false, true>::__type;
    };
# 1975 "/usr/include/c++/15.1.1/type_traits" 3
  template<>
    struct __make_unsigned<char16_t>
    {
      using __type
 = typename __make_unsigned_selector<char16_t, false, true>::__type;
    };

  template<>
    struct __make_unsigned<char32_t>
    {
      using __type
 = typename __make_unsigned_selector<char32_t, false, true>::__type;
    };






  template<typename _Tp>
    struct make_unsigned
    { using type = typename __make_unsigned_selector<_Tp>::__type; };


  template<> struct make_unsigned<bool>;
  template<> struct make_unsigned<bool const>;
  template<> struct make_unsigned<bool volatile>;
  template<> struct make_unsigned<bool const volatile>;




  template<typename _Tp>
    struct __make_signed
    { using __type = _Tp; };

  template<>
    struct __make_signed<char>
    { using __type = signed char; };

  template<>
    struct __make_signed<unsigned char>
    { using __type = signed char; };

  template<>
    struct __make_signed<unsigned short>
    { using __type = signed short; };

  template<>
    struct __make_signed<unsigned int>
    { using __type = signed int; };

  template<>
    struct __make_signed<unsigned long>
    { using __type = signed long; };

  template<>
    struct __make_signed<unsigned long long>
    { using __type = signed long long; };


  __extension__
  template<>
    struct __make_signed<unsigned __int128>
    { using __type = __int128; };
# 2061 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = __is_enum(_Tp)>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      using __signed_type
 = typename __make_signed<__remove_cv_t<_Tp>>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __signed_type>::__type;
    };


  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {
      using __unsigned_type = typename __make_unsigned_selector<_Tp>::__type;

    public:
      using __type = typename __make_signed_selector<__unsigned_type>::__type;
    };





  template<>
    struct __make_signed<wchar_t>
    {
      using __type
 = typename __make_signed_selector<wchar_t, false, true>::__type;
    };
# 2107 "/usr/include/c++/15.1.1/type_traits" 3
  template<>
    struct __make_signed<char16_t>
    {
      using __type
 = typename __make_signed_selector<char16_t, false, true>::__type;
    };

  template<>
    struct __make_signed<char32_t>
    {
      using __type
 = typename __make_signed_selector<char32_t, false, true>::__type;
    };






  template<typename _Tp>
    struct make_signed
    { using type = typename __make_signed_selector<_Tp>::__type; };


  template<> struct make_signed<bool>;
  template<> struct make_signed<bool const>;
  template<> struct make_signed<bool volatile>;
  template<> struct make_signed<bool const volatile>;



  template<typename _Tp>
    using make_signed_t = typename make_signed<_Tp>::type;


  template<typename _Tp>
    using make_unsigned_t = typename make_unsigned<_Tp>::type;






  template<typename _Tp>
    struct remove_extent
    { using type = __remove_extent(_Tp); };
# 2169 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Tp>
    struct remove_all_extents
    { using type = __remove_all_extents(_Tp); };
# 2188 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Tp>
    using remove_extent_t = typename remove_extent<_Tp>::type;


  template<typename _Tp>
    using remove_all_extents_t = typename remove_all_extents<_Tp>::type;






  template<typename _Tp>
    struct remove_pointer
    { using type = __remove_pointer(_Tp); };
# 2220 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Tp>
    struct add_pointer
    { using type = __add_pointer(_Tp); };
# 2248 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Tp>
    using remove_pointer_t = typename remove_pointer<_Tp>::type;


  template<typename _Tp>
    using add_pointer_t = typename add_pointer<_Tp>::type;





  struct __attribute__((__aligned__)) __aligned_storage_max_align_t
  { };

  constexpr size_t
  __aligned_storage_default_alignment([[__maybe_unused__]] size_t __len)
  {
# 2279 "/usr/include/c++/15.1.1/type_traits" 3
    return alignof(__aligned_storage_max_align_t);

  }
# 2315 "/usr/include/c++/15.1.1/type_traits" 3
  template<size_t _Len,
    size_t _Align = __aligned_storage_default_alignment(_Len)>
    struct
   
    aligned_storage
    {
      struct type
      {
 alignas(_Align) unsigned char __data[_Len];
      };
    };

  template <typename... _Types>
    struct __strictest_alignment
    {
      static const size_t _S_alignment = 0;
      static const size_t _S_size = 0;
    };

  template <typename _Tp, typename... _Types>
    struct __strictest_alignment<_Tp, _Types...>
    {
      static const size_t _S_alignment =
        alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment
 ? alignof(_Tp) : __strictest_alignment<_Types...>::_S_alignment;
      static const size_t _S_size =
        sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size
 ? sizeof(_Tp) : __strictest_alignment<_Types...>::_S_size;
    };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 2360 "/usr/include/c++/15.1.1/type_traits" 3
  template <size_t _Len, typename... _Types>
    struct
   
    aligned_union
    {
    private:
      static_assert(sizeof...(_Types) != 0, "At least one type is required");

      using __strictest = __strictest_alignment<_Types...>;
      static const size_t _S_len = _Len > __strictest::_S_size
 ? _Len : __strictest::_S_size;
    public:

      static const size_t alignment_value = __strictest::_S_alignment;

      using type = typename aligned_storage<_S_len, alignment_value>::type;
    };

  template <size_t _Len, typename... _Types>
    const size_t aligned_union<_Len, _Types...>::alignment_value;
#pragma GCC diagnostic pop




  template<typename _Tp>
    struct decay
    { using type = __decay(_Tp); };
# 2425 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      using __type = _Tp;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      using __type = _Tp&;
    };


  template<typename _Tp>
    using __decay_t = typename decay<_Tp>::type;

  template<typename _Tp>
    using __decay_and_strip = __strip_reference_wrapper<__decay_t<_Tp>>;





  template<typename... _Cond>
    using _Require = __enable_if_t<__and_<_Cond...>::value>;


  template<typename _Tp>
    using __remove_cvref_t
     = typename remove_cv<typename remove_reference<_Tp>::type>::type;




  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { using type = _Iftrue; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { using type = _Iffalse; };


  template<typename... _Tp>
    struct common_type;
# 2481 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Tp>
    struct __success_type
    { using type = _Tp; };

  struct __failure_type
  { };

  struct __do_common_type_impl
  {
    template<typename _Tp, typename _Up>
      using __cond_t
 = decltype(true ? std::declval<_Tp>() : std::declval<_Up>());



    template<typename _Tp, typename _Up>
      static __success_type<__decay_t<__cond_t<_Tp, _Up>>>
      _S_test(int);
# 2508 "/usr/include/c++/15.1.1/type_traits" 3
    template<typename, typename>
      static __failure_type
      _S_test_2(...);

    template<typename _Tp, typename _Up>
      static decltype(_S_test_2<_Tp, _Up>(0))
      _S_test(...);
  };


  template<>
    struct common_type<>
    { };


  template<typename _Tp0>
    struct common_type<_Tp0>
    : public common_type<_Tp0, _Tp0>
    { };


  template<typename _Tp1, typename _Tp2,
    typename _Dp1 = __decay_t<_Tp1>, typename _Dp2 = __decay_t<_Tp2>>
    struct __common_type_impl
    {


      using type = common_type<_Dp1, _Dp2>;
    };

  template<typename _Tp1, typename _Tp2>
    struct __common_type_impl<_Tp1, _Tp2, _Tp1, _Tp2>
    : private __do_common_type_impl
    {


      using type = decltype(_S_test<_Tp1, _Tp2>(0));
    };


  template<typename _Tp1, typename _Tp2>
    struct common_type<_Tp1, _Tp2>
    : public __common_type_impl<_Tp1, _Tp2>::type
    { };

  template<typename...>
    struct __common_type_pack
    { };

  template<typename, typename, typename = void>
    struct __common_type_fold;


  template<typename _Tp1, typename _Tp2, typename... _Rp>
    struct common_type<_Tp1, _Tp2, _Rp...>
    : public __common_type_fold<common_type<_Tp1, _Tp2>,
    __common_type_pack<_Rp...>>
    { };




  template<typename _CTp, typename... _Rp>
    struct __common_type_fold<_CTp, __common_type_pack<_Rp...>,
         __void_t<typename _CTp::type>>
    : public common_type<typename _CTp::type, _Rp...>
    { };


  template<typename _CTp, typename _Rp>
    struct __common_type_fold<_CTp, _Rp, void>
    { };

  template<typename _Tp, bool = __is_enum(_Tp)>
    struct __underlying_type_impl
    {
      using type = __underlying_type(_Tp);
    };

  template<typename _Tp>
    struct __underlying_type_impl<_Tp, false>
    { };



  template<typename _Tp>
    struct underlying_type
    : public __underlying_type_impl<_Tp>
    { };


  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
    };






  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0))
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval<_Tp>(0);
    }


  template<typename _Signature>
    struct result_of;




  struct __invoke_memfun_ref { };
  struct __invoke_memfun_deref { };
  struct __invoke_memobj_ref { };
  struct __invoke_memobj_deref { };
  struct __invoke_other { };


  template<typename _Tp, typename _Tag>
    struct __result_of_success : __success_type<_Tp>
    { using __invoke_type = _Tag; };


  struct __result_of_memfun_ref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_ref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_ref
    : private __result_of_memfun_ref_impl
    {
      using type = decltype(_S_test<_MemPtr, _Arg, _Args...>(0));
    };


  struct __result_of_memfun_deref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_deref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_deref
    : private __result_of_memfun_deref_impl
    {
      using type = decltype(_S_test<_MemPtr, _Arg, _Args...>(0));
    };


  struct __result_of_memobj_ref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      std::declval<_Tp1>().*std::declval<_Fp>()
      ), __invoke_memobj_ref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_ref
    : private __result_of_memobj_ref_impl
    {
      using type = decltype(_S_test<_MemPtr, _Arg>(0));
    };


  struct __result_of_memobj_deref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      (*std::declval<_Tp1>()).*std::declval<_Fp>()
      ), __invoke_memobj_deref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_deref
    : private __result_of_memobj_deref_impl
    {
      using type = decltype(_S_test<_MemPtr, _Arg>(0));
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, _Arg>
    {
      using _Argval = __remove_cvref_t<_Arg>;
      using _MemPtr = _Res _Class::*;
      using type = typename __conditional_t<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memobj_ref<_MemPtr, _Arg>,
        __result_of_memobj_deref<_MemPtr, _Arg>
      >::type;
    };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
      using _Argval = typename remove_reference<_Arg>::type;
      using _MemPtr = _Res _Class::*;
      using type = typename __conditional_t<is_base_of<_Class, _Argval>::value,
        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>
      >::type;
    };






  template<typename _Tp, typename _Up = __remove_cvref_t<_Tp>>
    struct __inv_unwrap
    {
      using type = _Tp;
    };

  template<typename _Tp, typename _Up>
    struct __inv_unwrap<_Tp, reference_wrapper<_Up>>
    {
      using type = _Up&;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct __result_of_impl
    {
      using type = __failure_type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_impl<true, false, _MemPtr, _Arg>
    : public __result_of_memobj<__decay_t<_MemPtr>,
    typename __inv_unwrap<_Arg>::type>
    { };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
    : public __result_of_memfun<__decay_t<_MemPtr>,
    typename __inv_unwrap<_Arg>::type, _Args...>
    { };


  struct __result_of_other_impl
  {
    template<typename _Fn, typename... _Args>
      static __result_of_success<decltype(
      std::declval<_Fn>()(std::declval<_Args>()...)
      ), __invoke_other> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _Functor, typename... _ArgTypes>
    struct __result_of_impl<false, false, _Functor, _ArgTypes...>
    : private __result_of_other_impl
    {
      using type = decltype(_S_test<_Functor, _ArgTypes...>(0));
    };


  template<typename _Functor, typename... _ArgTypes>
    struct __invoke_result
    : public __result_of_impl<
        is_member_object_pointer<
          typename remove_reference<_Functor>::type
        >::value,
        is_member_function_pointer<
          typename remove_reference<_Functor>::type
        >::value,
 _Functor, _ArgTypes...
      >::type
    { };


  template<typename _Fn, typename... _Args>
    using __invoke_result_t = typename __invoke_result<_Fn, _Args...>::type;


  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : public __invoke_result<_Functor, _ArgTypes...>
    { } __attribute__ ((__deprecated__ ("use '" "std::invoke_result" "' instead")));


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

  template<size_t _Len,
    size_t _Align = __aligned_storage_default_alignment(_Len)>
    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

  template <size_t _Len, typename... _Types>
    using aligned_union_t = typename aligned_union<_Len, _Types...>::type;
#pragma GCC diagnostic pop


  template<typename _Tp>
    using decay_t = typename decay<_Tp>::type;


  template<bool _Cond, typename _Tp = void>
    using enable_if_t = typename enable_if<_Cond, _Tp>::type;


  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    using conditional_t = typename conditional<_Cond, _Iftrue, _Iffalse>::type;


  template<typename... _Tp>
    using common_type_t = typename common_type<_Tp...>::type;


  template<typename _Tp>
    using underlying_type_t = typename underlying_type<_Tp>::type;


  template<typename _Tp>
    using result_of_t = typename result_of<_Tp>::type;




  template<typename...> using void_t = void;
# 2885 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Default, typename _AlwaysVoid,
    template<typename...> class _Op, typename... _Args>
    struct __detector
    {
      using type = _Default;
      using __is_detected = false_type;
    };


  template<typename _Default, template<typename...> class _Op,
     typename... _Args>
    struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>
    {
      using type = _Op<_Args...>;
      using __is_detected = true_type;
    };

  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or = __detector<_Default, void, _Op, _Args...>;



  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or_t
      = typename __detected_or<_Default, _Op, _Args...>::type;





#define _GLIBCXX_HAS_NESTED_TYPE(_NTYPE) template<typename _Tp, typename = __void_t<>> struct __has_ ##_NTYPE : false_type { }; template<typename _Tp> struct __has_ ##_NTYPE<_Tp, __void_t<typename _Tp::_NTYPE>> : true_type { };
# 2927 "/usr/include/c++/15.1.1/type_traits" 3
  template <typename _Tp>
    struct __is_swappable;

  template <typename _Tp>
    struct __is_nothrow_swappable;

  template<typename>
    struct __is_tuple_like_impl : false_type
    { };


  template<typename _Tp>
    struct __is_tuple_like
    : public __is_tuple_like_impl<__remove_cvref_t<_Tp>>::type
    { };


  template<typename _Tp>
   
    inline
    _Require<__not_<__is_tuple_like<_Tp>>,
      is_move_constructible<_Tp>,
      is_move_assignable<_Tp>>
    swap(_Tp&, _Tp&)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value);

  template<typename _Tp, size_t _Nm>
   
    inline
    __enable_if_t<__is_swappable<_Tp>::value>
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value);


  namespace __swappable_details {
    using std::swap;

    struct __do_is_swappable_impl
    {
      template<typename _Tp, typename
               = decltype(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))>
        static true_type __test(int);

      template<typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_impl
    {
      template<typename _Tp>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))
        > __test(int);

      template<typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp>
    struct __is_swappable_impl
    : public __swappable_details::__do_is_swappable_impl
    {
      using type = decltype(__test<_Tp>(0));
    };

  template<typename _Tp>
    struct __is_nothrow_swappable_impl
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      using type = decltype(__test<_Tp>(0));
    };

  template<typename _Tp>
    struct __is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };

  template<typename _Tp>
    struct __is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };






  template<typename _Tp>
    struct is_swappable
    : public __is_swappable_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    inline constexpr bool is_swappable_v =
      is_swappable<_Tp>::value;


  template<typename _Tp>
    inline constexpr bool is_nothrow_swappable_v =
      is_nothrow_swappable<_Tp>::value;



  namespace __swappable_with_details {
    using std::swap;

    struct __do_is_swappable_with_impl
    {
      template<typename _Tp, typename _Up, typename
               = decltype(swap(std::declval<_Tp>(), std::declval<_Up>())),
               typename
               = decltype(swap(std::declval<_Up>(), std::declval<_Tp>()))>
        static true_type __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_with_impl
    {
      template<typename _Tp, typename _Up>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp>(), std::declval<_Up>()))
          &&
          noexcept(swap(std::declval<_Up>(), std::declval<_Tp>()))
        > __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp, typename _Up>
    struct __is_swappable_with_impl
    : public __swappable_with_details::__do_is_swappable_with_impl
    {
      using type = decltype(__test<_Tp, _Up>(0));
    };


  template<typename _Tp>
    struct __is_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_swappable_impl
    {
      using type = decltype(__test<_Tp&>(0));
    };

  template<typename _Tp, typename _Up>
    struct __is_nothrow_swappable_with_impl
    : public __swappable_with_details::__do_is_nothrow_swappable_with_impl
    {
      using type = decltype(__test<_Tp, _Up>(0));
    };


  template<typename _Tp>
    struct __is_nothrow_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      using type = decltype(__test<_Tp&>(0));
    };



  template<typename _Tp, typename _Up>
    struct is_swappable_with
    : public __is_swappable_with_impl<_Tp, _Up>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "first template argument must be a complete class or an unbounded array");
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Up>{}),
 "second template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename _Up>
    struct is_nothrow_swappable_with
    : public __is_nothrow_swappable_with_impl<_Tp, _Up>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "first template argument must be a complete class or an unbounded array");
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Up>{}),
 "second template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp, typename _Up>
    inline constexpr bool is_swappable_with_v =
      is_swappable_with<_Tp, _Up>::value;


  template<typename _Tp, typename _Up>
    inline constexpr bool is_nothrow_swappable_with_v =
      is_nothrow_swappable_with<_Tp, _Up>::value;
# 3149 "/usr/include/c++/15.1.1/type_traits" 3
  template<typename _Result, typename _Ret,
    bool = is_void<_Ret>::value, typename = void>
    struct __is_invocable_impl
    : false_type
    {
      using __nothrow_conv = false_type;
    };


  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret,
                                true,
          __void_t<typename _Result::type>>
    : true_type
    {
      using __nothrow_conv = true_type;
    };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"

  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret,
                                false,
          __void_t<typename _Result::type>>
    {
    private:

      using _Res_t = typename _Result::type;



      static _Res_t _S_get() noexcept;


      template<typename _Tp>
 static void _S_conv(__type_identity_t<_Tp>) noexcept;


      template<typename _Tp,
        bool _Nothrow = noexcept(_S_conv<_Tp>(_S_get())),
        typename = decltype(_S_conv<_Tp>(_S_get())),

        bool _Dangle = __reference_converts_from_temporary(_Tp, _Res_t)



       >
 static __bool_constant<_Nothrow && !_Dangle>
 _S_test(int);

      template<typename _Tp, bool = false>
 static false_type
 _S_test(...);

    public:

      using type = decltype(_S_test<_Ret, true>(1));


      using __nothrow_conv = decltype(_S_test<_Ret>(1));
    };
#pragma GCC diagnostic pop

  template<typename _Fn, typename... _ArgTypes>
    struct __is_invocable
    : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type
    { };

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept((std::declval<_Up>().*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_deref)
    {
      return noexcept(((*std::declval<_Tp>()).*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept(std::declval<_Up>().*std::declval<_Fn>());
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_deref)
    {
      return noexcept((*std::declval<_Tp>()).*std::declval<_Fn>());
    }

  template<typename _Fn, typename... _Args>
    constexpr bool __call_is_nt(__invoke_other)
    {
      return noexcept(std::declval<_Fn>()(std::declval<_Args>()...));
    }

  template<typename _Result, typename _Fn, typename... _Args>
    struct __call_is_nothrow
    : __bool_constant<
 std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type{})
      >
    { };

  template<typename _Fn, typename... _Args>
    using __call_is_nothrow_
      = __call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>;


  template<typename _Fn, typename... _Args>
    struct __is_nothrow_invocable
    : __and_<__is_invocable<_Fn, _Args...>,
             __call_is_nothrow_<_Fn, _Args...>>::type
    { };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
  struct __nonesuchbase {};
  struct __nonesuch : private __nonesuchbase {
    ~__nonesuch() = delete;
    __nonesuch(__nonesuch const&) = delete;
    void operator=(__nonesuch const&) = delete;
  };
#pragma GCC diagnostic pop




  template<typename _Functor, typename... _ArgTypes>
    struct invoke_result
    : public __invoke_result<_Functor, _ArgTypes...>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Functor>{}),
 "_Functor must be a complete class or an unbounded array");
      static_assert((std::__is_complete_or_unbounded(
 __type_identity<_ArgTypes>{}) && ...),
 "each argument type must be a complete class or an unbounded array");
    };


  template<typename _Fn, typename... _Args>
    using invoke_result_t = typename invoke_result<_Fn, _Args...>::type;


  template<typename _Fn, typename... _ArgTypes>
    struct is_invocable

    : public __bool_constant<__is_invocable(_Fn, _ArgTypes...)>



    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Fn>{}),
 "_Fn must be a complete class or an unbounded array");
      static_assert((std::__is_complete_or_unbounded(
 __type_identity<_ArgTypes>{}) && ...),
 "each argument type must be a complete class or an unbounded array");
    };


  template<typename _Ret, typename _Fn, typename... _ArgTypes>
    struct is_invocable_r
    : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, _Ret>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Fn>{}),
 "_Fn must be a complete class or an unbounded array");
      static_assert((std::__is_complete_or_unbounded(
 __type_identity<_ArgTypes>{}) && ...),
 "each argument type must be a complete class or an unbounded array");
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Ret>{}),
 "_Ret must be a complete class or an unbounded array");
    };


  template<typename _Fn, typename... _ArgTypes>
    struct is_nothrow_invocable

    : public __bool_constant<__is_nothrow_invocable(_Fn, _ArgTypes...)>




    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Fn>{}),
 "_Fn must be a complete class or an unbounded array");
      static_assert((std::__is_complete_or_unbounded(
 __type_identity<_ArgTypes>{}) && ...),
 "each argument type must be a complete class or an unbounded array");
    };





  template<typename _Result, typename _Ret>
    using __is_nt_invocable_impl
      = typename __is_invocable_impl<_Result, _Ret>::__nothrow_conv;



  template<typename _Ret, typename _Fn, typename... _ArgTypes>
    struct is_nothrow_invocable_r
    : __and_<__is_nt_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, _Ret>,
             __call_is_nothrow_<_Fn, _ArgTypes...>>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Fn>{}),
 "_Fn must be a complete class or an unbounded array");
      static_assert((std::__is_complete_or_unbounded(
 __type_identity<_ArgTypes>{}) && ...),
 "each argument type must be a complete class or an unbounded array");
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Ret>{}),
 "_Ret must be a complete class or an unbounded array");
    };
# 3385 "/usr/include/c++/15.1.1/type_traits" 3
template <typename _Tp>
  inline constexpr bool is_void_v = is_void<_Tp>::value;
template <typename _Tp>
  inline constexpr bool is_null_pointer_v = is_null_pointer<_Tp>::value;
template <typename _Tp>
  inline constexpr bool is_integral_v = is_integral<_Tp>::value;
template <typename _Tp>
  inline constexpr bool is_floating_point_v = is_floating_point<_Tp>::value;


template <typename _Tp>
  inline constexpr bool is_array_v = __is_array(_Tp);
# 3407 "/usr/include/c++/15.1.1/type_traits" 3
template <typename _Tp>
  inline constexpr bool is_pointer_v = __is_pointer(_Tp);
# 3422 "/usr/include/c++/15.1.1/type_traits" 3
template <typename _Tp>
  inline constexpr bool is_lvalue_reference_v = false;
template <typename _Tp>
  inline constexpr bool is_lvalue_reference_v<_Tp&> = true;
template <typename _Tp>
  inline constexpr bool is_rvalue_reference_v = false;
template <typename _Tp>
  inline constexpr bool is_rvalue_reference_v<_Tp&&> = true;


template <typename _Tp>
  inline constexpr bool is_member_object_pointer_v =
    __is_member_object_pointer(_Tp);







template <typename _Tp>
  inline constexpr bool is_member_function_pointer_v =
    __is_member_function_pointer(_Tp);






template <typename _Tp>
  inline constexpr bool is_enum_v = __is_enum(_Tp);
template <typename _Tp>
  inline constexpr bool is_union_v = __is_union(_Tp);
template <typename _Tp>
  inline constexpr bool is_class_v = __is_class(_Tp);



template <typename _Tp>
  inline constexpr bool is_reference_v = __is_reference(_Tp);
# 3471 "/usr/include/c++/15.1.1/type_traits" 3
template <typename _Tp>
  inline constexpr bool is_arithmetic_v = is_arithmetic<_Tp>::value;
template <typename _Tp>
  inline constexpr bool is_fundamental_v = is_fundamental<_Tp>::value;


template <typename _Tp>
  inline constexpr bool is_object_v = __is_object(_Tp);





template <typename _Tp>
  inline constexpr bool is_scalar_v = is_scalar<_Tp>::value;
template <typename _Tp>
  inline constexpr bool is_compound_v = !is_fundamental_v<_Tp>;


template <typename _Tp>
  inline constexpr bool is_member_pointer_v = __is_member_pointer(_Tp);






template <typename _Tp>
  inline constexpr bool is_const_v = __is_const(_Tp);
# 3508 "/usr/include/c++/15.1.1/type_traits" 3
template <typename _Tp>
  inline constexpr bool is_function_v = __is_function(_Tp);
# 3520 "/usr/include/c++/15.1.1/type_traits" 3
template <typename _Tp>
  inline constexpr bool is_volatile_v = __is_volatile(_Tp);







template <typename _Tp>
 
  inline constexpr bool is_trivial_v = __is_trivial(_Tp);
template <typename _Tp>
  inline constexpr bool is_trivially_copyable_v = __is_trivially_copyable(_Tp);
template <typename _Tp>
  inline constexpr bool is_standard_layout_v = __is_standard_layout(_Tp);
template <typename _Tp>
 
  inline constexpr bool is_pod_v = __is_pod(_Tp);
template <typename _Tp>
  [[__deprecated__]]
  inline constexpr bool is_literal_type_v = __is_literal_type(_Tp);
template <typename _Tp>
  inline constexpr bool is_empty_v = __is_empty(_Tp);
template <typename _Tp>
  inline constexpr bool is_polymorphic_v = __is_polymorphic(_Tp);
template <typename _Tp>
  inline constexpr bool is_abstract_v = __is_abstract(_Tp);
template <typename _Tp>
  inline constexpr bool is_final_v = __is_final(_Tp);

template <typename _Tp>
  inline constexpr bool is_signed_v = is_signed<_Tp>::value;
template <typename _Tp>
  inline constexpr bool is_unsigned_v = is_unsigned<_Tp>::value;

template <typename _Tp, typename... _Args>
  inline constexpr bool is_constructible_v = __is_constructible(_Tp, _Args...);
template <typename _Tp>
  inline constexpr bool is_default_constructible_v = __is_constructible(_Tp);
template <typename _Tp>
  inline constexpr bool is_copy_constructible_v
    = __is_constructible(_Tp, __add_lval_ref_t<const _Tp>);
template <typename _Tp>
  inline constexpr bool is_move_constructible_v
    = __is_constructible(_Tp, __add_rval_ref_t<_Tp>);

template <typename _Tp, typename _Up>
  inline constexpr bool is_assignable_v = __is_assignable(_Tp, _Up);
template <typename _Tp>
  inline constexpr bool is_copy_assignable_v
    = __is_assignable(__add_lval_ref_t<_Tp>, __add_lval_ref_t<const _Tp>);
template <typename _Tp>
  inline constexpr bool is_move_assignable_v
    = __is_assignable(__add_lval_ref_t<_Tp>, __add_rval_ref_t<_Tp>);

template <typename _Tp>
  inline constexpr bool is_destructible_v = is_destructible<_Tp>::value;

template <typename _Tp, typename... _Args>
  inline constexpr bool is_trivially_constructible_v
    = __is_trivially_constructible(_Tp, _Args...);
template <typename _Tp>
  inline constexpr bool is_trivially_default_constructible_v
    = __is_trivially_constructible(_Tp);
template <typename _Tp>
  inline constexpr bool is_trivially_copy_constructible_v
    = __is_trivially_constructible(_Tp, __add_lval_ref_t<const _Tp>);
template <typename _Tp>
  inline constexpr bool is_trivially_move_constructible_v
    = __is_trivially_constructible(_Tp, __add_rval_ref_t<_Tp>);

template <typename _Tp, typename _Up>
  inline constexpr bool is_trivially_assignable_v
    = __is_trivially_assignable(_Tp, _Up);
template <typename _Tp>
  inline constexpr bool is_trivially_copy_assignable_v
    = __is_trivially_assignable(__add_lval_ref_t<_Tp>,
    __add_lval_ref_t<const _Tp>);
template <typename _Tp>
  inline constexpr bool is_trivially_move_assignable_v
    = __is_trivially_assignable(__add_lval_ref_t<_Tp>,
    __add_rval_ref_t<_Tp>);
# 3620 "/usr/include/c++/15.1.1/type_traits" 3
template <typename _Tp>
  inline constexpr bool is_trivially_destructible_v =
    is_trivially_destructible<_Tp>::value;


template <typename _Tp, typename... _Args>
  inline constexpr bool is_nothrow_constructible_v
    = __is_nothrow_constructible(_Tp, _Args...);
template <typename _Tp>
  inline constexpr bool is_nothrow_default_constructible_v
    = __is_nothrow_constructible(_Tp);
template <typename _Tp>
  inline constexpr bool is_nothrow_copy_constructible_v
    = __is_nothrow_constructible(_Tp, __add_lval_ref_t<const _Tp>);
template <typename _Tp>
  inline constexpr bool is_nothrow_move_constructible_v
    = __is_nothrow_constructible(_Tp, __add_rval_ref_t<_Tp>);

template <typename _Tp, typename _Up>
  inline constexpr bool is_nothrow_assignable_v
    = __is_nothrow_assignable(_Tp, _Up);
template <typename _Tp>
  inline constexpr bool is_nothrow_copy_assignable_v
    = __is_nothrow_assignable(__add_lval_ref_t<_Tp>,
         __add_lval_ref_t<const _Tp>);
template <typename _Tp>
  inline constexpr bool is_nothrow_move_assignable_v
    = __is_nothrow_assignable(__add_lval_ref_t<_Tp>, __add_rval_ref_t<_Tp>);

template <typename _Tp>
  inline constexpr bool is_nothrow_destructible_v =
    is_nothrow_destructible<_Tp>::value;

template <typename _Tp>
  inline constexpr bool has_virtual_destructor_v
    = __has_virtual_destructor(_Tp);

template <typename _Tp>
  inline constexpr size_t alignment_of_v = alignment_of<_Tp>::value;



template <typename _Tp>
  inline constexpr size_t rank_v = __array_rank(_Tp);
# 3673 "/usr/include/c++/15.1.1/type_traits" 3
template <typename _Tp, unsigned _Idx = 0>
  inline constexpr size_t extent_v = 0;
template <typename _Tp, size_t _Size>
  inline constexpr size_t extent_v<_Tp[_Size], 0> = _Size;
template <typename _Tp, unsigned _Idx, size_t _Size>
  inline constexpr size_t extent_v<_Tp[_Size], _Idx> = extent_v<_Tp, _Idx - 1>;
template <typename _Tp>
  inline constexpr size_t extent_v<_Tp[], 0> = 0;
template <typename _Tp, unsigned _Idx>
  inline constexpr size_t extent_v<_Tp[], _Idx> = extent_v<_Tp, _Idx - 1>;


template <typename _Tp, typename _Up>
  inline constexpr bool is_same_v = __is_same(_Tp, _Up);






template <typename _Base, typename _Derived>
  inline constexpr bool is_base_of_v = __is_base_of(_Base, _Derived);





template <typename _From, typename _To>
  inline constexpr bool is_convertible_v = __is_convertible(_From, _To);




template<typename _Fn, typename... _Args>
  inline constexpr bool is_invocable_v = is_invocable<_Fn, _Args...>::value;
template<typename _Fn, typename... _Args>
  inline constexpr bool is_nothrow_invocable_v
    = is_nothrow_invocable<_Fn, _Args...>::value;
template<typename _Ret, typename _Fn, typename... _Args>
  inline constexpr bool is_invocable_r_v
    = is_invocable_r<_Ret, _Fn, _Args...>::value;
template<typename _Ret, typename _Fn, typename... _Args>
  inline constexpr bool is_nothrow_invocable_r_v
    = is_nothrow_invocable_r<_Ret, _Fn, _Args...>::value;






  template<typename _Tp>
    struct has_unique_object_representations
    : bool_constant<__has_unique_object_representations(
      remove_cv_t<remove_all_extents_t<_Tp>>
      )>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    inline constexpr bool has_unique_object_representations_v
      = has_unique_object_representations<_Tp>::value;






  template<typename _Tp>
    struct is_aggregate
    : bool_constant<__is_aggregate(remove_cv_t<_Tp>)>
    { };






  template<typename _Tp>
    inline constexpr bool is_aggregate_v = __is_aggregate(remove_cv_t<_Tp>);
# 4191 "/usr/include/c++/15.1.1/type_traits" 3

}
}
# 43 "/usr/include/c++/15.1.1/bits/cpp_type_traits.h" 2 3


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
# 76 "/usr/include/c++/15.1.1/bits/cpp_type_traits.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 176 "/usr/include/c++/15.1.1/bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

#define __INT_N(TYPE) __extension__ template<> struct __is_integer<TYPE> { enum { __value = 1 }; typedef __true_type __type; }; __extension__ template<> struct __is_integer<unsigned TYPE> { enum { __value = 1 }; typedef __true_type __type; };
# 264 "/usr/include/c++/15.1.1/bits/cpp_type_traits.h" 3
__extension__ template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; __extension__ template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };
# 276 "/usr/include/c++/15.1.1/bits/cpp_type_traits.h" 3
#undef __INT_N




  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 358 "/usr/include/c++/15.1.1/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  enum class byte : unsigned char;

  template<>
    struct __is_byte<byte>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 438 "/usr/include/c++/15.1.1/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_nonvolatile_trivially_copyable
    {
      enum { __value = __is_trivially_copyable(_Tp) };
    };




  template<typename _Tp>
    struct __is_nonvolatile_trivially_copyable<volatile _Tp>
    {
      enum { __value = 0 };
    };


  template<typename _OutputIter, typename _InputIter>
    struct __memcpyable
    {
      enum { __value = 0 };
    };


  template<typename _Tp>
    struct __memcpyable<_Tp*, _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };


  template<typename _Tp>
    struct __memcpyable<_Tp*, const _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };

  template<typename _Tp> struct __memcpyable_integer;




  template<typename _Tp, typename _Up>
    struct __memcpyable<_Tp*, _Up*>
    {
      enum {
 __value = __memcpyable_integer<_Tp>::__width != 0
      && ((int)__memcpyable_integer<_Tp>::__width
     == (int)__memcpyable_integer<_Up>::__width)
      };
    };


  template<typename _Tp, typename _Up>
    struct __memcpyable<_Tp*, const _Up*>
    : __memcpyable<_Tp*, _Up*>
    { };

  template<typename _Tp>
    struct __memcpyable_integer
    {
      enum {
 __width = __is_integer<_Tp>::__value ? (sizeof(_Tp) * 8) : 0
      };
    };


  template<typename _Tp>
    struct __memcpyable_integer<volatile _Tp>
    { enum { __width = 0 }; };
# 592 "/usr/include/c++/15.1.1/bits/cpp_type_traits.h" 3
  template<typename _Iter1, typename _Iter2>
    struct __memcmpable
    {
      enum { __value = 0 };
    };


  template<typename _Tp>
    struct __memcmpable<_Tp*, _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };

  template<typename _Tp>
    struct __memcmpable<const _Tp*, _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };

  template<typename _Tp>
    struct __memcmpable<_Tp*, const _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };







  template<typename _Tp, bool _TreatAsBytes =



 __is_byte<_Tp>::__value

    >
    struct __is_memcmp_ordered
    {
      static const bool __value = _Tp(-1) > _Tp(1);
    };

  template<typename _Tp>
    struct __is_memcmp_ordered<_Tp, false>
    {
      static const bool __value = false;
    };


  template<typename _Tp, typename _Up, bool = sizeof(_Tp) == sizeof(_Up)>
    struct __is_memcmp_ordered_with
    {
      static const bool __value = __is_memcmp_ordered<_Tp>::__value
 && __is_memcmp_ordered<_Up>::__value;
    };

  template<typename _Tp, typename _Up>
    struct __is_memcmp_ordered_with<_Tp, _Up, false>
    {
      static const bool __value = false;
    };
# 661 "/usr/include/c++/15.1.1/bits/cpp_type_traits.h" 3
  template<>
    struct __is_memcmp_ordered_with<std::byte, std::byte, true>
    { static constexpr bool __value = true; };

  template<typename _Tp, bool _SameSize>
    struct __is_memcmp_ordered_with<_Tp, std::byte, _SameSize>
    { static constexpr bool __value = false; };

  template<typename _Up, bool _SameSize>
    struct __is_memcmp_ordered_with<std::byte, _Up, _SameSize>
    { static constexpr bool __value = false; };



  template<typename _ValT, typename _Tp>
    constexpr bool __can_use_memchr_for_find

      = __is_byte<_ValT>::__value

   && (is_same_v<_Tp, _ValT> || is_integral_v<_Tp>);





  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
   
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}

#pragma GCC diagnostic pop
# 62 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/15.1.1/ext/type_traits.h" 1 3
# 30 "/usr/include/c++/15.1.1/ext/type_traits.h" 3
#define _EXT_TYPE_TRAITS 1
# 39 "/usr/include/c++/15.1.1/ext/type_traits.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"

extern "C++" {

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    constexpr
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    constexpr
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  constexpr bool
  __is_null_pointer(std::nullptr_t)
  { return true; }




  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };
# 230 "/usr/include/c++/15.1.1/ext/type_traits.h" 3
  template<typename... _Tp>
    using __promoted_t = decltype((typename __promote<_Tp>::__type(0) + ...));



  template<typename _Tp, typename _Up>
    using __promote_2 = __promote<__promoted_t<_Tp, _Up>>;

  template<typename _Tp, typename _Up, typename _Vp>
    using __promote_3 = __promote<__promoted_t<_Tp, _Up, _Vp>>;

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp>
    using __promote_4 = __promote<__promoted_t<_Tp, _Up, _Vp, _Wp>>;
# 274 "/usr/include/c++/15.1.1/ext/type_traits.h" 3

}
}

#pragma GCC diagnostic pop
# 63 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/15.1.1/ext/numeric_traits.h" 1 3
# 30 "/usr/include/c++/15.1.1/ext/numeric_traits.h" 3
#define _EXT_NUMERIC_TRAITS 1
# 39 "/usr/include/c++/15.1.1/ext/numeric_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 52 "/usr/include/c++/15.1.1/ext/numeric_traits.h" 3
  template<typename _Tp>
    struct __is_integer_nonstrict
    : public std::__is_integer<_Tp>
    {
      using std::__is_integer<_Tp>::__value;


      enum { __width = __value ? sizeof(_Tp) * 8 : 0 };
    };

  template<typename _Value>
    struct __numeric_traits_integer
    {

      static_assert(__is_integer_nonstrict<_Value>::__value,
      "invalid specialization");




      static const bool __is_signed = (_Value)(-1) < 0;
      static const int __digits
 = __is_integer_nonstrict<_Value>::__width - __is_signed;


      static const _Value __max = __is_signed
 ? (((((_Value)1 << (__digits - 1)) - 1) << 1) + 1)
 : ~(_Value)0;
      static const _Value __min = __is_signed ? -__max - 1 : (_Value)0;
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;



#define _GLIBCXX_INT_N_TRAITS(T,WIDTH) __extension__ template<> struct __is_integer_nonstrict<T> { enum { __value = 1 }; typedef std::__true_type __type; enum { __width = WIDTH }; }; __extension__ template<> struct __is_integer_nonstrict<unsigned T> { enum { __value = 1 }; typedef std::__true_type __type; enum { __width = WIDTH }; };
# 135 "/usr/include/c++/15.1.1/ext/numeric_traits.h" 3
#undef _GLIBCXX_INT_N_TRAITS



  template<typename _Tp>
    using __int_traits = __numeric_traits_integer<_Tp>;


#define __glibcxx_floating(_Tp,_Fval,_Dval,_LDval) (std::__are_same<_Tp, float>::__value ? _Fval : std::__are_same<_Tp, double>::__value ? _Dval : _LDval)



#define __glibcxx_max_digits10(_Tp) (2 + __glibcxx_floating(_Tp, __FLT_MANT_DIG__, __DBL_MANT_DIG__, __LDBL_MANT_DIG__) * 643L / 2136)



#define __glibcxx_digits10(_Tp) __glibcxx_floating(_Tp, __FLT_DIG__, __DBL_DIG__, __LDBL_DIG__)


#define __glibcxx_max_exponent10(_Tp) __glibcxx_floating(_Tp, __FLT_MAX_10_EXP__, __DBL_MAX_10_EXP__, __LDBL_MAX_10_EXP__)




  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

#undef __glibcxx_floating
#undef __glibcxx_max_digits10
#undef __glibcxx_digits10
#undef __glibcxx_max_exponent10

  template<typename _Value>
    struct __numeric_traits
    : public __numeric_traits_integer<_Value>
    { };

  template<>
    struct __numeric_traits<float>
    : public __numeric_traits_floating<float>
    { };

  template<>
    struct __numeric_traits<double>
    : public __numeric_traits_floating<double>
    { };

  template<>
    struct __numeric_traits<long double>
    : public __numeric_traits_floating<long double>
    { };
# 240 "/usr/include/c++/15.1.1/ext/numeric_traits.h" 3

}
# 64 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/15.1.1/bits/stl_pair.h" 1 3
# 57 "/usr/include/c++/15.1.1/bits/stl_pair.h" 3
#define _STL_PAIR_H 1



# 1 "/usr/include/c++/15.1.1/bits/move.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/move.h" 3
#define _MOVE_H 1
# 40 "/usr/include/c++/15.1.1/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    __attribute__((__always_inline__))
    inline constexpr _Tp*
    __addressof(_Tp& __r) noexcept
    { return __builtin_addressof(__r); }
# 69 "/usr/include/c++/15.1.1/bits/move.h" 3
  template<typename _Tp>
    [[__nodiscard__,__gnu__::__always_inline__]]
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Tp&&>(__t); }
# 82 "/usr/include/c++/15.1.1/bits/move.h" 3
  template<typename _Tp>
    [[__nodiscard__,__gnu__::__always_inline__]]
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value,
   "std::forward must not be used to convert an rvalue to an lvalue");
      return static_cast<_Tp&&>(__t);
    }
# 135 "/usr/include/c++/15.1.1/bits/move.h" 3
  template<typename _Tp>
    [[__nodiscard__,__gnu__::__always_inline__]]
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }


  template<typename _Tp>
    struct __move_if_noexcept_cond
    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
                    is_copy_constructible<_Tp>>::type { };
# 156 "/usr/include/c++/15.1.1/bits/move.h" 3
  template<typename _Tp>
    [[__nodiscard__,__gnu__::__always_inline__]]
    constexpr
    __conditional_t<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>
    move_if_noexcept(_Tp& __x) noexcept
    { return std::move(__x); }
# 173 "/usr/include/c++/15.1.1/bits/move.h" 3
  template<typename _Tp>
    [[__nodiscard__,__gnu__::__always_inline__]]
    inline constexpr _Tp*
    addressof(_Tp& __r) noexcept
    { return std::__addressof(__r); }



  template<typename _Tp>
    const _Tp* addressof(const _Tp&&) = delete;


  template <typename _Tp, typename _Up = _Tp>
   
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
      return __old_val;
    }



#define _GLIBCXX_FWDREF(_Tp) _Tp&&
#define _GLIBCXX_MOVE(__val) std::move(__val)
#define _GLIBCXX_FORWARD(_Tp,__val) std::forward<_Tp>(__val)
# 217 "/usr/include/c++/15.1.1/bits/move.h" 3
  template<typename _Tp>
   
    inline

    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type



    swap(_Tp& __a, _Tp& __b)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>, is_nothrow_move_assignable<_Tp>>::value)

    {




      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }




  template<typename _Tp, size_t _Nm>
   
    inline

    typename enable_if<__is_swappable<_Tp>::value>::type



    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value)
    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 62 "/usr/include/c++/15.1.1/bits/stl_pair.h" 2 3
# 1 "/usr/include/c++/15.1.1/bits/utility.h" 1 3
# 34 "/usr/include/c++/15.1.1/bits/utility.h" 3
#define _GLIBCXX_UTILITY_H 1
# 45 "/usr/include/c++/15.1.1/bits/utility.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    struct tuple_size;





  template<typename _Tp,
    typename _Up = typename remove_cv<_Tp>::type,
    typename = typename enable_if<is_same<_Tp, _Up>::value>::type,
    size_t = tuple_size<_Tp>::value>
    using __enable_if_has_tuple_size = _Tp;

  template<typename _Tp>
    struct tuple_size<const __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };

  template<typename _Tp>
    struct tuple_size<volatile __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };

  template<typename _Tp>
    struct tuple_size<const volatile __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };


  template<typename _Tp>
    inline constexpr size_t tuple_size_v = tuple_size<_Tp>::value;



  template<size_t __i, typename _Tp>
    struct tuple_element;


  template<size_t __i, typename _Tp>
    using __tuple_element_t = typename tuple_element<__i, _Tp>::type;

  template<size_t __i, typename _Tp>
    struct tuple_element<__i, const _Tp>
    {
      using type = const __tuple_element_t<__i, _Tp>;
    };

  template<size_t __i, typename _Tp>
    struct tuple_element<__i, volatile _Tp>
    {
      using type = volatile __tuple_element_t<__i, _Tp>;
    };

  template<size_t __i, typename _Tp>
    struct tuple_element<__i, const volatile _Tp>
    {
      using type = const volatile __tuple_element_t<__i, _Tp>;
    };





  template<typename _Tp, typename... _Types>
    constexpr size_t
    __find_uniq_type_in_pack()
    {
      constexpr size_t __sz = sizeof...(_Types);
      constexpr bool __found[__sz] = { __is_same(_Tp, _Types) ... };
      size_t __n = __sz;
      for (size_t __i = 0; __i < __sz; ++__i)
 {
   if (__found[__i])
     {
       if (__n < __sz)
  return __sz;
       __n = __i;
     }
 }
      return __n;
    }
# 136 "/usr/include/c++/15.1.1/bits/utility.h" 3
  template<size_t __i, typename _Tp>
    using tuple_element_t = typename tuple_element<__i, _Tp>::type;




  template<size_t... _Indexes> struct _Index_tuple { };


  template<size_t _Num>
    struct _Build_index_tuple
    {
# 156 "/usr/include/c++/15.1.1/bits/utility.h" 3
      using __type = _Index_tuple<__integer_pack(_Num)...>;

    };




  template<typename _Tp, _Tp... _Idx>
    struct integer_sequence
    {



      typedef _Tp value_type;
      static constexpr size_t size() noexcept { return sizeof...(_Idx); }
    };


  template<typename _Tp, _Tp _Num>
    using make_integer_sequence



      = integer_sequence<_Tp, __integer_pack(_Num)...>;



  template<size_t... _Idx>
    using index_sequence = integer_sequence<size_t, _Idx...>;


  template<size_t _Num>
    using make_index_sequence = make_integer_sequence<size_t, _Num>;


  template<typename... _Types>
    using index_sequence_for = make_index_sequence<sizeof...(_Types)>;




  struct in_place_t {
    explicit in_place_t() = default;
  };

  inline constexpr in_place_t in_place{};

  template<typename _Tp> struct in_place_type_t
  {
    explicit in_place_type_t() = default;
  };

  template<typename _Tp>
    inline constexpr in_place_type_t<_Tp> in_place_type{};

  template<size_t _Idx> struct in_place_index_t
  {
    explicit in_place_index_t() = default;
  };

  template<size_t _Idx>
    inline constexpr in_place_index_t<_Idx> in_place_index{};

  template<typename>
    inline constexpr bool __is_in_place_type_v = false;

  template<typename _Tp>
    inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;

  template<typename>
    inline constexpr bool __is_in_place_index_v = false;

  template<size_t _Nm>
    inline constexpr bool __is_in_place_index_v<in_place_index_t<_Nm>> = true;




  template<size_t _Np, typename... _Types>
    struct _Nth_type
    { using type = __type_pack_element<_Np, _Types...>; };
# 284 "/usr/include/c++/15.1.1/bits/utility.h" 3
  struct _Swallow_assign
  {
    template<class _Tp>
      constexpr const _Swallow_assign&
      operator=(const _Tp&) const noexcept
      { return *this; }
  };
# 309 "/usr/include/c++/15.1.1/bits/utility.h" 3
  inline constexpr _Swallow_assign ignore{};
# 319 "/usr/include/c++/15.1.1/bits/utility.h" 3

}
# 63 "/usr/include/c++/15.1.1/bits/stl_pair.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 79 "/usr/include/c++/15.1.1/bits/stl_pair.h" 3
  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };


  inline constexpr piecewise_construct_t piecewise_construct =
    piecewise_construct_t();




  template<typename _T1, typename _T2>
    struct pair;

  template<typename...>
    class tuple;





  template<typename _Tp, size_t _Nm>
    struct array;

  template<size_t...>
    struct _Index_tuple;

  template<typename _Tp>
    class complex;

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
    get(pair<_Tp1, _Tp2>& __in) noexcept;

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
    get(pair<_Tp1, _Tp2>&& __in) noexcept;

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
    get(const pair<_Tp1, _Tp2>& __in) noexcept;

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
    get(const pair<_Tp1, _Tp2>&& __in) noexcept;

  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept;

  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept;

  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&&
    get(tuple<_Elements...>&& __t) noexcept;

  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&&
    get(const tuple<_Elements...>&& __t) noexcept;

  template<size_t _Int, typename _Tp, size_t _Nm>
    constexpr _Tp&
    get(array<_Tp, _Nm>&) noexcept;

  template<size_t _Int, typename _Tp, size_t _Nm>
    constexpr _Tp&&
    get(array<_Tp, _Nm>&&) noexcept;

  template<size_t _Int, typename _Tp, size_t _Nm>
    constexpr const _Tp&
    get(const array<_Tp, _Nm>&) noexcept;

  template<size_t _Int, typename _Tp, size_t _Nm>
    constexpr const _Tp&&
    get(const array<_Tp, _Nm>&&) noexcept;
# 176 "/usr/include/c++/15.1.1/bits/stl_pair.h" 3
  template <bool, typename _T1, typename _T2>
    struct _PCC
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, const _U2&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return __and_<is_convertible<const _U1&, _T1>,
        is_convertible<const _U2&, _T2>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, _U2&&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return __and_<is_convertible<_U1&&, _T1>,
        is_convertible<_U2&&, _T2>>::value;
      }
    };

  template <typename _T1, typename _T2>
    struct _PCC<false, _T1, _T2>
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return false;
      }
    };
# 278 "/usr/include/c++/15.1.1/bits/stl_pair.h" 3
  template<typename _U1, typename _U2> class __pair_base
  {

    template<typename _T1, typename _T2> friend struct pair;
    __pair_base() = default;
    ~__pair_base() = default;
    __pair_base(const __pair_base&) = default;
    __pair_base& operator=(const __pair_base&) = delete;

  };
# 301 "/usr/include/c++/15.1.1/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    struct pair
    : public __pair_base<_T1, _T2>
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;


      constexpr pair(const pair&) = default;
      constexpr pair(pair&&) = default;

      template<typename... _Args1, typename... _Args2>

 pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);


      void
      swap(pair& __p)
      noexcept(__and_<__is_nothrow_swappable<_T1>,
        __is_nothrow_swappable<_T2>>::value)
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }
# 349 "/usr/include/c++/15.1.1/bits/stl_pair.h" 3
    private:
      template<typename... _Args1, size_t... _Indexes1,
        typename... _Args2, size_t... _Indexes2>

 pair(tuple<_Args1...>&, tuple<_Args2...>&,
      _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);
    public:
# 733 "/usr/include/c++/15.1.1/bits/stl_pair.h" 3
#define __glibcxx_no_dangling_refs(_U1,_U2) 





      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>
      constexpr pair()
      : first(), second() { }

      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                       is_default_constructible<_U1>,
                       is_default_constructible<_U2>,
                       __not_<
                         __and_<__is_implicitly_default_constructible<_U1>,
                                __is_implicitly_default_constructible<_U2>>>>
                                   ::value, bool>::type = false>
      explicit constexpr pair()
      : first(), second() { }



      using _PCCP = _PCC<true, _T1, _T2>;



      template<typename _U1 = _T1, typename _U2=_T2, typename
        enable_if<_PCCP::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCP::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }


       template<typename _U1 = _T1, typename _U2=_T2, typename
  enable_if<_PCCP::template
       _ConstructiblePair<_U1, _U2>()
                   && !_PCCP::template
       _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
      explicit constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }



      template <typename _U1, typename _U2>
        using _PCCFP = _PCC<!is_same<_T1, _U1>::value
       || !is_same<_T2, _U2>::value,
       _T1, _T2>;


      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
     bool>::type=true>
 constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second)
 { ; }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
    && !_PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second)
 { ; }



#define _GLIBCXX_DEPRECATED_PAIR_CTOR __attribute__ ((__deprecated__ ("use 'nullptr' instead of '0' to " "initialize std::pair of move-only " "type and pointer")))







    private:



      struct __zero_as_null_pointer_constant
      {
 __zero_as_null_pointer_constant(int __zero_as_null_pointer_constant::*)
 { }
 template<typename _Tp,
   typename = __enable_if_t<is_null_pointer<_Tp>::value>>
 __zero_as_null_pointer_constant(_Tp) = delete;
      };

    public:




      template<typename _U1,
        __enable_if_t<__and_<__not_<is_reference<_U1>>,
        is_pointer<_T2>,
        is_constructible<_T1, _U1>,
        __not_<is_constructible<_T1, const _U1&>>,
        is_convertible<_U1, _T1>>::value,
        bool> = true>
 __attribute__ ((__deprecated__ ("use 'nullptr' instead of '0' to " "initialize std::pair of move-only " "type and pointer")))
 constexpr
 pair(_U1&& __x, __zero_as_null_pointer_constant, ...)
 : first(std::forward<_U1>(__x)), second(nullptr)
 { ; }

      template<typename _U1,
        __enable_if_t<__and_<__not_<is_reference<_U1>>,
        is_pointer<_T2>,
        is_constructible<_T1, _U1>,
        __not_<is_constructible<_T1, const _U1&>>,
        __not_<is_convertible<_U1, _T1>>>::value,
        bool> = false>
 __attribute__ ((__deprecated__ ("use 'nullptr' instead of '0' to " "initialize std::pair of move-only " "type and pointer")))
 explicit constexpr
 pair(_U1&& __x, __zero_as_null_pointer_constant, ...)
 : first(std::forward<_U1>(__x)), second(nullptr)
 { ; }

      template<typename _U2,
        __enable_if_t<__and_<is_pointer<_T1>,
        __not_<is_reference<_U2>>,
        is_constructible<_T2, _U2>,
        __not_<is_constructible<_T2, const _U2&>>,
        is_convertible<_U2, _T2>>::value,
        bool> = true>
 __attribute__ ((__deprecated__ ("use 'nullptr' instead of '0' to " "initialize std::pair of move-only " "type and pointer")))
 constexpr
 pair(__zero_as_null_pointer_constant, _U2&& __y, ...)
 : first(nullptr), second(std::forward<_U2>(__y))
 { ; }

      template<typename _U2,
        __enable_if_t<__and_<is_pointer<_T1>,
        __not_<is_reference<_U2>>,
        is_constructible<_T2, _U2>,
        __not_<is_constructible<_T2, const _U2&>>,
        __not_<is_convertible<_U2, _T2>>>::value,
        bool> = false>
 __attribute__ ((__deprecated__ ("use 'nullptr' instead of '0' to " "initialize std::pair of move-only " "type and pointer")))
 explicit constexpr
 pair(__zero_as_null_pointer_constant, _U2&& __y, ...)
 : first(nullptr), second(std::forward<_U2>(__y))
 { ; }
#undef _GLIBCXX_DEPRECATED_PAIR_CTOR


      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 { ; }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 { ; }


      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second))
 { ; }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second))
 { ; }

#undef __glibcxx_no_dangling_refs

      pair&
      operator=(__conditional_t<__and_<is_copy_assignable<_T1>,
           is_copy_assignable<_T2>>::value,
    const pair&, const __nonesuch&> __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(__conditional_t<__and_<is_move_assignable<_T1>,
           is_move_assignable<_T2>>::value,
    pair&&, __nonesuch&&> __p)
      noexcept(__and_<is_nothrow_move_assignable<_T1>,
        is_nothrow_move_assignable<_T2>>::value)
      {
 first = std::forward<first_type>(__p.first);
 second = std::forward<second_type>(__p.second);
 return *this;
      }

      template<typename _U1, typename _U2>
 typename enable_if<__and_<is_assignable<_T1&, const _U1&>,
      is_assignable<_T2&, const _U2&>>::value,
      pair&>::type
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<typename _U1, typename _U2>
 typename enable_if<__and_<is_assignable<_T1&, _U1&&>,
      is_assignable<_T2&, _U2&&>>::value,
      pair&>::type
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::forward<_U1>(__p.first);
   second = std::forward<_U2>(__p.second);
   return *this;
 }
# 1015 "/usr/include/c++/15.1.1/bits/stl_pair.h" 3
    };




  template<typename _T1, typename _T2> pair(_T1, _T2) -> pair<_T1, _T2>;
# 1057 "/usr/include/c++/15.1.1/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    [[__nodiscard__]]
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }
# 1070 "/usr/include/c++/15.1.1/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    [[__nodiscard__]]
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<typename _T1, typename _T2>
    [[__nodiscard__]]
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<typename _T1, typename _T2>
    [[__nodiscard__]]
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<typename _T1, typename _T2>
    [[__nodiscard__]]
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<typename _T1, typename _T2>
    [[__nodiscard__]]
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }
# 1112 "/usr/include/c++/15.1.1/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    inline


    typename enable_if<__and_<__is_swappable<_T1>,
                              __is_swappable<_T2>>::value>::type



    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }
# 1135 "/usr/include/c++/15.1.1/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    typename enable_if<!__and_<__is_swappable<_T1>,
          __is_swappable<_T2>>::value>::type
    swap(pair<_T1, _T2>&, pair<_T1, _T2>&) = delete;
# 1161 "/usr/include/c++/15.1.1/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }
# 1184 "/usr/include/c++/15.1.1/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    struct __is_tuple_like_impl<pair<_T1, _T2>> : true_type
    { };



  template<class _Tp1, class _Tp2>
    struct tuple_size<pair<_Tp1, _Tp2>>
    : public integral_constant<size_t, 2> { };


  template<class _Tp1, class _Tp2>
    struct tuple_element<0, pair<_Tp1, _Tp2>>
    { typedef _Tp1 type; };


  template<class _Tp1, class _Tp2>
    struct tuple_element<1, pair<_Tp1, _Tp2>>
    { typedef _Tp2 type; };


  template<typename _Tp1, typename _Tp2>
    inline constexpr size_t tuple_size_v<pair<_Tp1, _Tp2>> = 2;

  template<typename _Tp1, typename _Tp2>
    inline constexpr size_t tuple_size_v<const pair<_Tp1, _Tp2>> = 2;



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++14-extensions"
#pragma GCC diagnostic ignored "-Wc++17-extensions"
  template<typename _Tp>
    inline constexpr bool __is_pair = false;

  template<typename _Tp, typename _Up>
    inline constexpr bool __is_pair<pair<_Tp, _Up>> = true;
#pragma GCC diagnostic pop



  template<size_t _Int>
    struct __pair_get;

  template<>
    struct __pair_get<0>
    {
      template<typename _Tp1, typename _Tp2>
 static constexpr _Tp1&
 __get(pair<_Tp1, _Tp2>& __pair) noexcept
 { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
 static constexpr _Tp1&&
 __move_get(pair<_Tp1, _Tp2>&& __pair) noexcept
 { return std::forward<_Tp1>(__pair.first); }

      template<typename _Tp1, typename _Tp2>
 static constexpr const _Tp1&
 __const_get(const pair<_Tp1, _Tp2>& __pair) noexcept
 { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
 static constexpr const _Tp1&&
 __const_move_get(const pair<_Tp1, _Tp2>&& __pair) noexcept
 { return std::forward<const _Tp1>(__pair.first); }
    };

  template<>
    struct __pair_get<1>
    {
      template<typename _Tp1, typename _Tp2>
 static constexpr _Tp2&
 __get(pair<_Tp1, _Tp2>& __pair) noexcept
 { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
 static constexpr _Tp2&&
 __move_get(pair<_Tp1, _Tp2>&& __pair) noexcept
 { return std::forward<_Tp2>(__pair.second); }

      template<typename _Tp1, typename _Tp2>
 static constexpr const _Tp2&
 __const_get(const pair<_Tp1, _Tp2>& __pair) noexcept
 { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
 static constexpr const _Tp2&&
 __const_move_get(const pair<_Tp1, _Tp2>&& __pair) noexcept
 { return std::forward<const _Tp2>(__pair.second); }
    };






  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
    get(pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
    get(pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&
    get(const pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__const_get(__in); }

  template<size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, pair<_Tp1, _Tp2>>::type&&
    get(const pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__const_move_get(std::move(__in)); }



  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Tp, _Up>&& __p) noexcept
    { return std::move(__p.first); }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&&
    get(const pair<_Tp, _Up>&& __p) noexcept
    { return std::move(__p.first); }

  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Up, _Tp>&& __p) noexcept
    { return std::move(__p.second); }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&&
    get(const pair<_Up, _Tp>&& __p) noexcept
    { return std::move(__p.second); }
# 1365 "/usr/include/c++/15.1.1/bits/stl_pair.h" 3

}
# 65 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/15.1.1/bits/stl_iterator_base_types.h" 1 3
# 60 "/usr/include/c++/15.1.1/bits/stl_iterator_base_types.h" 3
#define _STL_ITERATOR_BASE_TYPES_H 1
# 76 "/usr/include/c++/15.1.1/bits/stl_iterator_base_types.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 95 "/usr/include/c++/15.1.1/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 127 "/usr/include/c++/15.1.1/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct [[__deprecated__]] iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 151 "/usr/include/c++/15.1.1/bits/stl_iterator_base_types.h" 3
  template<typename _Iterator>
    struct iterator_traits;




  template<typename _Iterator, typename = __void_t<>>
    struct __iterator_traits { };



  template<typename _Iterator>
    struct __iterator_traits<_Iterator,
        __void_t<typename _Iterator::iterator_category,
          typename _Iterator::value_type,
          typename _Iterator::difference_type,
          typename _Iterator::pointer,
          typename _Iterator::reference>>
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };


  template<typename _Iterator>
    struct iterator_traits
    : public __iterator_traits<_Iterator> { };
# 211 "/usr/include/c++/15.1.1/bits/stl_iterator_base_types.h" 3
  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };






  template<typename _Iter>
    __attribute__((__always_inline__))
    inline constexpr
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }




  template<typename _Iter>
    using __iter_category_t
      = typename iterator_traits<_Iter>::iterator_category;

  template<typename _InIter>
    using _RequireInputIter =
      __enable_if_t<is_convertible<__iter_category_t<_InIter>,
       input_iterator_tag>::value>;







  template<typename _It,
    typename _Cat = __iter_category_t<_It>>
    struct __is_random_access_iter
      : is_base_of<random_access_iterator_tag, _Cat>
    {
      typedef is_base_of<random_access_iterator_tag, _Cat> _Base;
      enum { __value = _Base::value };
    };








}






#define _GLIBCXX26_DEF_VAL_T(T) 
#define _GLIBCXX26_ALGO_DEF_VAL_T(_Iterator) 
# 66 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/15.1.1/bits/stl_iterator_base_funcs.h" 1 3
# 60 "/usr/include/c++/15.1.1/bits/stl_iterator_base_funcs.h" 3
#define _STL_ITERATOR_BASE_FUNCS_H 1





# 1 "/usr/include/c++/15.1.1/bits/concept_check.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/concept_check.h" 3
#define _CONCEPT_CHECK_H 1







#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wvariadic-macros"
# 53 "/usr/include/c++/15.1.1/bits/concept_check.h" 3
#define __glibcxx_function_requires(...) 
#define __glibcxx_class_requires(_a,_b) 
#define __glibcxx_class_requires2(_a,_b,_c) 
#define __glibcxx_class_requires3(_a,_b,_c,_d) 
#define __glibcxx_class_requires4(_a,_b,_c,_d,_e) 
# 86 "/usr/include/c++/15.1.1/bits/concept_check.h" 3
#pragma GCC diagnostic pop
# 67 "/usr/include/c++/15.1.1/bits/stl_iterator_base_funcs.h" 2 3
# 1 "/usr/include/c++/15.1.1/debug/assertions.h" 1 3
# 30 "/usr/include/c++/15.1.1/debug/assertions.h" 3
#define _GLIBCXX_DEBUG_ASSERTIONS_H 1





#define __glibcxx_requires_non_empty_range(_First,_Last) __glibcxx_assert(_First != _Last)

#define __glibcxx_requires_subscript(_N) __glibcxx_assert(_N < this->size())


#define __glibcxx_requires_nonempty() __glibcxx_assert(!this->empty())
# 65 "/usr/include/c++/15.1.1/debug/assertions.h" 3
#define _GLIBCXX_DEBUG_ASSERT(_Condition) 
#define _GLIBCXX_DEBUG_PEDASSERT(_Condition) 
#define _GLIBCXX_DEBUG_ONLY(_Statement) 
# 68 "/usr/include/c++/15.1.1/bits/stl_iterator_base_funcs.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{




  template <typename> struct _List_iterator;
  template <typename> struct _List_const_iterator;


  template<typename _InputIterator>
    inline constexpr
    typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {

     

      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    __attribute__((__always_inline__))
    inline constexpr
    typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {

     

      return __last - __first;
    }



  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_iterator<_Tp>,
        std::_List_iterator<_Tp>,
        input_iterator_tag);

  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_const_iterator<_Tp>,
        std::_List_const_iterator<_Tp>,
        input_iterator_tag);




  template<typename _OutputIterator>
    void
    __distance(_OutputIterator, _OutputIterator, output_iterator_tag) = delete;
# 146 "/usr/include/c++/15.1.1/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    [[__nodiscard__]] __attribute__((__always_inline__))
    inline constexpr
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline constexpr void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {

     
      do { if (std::__is_constant_evaluated() && !bool(__n >= 0)) std::__glibcxx_assert_fail(); } while (false);
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline constexpr void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {

     

      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline constexpr void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {

     

      if (__builtin_constant_p(__n) && __n == 1)
 ++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
 --__i;
      else
 __i += __n;
    }



  template<typename _OutputIterator, typename _Distance>
    void
    __advance(_OutputIterator&, _Distance, output_iterator_tag) = delete;
# 219 "/usr/include/c++/15.1.1/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    __attribute__((__always_inline__))
    inline constexpr void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }



  template<typename _InputIterator>
    [[__nodiscard__]] [[__gnu__::__always_inline__]]
    inline constexpr _InputIterator
    next(_InputIterator __x, typename
  iterator_traits<_InputIterator>::difference_type __n = 1)
    {

     
      std::advance(__x, __n);
      return __x;
    }

  template<typename _BidirectionalIterator>
    [[__nodiscard__]] [[__gnu__::__always_inline__]]
    inline constexpr _BidirectionalIterator
    prev(_BidirectionalIterator __x, typename
  iterator_traits<_BidirectionalIterator>::difference_type __n = 1)
    {

     

      std::advance(__x, -__n);
      return __x;
    }




}
# 67 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
#define _STL_ITERATOR_H 1





# 1 "/usr/include/c++/15.1.1/bits/ptr_traits.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/ptr_traits.h" 3
#define _PTR_TRAITS_H 1
# 42 "/usr/include/c++/15.1.1/bits/ptr_traits.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{




  class __undefined;



  template<typename _Tp>
    struct __get_first_arg
    { using type = __undefined; };

  template<template<typename, typename...> class _SomeTemplate, typename _Tp,
           typename... _Types>
    struct __get_first_arg<_SomeTemplate<_Tp, _Types...>>
    { using type = _Tp; };



  template<typename _Tp, typename _Up>
    struct __replace_first_arg
    { };

  template<template<typename, typename...> class _SomeTemplate, typename _Up,
           typename _Tp, typename... _Types>
    struct __replace_first_arg<_SomeTemplate<_Tp, _Types...>, _Up>
    { using type = _SomeTemplate<_Up, _Types...>; };


  template<typename _Ptr, typename = void>
    struct __ptr_traits_elem : __get_first_arg<_Ptr>
    { };







  template<typename _Ptr>
    struct __ptr_traits_elem<_Ptr, __void_t<typename _Ptr::element_type>>
    { using type = typename _Ptr::element_type; };


  template<typename _Ptr>
    using __ptr_traits_elem_t = typename __ptr_traits_elem<_Ptr>::type;




  template<typename _Ptr, typename _Elt, bool = is_void<_Elt>::value>
    struct __ptr_traits_ptr_to
    {
      using pointer = _Ptr;
      using element_type = _Elt;







      static pointer
      pointer_to(element_type& __r)





      { return pointer::pointer_to(__r); }
    };


  template<typename _Ptr, typename _Elt>
    struct __ptr_traits_ptr_to<_Ptr, _Elt, true>
    { };


  template<typename _Tp>
    struct __ptr_traits_ptr_to<_Tp*, _Tp, false>
    {
      using pointer = _Tp*;
      using element_type = _Tp;






      static pointer
      pointer_to(element_type& __r) noexcept
      { return std::addressof(__r); }
    };

  template<typename _Ptr, typename _Elt>
    struct __ptr_traits_impl : __ptr_traits_ptr_to<_Ptr, _Elt>
    {
    private:
      template<typename _Tp>
 using __diff_t = typename _Tp::difference_type;

      template<typename _Tp, typename _Up>
 using __rebind = __type_identity<typename _Tp::template rebind<_Up>>;

    public:

      using pointer = _Ptr;


      using element_type = _Elt;


      using difference_type = __detected_or_t<ptrdiff_t, __diff_t, _Ptr>;


      template<typename _Up>
 using rebind = typename __detected_or_t<__replace_first_arg<_Ptr, _Up>,
      __rebind, _Ptr, _Up>::type;
    };



  template<typename _Ptr>
    struct __ptr_traits_impl<_Ptr, __undefined>
    { };







  template<typename _Ptr>
    struct pointer_traits : __ptr_traits_impl<_Ptr, __ptr_traits_elem_t<_Ptr>>
    { };







  template<typename _Tp>
    struct pointer_traits<_Tp*> : __ptr_traits_ptr_to<_Tp*, _Tp>
    {

      typedef _Tp* pointer;

      typedef _Tp element_type;

      typedef ptrdiff_t difference_type;

      template<typename _Up> using rebind = _Up*;
    };


  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;


  template<typename _Tp>
    [[__gnu__::__always_inline__]]
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
    {
      static_assert(!std::is_function<_Tp>::value, "std::to_address argument "
      "must not be a function pointer");
      return __ptr;
    }





  template<typename _Ptr>
    constexpr typename std::pointer_traits<_Ptr>::element_type*
    __to_address(const _Ptr& __ptr)
    { return std::__to_address(__ptr.operator->()); }
# 268 "/usr/include/c++/15.1.1/bits/ptr_traits.h" 3

}
# 68 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 2 3
# 85 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 108 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
 
# 108 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 130 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
      template<typename _Iter>
 friend class reverse_iterator;
# 149 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::pointer pointer;

      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
# 180 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
      constexpr
      reverse_iterator()
      noexcept(noexcept(_Iterator()))
      : current()
      { }




      explicit constexpr
      reverse_iterator(iterator_type __x)
      noexcept(noexcept(_Iterator(__x)))
      : current(__x)
      { }




      constexpr
      reverse_iterator(const reverse_iterator& __x)
      noexcept(noexcept(_Iterator(__x.current)))
      : current(__x.current)
      { }


      reverse_iterator& operator=(const reverse_iterator&) = default;






      template<typename _Iter>



 constexpr
        reverse_iterator(const reverse_iterator<_Iter>& __x)
 noexcept(noexcept(_Iterator(__x.current)))
 : current(__x.current)
 { }


      template<typename _Iter>




 constexpr
 reverse_iterator&
 operator=(const reverse_iterator<_Iter>& __x)
 noexcept(noexcept(current = __x.current))
 {
   current = __x.current;
   return *this;
 }





      [[__nodiscard__]]
      constexpr iterator_type
      base() const
      noexcept(noexcept(_Iterator(current)))
      { return current; }
# 257 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
      [[__nodiscard__]]
      constexpr reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      [[__nodiscard__]]
      constexpr pointer
      operator->() const




      {


 _Iterator __tmp = current;
 --__tmp;
 return _S_to_pointer(__tmp);
      }






      constexpr reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      constexpr reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      constexpr reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      constexpr reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      [[__nodiscard__]]
      constexpr reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }







      constexpr reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      [[__nodiscard__]]
      constexpr reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }







      constexpr reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      [[__nodiscard__]]
      constexpr reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
# 417 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
    private:
      template<typename _Tp>
 static constexpr _Tp*
 _S_to_pointer(_Tp* __p)
        { return __p; }

      template<typename _Tp>
 static constexpr pointer
 _S_to_pointer(_Tp __t)
        { return __t.operator->(); }
    };
# 440 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
  template<typename _Iterator>
    [[__nodiscard__]]
    inline constexpr bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    [[__nodiscard__]]
    inline constexpr bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    [[__nodiscard__]]
    inline constexpr bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    [[__nodiscard__]]
    inline constexpr bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    [[__nodiscard__]]
    inline constexpr bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    [[__nodiscard__]]
    inline constexpr bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }




  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline constexpr bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline constexpr bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __x.base() > __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline constexpr bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() != __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline constexpr bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __x.base() < __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline constexpr bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() >= __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline constexpr bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() <= __y.base(); }
# 617 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline constexpr auto
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base())
    { return __y.base() - __x.base(); }


  template<typename _Iterator>
    [[__nodiscard__]]
    inline constexpr reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _Iterator>
    inline constexpr reverse_iterator<_Iterator>
    __make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }





  template<typename _Iterator>
    [[__nodiscard__]]
    inline constexpr reverse_iterator<_Iterator>
    make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }
# 659 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
  template<typename _Iterator>
    struct __is_move_iterator<reverse_iterator<_Iterator> >
      : __is_move_iterator<_Iterator>
    { };
# 676 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;





      explicit
      back_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 714 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
     
      back_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_back(__value);
 return *this;
      }

     
      back_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_back(std::move(__value));
 return *this;
      }



      [[__nodiscard__]]
      back_insert_iterator&
      operator*()
      { return *this; }


     
      back_insert_iterator&
      operator++()
      { return *this; }


     
      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 761 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
  template<typename _Container>
    [[__nodiscard__]]
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 777 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;





      explicit
      front_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 815 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
     
      front_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_front(__value);
 return *this;
      }

     
      front_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_front(std::move(__value));
 return *this;
      }



      [[__nodiscard__]]
      front_insert_iterator&
      operator*()
      { return *this; }


     
      front_insert_iterator&
      operator++()
      { return *this; }


     
      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 862 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
  template<typename _Container>
    [[__nodiscard__]]
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 882 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {



      typedef typename _Container::iterator _Iter;

    protected:
      _Container* container;
      _Iter iter;

    public:

      typedef _Container container_type;
# 907 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
     
      insert_iterator(_Container& __x, _Iter __i)
      : container(std::__addressof(__x)), iter(__i) {}
# 943 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
     
      insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }

     
      insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 iter = container->insert(iter, std::move(__value));
 ++iter;
 return *this;
      }



      [[__nodiscard__]]
      insert_iterator&
      operator*()
      { return *this; }


     
      insert_iterator&
      operator++()
      { return *this; }


     
      insert_iterator&
      operator++(int)
      { return *this; }
    };

#pragma GCC diagnostic pop
# 1002 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
  template<typename _Container>
    [[__nodiscard__]]
    inline insert_iterator<_Container>
    inserter(_Container& __x, typename _Container::iterator __i)
    { return insert_iterator<_Container>(__x, __i); }





}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 1025 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef std::iterator_traits<_Iterator> __traits_type;


      template<typename _Iter>
 using __convertible_from
   = std::__enable_if_t<std::is_convertible<_Iter, _Iterator>::value>;


    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;





      __attribute__((__always_inline__))
      constexpr
      __normal_iterator() noexcept
      : _M_current() { }

      __attribute__((__always_inline__))
      explicit constexpr
      __normal_iterator(const _Iterator& __i) noexcept
      : _M_current(__i) { }






      template<typename _Iter, typename = __convertible_from<_Iter>>

 [[__gnu__::__always_inline__]]
 constexpr
 __normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
 noexcept
# 1082 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
        : _M_current(__i.base()) { }



      [[__nodiscard__]] __attribute__((__always_inline__))
      constexpr
      reference
      operator*() const noexcept
      { return *_M_current; }

      [[__nodiscard__]] __attribute__((__always_inline__))
      constexpr
      pointer
      operator->() const noexcept
      { return _M_current; }

      __attribute__((__always_inline__))
      constexpr
      __normal_iterator&
      operator++() noexcept
      {
 ++_M_current;
 return *this;
      }

      __attribute__((__always_inline__))
      constexpr
      __normal_iterator
      operator++(int) noexcept
      { return __normal_iterator(_M_current++); }



      __attribute__((__always_inline__))
      constexpr
      __normal_iterator&
      operator--() noexcept
      {
 --_M_current;
 return *this;
      }

      __attribute__((__always_inline__))
      constexpr
      __normal_iterator
      operator--(int) noexcept
      { return __normal_iterator(_M_current--); }



      [[__nodiscard__]] __attribute__((__always_inline__))
      constexpr
      reference
      operator[](difference_type __n) const noexcept
      { return _M_current[__n]; }

      __attribute__((__always_inline__))
      constexpr
      __normal_iterator&
      operator+=(difference_type __n) noexcept
      { _M_current += __n; return *this; }

      [[__nodiscard__]] __attribute__((__always_inline__))
      constexpr
      __normal_iterator
      operator+(difference_type __n) const noexcept
      { return __normal_iterator(_M_current + __n); }

      __attribute__((__always_inline__))
      constexpr
      __normal_iterator&
      operator-=(difference_type __n) noexcept
      { _M_current -= __n; return *this; }

      [[__nodiscard__]] __attribute__((__always_inline__))
      constexpr
      __normal_iterator
      operator-(difference_type __n) const noexcept
      { return __normal_iterator(_M_current - __n); }

      [[__nodiscard__]] __attribute__((__always_inline__))
      constexpr
      const _Iterator&
      base() const noexcept
      { return _M_current; }
    };
# 1217 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__))
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }






  template<typename _IteratorL, typename _IteratorR, typename _Container>


    [[__nodiscard__, __gnu__::__always_inline__]]
    constexpr auto
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
    -> decltype(__lhs.base() - __rhs.base())





    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__)) constexpr
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    noexcept
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}

namespace std __attribute__ ((__visibility__ ("default")))
{

# 1434 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class move_iterator



    {
      _Iterator _M_current;

      using __traits_type = iterator_traits<_Iterator>;

      using __base_ref = typename __traits_type::reference;


      template<typename _Iter2>
 friend class move_iterator;
# 1473 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
    public:
      using iterator_type = _Iterator;
# 1485 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;

      typedef _Iterator pointer;


      using reference
 = __conditional_t<is_reference<__base_ref>::value,
     typename remove_reference<__base_ref>::type&&,
     __base_ref>;


      constexpr
      move_iterator()
      : _M_current() { }

      explicit constexpr
      move_iterator(iterator_type __i)
      : _M_current(std::move(__i)) { }

      template<typename _Iter>



 constexpr
 move_iterator(const move_iterator<_Iter>& __i)
 : _M_current(__i._M_current) { }

      template<typename _Iter>




 constexpr
 move_iterator& operator=(const move_iterator<_Iter>& __i)
 {
   _M_current = __i._M_current;
   return *this;
 }


      [[__nodiscard__]]
      constexpr iterator_type
      base() const
      { return _M_current; }
# 1543 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
      [[__nodiscard__]]
      constexpr reference
      operator*() const



      { return static_cast<reference>(*_M_current); }


      [[__nodiscard__]]
      constexpr pointer
      operator->() const
      { return _M_current; }

      constexpr move_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      constexpr move_iterator
      operator++(int)
      {
 move_iterator __tmp = *this;
 ++_M_current;
 return __tmp;
      }







      constexpr move_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      constexpr move_iterator
      operator--(int)
      {
 move_iterator __tmp = *this;
 --_M_current;
 return __tmp;
      }

      [[__nodiscard__]]
      constexpr move_iterator
      operator+(difference_type __n) const
      { return move_iterator(_M_current + __n); }

      constexpr move_iterator&
      operator+=(difference_type __n)
      {
 _M_current += __n;
 return *this;
      }

      [[__nodiscard__]]
      constexpr move_iterator
      operator-(difference_type __n) const
      { return move_iterator(_M_current - __n); }

      constexpr move_iterator&
      operator-=(difference_type __n)
      {
 _M_current -= __n;
 return *this;
      }

      [[__nodiscard__]]
      constexpr reference
      operator[](difference_type __n) const



      { return std::move(_M_current[__n]); }
# 1657 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
    };

  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline constexpr bool
    operator==(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)



    { return __x.base() == __y.base(); }
# 1678 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline constexpr bool
    operator!=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }


  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline constexpr bool
    operator<(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)



    { return __x.base() < __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline constexpr bool
    operator<=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)



    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline constexpr bool
    operator>(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)



    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline constexpr bool
    operator>=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)



    { return !(__x < __y); }




  template<typename _Iterator>
    [[__nodiscard__]]
    inline constexpr bool
    operator==(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)

    { return __x.base() == __y.base(); }
# 1745 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
  template<typename _Iterator>
    [[__nodiscard__]]
    inline constexpr bool
    operator!=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    [[__nodiscard__]]
    inline constexpr bool
    operator<(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __x.base() < __y.base(); }

  template<typename _Iterator>
    [[__nodiscard__]]
    inline constexpr bool
    operator<=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    [[__nodiscard__]]
    inline constexpr bool
    operator>(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    [[__nodiscard__]]
    inline constexpr bool
    operator>=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x < __y); }



  template<typename _IteratorL, typename _IteratorR>
    [[__nodiscard__]]
    inline constexpr auto
    operator-(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    [[__nodiscard__]]
    inline constexpr move_iterator<_Iterator>
    operator+(typename move_iterator<_Iterator>::difference_type __n,
       const move_iterator<_Iterator>& __x)



    { return __x + __n; }

  template<typename _Iterator>
    [[__nodiscard__]]
    inline constexpr move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
    { return move_iterator<_Iterator>(std::move(__i)); }

  template<typename _Iterator, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
  _Iterator, move_iterator<_Iterator>>>
    [[__nodiscard__]]
    constexpr _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
    { return _ReturnType(__i); }



  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
        const _Tp*, move_iterator<_Tp*>>>
    [[__nodiscard__]]
    constexpr _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
    { return _ReturnType(__i); }

  template<typename _Iterator>
    struct __is_move_iterator<move_iterator<_Iterator> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

#define _GLIBCXX_MAKE_MOVE_ITERATOR(_Iter) std::make_move_iterator(_Iter)
#define _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(_Iter) std::__make_move_if_noexcept_iterator(_Iter)
# 2980 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3

}

namespace __gnu_debug
{
  template<typename _Iterator, typename _Sequence, typename _Category>
    class _Safe_iterator;
}

namespace std __attribute__ ((__visibility__ ("default")))
{





  template<typename _Iterator, typename _Container>
    [[__nodiscard__]] __attribute__((__always_inline__))
   
    inline _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
    noexcept(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }


  template<typename _Iterator>
    [[__nodiscard__]] __attribute__((__always_inline__))
   
    inline _Iterator
    __niter_base(_Iterator __it)
    noexcept(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
# 3027 "/usr/include/c++/15.1.1/bits/stl_iterator.h" 3
  template<typename _Ite, typename _Seq>
   
    decltype(std::__niter_base(std::declval<_Ite>()))
    __niter_base(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq,
   std::random_access_iterator_tag>&)
    noexcept(std::is_nothrow_copy_constructible<_Ite>::value);



  template<typename _Iterator>
   
    inline auto
    __niter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
    { return __make_reverse_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
   
    inline auto
    __niter_base(move_iterator<_Iterator> __it)
    -> decltype(make_move_iterator(__niter_base(__it.base())))
    { return make_move_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
   
    inline auto
    __miter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
    { return __make_reverse_iterator(__miter_base(__it.base())); }

  template<typename _Iterator>
   
    inline auto
    __miter_base(move_iterator<_Iterator> __it)
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }






  template<typename _From, typename _To>
    [[__nodiscard__]]
   
    inline _From
    __niter_wrap(_From __from, _To __res)
    { return __from + (std::__niter_base(__res) - std::__niter_base(__from)); }


  template<typename _Iterator>
    [[__nodiscard__]] __attribute__((__always_inline__))
   
    inline _Iterator
    __niter_wrap(const _Iterator&, _Iterator __res)
    { return __res; }






  template<typename _InputIterator>
    using __iter_key_t = remove_const_t<



      typename iterator_traits<_InputIterator>::value_type::first_type>;


  template<typename _InputIterator>
    using __iter_val_t



      = typename iterator_traits<_InputIterator>::value_type::second_type;


  template<typename _T1, typename _T2>
    struct pair;

  template<typename _InputIterator>
    using __iter_to_alloc_t
      = pair<const __iter_key_t<_InputIterator>, __iter_val_t<_InputIterator>>;



}
# 68 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 2 3

# 1 "/usr/include/c++/15.1.1/debug/debug.h" 1 3
# 30 "/usr/include/c++/15.1.1/debug/debug.h" 3
#define _GLIBCXX_DEBUG_MACRO_SWITCH_H 1
# 48 "/usr/include/c++/15.1.1/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;

  template<typename _Ite, typename _Seq, typename _Cat>
    struct _Safe_iterator;
}



#define __glibcxx_requires_cond(_Cond,_Msg) 
#define __glibcxx_requires_valid_range(_First,_Last) 
#define __glibcxx_requires_can_increment(_First,_Size) 
#define __glibcxx_requires_can_increment_range(_First1,_Last1,_First2) 
#define __glibcxx_requires_can_decrement_range(_First1,_Last1,_First2) 
#define __glibcxx_requires_sorted(_First,_Last) 
#define __glibcxx_requires_sorted_pred(_First,_Last,_Pred) 
#define __glibcxx_requires_sorted_set(_First1,_Last1,_First2) 
#define __glibcxx_requires_sorted_set_pred(_First1,_Last1,_First2,_Pred) 
#define __glibcxx_requires_partitioned_lower(_First,_Last,_Value) 
#define __glibcxx_requires_partitioned_upper(_First,_Last,_Value) 
#define __glibcxx_requires_partitioned_lower_pred(_First,_Last,_Value,_Pred) 
#define __glibcxx_requires_partitioned_upper_pred(_First,_Last,_Value,_Pred) 
#define __glibcxx_requires_heap(_First,_Last) 
#define __glibcxx_requires_heap_pred(_First,_Last,_Pred) 
#define __glibcxx_requires_string(_String) 
#define __glibcxx_requires_string_len(_String,_Len) 
#define __glibcxx_requires_irreflexive(_First,_Last) 
#define __glibcxx_requires_irreflexive2(_First,_Last) 
#define __glibcxx_requires_irreflexive_pred(_First,_Last,_Pred) 
#define __glibcxx_requires_irreflexive_pred2(_First,_Last,_Pred) 
# 70 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 2 3

# 1 "/usr/include/c++/15.1.1/bits/predefined_ops.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/predefined_ops.h" 3
#define _GLIBCXX_PREDEFINED_OPS_H 1



namespace __gnu_cxx
{
namespace __ops
{
  struct _Iter_less_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      constexpr
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 < *__it2; }
  };

  constexpr
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }

  struct _Iter_less_val
  {

    constexpr _Iter_less_val() = default;




   
    explicit
    _Iter_less_val(_Iter_less_iter) { }

    template<typename _Iterator, typename _Value>
     
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it < __val; }
  };

 
  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }

 
  inline _Iter_less_val
  __iter_comp_val(_Iter_less_iter)
  { return _Iter_less_val(); }

  struct _Val_less_iter
  {

    constexpr _Val_less_iter() = default;




   
    explicit
    _Val_less_iter(_Iter_less_iter) { }

    template<typename _Value, typename _Iterator>
     
      bool
      operator()(_Value& __val, _Iterator __it) const
      { return __val < *__it; }
  };

 
  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }

 
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }

  struct _Iter_equal_to_iter
  {
    template<typename _Iterator1, typename _Iterator2>
     
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 == *__it2; }
  };

 
  inline _Iter_equal_to_iter
  __iter_equal_to_iter()
  { return _Iter_equal_to_iter(); }

  struct _Iter_equal_to_val
  {
    template<typename _Iterator, typename _Value>
     
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it == __val; }
  };

 
  inline _Iter_equal_to_val
  __iter_equal_to_val()
  { return _Iter_equal_to_val(); }

 
  inline _Iter_equal_to_val
  __iter_comp_val(_Iter_equal_to_iter)
  { return _Iter_equal_to_val(); }

  template<typename _Compare>
    struct _Iter_comp_iter
    {
      _Compare _M_comp;

      explicit constexpr
      _Iter_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      template<typename _Iterator1, typename _Iterator2>
        constexpr
        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
        { return bool(_M_comp(*__it1, *__it2)); }
    };

  template<typename _Compare>
    constexpr
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
    { return _Iter_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Iter_comp_val
    {
      _Compare _M_comp;

     
      explicit
      _Iter_comp_val(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

     
      explicit
      _Iter_comp_val(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


     
      explicit
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Iterator, typename _Value>

 bool
 operator()(_Iterator __it, _Value& __val)
 { return bool(_M_comp(*__it, __val)); }
    };

  template<typename _Compare>
   
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Compare __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
   
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Val_comp_iter
    {
      _Compare _M_comp;

     
      explicit
      _Val_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

     
      explicit
      _Val_comp_iter(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


     
      explicit
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Value, typename _Iterator>

 bool
 operator()(_Value& __val, _Iterator __it)
 { return bool(_M_comp(__val, *__it)); }
    };

  template<typename _Compare>
   
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Compare __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
   
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Value>
    struct _Iter_equals_val
    {
      _Value& _M_value;

     
      explicit
      _Iter_equals_val(_Value& __value)
 : _M_value(__value)
      { }

      template<typename _Iterator>

 bool
 operator()(_Iterator __it)
 { return *__it == _M_value; }
    };

  template<typename _Value>
   
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
    { return _Iter_equals_val<_Value>(__val); }

  template<typename _Iterator1>
    struct _Iter_equals_iter
    {
      _Iterator1 _M_it1;

     
      explicit
      _Iter_equals_iter(_Iterator1 __it1)
 : _M_it1(__it1)
      { }

      template<typename _Iterator2>

 bool
 operator()(_Iterator2 __it2)
 { return *__it2 == *_M_it1; }
    };

  template<typename _Iterator>
   
    inline _Iter_equals_iter<_Iterator>
    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)
    { return _Iter_equals_iter<_Iterator>(__it); }

  template<typename _Predicate>
    struct _Iter_pred
    {
      _Predicate _M_pred;

     
      explicit
      _Iter_pred(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>

 bool
 operator()(_Iterator __it)
 { return bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
   
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
    { return _Iter_pred<_Predicate>(std::move(__pred)); }

  template<typename _Compare, typename _Value>
    struct _Iter_comp_to_val
    {
      _Compare _M_comp;
      _Value& _M_value;

     
      _Iter_comp_to_val(_Compare __comp, _Value& __value)
 : _M_comp(std::move(__comp)), _M_value(__value)
      { }

      template<typename _Iterator>

 bool
 operator()(_Iterator __it)
 { return bool(_M_comp(*__it, _M_value)); }
    };

  template<typename _Compare, typename _Value>
    _Iter_comp_to_val<_Compare, _Value>
   
    __iter_comp_val(_Compare __comp, _Value &__val)
    {
      return _Iter_comp_to_val<_Compare, _Value>(std::move(__comp), __val);
    }

  template<typename _Compare, typename _Iterator1>
    struct _Iter_comp_to_iter
    {
      _Compare _M_comp;
      _Iterator1 _M_it1;

     
      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)
 : _M_comp(std::move(__comp)), _M_it1(__it1)
      { }

      template<typename _Iterator2>

 bool
 operator()(_Iterator2 __it2)
 { return bool(_M_comp(*__it2, *_M_it1)); }
    };

  template<typename _Compare, typename _Iterator>
   
    inline _Iter_comp_to_iter<_Compare, _Iterator>
    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)
    {
      return _Iter_comp_to_iter<_Compare, _Iterator>(
   std::move(__comp._M_comp), __it);
    }

  template<typename _Predicate>
    struct _Iter_negate
    {
      _Predicate _M_pred;

     
      explicit
      _Iter_negate(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>

 bool
 operator()(_Iterator __it)
 { return !bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
   
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
    { return _Iter_negate<_Predicate>(std::move(__pred._M_pred)); }

}
}
# 72 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 2 3




# 1 "/usr/include/c++/15.1.1/bit" 1 3
# 30 "/usr/include/c++/15.1.1/bit" 3
#define _GLIBCXX_BIT 1







# 1 "/usr/include/c++/15.1.1/concepts" 1 3
# 31 "/usr/include/c++/15.1.1/concepts" 3
#define _GLIBCXX_CONCEPTS 1





#define __glibcxx_want_concepts 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 55 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_incomplete_container_elements 201505L





#undef __glibcxx_want_incomplete_container_elements



#define __glibcxx_uncaught_exceptions 201411L





#undef __glibcxx_want_uncaught_exceptions



#define __glibcxx_allocator_traits_is_always_equal 201411L





#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 110 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_shared_ptr_arrays 201611L





#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t



#define __glibcxx_enable_shared_from_this 201603L





#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine



#define __glibcxx_exchange_function 201304L





#undef __glibcxx_want_exchange_function



#define __glibcxx_integer_sequence 201304L





#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final



#define __glibcxx_make_reverse_iterator 201402L





#undef __glibcxx_want_make_reverse_iterator



#define __glibcxx_null_iterators 201304L





#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases



#define __glibcxx_transparent_operators 201510L





#undef __glibcxx_want_transparent_operators



#define __glibcxx_tuple_element_t 201402L





#undef __glibcxx_want_tuple_element_t



#define __glibcxx_tuples_by_type 201304L





#undef __glibcxx_want_tuples_by_type



#define __glibcxx_robust_nonmodifying_seq_ops 201304L





#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 285 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_to_chars 201611L





#undef __glibcxx_want_to_chars



#define __glibcxx_chrono_udls 201304L





#undef __glibcxx_want_chrono_udls



#define __glibcxx_complex_udls 201309L





#undef __glibcxx_want_complex_udls



#define __glibcxx_generic_associative_lookup 201304L





#undef __glibcxx_want_generic_associative_lookup



#define __glibcxx_make_unique 201304L





#undef __glibcxx_want_make_unique



#define __glibcxx_quoted_string_io 201304L





#undef __glibcxx_want_quoted_string_io



#define __glibcxx_shared_timed_mutex 201402L





#undef __glibcxx_want_shared_timed_mutex



#define __glibcxx_string_udls 201304L





#undef __glibcxx_want_string_udls



#define __glibcxx_addressof_constexpr 201603L





#undef __glibcxx_want_addressof_constexpr



#define __glibcxx_any 201606L





#undef __glibcxx_want_any



#define __glibcxx_apply 201603L





#undef __glibcxx_want_apply



#define __glibcxx_as_const 201510L





#undef __glibcxx_want_as_const



#define __glibcxx_atomic_is_always_lock_free 201603L





#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant



#define __glibcxx_byte 201603L





#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations



#define __glibcxx_hardware_interference_size 201703L





#undef __glibcxx_want_hardware_interference_size



#define __glibcxx_invoke 201411L





#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable



#define __glibcxx_launder 201606L





#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits



#define __glibcxx_make_from_tuple 201606L





#undef __glibcxx_want_make_from_tuple



#define __glibcxx_not_fn 201603L





#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 545 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_variant 202102L





#undef __glibcxx_want_variant



#define __glibcxx_lcm 201606L





#undef __glibcxx_want_lcm



#define __glibcxx_gcd 201606L





#undef __glibcxx_want_gcd



#define __glibcxx_gcd_lcm 201606L





#undef __glibcxx_want_gcd_lcm
# 590 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_raw_memory_algorithms 201606L





#undef __glibcxx_want_raw_memory_algorithms
# 605 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_array_constexpr 201803L





#undef __glibcxx_want_array_constexpr



#define __glibcxx_nonmember_container_access 201411L





#undef __glibcxx_want_nonmember_container_access



#define __glibcxx_clamp 201603L





#undef __glibcxx_want_clamp



#define __glibcxx_sample 201603L





#undef __glibcxx_want_sample



#define __glibcxx_boyer_moore_searcher 201603L





#undef __glibcxx_want_boyer_moore_searcher
# 660 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_chrono 201611L





#undef __glibcxx_want_chrono



#define __glibcxx_execution 201902L





#undef __glibcxx_want_execution



#define __glibcxx_filesystem 201703L





#undef __glibcxx_want_filesystem



#define __glibcxx_hypot 201603L





#undef __glibcxx_want_hypot



#define __glibcxx_map_try_emplace 201411L





#undef __glibcxx_want_map_try_emplace



#define __glibcxx_math_special_functions 201603L





#undef __glibcxx_want_math_special_functions



#define __glibcxx_memory_resource 201603L
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource



#define __glibcxx_node_extract 201606L





#undef __glibcxx_want_node_extract



#define __glibcxx_parallel_algorithm 201603L





#undef __glibcxx_want_parallel_algorithm



#define __glibcxx_scoped_lock 201703L





#undef __glibcxx_want_scoped_lock



#define __glibcxx_shared_mutex 201505L





#undef __glibcxx_want_shared_mutex



#define __glibcxx_shared_ptr_weak_type 201606L





#undef __glibcxx_want_shared_ptr_weak_type
# 790 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_string_view 201803L





#undef __glibcxx_want_string_view



#define __glibcxx_unordered_map_try_emplace 201411L





#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 950 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_optional 201606L





#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1025 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_char_traits 201611L





#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1390 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_string 201611L





#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 39 "/usr/include/c++/15.1.1/concepts" 2 3
# 39 "/usr/include/c++/15.1.1/bit" 2 3
# 58 "/usr/include/c++/15.1.1/bit" 3
#define __glibcxx_want_bit_cast 
#define __glibcxx_want_byteswap 
#define __glibcxx_want_bitops 
#define __glibcxx_want_int_pow2 
#define __glibcxx_want_endian 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 55 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_incomplete_container_elements 201505L





#undef __glibcxx_want_incomplete_container_elements



#define __glibcxx_uncaught_exceptions 201411L





#undef __glibcxx_want_uncaught_exceptions



#define __glibcxx_allocator_traits_is_always_equal 201411L





#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 110 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_shared_ptr_arrays 201611L





#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t



#define __glibcxx_enable_shared_from_this 201603L





#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine



#define __glibcxx_exchange_function 201304L





#undef __glibcxx_want_exchange_function



#define __glibcxx_integer_sequence 201304L





#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final



#define __glibcxx_make_reverse_iterator 201402L





#undef __glibcxx_want_make_reverse_iterator



#define __glibcxx_null_iterators 201304L





#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases



#define __glibcxx_transparent_operators 201510L





#undef __glibcxx_want_transparent_operators



#define __glibcxx_tuple_element_t 201402L





#undef __glibcxx_want_tuple_element_t



#define __glibcxx_tuples_by_type 201304L





#undef __glibcxx_want_tuples_by_type



#define __glibcxx_robust_nonmodifying_seq_ops 201304L





#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 285 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_to_chars 201611L





#undef __glibcxx_want_to_chars



#define __glibcxx_chrono_udls 201304L





#undef __glibcxx_want_chrono_udls



#define __glibcxx_complex_udls 201309L





#undef __glibcxx_want_complex_udls



#define __glibcxx_generic_associative_lookup 201304L





#undef __glibcxx_want_generic_associative_lookup



#define __glibcxx_make_unique 201304L





#undef __glibcxx_want_make_unique



#define __glibcxx_quoted_string_io 201304L





#undef __glibcxx_want_quoted_string_io



#define __glibcxx_shared_timed_mutex 201402L





#undef __glibcxx_want_shared_timed_mutex



#define __glibcxx_string_udls 201304L





#undef __glibcxx_want_string_udls



#define __glibcxx_addressof_constexpr 201603L





#undef __glibcxx_want_addressof_constexpr



#define __glibcxx_any 201606L





#undef __glibcxx_want_any



#define __glibcxx_apply 201603L





#undef __glibcxx_want_apply



#define __glibcxx_as_const 201510L





#undef __glibcxx_want_as_const



#define __glibcxx_atomic_is_always_lock_free 201603L





#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant



#define __glibcxx_byte 201603L





#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations



#define __glibcxx_hardware_interference_size 201703L





#undef __glibcxx_want_hardware_interference_size



#define __glibcxx_invoke 201411L





#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable



#define __glibcxx_launder 201606L





#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits



#define __glibcxx_make_from_tuple 201606L





#undef __glibcxx_want_make_from_tuple



#define __glibcxx_not_fn 201603L





#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 545 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_variant 202102L





#undef __glibcxx_want_variant



#define __glibcxx_lcm 201606L





#undef __glibcxx_want_lcm



#define __glibcxx_gcd 201606L





#undef __glibcxx_want_gcd



#define __glibcxx_gcd_lcm 201606L





#undef __glibcxx_want_gcd_lcm
# 590 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_raw_memory_algorithms 201606L





#undef __glibcxx_want_raw_memory_algorithms
# 605 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_array_constexpr 201803L





#undef __glibcxx_want_array_constexpr



#define __glibcxx_nonmember_container_access 201411L





#undef __glibcxx_want_nonmember_container_access



#define __glibcxx_clamp 201603L





#undef __glibcxx_want_clamp



#define __glibcxx_sample 201603L





#undef __glibcxx_want_sample



#define __glibcxx_boyer_moore_searcher 201603L





#undef __glibcxx_want_boyer_moore_searcher
# 660 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_chrono 201611L





#undef __glibcxx_want_chrono



#define __glibcxx_execution 201902L





#undef __glibcxx_want_execution



#define __glibcxx_filesystem 201703L





#undef __glibcxx_want_filesystem



#define __glibcxx_hypot 201603L





#undef __glibcxx_want_hypot



#define __glibcxx_map_try_emplace 201411L





#undef __glibcxx_want_map_try_emplace



#define __glibcxx_math_special_functions 201603L





#undef __glibcxx_want_math_special_functions



#define __glibcxx_memory_resource 201603L
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource



#define __glibcxx_node_extract 201606L





#undef __glibcxx_want_node_extract



#define __glibcxx_parallel_algorithm 201603L





#undef __glibcxx_want_parallel_algorithm



#define __glibcxx_scoped_lock 201703L





#undef __glibcxx_want_scoped_lock



#define __glibcxx_shared_mutex 201505L





#undef __glibcxx_want_shared_mutex



#define __glibcxx_shared_ptr_weak_type 201606L





#undef __glibcxx_want_shared_ptr_weak_type
# 790 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_string_view 201803L





#undef __glibcxx_want_string_view



#define __glibcxx_unordered_map_try_emplace 201411L





#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 950 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_optional 201606L





#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1025 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_char_traits 201611L





#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1390 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_string 201611L





#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 64 "/usr/include/c++/15.1.1/bit" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 157 "/usr/include/c++/15.1.1/bit" 3
  template<typename _Tp>
    constexpr _Tp
    __rotl(_Tp __x, int __s) noexcept
    {
      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
      if constexpr ((_Nd & (_Nd - 1)) == 0)
 {


   constexpr unsigned __uNd = _Nd;
   const unsigned __r = __s;
   return (__x << (__r % __uNd)) | (__x >> ((-__r) % __uNd));
 }
      const int __r = __s % _Nd;
      if (__r == 0)
 return __x;
      else if (__r > 0)
 return (__x << __r) | (__x >> ((_Nd - __r) % _Nd));
      else
 return (__x >> -__r) | (__x << ((_Nd + __r) % _Nd));
    }

  template<typename _Tp>
    constexpr _Tp
    __rotr(_Tp __x, int __s) noexcept
    {
      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
      if constexpr ((_Nd & (_Nd - 1)) == 0)
 {


   constexpr unsigned __uNd = _Nd;
   const unsigned __r = __s;
   return (__x >> (__r % __uNd)) | (__x << ((-__r) % __uNd));
 }
      const int __r = __s % _Nd;
      if (__r == 0)
 return __x;
      else if (__r > 0)
 return (__x >> __r) | (__x << ((_Nd - __r) % _Nd));
      else
 return (__x << -__r) | (__x >> ((_Nd + __r) % _Nd));
    }

  template<typename _Tp>
    constexpr int
    __countl_zero(_Tp __x) noexcept
    {
      using __gnu_cxx::__int_traits;
      constexpr auto _Nd = __int_traits<_Tp>::__digits;


      return __builtin_clzg(__x, _Nd);
# 249 "/usr/include/c++/15.1.1/bit" 3
    }

  template<typename _Tp>
    constexpr int
    __countl_one(_Tp __x) noexcept
    {
      return std::__countl_zero<_Tp>((_Tp)~__x);
    }

  template<typename _Tp>
    constexpr int
    __countr_zero(_Tp __x) noexcept
    {
      using __gnu_cxx::__int_traits;
      constexpr auto _Nd = __int_traits<_Tp>::__digits;


      return __builtin_ctzg(__x, _Nd);
# 294 "/usr/include/c++/15.1.1/bit" 3
    }

  template<typename _Tp>
    constexpr int
    __countr_one(_Tp __x) noexcept
    {
      return std::__countr_zero((_Tp)~__x);
    }

  template<typename _Tp>
    constexpr int
    __popcount(_Tp __x) noexcept
    {

      return __builtin_popcountg(__x);
# 334 "/usr/include/c++/15.1.1/bit" 3
    }

  template<typename _Tp>
    constexpr bool
    __has_single_bit(_Tp __x) noexcept
    { return std::__popcount(__x) == 1; }

  template<typename _Tp>
    constexpr _Tp
    __bit_ceil(_Tp __x) noexcept
    {
      using __gnu_cxx::__int_traits;
      constexpr auto _Nd = __int_traits<_Tp>::__digits;
      if (__x == 0 || __x == 1)
        return 1;
      auto __shift_exponent = _Nd - std::__countl_zero((_Tp)(__x - 1u));




      if (!std::__is_constant_evaluated())
 {
   do { if (std::__is_constant_evaluated() && !bool(__shift_exponent != __int_traits<_Tp>::__digits)) std::__glibcxx_assert_fail(); } while (false);
 }

      using __promoted_type = decltype(__x << 1);
      if constexpr (!is_same<__promoted_type, _Tp>::value)
 {





   const int __extra_exp = sizeof(__promoted_type) / sizeof(_Tp) / 2;
   __shift_exponent |= (__shift_exponent & _Nd) << __extra_exp;
 }
      return (_Tp)1u << __shift_exponent;
    }

  template<typename _Tp>
    constexpr _Tp
    __bit_floor(_Tp __x) noexcept
    {
      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
      if (__x == 0)
        return 0;
      return (_Tp)1u << (_Nd - std::__countl_zero((_Tp)(__x >> 1)));
    }

  template<typename _Tp>
    constexpr int
    __bit_width(_Tp __x) noexcept
    {
      constexpr auto _Nd = __gnu_cxx::__int_traits<_Tp>::__digits;
      return _Nd - std::__countl_zero(__x);
    }
# 496 "/usr/include/c++/15.1.1/bit" 3

}
# 77 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 2 3






namespace std __attribute__ ((__visibility__ ("default")))
{






  template<typename _Tp, typename _Up>
    constexpr
    inline int
    __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
    {

      static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
# 109 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
 return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
    }
# 153 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
   
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {

     

     
# 186 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
      swap(*__a, *__b);

    }
# 202 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
   
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {

     

     

      ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 231 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _Tp>
    [[__nodiscard__]] constexpr
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {

     

      if (__b < __a)
 return __b;
      return __a;
    }
# 255 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _Tp>
    [[__nodiscard__]] constexpr
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {

     

      if (__a < __b)
 return __b;
      return __a;
    }
# 279 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    [[__nodiscard__]] constexpr
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 301 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    [[__nodiscard__]] constexpr
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Tp, typename _Ref, typename _Ptr>
    struct _Deque_iterator;

  struct _Bit_iterator;






  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<
      __is_char<_CharT>::__value,
      std::_Deque_iterator<_CharT, _CharT&, _CharT*> >::__type
    __copy_move_a2(
 istreambuf_iterator<_CharT, char_traits<_CharT> >,
 istreambuf_iterator<_CharT, char_traits<_CharT> >,
 std::_Deque_iterator<_CharT, _CharT&, _CharT*>);
# 391 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
#define _GLIBCXX_TO_ADDR(P) P
#define _GLIBCXX_ADVANCE(P,N) P += N


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
  template<bool _IsMove, typename _OutIter, typename _InIter>
    __attribute__((__always_inline__))
    inline void
    __assign_one(_OutIter& __out, _InIter& __in)
    {

      if constexpr (_IsMove)
 *__out = std::move(*__in);
      else

 *__out = *__in;
    }

  template<bool _IsMove, typename _InIter, typename _Sent, typename _OutIter>
   
    inline _OutIter
    __copy_move_a2(_InIter __first, _Sent __last, _OutIter __result)
    {
      typedef __decltype(*__first) _InRef;
      typedef __decltype(*__result) _OutRef;
      if constexpr (!__is_trivially_assignable(_OutRef, _InRef))
 { }
      else if (std::__is_constant_evaluated())
 { }
      else if constexpr (__memcpyable<_OutIter, _InIter>::__value)
 {
   ptrdiff_t __n = std::distance(__first, __last);
   if (__builtin_expect(__n > 1, true))
     {
       __builtin_memmove(__result,
    __first,
    __n * sizeof(*__first));
       __result += __n;
     }
   else if (__n == 1)
     {
       std::__assign_one<_IsMove>(__result, __first);
       ++__result;
     }
   return __result;
 }
# 461 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
      for (; __first != __last; ++__result, (void)++__first)
 std::__assign_one<_IsMove>(__result, __first);
      return __result;
    }
#pragma GCC diagnostic pop

  template<bool _IsMove,
    typename _Tp, typename _Ref, typename _Ptr, typename _OI>
    _OI
    __copy_move_a1(std::_Deque_iterator<_Tp, _Ref, _Ptr>,
     std::_Deque_iterator<_Tp, _Ref, _Ptr>,
     _OI);

  template<bool _IsMove,
    typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    std::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_a1(std::_Deque_iterator<_ITp, _IRef, _IPtr>,
     std::_Deque_iterator<_ITp, _IRef, _IPtr>,
     std::_Deque_iterator<_OTp, _OTp&, _OTp*>);

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      std::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II, _II, std::_Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<bool _IsMove, typename _II, typename _OI>
    __attribute__((__always_inline__))
   
    inline _OI
    __copy_move_a1(_II __first, _II __last, _OI __result)
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }

  template<bool _IsMove, typename _II, typename _OI>
    __attribute__((__always_inline__))
   
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      return std::__niter_wrap(__result,
  std::__copy_move_a1<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }

  template<bool _IsMove,
    typename _Ite, typename _Seq, typename _Cat, typename _OI>
   
    _OI
    __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
    const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
    _OI);

  template<bool _IsMove,
    typename _II, typename _Ite, typename _Seq, typename _Cat>
   
    __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
    __copy_move_a(_II, _II,
    const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);

  template<bool _IsMove,
    typename _IIte, typename _ISeq, typename _ICat,
    typename _OIte, typename _OSeq, typename _OCat>
   
    ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
    __copy_move_a(const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
    const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
    const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
  template<typename _InputIterator, typename _Size, typename _OutputIterator>
   
    _OutputIterator
    __copy_n_a(_InputIterator __first, _Size __n, _OutputIterator __result,
        bool)
    {
      typedef __decltype(*__first) _InRef;
      typedef __decltype(*__result) _OutRef;
      if constexpr (!__is_trivially_assignable(_OutRef, _InRef))
 { }




      else if constexpr (__memcpyable<_OutputIterator,
            _InputIterator>::__value)
 {
   if (__builtin_expect(__n > 1, true))
     {
       __builtin_memmove(__result,
    __first,
    __n * sizeof(*__first));
       __result += __n;
     }
   else if (__n == 1)
     *__result++ = *__first;
   return __result;
 }
# 581 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
      if (__n > 0)
 {
   while (true)
     {
       *__result = *__first;
       ++__result;
       if (--__n > 0)
  ++__first;
       else
  break;
     }
 }
      return __result;
    }
#pragma GCC diagnostic pop


  template<typename _CharT, typename _Size>
    typename __gnu_cxx::__enable_if<
      __is_char<_CharT>::__value, _CharT*>::__type
    __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT> >,
        _Size, _CharT*, bool);

  template<typename _CharT, typename _Size>
    typename __gnu_cxx::__enable_if<
      __is_char<_CharT>::__value,
      std::_Deque_iterator<_CharT, _CharT&, _CharT*> >::__type
    __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT> >, _Size,
        std::_Deque_iterator<_CharT, _CharT&, _CharT*>,
        bool);
# 630 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
   
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
      (std::__miter_base(__first), std::__miter_base(__last), __result);
    }
# 663 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
   
    inline _OI
    move(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return std::__copy_move_a<true>(std::__miter_base(__first),
          std::__miter_base(__last), __result);
    }

#define _GLIBCXX_MOVE3(_Tp,_Up,_Vp) std::move(_Tp, _Up, _Vp)




#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
  template<bool _IsMove, typename _BI1, typename _BI2>
   
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef __decltype(*__first) _InRef;
      typedef __decltype(*__result) _OutRef;
      if constexpr (!__is_trivially_assignable(_OutRef, _InRef))
       { }




      else if constexpr (__memcpyable<_BI2, _BI1>::__value)
 {
   ptrdiff_t __n = std::distance(__first, __last);
   std::advance(__result, -__n);
   if (__builtin_expect(__n > 1, true))
     {
       __builtin_memmove(__result,
    __first,
    __n * sizeof(*__first));
     }
   else if (__n == 1)
     std::__assign_one<_IsMove>(__result, __first);
   return __result;
 }
# 735 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
      while (__first != __last)
 {
   --__last;
   --__result;
   std::__assign_one<_IsMove>(__result, __last);
 }
      return __result;
    }
#pragma GCC diagnostic pop

#undef _GLIBCXX_TO_ADDR
#undef _GLIBCXX_ADVANCE

  template<bool _IsMove, typename _BI1, typename _BI2>
    __attribute__((__always_inline__))
   
    inline _BI2
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
    typename _Tp, typename _Ref, typename _Ptr, typename _OI>
    _OI
    __copy_move_backward_a1(std::_Deque_iterator<_Tp, _Ref, _Ptr>,
       std::_Deque_iterator<_Tp, _Ref, _Ptr>,
       _OI);

  template<bool _IsMove,
    typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    std::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_backward_a1(
   std::_Deque_iterator<_ITp, _IRef, _IPtr>,
   std::_Deque_iterator<_ITp, _IRef, _IPtr>,
   std::_Deque_iterator<_OTp, _OTp&, _OTp*>);

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      std::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_backward_a1(_II, _II,
       std::_Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<bool _IsMove, typename _II, typename _OI>
    __attribute__((__always_inline__))
   
    inline _OI
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
    {
      return std::__niter_wrap(__result,
  std::__copy_move_backward_a1<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }

  template<bool _IsMove,
    typename _Ite, typename _Seq, typename _Cat, typename _OI>
   
    _OI
    __copy_move_backward_a(
  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
  _OI);

  template<bool _IsMove,
    typename _II, typename _Ite, typename _Seq, typename _Cat>
   
    __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
    __copy_move_backward_a(_II, _II,
  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);

  template<bool _IsMove,
    typename _IIte, typename _ISeq, typename _ICat,
    typename _OIte, typename _OSeq, typename _OCat>
   
    ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
    __copy_move_backward_a(
  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
  const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
# 833 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    __attribute__((__always_inline__))
   
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     

      ;

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
      (std::__miter_base(__first), std::__miter_base(__last), __result);
    }
# 869 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    __attribute__((__always_inline__))
   
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     

      ;

      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
            std::__miter_base(__last),
            __result);
    }

#define _GLIBCXX_MOVE_BACKWARD3(_Tp,_Up,_Vp) std::move_backward(_Tp, _Up, _Vp)




#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
  template<typename _ForwardIterator, typename _Tp>
   
    inline void
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"




      const bool __load_outside_loop =


     __is_trivially_constructible(_Tp, const _Tp&)
     && __is_trivially_assignable(__decltype(*__first), const _Tp&)




     && sizeof(_Tp) <= sizeof(long long);
#pragma GCC diagnostic pop



      typedef typename __gnu_cxx::__conditional_type<__load_outside_loop,
           const _Tp,
           const _Tp&>::__type _Up;
      _Up __val(__value);
      for (; __first != __last; ++__first)
 *__first = __val;
    }
#pragma GCC diagnostic pop


  template<typename _Up, typename _Tp>
   
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Up>::__value
        && (__are_same<_Up, _Tp>::__value
       || __memcpyable_integer<_Tp>::__width),
      void>::__type
    __fill_a1(_Up* __first, _Up* __last, const _Tp& __x)
    {


      const _Up __val = __x;
# 950 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
      if (const size_t __len = __last - __first)
 __builtin_memset(__first, static_cast<unsigned char>(__val), __len);
    }

  template<typename _Ite, typename _Cont, typename _Tp>
    __attribute__((__always_inline__))
   
    inline void
    __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,
       ::__gnu_cxx::__normal_iterator<_Ite, _Cont> __last,
       const _Tp& __value)
    { std::__fill_a1(__first.base(), __last.base(), __value); }

  template<typename _Tp, typename _VTp>
    void
    __fill_a1(const std::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
       const std::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
       const _VTp&);

 
  void
  __fill_a1(std::_Bit_iterator, std::_Bit_iterator,
     const bool&);

  template<typename _FIte, typename _Tp>
    __attribute__((__always_inline__))
   
    inline void
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    { std::__fill_a1(__first, __last, __value); }

  template<typename _Ite, typename _Seq, typename _Cat, typename _Tp>
   
    void
    __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
      const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
      const _Tp&);
# 1000 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    __attribute__((__always_inline__))
   
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {

     

      ;

      std::__fill_a(__first, __last, __value);
    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"

  inline constexpr int
  __size_to_integer(int __n) { return __n; }
  inline constexpr unsigned
  __size_to_integer(unsigned __n) { return __n; }
  inline constexpr long
  __size_to_integer(long __n) { return __n; }
  inline constexpr unsigned long
  __size_to_integer(unsigned long __n) { return __n; }
  inline constexpr long long
  __size_to_integer(long long __n) { return __n; }
  inline constexpr unsigned long long
  __size_to_integer(unsigned long long __n) { return __n; }


  __extension__ inline constexpr __int128
  __size_to_integer(__int128 __n) { return __n; }
  __extension__ inline constexpr unsigned __int128
  __size_to_integer(unsigned __int128 __n) { return __n; }
# 1055 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  inline constexpr long long
  __size_to_integer(float __n) { return (long long)__n; }
  inline constexpr long long
  __size_to_integer(double __n) { return (long long)__n; }
  inline constexpr long long
  __size_to_integer(long double __n) { return (long long)__n; }

  __extension__ inline constexpr long long
  __size_to_integer(__float128 __n) { return (long long)__n; }

#pragma GCC diagnostic pop

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
#pragma GCC diagnostic ignored "-Wlong-long"
  template<typename _OutputIterator, typename _Size, typename _Tp>
   
    inline _OutputIterator
    __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
    {

      const bool __load_outside_loop =


     __is_trivially_constructible(_Tp, const _Tp&)
     && __is_trivially_assignable(__decltype(*__first), const _Tp&)




     && sizeof(_Tp) <= sizeof(long long);



      typedef typename __gnu_cxx::__conditional_type<__load_outside_loop,
           const _Tp,
           const _Tp&>::__type _Up;
      _Up __val(__value);
      for (; __n > 0; --__n, (void) ++__first)
 *__first = __val;
      return __first;
    }
#pragma GCC diagnostic pop

  template<typename _Ite, typename _Seq, typename _Cat, typename _Size,
    typename _Tp>
   
    ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
    __fill_n_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>& __first,
        _Size __n, const _Tp& __value,
        std::input_iterator_tag);

  template<typename _OutputIterator, typename _Size, typename _Tp>
    __attribute__((__always_inline__))
   
    inline _OutputIterator
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
        std::output_iterator_tag)
    {

      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");

      return __fill_n_a1(__first, __n, __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    __attribute__((__always_inline__))
   
    inline _OutputIterator
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
        std::input_iterator_tag)
    {

      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");

      return __fill_n_a1(__first, __n, __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    __attribute__((__always_inline__))
   
    inline _OutputIterator
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
        std::random_access_iterator_tag)
    {

      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");

      if (__n <= 0)
 return __first;

      ;

      std::__fill_a(__first, __first + __n, __value);
      return __first + __n;
    }
# 1169 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    __attribute__((__always_inline__))
   
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {

     

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
          std::__iterator_category(__first));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>

 static bool
 equal(_II1 __first1, _II1 __last1, _II2 __first2)
 {
   for (; __first1 != __last1; ++__first1, (void) ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>

 static bool
 equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
 {
   if (const size_t __len = (__last1 - __first1))
     return !std::__memcmp(__first1, __first2, __len);
   return true;
 }
    };

  template<typename _Tp, typename _Ref, typename _Ptr, typename _II>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value, bool>::__type
    __equal_aux1(std::_Deque_iterator<_Tp, _Ref, _Ptr>,
   std::_Deque_iterator<_Tp, _Ref, _Ptr>,
   _II);

  template<typename _Tp1, typename _Ref1, typename _Ptr1,
    typename _Tp2, typename _Ref2, typename _Ptr2>
    bool
    __equal_aux1(std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,
   std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,
   std::_Deque_iterator<_Tp2, _Ref2, _Ptr2>);

  template<typename _II, typename _Tp, typename _Ref, typename _Ptr>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value, bool>::__type
    __equal_aux1(_II, _II,
  std::_Deque_iterator<_Tp, _Ref, _Ptr>);

  template<typename _II1, typename _II2>
   
    inline bool
    __equal_aux1(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      const bool __simple = ((__is_integer<_ValueType1>::__value

    || __is_pointer(_ValueType1)



    || is_same_v<_ValueType1, byte>

        ) && __memcmpable<_II1, _II2>::__value);
      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }

  template<typename _II1, typename _II2>
    __attribute__((__always_inline__))
   
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      return std::__equal_aux1(std::__niter_base(__first1),
          std::__niter_base(__last1),
          std::__niter_base(__first2));
    }

  template<typename _II1, typename _Seq1, typename _Cat1, typename _II2>
   
    bool
    __equal_aux(const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,
  const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,
  _II2);

  template<typename _II1, typename _II2, typename _Seq2, typename _Cat2>
   
    bool
    __equal_aux(_II1, _II1,
  const ::__gnu_debug::_Safe_iterator<_II2, _Seq2, _Cat2>&);

  template<typename _II1, typename _Seq1, typename _Cat1,
    typename _II2, typename _Seq2, typename _Cat2>
   
    bool
    __equal_aux(const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,
  const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,
  const ::__gnu_debug::_Safe_iterator<_II2, _Seq2, _Cat2>&);

  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>

 static _II1
 __newlast1(_II1, _II1 __last1, _II2, _II2)
 { return __last1; }

      template<typename _II>

 static bool
 __cnd2(_II __first, _II __last)
 { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>

 static _RAI1
 __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
 {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
 static bool
 __cnd2(_RAI, _RAI)
 { return true; }
    };

  template<typename _II1, typename _II2, typename _Compare>
   
    bool
    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2,
       _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, (void)++__first2)
 {
   if (__comp(__first1, __first2))
     return true;
   if (__comp(__first2, __first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>

 static bool
 __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
 {
   using __gnu_cxx::__ops::__iter_less_iter;
   return std::__lexicographical_compare_impl(__first1, __last1,
           __first2, __last2,
           __iter_less_iter());
 }

      template<typename _II1, typename _II2>

 static int
 __3way(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
 {
   while (__first1 != __last1)
     {
       if (__first2 == __last2)
  return +1;
       if (*__first1 < *__first2)
  return -1;
       if (*__first2 < *__first1)
  return +1;
       ++__first1;
       ++__first2;
     }
   return int(__first2 == __last2) - 1;
 }
    };

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>

 static bool
 __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 { return __3way(__first1, __last1, __first2, __last2) < 0; }

      template<typename _Tp, typename _Up>

 static ptrdiff_t
 __3way(const _Tp* __first1, const _Tp* __last1,
        const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   if (const size_t __len = std::min(__len1, __len2))
     if (int __result = std::__memcmp(__first1, __first2, __len))
       return __result;
   return ptrdiff_t(__len1 - __len2);
 }
    };

  template<typename _II1, typename _II2>
   
    inline bool
    __lexicographical_compare_aux1(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;

      const bool __simple =
 (__is_memcmp_ordered_with<_ValueType1, _ValueType2>::__value
  && __is_pointer(_II1) && __is_pointer(_II2)







  );




      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }

  template<typename _Tp1, typename _Ref1, typename _Ptr1,
    typename _Tp2>
    bool
    __lexicographical_compare_aux1(
 std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,
 std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,
 _Tp2*, _Tp2*);

  template<typename _Tp1,
    typename _Tp2, typename _Ref2, typename _Ptr2>
    bool
    __lexicographical_compare_aux1(_Tp1*, _Tp1*,
 std::_Deque_iterator<_Tp2, _Ref2, _Ptr2>,
 std::_Deque_iterator<_Tp2, _Ref2, _Ptr2>);

  template<typename _Tp1, typename _Ref1, typename _Ptr1,
    typename _Tp2, typename _Ref2, typename _Ptr2>
    bool
    __lexicographical_compare_aux1(
 std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,
 std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,
 std::_Deque_iterator<_Tp2, _Ref2, _Ptr2>,
 std::_Deque_iterator<_Tp2, _Ref2, _Ptr2>);

  template<typename _II1, typename _II2>
   
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      return std::__lexicographical_compare_aux1(std::__niter_base(__first1),
       std::__niter_base(__last1),
       std::__niter_base(__first2),
       std::__niter_base(__last2));
    }

  template<typename _Iter1, typename _Seq1, typename _Cat1,
    typename _II2>
   
    bool
    __lexicographical_compare_aux(
  const ::__gnu_debug::_Safe_iterator<_Iter1, _Seq1, _Cat1>&,
  const ::__gnu_debug::_Safe_iterator<_Iter1, _Seq1, _Cat1>&,
  _II2, _II2);

  template<typename _II1,
    typename _Iter2, typename _Seq2, typename _Cat2>
   
    bool
    __lexicographical_compare_aux(
  _II1, _II1,
  const ::__gnu_debug::_Safe_iterator<_Iter2, _Seq2, _Cat2>&,
  const ::__gnu_debug::_Safe_iterator<_Iter2, _Seq2, _Cat2>&);

  template<typename _Iter1, typename _Seq1, typename _Cat1,
    typename _Iter2, typename _Seq2, typename _Cat2>
   
    bool
    __lexicographical_compare_aux(
  const ::__gnu_debug::_Safe_iterator<_Iter1, _Seq1, _Cat1>&,
  const ::__gnu_debug::_Safe_iterator<_Iter1, _Seq1, _Cat1>&,
  const ::__gnu_debug::_Safe_iterator<_Iter2, _Seq2, _Cat2>&,
  const ::__gnu_debug::_Safe_iterator<_Iter2, _Seq2, _Cat2>&);

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
   
    _ForwardIterator
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 1532 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    [[__nodiscard__]]
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {

     
     

      ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val());
    }



  template<typename _Tp>
    inline constexpr _Tp
    __lg(_Tp __n)
    {

      return std::__bit_width(make_unsigned_t<_Tp>(__n)) - 1;
# 1568 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
    }


# 1584 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    [[__nodiscard__]]
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {

     
     
     


      ;

      return std::__equal_aux(__first1, __last1, __first2);
    }
# 1615 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    [[__nodiscard__]]
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"


  template<typename _II1, typename _II2>
   
    inline bool
    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {
      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if constexpr (_RAIters::value)
 {
   if ((__last1 - __first1) != (__last2 - __first2))
     return false;
   return std::equal(__first1, __last1, __first2);
 }
      else
 {
   for (; __first1 != __last1 && __first2 != __last2;
        ++__first1, (void)++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return __first1 == __last1 && __first2 == __last2;
 }
    }


  template<typename _II1, typename _II2, typename _BinaryPredicate>
   
    inline bool
    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2,
      _BinaryPredicate __binary_pred)
    {
      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if constexpr (_RAIters::value)
 {
   if ((__last1 - __first1) != (__last2 - __first2))
     return false;
   return std::equal(__first1, __last1, __first2,
           __binary_pred);
 }
      else
 {
   for (; __first1 != __last1 && __first2 != __last2;
        ++__first1, (void)++__first2)
     if (!bool(__binary_pred(*__first1, *__first2)))
       return false;
   return __first1 == __last1 && __first2 == __last2;
 }
    }
#pragma GCC diagnostic pop
# 1706 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    [[__nodiscard__]]
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {

     
     
     


      ;
      ;

      return std::__equal4(__first1, __last1, __first2, __last2);
    }
# 1739 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    [[__nodiscard__]]
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _IIter2 __last2, _BinaryPredicate __binary_pred)
    {

     
     
      ;
      ;

      return std::__equal4(__first1, __last1, __first2, __last2,
          __binary_pred);
    }
# 1771 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    [[__nodiscard__]]
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {





     
     
     
     
      ;
      ;

      return std::__lexicographical_compare_aux(__first1, __last1,
      __first2, __last2);
    }
# 1806 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    [[__nodiscard__]]
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {

     
     
      ;
      ;

      return std::__lexicographical_compare_impl
 (__first1, __last1, __first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 1921 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
   
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __binary_pred(__first1, __first2))
 {
   ++__first1;
   ++__first2;
 }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1949 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    [[__nodiscard__]]
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {

     
     
     


      ;

      return std::__mismatch(__first1, __last1, __first2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1983 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    [[__nodiscard__]]
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      return std::__mismatch(__first1, __last1, __first2,
 __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }


  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
   
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __first2 != __last2
      && __binary_pred(__first1, __first2))
 {
   ++__first1;
   ++__first2;
 }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 2031 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    [[__nodiscard__]]
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {

     
     
     


      ;
      ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 2067 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    [[__nodiscard__]]
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _BinaryPredicate __binary_pred)
    {

     
     
      ;
      ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }





  template<typename _Iterator, typename _Predicate>
   
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
    {
#pragma GCC unroll 4
      while (__first != __last && !__pred(__first))
 ++__first;
      return __first;
    }

  template<typename _InputIterator, typename _Predicate>
   
    typename iterator_traits<_InputIterator>::difference_type
    __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (__pred(__first))
   ++__n;
      return __n;
    }

  template<typename _ForwardIterator, typename _Predicate>
   
    _ForwardIterator
    __remove_if(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred)
    {
      __first = std::__find_if(__first, __last, __pred);
      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for (; __first != __last; ++__first)
 if (!__pred(__first))
   {
     *__result = std::move(*__first);
     ++__result;
   }
      return __result;
    }

  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
   
    _ForwardIterator1
    __search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __predicate)
    {

      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 return std::__find_if(__first1, __last1,
  __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));


      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   __first1 =
     std::__find_if(__first1, __last1,
  __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));

   if (__first1 == __last1)
     return __last1;

   _ForwardIterator2 __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (__predicate(__current, __p))
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
   
    bool
    __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
       _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {


      for (; __first1 != __last1; ++__first1, (void)++__first2)
 if (!__pred(__first1, __first2))
   break;

      if (__first1 == __last1)
 return true;



      _ForwardIterator2 __last2 = __first2;
      std::advance(__last2, std::distance(__first1, __last1));
      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   if (__scan != std::__find_if(__first1, __scan,
     __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
     continue;

   auto __matches
     = std::__count_if(__first2, __last2,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
   if (0 == __matches ||
       std::__count_if(__scan, __last1,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
       != __matches)
     return false;
 }
      return true;
    }
# 2230 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
   
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2)
    {

     
     
     


      ;

      return std::__is_permutation(__first1, __last1, __first2,
       __gnu_cxx::__ops::__iter_equal_to_iter());
    }



# 2272 "/usr/include/c++/15.1.1/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
   
    inline _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2,
    _BinaryPredicate __predicate)
    {

     
     
     


      ;
      ;

      return std::__search(__first1, __last1, __first2, __last2,
      __gnu_cxx::__ops::__iter_comp_iter(__predicate));
    }



}
# 65 "/usr/include/c++/15.1.1/vector" 2 3
# 1 "/usr/include/c++/15.1.1/bits/allocator.h" 1 3
# 44 "/usr/include/c++/15.1.1/bits/allocator.h" 3
#define _ALLOCATOR_H 1

# 1 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++allocator.h" 1 3
# 31 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++allocator.h" 3
#define _GLIBCXX_CXX_ALLOCATOR_H 1

# 1 "/usr/include/c++/15.1.1/bits/new_allocator.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/new_allocator.h" 3
#define _STD_NEW_ALLOCATOR_H 1


# 1 "/usr/include/c++/15.1.1/new" 1 3
# 36 "/usr/include/c++/15.1.1/new" 3
#define _NEW 






# 1 "/usr/include/c++/15.1.1/bits/exception.h" 1 3
# 32 "/usr/include/c++/15.1.1/bits/exception.h" 3
#define __EXCEPTION_H 1







extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{
# 61 "/usr/include/c++/15.1.1/bits/exception.h" 3
  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;

    exception(const exception&) = default;
    exception& operator=(const exception&) = default;
    exception(exception&&) = default;
    exception& operator=(exception&&) = default;




    virtual const char*
    what() const noexcept;
  };



}

}
# 44 "/usr/include/c++/15.1.1/new" 2 3

#define __glibcxx_want_launder 
#define __glibcxx_want_hardware_interference_size 
#define __glibcxx_want_destroying_delete 
#define __glibcxx_want_constexpr_new 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 55 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_incomplete_container_elements 201505L





#undef __glibcxx_want_incomplete_container_elements



#define __glibcxx_uncaught_exceptions 201411L





#undef __glibcxx_want_uncaught_exceptions



#define __glibcxx_allocator_traits_is_always_equal 201411L





#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 110 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_shared_ptr_arrays 201611L





#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t



#define __glibcxx_enable_shared_from_this 201603L





#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine



#define __glibcxx_exchange_function 201304L





#undef __glibcxx_want_exchange_function



#define __glibcxx_integer_sequence 201304L





#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final



#define __glibcxx_make_reverse_iterator 201402L





#undef __glibcxx_want_make_reverse_iterator



#define __glibcxx_null_iterators 201304L





#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases



#define __glibcxx_transparent_operators 201510L





#undef __glibcxx_want_transparent_operators



#define __glibcxx_tuple_element_t 201402L





#undef __glibcxx_want_tuple_element_t



#define __glibcxx_tuples_by_type 201304L





#undef __glibcxx_want_tuples_by_type



#define __glibcxx_robust_nonmodifying_seq_ops 201304L





#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 285 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_to_chars 201611L





#undef __glibcxx_want_to_chars



#define __glibcxx_chrono_udls 201304L





#undef __glibcxx_want_chrono_udls



#define __glibcxx_complex_udls 201309L





#undef __glibcxx_want_complex_udls



#define __glibcxx_generic_associative_lookup 201304L





#undef __glibcxx_want_generic_associative_lookup



#define __glibcxx_make_unique 201304L





#undef __glibcxx_want_make_unique



#define __glibcxx_quoted_string_io 201304L





#undef __glibcxx_want_quoted_string_io



#define __glibcxx_shared_timed_mutex 201402L





#undef __glibcxx_want_shared_timed_mutex



#define __glibcxx_string_udls 201304L





#undef __glibcxx_want_string_udls



#define __glibcxx_addressof_constexpr 201603L





#undef __glibcxx_want_addressof_constexpr



#define __glibcxx_any 201606L





#undef __glibcxx_want_any



#define __glibcxx_apply 201603L





#undef __glibcxx_want_apply



#define __glibcxx_as_const 201510L





#undef __glibcxx_want_as_const



#define __glibcxx_atomic_is_always_lock_free 201603L





#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant



#define __glibcxx_byte 201603L





#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations



#define __glibcxx_hardware_interference_size 201703L

#define __cpp_lib_hardware_interference_size 201703L



#undef __glibcxx_want_hardware_interference_size



#define __glibcxx_invoke 201411L





#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable



#define __glibcxx_launder 201606L

#define __cpp_lib_launder 201606L



#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits



#define __glibcxx_make_from_tuple 201606L





#undef __glibcxx_want_make_from_tuple



#define __glibcxx_not_fn 201603L





#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 545 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_variant 202102L





#undef __glibcxx_want_variant



#define __glibcxx_lcm 201606L





#undef __glibcxx_want_lcm



#define __glibcxx_gcd 201606L





#undef __glibcxx_want_gcd



#define __glibcxx_gcd_lcm 201606L





#undef __glibcxx_want_gcd_lcm
# 590 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_raw_memory_algorithms 201606L





#undef __glibcxx_want_raw_memory_algorithms
# 605 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_array_constexpr 201803L





#undef __glibcxx_want_array_constexpr



#define __glibcxx_nonmember_container_access 201411L





#undef __glibcxx_want_nonmember_container_access



#define __glibcxx_clamp 201603L





#undef __glibcxx_want_clamp



#define __glibcxx_sample 201603L





#undef __glibcxx_want_sample



#define __glibcxx_boyer_moore_searcher 201603L





#undef __glibcxx_want_boyer_moore_searcher
# 660 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_chrono 201611L





#undef __glibcxx_want_chrono



#define __glibcxx_execution 201902L





#undef __glibcxx_want_execution



#define __glibcxx_filesystem 201703L





#undef __glibcxx_want_filesystem



#define __glibcxx_hypot 201603L





#undef __glibcxx_want_hypot



#define __glibcxx_map_try_emplace 201411L





#undef __glibcxx_want_map_try_emplace



#define __glibcxx_math_special_functions 201603L





#undef __glibcxx_want_math_special_functions



#define __glibcxx_memory_resource 201603L
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource



#define __glibcxx_node_extract 201606L





#undef __glibcxx_want_node_extract



#define __glibcxx_parallel_algorithm 201603L





#undef __glibcxx_want_parallel_algorithm



#define __glibcxx_scoped_lock 201703L





#undef __glibcxx_want_scoped_lock



#define __glibcxx_shared_mutex 201505L





#undef __glibcxx_want_shared_mutex



#define __glibcxx_shared_ptr_weak_type 201606L





#undef __glibcxx_want_shared_ptr_weak_type
# 790 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_string_view 201803L





#undef __glibcxx_want_string_view



#define __glibcxx_unordered_map_try_emplace 201411L





#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 950 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_optional 201606L





#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1025 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_char_traits 201611L





#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1390 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_string 201611L





#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 50 "/usr/include/c++/15.1.1/new" 2 3

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }


    bad_alloc(const bad_alloc&) = default;
    bad_alloc& operator=(const bad_alloc&) = default;




    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { }



    virtual ~bad_array_new_length() throw();


    virtual const char* what() const throw();
  };



  enum class align_val_t: size_t {};


  struct nothrow_t
  {

    explicit nothrow_t() = default;

  };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();



  new_handler get_new_handler() noexcept;

}
# 137 "/usr/include/c++/15.1.1/new" 3
[[__nodiscard__]] void* operator new(std::size_t)
 
  __attribute__((__externally_visible__, __malloc__));
[[__nodiscard__]] void* operator new[](std::size_t)
 
  __attribute__((__externally_visible__, __malloc__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));

void operator delete(void*, std::size_t)
  noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, std::size_t)
  noexcept
  __attribute__((__externally_visible__));

[[__nodiscard__]] void* operator new(std::size_t, const std::nothrow_t&)
  noexcept
  __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));
[[__nodiscard__]] void* operator new[](std::size_t, const std::nothrow_t&)
  noexcept
  __attribute__((__externally_visible__, __alloc_size__ (1), __malloc__));
void operator delete(void*, const std::nothrow_t&)
  noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&)
  noexcept
  __attribute__((__externally_visible__));

[[__nodiscard__]] void* operator new(std::size_t, std::align_val_t)
 
  __attribute__((__externally_visible__, __alloc_size__ (1), __alloc_align__ (2), __malloc__));
[[__nodiscard__]] void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)
  noexcept
  __attribute__((__externally_visible__, __alloc_size__ (1), __alloc_align__ (2), __malloc__));
void operator delete(void*, std::align_val_t)
  noexcept __attribute__((__externally_visible__));
void operator delete(void*, std::align_val_t, const std::nothrow_t&)
 
  noexcept __attribute__((__externally_visible__));
[[__nodiscard__]] void* operator new[](std::size_t, std::align_val_t)
 
  __attribute__((__externally_visible__, __alloc_size__ (1), __alloc_align__ (2), __malloc__));
[[__nodiscard__]] void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)
  noexcept
  __attribute__((__externally_visible__, __alloc_size__ (1), __alloc_align__ (2), __malloc__));
void operator delete[](void*, std::align_val_t)
  noexcept __attribute__((__externally_visible__));
void operator delete[](void*, std::align_val_t, const std::nothrow_t&)
 
  noexcept __attribute__((__externally_visible__));

void operator delete(void*, std::size_t, std::align_val_t)
  noexcept __attribute__((__externally_visible__));
void operator delete[](void*, std::size_t, std::align_val_t)
  noexcept __attribute__((__externally_visible__));






#define _GLIBCXX_PLACEMENT_CONSTEXPR inline



[[__nodiscard__]] inline
void* operator new(std::size_t, void* __p)
  noexcept
{ return __p; }
[[__nodiscard__]] inline
void* operator new[](std::size_t, void* __p)
  noexcept
{ return __p; }

#undef _GLIBCXX_PLACEMENT_CONSTEXPR


inline void operator delete (void*, void*)
  noexcept
{ }
inline void operator delete[](void*, void*)
  noexcept
{ }

}

namespace std
{


  template<typename _Tp>
    [[nodiscard]] constexpr _Tp*
    launder(_Tp* __p) noexcept
    {
      if constexpr (__is_same(const volatile _Tp, const volatile void))
 static_assert(!__is_same(const volatile _Tp, const volatile void),
        "std::launder argument must not be a void pointer");

      else if constexpr (__is_function(_Tp))
 static_assert(!__is_function(_Tp),
        "std::launder argument must not be a function pointer");

      else
 return __builtin_launder(__p);
      return nullptr;
    }



  inline constexpr size_t hardware_destructive_interference_size = 64;
  inline constexpr size_t hardware_constructive_interference_size = 64;
# 264 "/usr/include/c++/15.1.1/new" 3
}

#pragma GCC visibility pop
#pragma GCC diagnostic pop
# 35 "/usr/include/c++/15.1.1/bits/new_allocator.h" 2 3






namespace std __attribute__ ((__visibility__ ("default")))
{

# 62 "/usr/include/c++/15.1.1/bits/new_allocator.h" 3
  template<typename _Tp>
    class __new_allocator
    {
    public:
      typedef _Tp value_type;
      typedef std::size_t size_type;
      typedef std::ptrdiff_t difference_type;

      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;

      template<typename _Tp1>
 struct rebind
 { typedef __new_allocator<_Tp1> other; };





      typedef std::true_type propagate_on_container_move_assignment;


      __attribute__((__always_inline__))
     
      __new_allocator() noexcept { }

      __attribute__((__always_inline__))
     
      __new_allocator(const __new_allocator&) noexcept { }

      template<typename _Tp1>
 __attribute__((__always_inline__))

 __new_allocator(const __new_allocator<_Tp1>&) noexcept { }


      __new_allocator& operator=(const __new_allocator&) = default;



      ~__new_allocator() noexcept { }

      pointer
      address(reference __x) const noexcept
      { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const noexcept
      { return std::__addressof(__x); }



#define _GLIBCXX_OPERATOR_NEW __builtin_operator_new
#define _GLIBCXX_OPERATOR_DELETE __builtin_operator_delete







      [[__nodiscard__]] _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {



 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");


 if (__builtin_expect(__n > this->_M_max_size(), false))
   {


     if (__n > (std::size_t(-1) / sizeof(_Tp)))
       std::__throw_bad_array_new_length();
     std::__throw_bad_alloc();
   }


 if (alignof(_Tp) > 16)
   {
     std::align_val_t __al = std::align_val_t(alignof(_Tp));
     return static_cast<_Tp*>(__builtin_operator_new(__n * sizeof(_Tp),
          __al));
   }

 return static_cast<_Tp*>(__builtin_operator_new(__n * sizeof(_Tp)));
      }


      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
      {

#define _GLIBCXX_SIZED_DEALLOC(p,n) (p), (n) * sizeof(_Tp)





 if (alignof(_Tp) > 16)
   {
     __builtin_operator_delete((__p), (__n) * sizeof(_Tp),
         std::align_val_t(alignof(_Tp)));
     return;
   }

 __builtin_operator_delete((__p), (__n) * sizeof(_Tp));
      }

#undef _GLIBCXX_SIZED_DEALLOC
#undef _GLIBCXX_OPERATOR_DELETE
#undef _GLIBCXX_OPERATOR_NEW


      __attribute__((__always_inline__))
      size_type
      max_size() const noexcept
      { return _M_max_size(); }


      template<typename _Up, typename... _Args>
 __attribute__((__always_inline__))
 void
 construct(_Up* __p, _Args&&... __args)
 noexcept(__is_nothrow_new_constructible<_Up, _Args...>)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
 __attribute__((__always_inline__))
 void
 destroy(_Up* __p)
 noexcept(std::is_nothrow_destructible<_Up>::value)
 { __p->~_Up(); }
# 213 "/usr/include/c++/15.1.1/bits/new_allocator.h" 3
      template<typename _Up>
 friend __attribute__((__always_inline__)) bool
 operator==(const __new_allocator&, const __new_allocator<_Up>&)
 noexcept
 { return true; }


      template<typename _Up>
 friend __attribute__((__always_inline__)) bool
 operator!=(const __new_allocator&, const __new_allocator<_Up>&)
 noexcept
 { return false; }


    private:
      __attribute__((__always_inline__))
      constexpr size_type
      _M_max_size() const noexcept
      {

 return std::size_t(0x7fffffffffffffffL) / sizeof(_Tp);



      }
    };


}
# 34 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++allocator.h" 2 3


namespace std
{
# 46 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++allocator.h" 3
  template<typename _Tp>
    using __allocator_base = __new_allocator<_Tp>;
}
# 47 "/usr/include/c++/15.1.1/bits/allocator.h" 2 3
# 1 "/usr/include/c++/15.1.1/bits/memoryfwd.h" 1 3
# 44 "/usr/include/c++/15.1.1/bits/memoryfwd.h" 3
#define _MEMORYFWD_H 1







namespace std __attribute__ ((__visibility__ ("default")))
{

# 66 "/usr/include/c++/15.1.1/bits/memoryfwd.h" 3
  template<typename>
    class allocator;

  template<>
    class allocator<void>;



  template<typename, typename>
    struct uses_allocator;

  template<typename>
    struct allocator_traits;





}
# 48 "/usr/include/c++/15.1.1/bits/allocator.h" 2 3




#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"

namespace std __attribute__ ((__visibility__ ("default")))
{

# 75 "/usr/include/c++/15.1.1/bits/allocator.h" 3
  template<>
    class allocator<void>
    {
    public:
      typedef void value_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;



      typedef void* pointer;
      typedef const void* const_pointer;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };





      using propagate_on_container_move_assignment = true_type;


      using is_always_equal

 = true_type;
# 120 "/usr/include/c++/15.1.1/bits/allocator.h" 3
    };
# 132 "/usr/include/c++/15.1.1/bits/allocator.h" 3
  template<typename _Tp>
    class allocator : public __allocator_base<_Tp>
    {
    public:
      typedef _Tp value_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;



      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };





      using propagate_on_container_move_assignment = true_type;


      using is_always_equal

 = true_type;





      __attribute__((__always_inline__))
     
      allocator() noexcept { }

      __attribute__((__always_inline__))
     
      allocator(const allocator& __a) noexcept
      : __allocator_base<_Tp>(__a) { }



      allocator& operator=(const allocator&) = default;


      template<typename _Tp1>
 __attribute__((__always_inline__))

 allocator(const allocator<_Tp1>&) noexcept { }

      __attribute__((__always_inline__))



      ~allocator() noexcept { }
# 219 "/usr/include/c++/15.1.1/bits/allocator.h" 3
      friend __attribute__((__always_inline__))
      bool
      operator==(const allocator&, const allocator&) noexcept
      { return true; }


      friend __attribute__((__always_inline__))
      bool
      operator!=(const allocator&, const allocator&) noexcept
      { return false; }



    };






  template<typename _T1, typename _T2>
    __attribute__((__always_inline__))
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return true; }


  template<typename _T1, typename _T2>
    __attribute__((__always_inline__))
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return false; }






  template<typename _Tp>
    class allocator<const _Tp>
    {
    public:
      typedef _Tp value_type;
      allocator() { }
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };

  template<typename _Tp>
    class allocator<volatile _Tp>
    {
    public:
      typedef _Tp value_type;
      allocator() { }
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };

  template<typename _Tp>
    class allocator<const volatile _Tp>
    {
    public:
      typedef _Tp value_type;
      allocator() { }
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };







  extern template class allocator<char>;
  extern template class allocator<wchar_t>;



#undef __allocator_base


}

#pragma GCC diagnostic pop
# 66 "/usr/include/c++/15.1.1/vector" 2 3
# 1 "/usr/include/c++/15.1.1/bits/stl_construct.h" 1 3
# 57 "/usr/include/c++/15.1.1/bits/stl_construct.h" 3
#define _STL_CONSTRUCT_H 1
# 73 "/usr/include/c++/15.1.1/bits/stl_construct.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template <typename _Tp>
    inline void
    destroy_at(_Tp* __location)
    {
      if constexpr (201703L > 201703L && is_array_v<_Tp>)
 {
   for (auto& __x : *__location)
     std::destroy_at(std::__addressof(__x));
 }
      else
 __location->~_Tp();
    }
# 120 "/usr/include/c++/15.1.1/bits/stl_construct.h" 3
  template<typename _Tp, typename... _Args>
   
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    {
# 133 "/usr/include/c++/15.1.1/bits/stl_construct.h" 3
      ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...);
    }
# 146 "/usr/include/c++/15.1.1/bits/stl_construct.h" 3
  template<typename _T1>
   
    inline void
    _Construct_novalue(_T1* __p)
    { ::new(static_cast<void*>(__p)) _T1; }

  template<typename _ForwardIterator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last);




  template<typename _Tp>
    constexpr inline void
    _Destroy(_Tp* __pointer)
    {



      __pointer->~_Tp();

    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
# 200 "/usr/include/c++/15.1.1/bits/stl_construct.h" 3
  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;


      static_assert(is_destructible<_Value_type>::value,
      "value type is destructible");
      if constexpr (!__has_trivial_destructor(_Value_type))
 for (; __first != __last; ++__first)
   std::_Destroy(std::__addressof(*__first));
# 222 "/usr/include/c++/15.1.1/bits/stl_construct.h" 3
    }
# 256 "/usr/include/c++/15.1.1/bits/stl_construct.h" 3
  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    _Destroy_n(_ForwardIterator __first, _Size __count)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;


      static_assert(is_destructible<_Value_type>::value,
      "value type is destructible");
      if constexpr (!__has_trivial_destructor(_Value_type))
 for (; __count > 0; (void)++__first, --__count)
   std::_Destroy(std::__addressof(*__first));





      else
 std::advance(__first, __count);
      return __first;




    }
#pragma GCC diagnostic pop


  template <typename _ForwardIterator>
    inline void
    destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      std::_Destroy(__first, __last);
    }

  template <typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    destroy_n(_ForwardIterator __first, _Size __count)
    {
      return std::_Destroy_n(__first, __count);
    }



}
# 67 "/usr/include/c++/15.1.1/vector" 2 3
# 1 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 1 3
# 57 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
#define _STL_UNINITIALIZED_H 1
# 69 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
# 1 "/usr/include/c++/15.1.1/ext/alloc_traits.h" 1 3
# 30 "/usr/include/c++/15.1.1/ext/alloc_traits.h" 3
#define _EXT_ALLOC_TRAITS_H 1





# 1 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
#define _ALLOC_TRAITS_H 1
# 46 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{




 
# 52 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++14-extensions"
#pragma GCC diagnostic ignored "-Wc++17-extensions"


  struct __allocator_traits_base
  {



    template<typename _Tp, typename _Up, typename = void>

      struct __rebind : __replace_first_arg<_Tp, _Up>
      {
 static_assert(is_same<
   typename __replace_first_arg<_Tp, typename _Tp::value_type>::type,
   _Tp>::value,
   "allocator_traits<A>::rebind_alloc<A::value_type> must be A");
      };

    template<typename _Tp, typename _Up>




      struct __rebind<_Tp, _Up,
        __void_t<typename _Tp::template rebind<_Up>::other>>

      {
 using type = typename _Tp::template rebind<_Up>::other;

 static_assert(is_same<
   typename _Tp::template rebind<typename _Tp::value_type>::other,
   _Tp>::value,
   "allocator_traits<A>::rebind_alloc<A::value_type> must be A");
      };

  protected:
    template<typename _Tp>
      using __pointer = typename _Tp::pointer;
    template<typename _Tp>
      using __c_pointer = typename _Tp::const_pointer;
    template<typename _Tp>
      using __v_pointer = typename _Tp::void_pointer;
    template<typename _Tp>
      using __cv_pointer = typename _Tp::const_void_pointer;
    template<typename _Tp>
      using __pocca = typename _Tp::propagate_on_container_copy_assignment;
    template<typename _Tp>
      using __pocma = typename _Tp::propagate_on_container_move_assignment;
    template<typename _Tp>
      using __pocs = typename _Tp::propagate_on_container_swap;
    template<typename _Tp>
      using __equal = __type_identity<typename _Tp::is_always_equal>;
# 115 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
    template<typename _Alloc, typename _Sz, typename _Vp>
      using __allocate_hint_t
 = decltype(std::declval<_Alloc&>()
       .allocate(std::declval<_Sz>(), std::declval<_Vp>()));
    template<typename _Alloc, typename _Sz, typename _Vp, typename = void>
      static constexpr bool __has_allocate_hint = false;
    template<typename _Alloc, typename _Sz, typename _Vp>
      static constexpr bool
      __has_allocate_hint<_Alloc, _Sz, _Vp,
     __void_t<__allocate_hint_t<_Alloc, _Sz, _Vp>>>
 = true;
# 152 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
    template<typename _Alloc, typename _Tp, typename... _Args>
      using __construct_t
 = decltype(std::declval<_Alloc&>().construct(std::declval<_Tp*>(),
           std::declval<_Args>()...));
    template<typename _Alloc, typename _Tp, typename, typename... _Args>
      static constexpr bool __has_construct_impl = false;
    template<typename _Alloc, typename _Tp, typename... _Args>
      static constexpr bool
      __has_construct_impl<_Alloc, _Tp,
      __void_t<__construct_t<_Alloc, _Tp, _Args...>>,
      _Args...>
 = true;
    template<typename _Alloc, typename _Tp, typename... _Args>
      static constexpr bool __has_construct
 = __has_construct_impl<_Alloc, _Tp, void, _Args...>;
    template<typename _Tp, typename... _Args>
      using __new_expr_t
 = decltype(::new((void*)0) _Tp(std::declval<_Args>()...));
    template<typename _Tp, typename, typename... _Args>
      static constexpr bool __has_new_expr = false;
    template<typename _Tp, typename... _Args>
      static constexpr bool
      __has_new_expr<_Tp, __void_t<__new_expr_t<_Tp, _Args...>>, _Args...>
 = true;
    template<typename _Alloc, typename _Tp, typename... _Args>
      static constexpr bool __can_construct
 = __has_construct<_Alloc, _Tp, _Args...>
     || __has_new_expr<_Tp, void, _Args...>;
# 189 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
    template<typename _Alloc, typename _Tp>
      using __destroy_t
 = decltype(std::declval<_Alloc&>().destroy(std::declval<_Tp*>()));
    template<typename _Alloc, typename _Tp, typename = void>
      static constexpr bool __has_destroy = false;
    template<typename _Alloc, typename _Tp>
      static constexpr bool __has_destroy<_Alloc, _Tp,
       __void_t<__destroy_t<_Alloc, _Tp>>>
 = true;
# 207 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
    template<typename _Alloc>
      using __max_size_t = decltype(std::declval<const _Alloc&>().max_size());
    template<typename _Alloc, typename = void>
      static constexpr bool __has_max_size = false;
    template<typename _Alloc>
      static constexpr bool __has_max_size<_Alloc,
        __void_t<__max_size_t<_Alloc>>>
 = true;
# 225 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
    template<typename _Alloc>
      using __soccc_t
 = decltype(std::declval<const _Alloc&>()
       .select_on_container_copy_construction());
    template<typename _Alloc, typename = void>
      static constexpr bool __has_soccc = false;
    template<typename _Alloc>
      static constexpr bool __has_soccc<_Alloc, __void_t<__soccc_t<_Alloc>>>
 = true;

  };

  template<typename _Alloc, typename _Up>
    using __alloc_rebind
      = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;
# 248 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
  template<typename _Alloc>
    struct allocator_traits : __allocator_traits_base
    {

      typedef _Alloc allocator_type;

      typedef typename _Alloc::value_type value_type;






      using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;

    private:

      template<template<typename> class _Func, typename _Tp, typename = void>
 struct _Ptr
 {
   using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 };

      template<template<typename> class _Func, typename _Tp>
 struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 {
   using type = _Func<_Alloc>;
 };


      template<typename _A2, typename _PtrT, typename = void>
 struct _Diff
 { using type = typename pointer_traits<_PtrT>::difference_type; };

      template<typename _A2, typename _PtrT>
 struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 { using type = typename _A2::difference_type; };


      template<typename _A2, typename _DiffT, typename = void>
 struct _Size : make_unsigned<_DiffT> { };

      template<typename _A2, typename _DiffT>
 struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 { using type = typename _A2::size_type; };

    public:






      using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;







      using void_pointer = typename _Ptr<__v_pointer, void>::type;







      using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;







      using difference_type = typename _Diff<_Alloc, pointer>::type;







      using size_type = typename _Size<_Alloc, difference_type>::type;







      using propagate_on_container_copy_assignment
 = __detected_or_t<false_type, __pocca, _Alloc>;







      using propagate_on_container_move_assignment
 = __detected_or_t<false_type, __pocma, _Alloc>;







      using propagate_on_container_swap
 = __detected_or_t<false_type, __pocs, _Alloc>;







      using is_always_equal
 = typename __detected_or_t<is_empty<_Alloc>, __equal, _Alloc>::type;

      template<typename _Tp>
 using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
      template<typename _Tp>
 using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
# 383 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
      [[__nodiscard__]] static pointer
      allocate(_Alloc& __a, size_type __n)
      { return __a.allocate(__n); }
# 398 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
      [[__nodiscard__]] static pointer
      allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
      {
 if constexpr (__has_allocate_hint<_Alloc, size_type, const_void_pointer>)
   return __a.allocate(__n, __hint);
 else
   return __a.allocate(__n);
      }
# 415 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
      static void
      deallocate(_Alloc& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 430 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
      template<typename _Tp, typename... _Args>




 static __enable_if_t<__can_construct<_Alloc, _Tp, _Args...>>

 construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 noexcept(_S_nothrow_construct<_Tp, _Args...>())
 {
   if constexpr (__has_construct<_Alloc, _Tp, _Args...>)
     __a.construct(__p, std::forward<_Args>(__args)...);
   else
     std::_Construct(__p, std::forward<_Args>(__args)...);
 }
# 454 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
      template<typename _Tp>
 static void
 destroy(_Alloc& __a, _Tp* __p)
 noexcept(_S_nothrow_destroy<_Tp>())
 {
   if constexpr (__has_destroy<_Alloc, _Tp>)
     __a.destroy(__p);
   else
     std::_Destroy(__p);
 }
# 473 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
      static size_type
      max_size(const _Alloc& __a) noexcept
      {
 if constexpr (__has_max_size<_Alloc>)
   return __a.max_size();
 else


   return __gnu_cxx::__numeric_traits<size_type>::__max
     / sizeof(value_type);
      }
# 493 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
      static _Alloc
      select_on_container_copy_construction(const _Alloc& __rhs)
      {
 if constexpr (__has_soccc<_Alloc>)
   return __rhs.select_on_container_copy_construction();
 else
   return __rhs;
      }

    private:

      template<typename _Tp, typename... _Args>
 static constexpr bool
 _S_nothrow_construct(_Alloc* __a = nullptr, _Tp* __p = nullptr)
 {
   if constexpr (__has_construct<_Alloc, _Tp, _Args...>)
     return noexcept(__a->construct(__p, std::declval<_Args>()...));
   else
     return __is_nothrow_new_constructible<_Tp, _Args...>;
 }

      template<typename _Tp>
 static constexpr bool
 _S_nothrow_destroy(_Alloc* __a = nullptr, _Tp* __p = nullptr)
 {
   if constexpr (__has_destroy<_Alloc, _Tp>)
     return noexcept(__a->destroy(__p));
   else
     return is_nothrow_destructible<_Tp>::value;
 }
# 548 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
    };
#pragma GCC diagnostic pop
# 559 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
  template<typename _Tp>
    struct allocator_traits<allocator<_Tp>>
    {

      using allocator_type = allocator<_Tp>;


      using value_type = _Tp;


      using pointer = _Tp*;


      using const_pointer = const _Tp*;


      using void_pointer = void*;


      using const_void_pointer = const void*;


      using difference_type = std::ptrdiff_t;


      using size_type = std::size_t;


      using propagate_on_container_copy_assignment = false_type;


      using propagate_on_container_move_assignment = true_type;


      using propagate_on_container_swap = false_type;


      using is_always_equal = true_type;

      template<typename _Up>
 using rebind_alloc = allocator<_Up>;

      template<typename _Up>
 using rebind_traits = allocator_traits<allocator<_Up>>;
# 611 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
      [[__nodiscard__,__gnu__::__always_inline__]]
      static pointer
      allocate(allocator_type& __a, size_type __n)
      { return __a.allocate(__n); }
# 626 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
      [[__nodiscard__,__gnu__::__always_inline__]]
      static pointer
      allocate(allocator_type& __a, size_type __n,
        [[maybe_unused]] const_void_pointer __hint)
      {

 return __a.allocate(__n, __hint);



      }
# 646 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
      [[__gnu__::__always_inline__]]
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 662 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
      template<typename _Up, typename... _Args>
 [[__gnu__::__always_inline__]]
 static void
 construct(allocator_type& __a __attribute__((__unused__)),
    _Up* __p, _Args&&... __args)

 noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))



 {

   __a.construct(__p, std::forward<_Args>(__args)...);





 }
# 689 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
      template<typename _Up>
 [[__gnu__::__always_inline__]]
 static void
 destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 noexcept(is_nothrow_destructible<_Up>::value)
 {

   __a.destroy(__p);



 }






      [[__gnu__::__always_inline__]]
      static size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
      {

 return __a.max_size();



      }






      [[__gnu__::__always_inline__]]
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
      { return __rhs; }
    };
# 736 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
  template<>
    struct allocator_traits<allocator<void>>
    {

      using allocator_type = allocator<void>;


      using value_type = void;


      using pointer = void*;


      using const_pointer = const void*;


      using void_pointer = void*;


      using const_void_pointer = const void*;


      using difference_type = std::ptrdiff_t;


      using size_type = std::size_t;


      using propagate_on_container_copy_assignment = false_type;


      using propagate_on_container_move_assignment = true_type;


      using propagate_on_container_swap = false_type;


      using is_always_equal = true_type;

      template<typename _Up>
 using rebind_alloc = allocator<_Up>;

      template<typename _Up>
 using rebind_traits = allocator_traits<allocator<_Up>>;


      static void*
      allocate(allocator_type&, size_type, const void* = nullptr) = delete;


      static void
      deallocate(allocator_type&, void*, size_type) = delete;
# 800 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
      template<typename _Up, typename... _Args>
 [[__gnu__::__always_inline__]]
 static void
 construct(allocator_type&, _Up* __p, _Args&&... __args)
 noexcept(__is_nothrow_new_constructible<_Up, _Args...>)
 { std::_Construct(__p, std::forward<_Args>(__args)...); }
# 814 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
      template<typename _Up>
 [[__gnu__::__always_inline__]]
 static void
 destroy(allocator_type&, _Up* __p)
 noexcept(is_nothrow_destructible<_Up>::value)
 { std::_Destroy(__p); }


      static size_type
      max_size(const allocator_type&) = delete;






      [[__gnu__::__always_inline__]]
      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
      { return __rhs; }
    };



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
  template<typename _Alloc>
    [[__gnu__::__always_inline__]]
    constexpr inline void
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
    {
      using __traits = allocator_traits<_Alloc>;
      using __pocca =
 typename __traits::propagate_on_container_copy_assignment::type;
      if constexpr (__pocca::value)
 __one = __two;
    }

  template<typename _Alloc>
    [[__gnu__::__always_inline__]]
    constexpr _Alloc
    __alloc_on_copy(const _Alloc& __a)
    {
      typedef allocator_traits<_Alloc> __traits;
      return __traits::select_on_container_copy_construction(__a);
    }

  template<typename _Alloc>
    [[__gnu__::__always_inline__]]
    constexpr inline void
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
    {
      using __traits = allocator_traits<_Alloc>;
      using __pocma
 = typename __traits::propagate_on_container_move_assignment::type;
      if constexpr (__pocma::value)
 __one = std::move(__two);
    }

  template<typename _Alloc>
    [[__gnu__::__always_inline__]]
    constexpr inline void
    __alloc_on_swap(_Alloc& __one, _Alloc& __two)
    {
      using __traits = allocator_traits<_Alloc>;
      using __pocs = typename __traits::propagate_on_container_swap::type;
      if constexpr (__pocs::value)
 {
   using std::swap;
   swap(__one, __two);
 }
    }
#pragma GCC diagnostic pop

  template<typename _Alloc, typename _Tp,
    typename _ValueT = __remove_cvref_t<typename _Alloc::value_type>,
    typename = void>
    struct __is_alloc_insertable_impl
    : false_type
    { };

  template<typename _Alloc, typename _Tp, typename _ValueT>
    struct __is_alloc_insertable_impl<_Alloc, _Tp, _ValueT,
      __void_t<decltype(allocator_traits<_Alloc>::construct(
     std::declval<_Alloc&>(), std::declval<_ValueT*>(),
     std::declval<_Tp>()))>>
    : true_type
    { };




  template<typename _Alloc>
    struct __is_copy_insertable
    : __is_alloc_insertable_impl<_Alloc,
     typename _Alloc::value_type const&>::type
    { };



  template<typename _Tp>
    struct __is_copy_insertable<allocator<_Tp>>
    : is_copy_constructible<_Tp>
    { };





  template<typename _Alloc>
    struct __is_move_insertable
    : __is_alloc_insertable_impl<_Alloc, typename _Alloc::value_type>::type
    { };



  template<typename _Tp>
    struct __is_move_insertable<allocator<_Tp>>
    : is_move_constructible<_Tp>
    { };



  template<typename _Alloc, typename = void>
    struct __is_allocator : false_type { };

  template<typename _Alloc>
    struct __is_allocator<_Alloc,
      __void_t<typename _Alloc::value_type,
        decltype(std::declval<_Alloc&>().allocate(size_t{}))>>
    : true_type { };

  template<typename _Alloc>
    using _RequireAllocator
      = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;

  template<typename _Alloc>
    using _RequireNotAllocator
      = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;
# 970 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) noexcept { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two) noexcept
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Tp, bool
    = __or_<is_copy_constructible<typename _Tp::value_type>,
            is_nothrow_move_constructible<typename _Tp::value_type>>::value>
    struct __shrink_to_fit_aux
    { static bool _S_do_it(_Tp&) noexcept { return false; } };

  template<typename _Tp>
    struct __shrink_to_fit_aux<_Tp, true>
    {
     
      static bool
      _S_do_it(_Tp& __c) noexcept
      {

 try
   {
     _Tp(__make_move_if_noexcept_iterator(__c.begin()),
  __make_move_if_noexcept_iterator(__c.end()),
  __c.get_allocator()).swap(__c);
     return true;
   }
 catch(...)
   { return false; }



      }
    };
# 1023 "/usr/include/c++/15.1.1/bits/alloc_traits.h" 3
  template<typename _ForwardIterator, typename _Allocator>
   
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)



 allocator_traits<_Allocator>::destroy(__alloc,
           std::__addressof(*__first));

    }


  template<typename _ForwardIterator, typename _Tp>
    __attribute__((__always_inline__))
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      std::_Destroy(__first, __last);
    }





}
# 37 "/usr/include/c++/15.1.1/ext/alloc_traits.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{






template<typename _Alloc, typename = typename _Alloc::value_type>
  struct __alloc_traits

  : std::allocator_traits<_Alloc>

  {
    typedef _Alloc allocator_type;

    typedef std::allocator_traits<_Alloc> _Base_type;
    typedef typename _Base_type::value_type value_type;
    typedef typename _Base_type::pointer pointer;
    typedef typename _Base_type::const_pointer const_pointer;
    typedef typename _Base_type::size_type size_type;
    typedef typename _Base_type::difference_type difference_type;

    typedef value_type& reference;
    typedef const value_type& const_reference;
    using _Base_type::allocate;
    using _Base_type::deallocate;
    using _Base_type::construct;
    using _Base_type::destroy;
    using _Base_type::max_size;

  private:
    template<typename _Ptr>
      using __is_custom_pointer
 = std::__and_<std::is_same<pointer, _Ptr>,
        std::__not_<std::is_pointer<_Ptr>>>;

  public:

    template<typename _Ptr, typename... _Args>
      [[__gnu__::__always_inline__]]
      static constexpr
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
      noexcept(noexcept(_Base_type::construct(__a, std::__to_address(__p),
           std::forward<_Args>(__args)...)))
      {
 _Base_type::construct(__a, std::__to_address(__p),
         std::forward<_Args>(__args)...);
      }


    template<typename _Ptr>
      [[__gnu__::__always_inline__]]
      static constexpr
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    [[__gnu__::__always_inline__]]
    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
    { return _Base_type::select_on_container_copy_construction(__a); }

    [[__gnu__::__always_inline__]]
    static constexpr void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    [[__gnu__::__always_inline__]]
    static constexpr bool _S_propagate_on_copy_assign()
    { return _Base_type::propagate_on_container_copy_assignment::value; }

    [[__gnu__::__always_inline__]]
    static constexpr bool _S_propagate_on_move_assign()
    { return _Base_type::propagate_on_container_move_assignment::value; }

    [[__gnu__::__always_inline__]]
    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    [[__gnu__::__always_inline__]]
    static constexpr bool _S_always_equal()
    { return _Base_type::is_always_equal::value; }

    __attribute__((__always_inline__))
    static constexpr bool _S_nothrow_move()
    { return _S_propagate_on_move_assign() || _S_always_equal(); }

    template<typename _Tp>
      struct rebind
      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
# 182 "/usr/include/c++/15.1.1/ext/alloc_traits.h" 3
  };


}
# 70 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{








  template<typename _ForwardIterator, typename _Alloc = void>
    struct _UninitDestroyGuard
    {
     
      explicit
      _UninitDestroyGuard(_ForwardIterator& __first, _Alloc& __a)
      : _M_first(__first), _M_cur(__builtin_addressof(__first)), _M_alloc(__a)
      { }

     
      ~_UninitDestroyGuard()
      {
 if (__builtin_expect(_M_cur != 0, 0))
   std::_Destroy(_M_first, *_M_cur, _M_alloc);
      }

     
      void release() { _M_cur = 0; }

    private:
      _ForwardIterator const _M_first;
      _ForwardIterator* _M_cur;
      _Alloc& _M_alloc;

      _UninitDestroyGuard(const _UninitDestroyGuard&);
    };

  template<typename _ForwardIterator>
    struct _UninitDestroyGuard<_ForwardIterator, void>
    {
     
      explicit
      _UninitDestroyGuard(_ForwardIterator& __first)
      : _M_first(__first), _M_cur(__builtin_addressof(__first))
      { }

     
      ~_UninitDestroyGuard()
      {
 if (__builtin_expect(_M_cur != 0, 0))
   std::_Destroy(_M_first, *_M_cur);
      }

     
      void release() { _M_cur = 0; }

      _ForwardIterator const _M_first;
      _ForwardIterator* _M_cur;

    private:
      _UninitDestroyGuard(const _UninitDestroyGuard&);
    };



  template<typename _InputIterator, typename _Sentinel,
    typename _ForwardIterator>
   
    _ForwardIterator
    __do_uninit_copy(_InputIterator __first, _Sentinel __last,
       _ForwardIterator __result)
    {
      _UninitDestroyGuard<_ForwardIterator> __guard(__result);
      for (; __first != __last; ++__first, (void)++__result)
 std::_Construct(std::__addressof(*__result), *__first);
      __guard.release();
      return __result;
    }
# 217 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
# 228 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
   
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
# 256 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
      using _Dest = decltype(std::__niter_base(__result));
      using _Src = decltype(std::__niter_base(__first));
      using _ValT = typename iterator_traits<_ForwardIterator>::value_type;






      if constexpr (!__is_trivially_constructible(_ValT, decltype(*__first)))
 return std::__do_uninit_copy(__first, __last, __result);
      else if constexpr (__memcpyable<_Dest, _Src>::__value)
 {
   ptrdiff_t __n = __last - __first;
   if (__n > 0) [[__likely__]]
     {
       using _ValT = typename remove_pointer<_Src>::type;
       __builtin_memcpy(std::__niter_base(__result),
          std::__niter_base(__first),
          __n * sizeof(_ValT));
       __result += __n;
     }
   return __result;
 }
# 302 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
      else
 return std::__do_uninit_copy(__first, __last, __result);
# 317 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
    }
#pragma GCC diagnostic pop




  template<typename _ForwardIterator, typename _Tp>
    void
    __do_uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __x)
    {
      _UninitDestroyGuard<_ForwardIterator> __guard(__first);
      for (; __first != __last; ++__first)
 std::_Construct(std::__addressof(*__first), __x);
      __guard.release();
    }
# 389 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Tp>
   
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
# 404 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"





      if constexpr (__is_byte<_ValueType>::__value)
 if constexpr (is_same<_ValueType, _Tp>::value
   || is_integral<_Tp>::value)
   {
     using _BasePtr = decltype(std::__niter_base(__first));
     if constexpr (is_pointer<_BasePtr>::value)
       {
  void* __dest = std::__niter_base(__first);
  ptrdiff_t __n = __last - __first;
  if (__n > 0) [[__likely__]]
    __builtin_memset(__dest, (unsigned char)__x, __n);
  return;
       }
# 438 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
   }
      std::__do_uninit_fill(__first, __last, __x);
#pragma GCC diagnostic pop






    }




  template<typename _ForwardIterator, typename _Size, typename _Tp>
   
    _ForwardIterator
    __do_uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      _UninitDestroyGuard<_ForwardIterator> __guard(__first);

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
      if constexpr (is_integral<_Size>::value)

 do { if (std::__is_constant_evaluated() && !bool(__n >= 0)) std::__glibcxx_assert_fail(); } while (false);
      else if constexpr (is_floating_point<_Size>::value)

 do { if (std::__is_constant_evaluated() && !bool(__n >= 0 && static_cast<size_t>(__n) == __n)) std::__glibcxx_assert_fail(); } while (false);
#pragma GCC diagnostic pop

      for (; __n--; ++__first)
 std::_Construct(std::__addressof(*__first), __x);
      __guard.release();
      return __first;
    }
# 510 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
# 523 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Size, typename _Tp>
   
    inline _ForwardIterator
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {






      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;







      if constexpr (__is_byte<_ValueType>::__value)
 if constexpr (is_integral<_Tp>::value)
   if constexpr (is_integral<_Size>::value)
     {
       using _BasePtr = decltype(std::__niter_base(__first));
       if constexpr (is_pointer<_BasePtr>::value)
  {
    void* __dest = std::__niter_base(__first);
    if (__n > 0) [[__likely__]]
      {
        __builtin_memset(__dest, (unsigned char)__x, __n);
        __first += __n;
      }
    return __first;
  }
# 570 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
     }
      return std::__do_uninit_fill_n(__first, __n, __x);
# 580 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
    }
#pragma GCC diagnostic pop
# 591 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _Sentinel,
    typename _ForwardIterator, typename _Allocator>
   
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _Sentinel __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _UninitDestroyGuard<_ForwardIterator, _Allocator>
 __guard(__result, __alloc);

      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __first != __last; ++__first, (void)++__result)
 __traits::construct(__alloc, std::__addressof(*__result), *__first);
      __guard.release();
      return __result;
    }


  template<typename _InputIterator, typename _Sentinel,
    typename _ForwardIterator, typename _Tp>
   
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _Sentinel __last,
      _ForwardIterator __result, allocator<_Tp>&)
    {
# 637 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
      return std::uninitialized_copy(__first, __last, __result);

    }


  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
   
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(std::make_move_iterator(__first),
      std::make_move_iterator(__last),
      __result, __alloc);
    }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
   
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
           _InputIterator __last,
           _ForwardIterator __result,
           _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
 (std::__make_move_if_noexcept_iterator(__first),
  std::__make_move_if_noexcept_iterator(__last), __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
   
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _UninitDestroyGuard<_ForwardIterator, _Allocator>
 __guard(__first, __alloc);

      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __first != __last; ++__first)
 __traits::construct(__alloc, std::__addressof(*__first), __x);

      __guard.release();
    }


  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
   
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    {




      std::uninitialized_fill(__first, __last, __x);
    }


  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    
    _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _UninitDestroyGuard<_ForwardIterator, _Allocator>
 __guard(__first, __alloc);
      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __n > 0; --__n, (void) ++__first)
 __traits::construct(__alloc, std::__addressof(*__first), __x);
      __guard.release();
      return __first;
    }


  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
   
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    {




      return std::uninitialized_fill_n(__first, __n, __x);
    }
# 740 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result, __alloc);
      _UninitDestroyGuard<_ForwardIterator, _Allocator> __guard(__result,
        __alloc);
      __result = __mid;
      __result = std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
      __guard.release();
      return __result;
    }





  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result, __alloc);
      _UninitDestroyGuard<_ForwardIterator, _Allocator> __guard(__result,
        __alloc);
      __result = __mid;
      __result = std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
      __guard.release();
      return __result;
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      _UninitDestroyGuard<_ForwardIterator, _Allocator> __guard(__result,
        __alloc);
      __result = __mid;
      __result = std::__uninitialized_move_a(__first, __last, __mid, __alloc);
      __guard.release();
      return __result;
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      _UninitDestroyGuard<_ForwardIterator, _Allocator> __guard(__first2,
        __alloc);
      __first2 = __mid2;
      std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
      __guard.release();
    }
# 832 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
  template<bool _TrivialValueType>
    struct __uninitialized_default_1
    {
      template<typename _ForwardIterator>
       
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   _UninitDestroyGuard<_ForwardIterator> __guard(__first);
   for (; __first != __last; ++__first)
     std::_Construct(std::__addressof(*__first));
   __guard.release();
 }
    };

  template<>
    struct __uninitialized_default_1<true>
    {
      template<typename _ForwardIterator>
       
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   if (__first == __last)
     return;

   typename iterator_traits<_ForwardIterator>::value_type* __val
     = std::__addressof(*__first);
   std::_Construct(__val);
   if (++__first != __last)
     std::fill(__first, __last, *__val);
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_n_1
    {
      template<typename _ForwardIterator, typename _Size>

        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   _UninitDestroyGuard<_ForwardIterator> __guard(__first);
   for (; __n > 0; --__n, (void) ++__first)
     std::_Construct(std::__addressof(*__first));
   __guard.release();
   return __first;
 }
    };

  template<>
    struct __uninitialized_default_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>

        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   if (__n > 0)
     {
       typename iterator_traits<_ForwardIterator>::value_type* __val
  = std::__addressof(*__first);
       std::_Construct(__val);
       ++__first;
       __first = std::fill_n(__first, __n - 1, *__val);
     }
   return __first;
 }
    };



  template<typename _ForwardIterator>
   
    inline void
    __uninitialized_default(_ForwardIterator __first,
       _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = is_copy_assignable<_ValueType>::value;

      std::__uninitialized_default_1<__is_trivial(_ValueType)
         && __assignable>::
 __uninit_default(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
   
    inline _ForwardIterator
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    {






      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      constexpr bool __can_fill
 = __and_<is_integral<_Size>, is_copy_assignable<_ValueType>>::value;

      return __uninitialized_default_n_1<__is_trivial(_ValueType)
      && __can_fill>::
 __uninit_default_n(__first, __n);
    }





  template<typename _ForwardIterator, typename _Allocator>
    void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         _Allocator& __alloc)
    {
      _UninitDestroyGuard<_ForwardIterator, _Allocator> __guard(__first,
        __alloc);
      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __first != __last; ++__first)
 __traits::construct(__alloc, std::__addressof(*__first));
      __guard.release();
    }


  template<typename _ForwardIterator, typename _Tp>
    inline void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         allocator<_Tp>&)
    { std::__uninitialized_default(__first, __last); }





  template<typename _ForwardIterator, typename _Size, typename _Allocator>
    _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    _Allocator& __alloc)
    {
      _UninitDestroyGuard<_ForwardIterator, _Allocator> __guard(__first,
        __alloc);
      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __n > 0; --__n, (void) ++__first)
 __traits::construct(__alloc, std::__addressof(*__first));
      __guard.release();
      return __first;
    }




  template<typename _ForwardIterator, typename _Size, typename _Tp>
   
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }


  template<bool _TrivialValueType>
    struct __uninitialized_default_novalue_1
    {
      template<typename _ForwardIterator>

 static void
 __uninit_default_novalue(_ForwardIterator __first,
     _ForwardIterator __last)
 {
   _UninitDestroyGuard<_ForwardIterator> __guard(__first);
   for (; __first != __last; ++__first)
     std::_Construct_novalue(std::__addressof(*__first));
   __guard.release();
 }
    };

  template<>
    struct __uninitialized_default_novalue_1<true>
    {
      template<typename _ForwardIterator>
       
        static void
        __uninit_default_novalue(_ForwardIterator, _ForwardIterator)
 {
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_novalue_n_1
    {
      template<typename _ForwardIterator, typename _Size>

 static _ForwardIterator
 __uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 {
   _UninitDestroyGuard<_ForwardIterator> __guard(__first);
   for (; __n > 0; --__n, (void) ++__first)
     std::_Construct_novalue(std::__addressof(*__first));
   __guard.release();
   return __first;
 }
    };

  template<>
    struct __uninitialized_default_novalue_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>
       
 static _ForwardIterator
 __uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 { return std::next(__first, __n); }
    };



  template<typename _ForwardIterator>
   
    inline void
    __uninitialized_default_novalue(_ForwardIterator __first,
        _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_default_novalue_1<
 is_trivially_default_constructible<_ValueType>::value>::
 __uninit_default_novalue(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
   
    inline _ForwardIterator
    __uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      return __uninitialized_default_novalue_n_1<
 is_trivially_default_constructible<_ValueType>::value>::
 __uninit_default_novalue_n(__first, __n);
    }

  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
   
    _ForwardIterator
    __uninitialized_copy_n(_InputIterator __first, _Size __n,
      _ForwardIterator __result, input_iterator_tag)
    {
      _UninitDestroyGuard<_ForwardIterator> __guard(__result);
      for (; __n > 0; --__n, (void) ++__first, ++__result)
 std::_Construct(std::__addressof(*__result), *__first);
      __guard.release();
      return __result;
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
   
    inline _ForwardIterator
    __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    { return std::uninitialized_copy(__first, __first + __n, __result); }

  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
   
    pair<_InputIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
    _ForwardIterator __result, input_iterator_tag)
    {
      _UninitDestroyGuard<_ForwardIterator> __guard(__result);
      for (; __n > 0; --__n, (void) ++__first, ++__result)
 std::_Construct(std::__addressof(*__result), *__first);
      __guard.release();
      return {__first, __result};
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
   
    inline pair<_RandomAccessIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    {
      auto __second_res = uninitialized_copy(__first, __first + __n, __result);
      auto __first_res = std::next(__first, __n);
      return {__first_res, __second_res};
    }
# 1145 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
   
    inline _ForwardIterator
    uninitialized_copy_n(_InputIterator __first, _Size __n,
    _ForwardIterator __result)
    { return std::__uninitialized_copy_n(__first, __n, __result,
      std::__iterator_category(__first)); }


  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
   
    inline pair<_InputIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
         _ForwardIterator __result)
    {
      return
 std::__uninitialized_copy_n_pair(__first, __n, __result,
      std::__iterator_category(__first));
    }
# 1174 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
  template <typename _ForwardIterator>
   
    inline void
    uninitialized_default_construct(_ForwardIterator __first,
        _ForwardIterator __last)
    {
      std::__uninitialized_default_novalue(__first, __last);
    }
# 1190 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
  template <typename _ForwardIterator, typename _Size>
   
    inline _ForwardIterator
    uninitialized_default_construct_n(_ForwardIterator __first, _Size __count)
    {
      return std::__uninitialized_default_novalue_n(__first, __count);
    }







  template <typename _ForwardIterator>
   
    inline void
    uninitialized_value_construct(_ForwardIterator __first,
      _ForwardIterator __last)
    {
      return std::__uninitialized_default(__first, __last);
    }
# 1220 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
  template <typename _ForwardIterator, typename _Size>
   
    inline _ForwardIterator
    uninitialized_value_construct_n(_ForwardIterator __first, _Size __count)
    {
      return std::__uninitialized_default_n(__first, __count);
    }
# 1236 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
  template <typename _InputIterator, typename _ForwardIterator>
   
    inline _ForwardIterator
    uninitialized_move(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      return std::uninitialized_copy
 (std::make_move_iterator(__first),
  std::make_move_iterator(__last), __result);
    }
# 1255 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
  template <typename _InputIterator, typename _Size, typename _ForwardIterator>
   
    inline pair<_InputIterator, _ForwardIterator>
    uninitialized_move_n(_InputIterator __first, _Size __count,
    _ForwardIterator __result)
    {
      auto __res = std::__uninitialized_copy_n_pair
 (std::make_move_iterator(__first),
  __count, __result);
      return {__res.first.base(), __res.second};
    }





  template<typename _Tp, typename _Up, typename _Allocator>
   
    inline void
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   _Allocator& __alloc)
    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
    __dest, std::move(*__orig)))
      && noexcept(std::allocator_traits<_Allocator>::destroy(
       __alloc, std::__addressof(*__orig))))
    {
      typedef std::allocator_traits<_Allocator> __traits;
      __traits::construct(__alloc, __dest, std::move(*__orig));
      __traits::destroy(__alloc, std::__addressof(*__orig));
    }



  template<typename _Tp, typename = void>
    struct __is_bitwise_relocatable
    : __bool_constant<__is_trivial(_Tp)>
    { };

  template <typename _InputIterator, typename _ForwardIterator,
     typename _Allocator>
   
    inline _ForwardIterator
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
     _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
            std::addressof(*__first),
            __alloc)))
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
   "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
 std::__relocate_object_a(std::__addressof(*__cur),
     std::__addressof(*__first), __alloc);
      return __cur;
    }


  template <typename _Tp, typename _Up>
   
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
     _Tp* __result,
     [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
 {
# 1337 "/usr/include/c++/15.1.1/bits/stl_uninitialized.h" 3
   __builtin_memcpy(__result, __first, __count * sizeof(_Tp));
 }
      return __result + __count;
    }


  template <typename _InputIterator, typename _ForwardIterator,
     typename _Allocator>
   
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
   _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
         std::__niter_base(__last),
         std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
     std::__niter_base(__last),
     std::__niter_base(__result), __alloc);
    }







}
# 68 "/usr/include/c++/15.1.1/vector" 2 3
# 1 "/usr/include/c++/15.1.1/bits/stl_vector.h" 1 3
# 57 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
#define _STL_VECTOR_H 1





# 1 "/usr/include/c++/15.1.1/initializer_list" 1 3
# 31 "/usr/include/c++/15.1.1/initializer_list" 3
#define _INITIALIZER_LIST 
# 43 "/usr/include/c++/15.1.1/initializer_list" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;


      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }


      constexpr size_type
      size() const noexcept { return _M_len; }


      constexpr const_iterator
      begin() const noexcept { return _M_array; }


      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    };







  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils) noexcept
    { return __ils.begin(); }







  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils) noexcept
    { return __ils.end(); }
}
# 64 "/usr/include/c++/15.1.1/bits/stl_vector.h" 2 3
# 84 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
        pointer;

      struct _Vector_impl_data
      {
 pointer _M_start;
 pointer _M_finish;
 pointer _M_end_of_storage;


 _Vector_impl_data() noexcept
 : _M_start(), _M_finish(), _M_end_of_storage()
 { }



 _Vector_impl_data(_Vector_impl_data&& __x) noexcept
 : _M_start(__x._M_start), _M_finish(__x._M_finish),
   _M_end_of_storage(__x._M_end_of_storage)
 { __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }



 void
 _M_copy_data(_Vector_impl_data const& __x) noexcept
 {
   _M_start = __x._M_start;
   _M_finish = __x._M_finish;
   _M_end_of_storage = __x._M_end_of_storage;
 }


 void
 _M_swap_data(_Vector_impl_data& __x) noexcept
 {


   _Vector_impl_data __tmp;
   __tmp._M_copy_data(*this);
   _M_copy_data(__x);
   __x._M_copy_data(__tmp);
 }
      };

      struct _Vector_impl
 : public _Tp_alloc_type, public _Vector_impl_data
      {

 _Vector_impl() noexcept(is_nothrow_default_constructible<_Tp_alloc_type>::value)




 : _Tp_alloc_type()
 { }


 _Vector_impl(_Tp_alloc_type const& __a) noexcept
 : _Tp_alloc_type(__a)
 { }





 _Vector_impl(_Vector_impl&& __x) noexcept
 : _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 { }


 _Vector_impl(_Tp_alloc_type&& __a) noexcept
 : _Tp_alloc_type(std::move(__a))
 { }


 _Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
 : _Tp_alloc_type(std::move(__a)), _Vector_impl_data(std::move(__rv))
 { }
# 294 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
#define _GLIBCXX_ASAN_ANNOTATE_REINIT 
#define _GLIBCXX_ASAN_ANNOTATE_GROW(n) 
#define _GLIBCXX_ASAN_ANNOTATE_GREW(n) 
#define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n) 
#define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC 

      };

    public:
      typedef _Alloc allocator_type;

     
      _Tp_alloc_type&
      _M_get_Tp_allocator() noexcept
      { return this->_M_impl; }

     
      const _Tp_alloc_type&
      _M_get_Tp_allocator() const noexcept
      { return this->_M_impl; }

     
      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Tp_allocator()); }


      _Vector_base() = default;




     
      _Vector_base(const allocator_type& __a) noexcept
      : _M_impl(__a) { }



     
      _Vector_base(size_t __n)
      : _M_impl()
      { _M_create_storage(__n); }


     
      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      { _M_create_storage(__n); }


      _Vector_base(_Vector_base&&) = default;



     
      _Vector_base(_Tp_alloc_type&& __a) noexcept
      : _M_impl(std::move(__a)) { }

     
      _Vector_base(_Vector_base&& __x, const allocator_type& __a)
      : _M_impl(__a)
      {
 if (__x.get_allocator() == __a)
   this->_M_impl._M_swap_data(__x._M_impl);
 else
   {
     size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
     _M_create_storage(__n);
   }
      }


     
      _Vector_base(const allocator_type& __a, _Vector_base&& __x)
      : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
      { }


     
      ~_Vector_base() noexcept
      {
 _M_deallocate(_M_impl._M_start,
        _M_impl._M_end_of_storage - _M_impl._M_start);
      }

    public:
      _Vector_impl _M_impl;

     
      pointer
      _M_allocate(size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
      }

     
      void
      _M_deallocate(pointer __p, size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 if (__p)
   _Tr::deallocate(_M_impl, __p, __n);
      }

    protected:

     
      void
      _M_create_storage(size_t __n)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }
# 432 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
    };
# 457 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {
# 470 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
      static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
   "std::vector must have a non-const, non-volatile value_type");






      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Alloc_traits;

    public:
      typedef _Tp value_type;
      typedef typename _Base::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    private:

      static constexpr bool
      _S_nothrow_relocate(true_type)
      {
 return noexcept(std::__relocate_a(std::declval<pointer>(),
       std::declval<pointer>(),
       std::declval<pointer>(),
       std::declval<_Tp_alloc_type&>()));
      }

      static constexpr bool
      _S_nothrow_relocate(false_type)
      { return false; }

      static constexpr bool
      _S_use_relocate()
      {



 return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
      }

      static pointer
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
       _Tp_alloc_type& __alloc, true_type) noexcept
      {
 return std::__relocate_a(__first, __last, __result, __alloc);
      }

      static pointer
      _S_do_relocate(pointer, pointer, pointer __result,
       _Tp_alloc_type&, false_type) noexcept
      { return __result; }

      static pointer
      _S_relocate(pointer __first, pointer __last, pointer __result,
    _Tp_alloc_type& __alloc) noexcept
      {


 return std::__relocate_a(__first, __last, __result, __alloc);




      }


    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:







      vector() = default;
# 570 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
      explicit
     
      vector(const allocator_type& __a) noexcept
      : _Base(__a) { }
# 584 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
      explicit
     
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : _Base(_S_check_init_len(__n, __a), __a)
      { _M_default_initialize(__n); }
# 598 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
     
      vector(size_type __n, const value_type& __value,
      const allocator_type& __a = allocator_type())
      : _Base(_S_check_init_len(__n, __a), __a)
      { _M_fill_initialize(__n, __value); }
# 630 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
     
      vector(const vector& __x)
      : _Base(__x.size(),
 _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
      {
 this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }
# 650 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
      vector(vector&&) noexcept = default;


     
      vector(const vector& __x, const __type_identity_t<allocator_type>& __a)
      : _Base(__x.size(), __a)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }

    private:
     
      vector(vector&& __rv, const allocator_type& __m, true_type) noexcept
      : _Base(__m, std::move(__rv))
      { }

     
      vector(vector&& __rv, const allocator_type& __m, false_type)
      : _Base(__m)
      {
 if (__rv.get_allocator() == __m)
   this->_M_impl._M_swap_data(__rv._M_impl);
 else if (!__rv.empty())
   {
     this->_M_create_storage(__rv.size());
     this->_M_impl._M_finish =
       std::__uninitialized_move_a(__rv.begin(), __rv.end(),
       this->_M_impl._M_start,
       _M_get_Tp_allocator());
     __rv.clear();
   }
      }

    public:

     
      vector(vector&& __rv, const __type_identity_t<allocator_type>& __m)
      noexcept( noexcept(
 vector(std::declval<vector&&>(), std::declval<const allocator_type&>(),
        std::declval<typename _Alloc_traits::is_always_equal>())) )
      : vector(std::move(__rv), __m, typename _Alloc_traits::is_always_equal{})
      { }
# 707 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
     
      vector(initializer_list<value_type> __l,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_range_initialize_n(__l.begin(), __l.end(), __l.size());
      }
# 733 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>

 vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
 {
# 751 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
   _M_range_initialize(__first, __last,
         std::__iterator_category(__first));
 }
# 799 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
     
      ~vector() noexcept
      {
 std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator());
 ;
      }
# 816 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
     
      vector&
      operator=(const vector& __x);
# 831 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
     
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      {
 constexpr bool __move_storage =
   _Alloc_traits::_S_propagate_on_move_assign()
   || _Alloc_traits::_S_always_equal();
 _M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 return *this;
      }
# 853 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
     
      vector&
      operator=(initializer_list<value_type> __l)
      {
 this->_M_assign_aux(__l.begin(), __l.end(),
       random_access_iterator_tag());
 return *this;
      }
# 873 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
     
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 891 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>

 void
 assign(_InputIterator __first, _InputIterator __last)
 { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
# 920 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
     
      void
      assign(initializer_list<value_type> __l)
      {
 this->_M_assign_aux(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }
# 988 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
      using _Base::get_allocator;







      [[__nodiscard__]]
      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_start); }






      [[__nodiscard__]]
      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_start); }






      [[__nodiscard__]]
      iterator
      end() noexcept
      { return iterator(this->_M_impl._M_finish); }






      [[__nodiscard__]]
      const_iterator
      end() const noexcept
      { return const_iterator(this->_M_impl._M_finish); }






      [[__nodiscard__]]
      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }






      [[__nodiscard__]]
      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }






      [[__nodiscard__]]
      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }






      [[__nodiscard__]]
      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }







      [[__nodiscard__]]
      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_impl._M_start); }






      [[__nodiscard__]]
      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_impl._M_finish); }






      [[__nodiscard__]]
      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }






      [[__nodiscard__]]
      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }




      [[__nodiscard__]]
      size_type
      size() const noexcept
      {
 ptrdiff_t __dif = this->_M_impl._M_finish - this->_M_impl._M_start;
 if (__dif < 0)
    __builtin_unreachable ();
 return size_type(__dif);
      }


      [[__nodiscard__]]
      size_type
      max_size() const noexcept
      { return _S_max_size(_M_get_Tp_allocator()); }
# 1141 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
     
      void
      resize(size_type __new_size)
      {
 if (__new_size > size())
   _M_default_append(__new_size - size());
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 1162 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
     
      void
      resize(size_type __new_size, const value_type& __x)
      {
 if (__new_size > size())
   _M_fill_insert(end(), __new_size - size(), __x);
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 1196 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
     
      void
      shrink_to_fit()
      { _M_shrink_to_fit(); }






      [[__nodiscard__]]
      size_type
      capacity() const noexcept
      {
 ptrdiff_t __dif = this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start;
 if (__dif < 0)
    __builtin_unreachable ();
 return size_type(__dif);
      }





      [[__nodiscard__]]
      bool
      empty() const noexcept
      { return begin() == end(); }
# 1243 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
     
      void
      reserve(size_type __n);
# 1259 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
      [[__nodiscard__]]
      reference
      operator[](size_type __n) noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__n < this->size())) std::__glibcxx_assert_fail(); } while (false);
 return *(this->_M_impl._M_start + __n);
      }
# 1278 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
      [[__nodiscard__]]
      const_reference
      operator[](size_type __n) const noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__n < this->size())) std::__glibcxx_assert_fail(); } while (false);
 return *(this->_M_impl._M_start + __n);
      }

    protected:

     
      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("vector::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
      }

    public:
# 1311 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
      [[__nodiscard__]]
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 1330 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
      [[__nodiscard__]]
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      [[__nodiscard__]]
      reference
      front() noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return *begin();
      }





      [[__nodiscard__]]
      const_reference
      front() const noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return *begin();
      }





      [[__nodiscard__]]
      reference
      back() noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return *(end() - 1);
      }





      [[__nodiscard__]]
      const_reference
      back() const noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return *(end() - 1);
      }
# 1393 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
      [[__nodiscard__]]
      _Tp*
      data() noexcept
      { return _M_data_ptr(this->_M_impl._M_start); }

      [[__nodiscard__]]
      const _Tp*
      data() const noexcept
      { return _M_data_ptr(this->_M_impl._M_start); }
# 1414 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
     
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     ;
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         __x);
     ++this->_M_impl._M_finish;
     ;
   }
 else
   _M_realloc_append(__x);
      }


     
      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }

      template<typename... _Args>


 reference



 emplace_back(_Args&&... __args);
# 1455 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
     
      void
      pop_back() noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 --this->_M_impl._M_finish;
 _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 ;
      }
# 1478 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
      template<typename... _Args>

 iterator
 emplace(const_iterator __position, _Args&&... __args)
 { return _M_emplace_aux(__position, std::forward<_Args>(__args)...); }
# 1495 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
     
      iterator
      insert(const_iterator __position, const value_type& __x);
# 1526 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
     
      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_insert_rval(__position, std::move(__x)); }
# 1544 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
     
      iterator
      insert(const_iterator __position, initializer_list<value_type> __l)
      {
 auto __offset = __position - cbegin();
 _M_range_insert(begin() + __offset, __l.begin(), __l.end(),
   std::random_access_iterator_tag());
 return begin() + __offset;
      }
# 1570 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
     
      iterator
      insert(const_iterator __position, size_type __n, const value_type& __x)
      {
 difference_type __offset = __position - cbegin();
 _M_fill_insert(begin() + __offset, __n, __x);
 return begin() + __offset;
      }
# 1613 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>

 iterator
 insert(const_iterator __position, _InputIterator __first,
        _InputIterator __last)
 {
   difference_type __offset = __position - cbegin();
   _M_range_insert(begin() + __offset, __first, __last,
     std::__iterator_category(__first));
   return begin() + __offset;
 }
# 1789 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
     
      iterator

      erase(const_iterator __position)
      { return _M_erase(begin() + (__position - cbegin())); }
# 1817 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
     
      iterator

      erase(const_iterator __first, const_iterator __last)
      {
 const auto __beg = begin();
 const auto __cbeg = cbegin();
 return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
      }
# 1842 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
     
      void
      swap(vector& __x) noexcept
      {

 do { if (std::__is_constant_evaluated() && !bool(_Alloc_traits::propagate_on_container_swap::value || _M_get_Tp_allocator() == __x._M_get_Tp_allocator())) std::__glibcxx_assert_fail(); } while (false)
                                                          ;

 this->_M_impl._M_swap_data(__x._M_impl);
 _Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
      __x._M_get_Tp_allocator());
      }







     
      void
      clear() noexcept
      { _M_erase_at_end(this->_M_impl._M_start); }

    private:

      struct _Guard_alloc
      {
 pointer _M_storage;
 size_type _M_len;
 _Base& _M_vect;


 _Guard_alloc(pointer __s, size_type __l, _Base& __vect)
 : _M_storage(__s), _M_len(__l), _M_vect(__vect)
 { }


 ~_Guard_alloc()
 {
   if (_M_storage)
     _M_vect._M_deallocate(_M_storage, _M_len);
 }


 pointer
 _M_release()
 {
   pointer __res = _M_storage;
   _M_storage = pointer();
   return __res;
 }

      private:
 _Guard_alloc(const _Guard_alloc&);
      };

    protected:




      template<typename _ForwardIterator>

 pointer
 _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
 {
   _Guard_alloc __guard(this->_M_allocate(__n), __n, *this);
   std::__uninitialized_copy_a
     (__first, __last, __guard._M_storage, _M_get_Tp_allocator());
   return __guard._M_release();
 }
# 1948 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
      template<typename _InputIterator>

 void
 _M_range_initialize(_InputIterator __first, _InputIterator __last,
       std::input_iterator_tag)
 {
   try {
     for (; __first != __last; ++__first)

       emplace_back(*__first);



   } catch(...) {
     clear();
     throw;
   }
 }


      template<typename _ForwardIterator>

 void
 _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
       std::forward_iterator_tag)
 {
   _M_range_initialize_n(__first, __last,
    std::distance(__first, __last));
 }

      template<typename _Iterator, typename _Sentinel>

 void
 _M_range_initialize_n(_Iterator __first, _Sentinel __last,
         size_type __n)
 {
   pointer __start = this->_M_impl._M_start =
     this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
   this->_M_impl._M_end_of_storage = __start + __n;
   this->_M_impl._M_finish
       = std::__uninitialized_copy_a(std::move(__first), __last,
         __start, _M_get_Tp_allocator());
 }



     
      void
      _M_fill_initialize(size_type __n, const value_type& __value)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
     _M_get_Tp_allocator());
      }



     
      void
      _M_default_initialize(size_type __n)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
        _M_get_Tp_allocator());
      }
# 2022 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
      template<typename _Integer>

 void
 _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
 { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>

 void
 _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
 { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }


      template<typename _InputIterator>

 void
 _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>

 void
 _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);



     
      void
      _M_fill_assign(size_type __n, const value_type& __val);







      template<typename _Integer>

 void
 _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
 { _M_fill_insert(__pos, __n, __val); }


      template<typename _InputIterator>

 void
 _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
 {
   _M_range_insert(__pos, __first, __last,
     std::__iterator_category(__first));
 }


      template<typename _InputIterator>

 void
 _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>

 void
 _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);



     
      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);



     
      void
      _M_default_append(size_type __n);

     
      bool
      _M_shrink_to_fit();
# 2124 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
      struct _Temporary_value
      {
 template<typename... _Args>
   explicit
   _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
   {
     _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
         std::forward<_Args>(__args)...);
   }


 ~_Temporary_value()
 { _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }

 value_type&
 _M_val() noexcept { return _M_storage._M_val; }

      private:
 _Tp*
 _M_ptr() noexcept { return std::__addressof(_M_storage._M_val); }

 union _Storage
 {
   constexpr _Storage() : _M_byte() { }
   ~_Storage() { }
   _Storage& operator=(const _Storage&) = delete;
   unsigned char _M_byte;
   _Tp _M_val;
 };

 vector* _M_this;
 _Storage _M_storage;
      };



      template<typename _Arg>

 void
 _M_insert_aux(iterator __position, _Arg&& __arg);

      template<typename... _Args>

 void
 _M_realloc_insert(iterator __position, _Args&&... __args);

      template<typename... _Args>

 void
 _M_realloc_append(_Args&&... __args);


     
      iterator
      _M_insert_rval(const_iterator __position, value_type&& __v);


      template<typename... _Args>

 iterator
 _M_emplace_aux(const_iterator __position, _Args&&... __args);


     
      iterator
      _M_emplace_aux(const_iterator __position, value_type&& __v)
      { return _M_insert_rval(__position, std::move(__v)); }



     
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + (std::max)(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }


      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
 if (__n > _S_max_size(_Tp_alloc_type(__a)))
   __throw_length_error(
       ("cannot create std::vector larger than max_size()"));
 return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) noexcept
      {



 const size_t __diffmax
   = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
 const size_t __allocmax = _Alloc_traits::max_size(__a);
 return (std::min)(__diffmax, __allocmax);
      }





     
      void
      _M_erase_at_end(pointer __pos) noexcept
      {
 if (size_type __n = this->_M_impl._M_finish - __pos)
   {
     std::_Destroy(__pos, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     this->_M_impl._M_finish = __pos;
     ;
   }
      }

     
      iterator
      _M_erase(iterator __position);

     
      iterator
      _M_erase(iterator __first, iterator __last);


    private:



     
      void
      _M_move_assign(vector&& __x, true_type) noexcept
      {
 vector __tmp(get_allocator());
 this->_M_impl._M_swap_data(__x._M_impl);
 __tmp._M_impl._M_swap_data(__x._M_impl);
 std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }



     
      void
      _M_move_assign(vector&& __x, false_type)
      {
 if (__x._M_get_Tp_allocator() == this->_M_get_Tp_allocator())
   _M_move_assign(std::move(__x), true_type());
 else
   {


     this->_M_assign_aux(std::make_move_iterator(__x.begin()),
           std::make_move_iterator(__x.end()),
    std::random_access_iterator_tag());
     __x.clear();
   }
      }


      template<typename _Up>

 _Up*
 _M_data_ptr(_Up* __ptr) const noexcept
 { return __ptr; }


      template<typename _Ptr>

 typename std::pointer_traits<_Ptr>::element_type*
 _M_data_ptr(_Ptr __ptr) const
 { return empty() ? nullptr : std::__to_address(__ptr); }






    };


  template<typename _InputIterator, typename _ValT
      = typename iterator_traits<_InputIterator>::value_type,
    typename _Allocator = allocator<_ValT>,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireAllocator<_Allocator>>
    vector(_InputIterator, _InputIterator, _Allocator = _Allocator())
      -> vector<_ValT, _Allocator>;
# 2334 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }
# 2374 "/usr/include/c++/15.1.1/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    [[__nodiscard__]] inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    [[__nodiscard__]] inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    [[__nodiscard__]] inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    [[__nodiscard__]] inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    [[__nodiscard__]] inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }



  template<typename _Tp, typename _Alloc>
   
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }




  namespace __detail::__variant
  {
    template<typename> struct _Never_valueless_alt;



    template<typename _Tp, typename _Alloc>
      struct _Never_valueless_alt<std::vector<_Tp, _Alloc>>
      : std::is_nothrow_move_assignable<std::vector<_Tp, _Alloc>>
      { };
  }



}
# 69 "/usr/include/c++/15.1.1/vector" 2 3
# 1 "/usr/include/c++/15.1.1/bits/stl_bvector.h" 1 3
# 57 "/usr/include/c++/15.1.1/bits/stl_bvector.h" 3
#define _STL_BVECTOR_H 1


#define _GLIBCXX_ALWAYS_INLINE inline __attribute__((__always_inline__))




# 1 "/usr/include/c++/15.1.1/bits/functional_hash.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/functional_hash.h" 3
#define _FUNCTIONAL_HASH_H 1






# 1 "/usr/include/c++/15.1.1/bits/hash_bytes.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/hash_bytes.h" 3
#define _HASH_BYTES_H 1







namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 39 "/usr/include/c++/15.1.1/bits/functional_hash.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 52 "/usr/include/c++/15.1.1/bits/functional_hash.h" 3
  template<typename _Result, typename _Arg>
    struct __hash_base
    {

      typedef _Result result_type [[__deprecated__]];
      typedef _Arg argument_type [[__deprecated__]];

    };



  template<typename _Tp> struct __hash_empty_base { };



  template<typename _Tp>
    struct hash;

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++14-extensions"
  template<typename _Tp, typename = void>
    constexpr bool __is_hash_enabled_for = false;

  template<typename _Tp>
    constexpr bool
    __is_hash_enabled_for<_Tp,
     __void_t<decltype(hash<_Tp>()(declval<_Tp>()))>>
      = true;
#pragma GCC diagnostic pop


  template<typename _Tp>
    struct __hash_not_enabled
    {
      __hash_not_enabled(__hash_not_enabled&&) = delete;
      ~__hash_not_enabled() = delete;
    };


  template<typename _Tp, bool = true>
    struct __hash_enum : public __hash_base<size_t, _Tp>
    {
      size_t
      operator()(_Tp __val) const noexcept
      {
       using __type = typename underlying_type<_Tp>::type;
       return hash<__type>{}(static_cast<__type>(__val));
      }
    };


  template<typename _Tp>
    struct hash
    : __conditional_t<__is_enum(_Tp), __hash_enum<_Tp>, __hash_not_enabled<_Tp>>
    { };


  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const noexcept
      { return reinterpret_cast<size_t>(__p); }
    };


#define _Cxx_hashtable_define_trivial_hash(_Tp) template<> struct hash<_Tp> : public __hash_base<size_t, _Tp> { size_t operator()(_Tp __val) const noexcept { return static_cast<size_t>(__val); } };
# 128 "/usr/include/c++/15.1.1/bits/functional_hash.h" 3
  template<> struct hash<bool> : public __hash_base<size_t, bool> { size_t operator()(bool __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char> : public __hash_base<size_t, char> { size_t operator()(char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<signed char> : public __hash_base<size_t, signed char> { size_t operator()(signed char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned char> : public __hash_base<size_t, unsigned char> { size_t operator()(unsigned char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<wchar_t> : public __hash_base<size_t, wchar_t> { size_t operator()(wchar_t __val) const noexcept { return static_cast<size_t>(__val); } };







  template<> struct hash<char16_t> : public __hash_base<size_t, char16_t> { size_t operator()(char16_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char32_t> : public __hash_base<size_t, char32_t> { size_t operator()(char32_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<short> : public __hash_base<size_t, short> { size_t operator()(short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<int> : public __hash_base<size_t, int> { size_t operator()(int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long> : public __hash_base<size_t, long> { size_t operator()(long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long long> : public __hash_base<size_t, long long> { size_t operator()(long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned short> : public __hash_base<size_t, unsigned short> { size_t operator()(unsigned short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned int> : public __hash_base<size_t, unsigned int> { size_t operator()(unsigned int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long> : public __hash_base<size_t, unsigned long> { size_t operator()(unsigned long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long long> : public __hash_base<size_t, unsigned long long> { size_t operator()(unsigned long long __val) const noexcept { return static_cast<size_t>(__val); } };


  __extension__
  template<> struct hash<__int128> : public __hash_base<size_t, __int128> { size_t operator()(__int128 __val) const noexcept { return static_cast<size_t>(__val); } };
  __extension__
  template<> struct hash<__int128 unsigned> : public __hash_base<size_t, __int128 unsigned> { size_t operator()(__int128 unsigned __val) const noexcept { return static_cast<size_t>(__val); } };
# 202 "/usr/include/c++/15.1.1/bits/functional_hash.h" 3
#undef _Cxx_hashtable_define_trivial_hash

  struct _Hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(0xc70f6907UL))
    { return _Hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  struct _Fnv_hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(2166136261UL))
    { return _Fnv_hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  template<>
    struct hash<float> : public __hash_base<size_t, float>
    {
      size_t
      operator()(float __val) const noexcept
      {

 return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<double> : public __hash_base<size_t, double>
    {
      size_t
      operator()(double __val) const noexcept
      {

 return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<long double>
    : public __hash_base<size_t, long double>
    {
      __attribute__ ((__pure__)) size_t
      operator()(long double __val) const noexcept;
    };


  template<>
    struct hash<nullptr_t> : public __hash_base<size_t, nullptr_t>
    {
      size_t
      operator()(nullptr_t) const noexcept
      { return 0; }
    };
# 297 "/usr/include/c++/15.1.1/bits/functional_hash.h" 3
  template<typename _Hash>
    struct __is_fast_hash : public std::true_type
    { };

  template<>
    struct __is_fast_hash<hash<long double>> : public std::false_type
    { };


}
# 66 "/usr/include/c++/15.1.1/bits/stl_bvector.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  __attribute__((__nonnull__))
 
  void
  __fill_bvector_n(_Bit_type*, size_t, bool) noexcept;



  struct _Bit_reference
  {
  private:
    template<typename, typename> friend class vector;
    friend struct _Bit_iterator;
    friend struct _Bit_const_iterator;

   
    _Bit_reference() noexcept : _M_p(0), _M_mask(0) { }

    _Bit_type * _M_p;
    _Bit_type _M_mask;

   
    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

  public:

    _Bit_reference(const _Bit_reference&) = default;


    [[__nodiscard__]]
    operator bool() const noexcept
    { return !!(*_M_p & _M_mask); }

   
    _Bit_reference&
    operator=(bool __x) noexcept
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }
# 131 "/usr/include/c++/15.1.1/bits/stl_bvector.h" 3
   
    _Bit_reference&
    operator=(const _Bit_reference& __x) noexcept
    { return *this = bool(__x); }

    [[__nodiscard__]]
    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    [[__nodiscard__]]
    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

   
    void
    flip() noexcept
    { *_M_p ^= _M_mask; }


   
    friend void
    swap(_Bit_reference __x, _Bit_reference __y) noexcept
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

   
    friend void
    swap(_Bit_reference __x, bool& __y) noexcept
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

   
    friend void
    swap(bool& __x, _Bit_reference __y) noexcept
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

  };


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    inline __attribute__((__always_inline__))
    void
    _M_assume_normalized() const
    {

      unsigned int __ofst = _M_offset;
      __attribute__ ((__assume__ (__ofst < unsigned(_S_word_bit))));

    }

   
    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

   
    void
    _M_bump_up()
    {
      _M_assume_normalized();
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

   
    void
    _M_bump_down()
    {
      _M_assume_normalized();
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

   
    void
    _M_incr(ptrdiff_t __i)
    {
      _M_assume_normalized();
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   __n += int(_S_word_bit);
   --_M_p;
 }
      _M_offset = static_cast<unsigned int>(__n);
    }

    [[__nodiscard__]]
    friend bool
    operator==(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    {
      __x._M_assume_normalized();
      __y._M_assume_normalized();
      return __x._M_p == __y._M_p && __x._M_offset == __y._M_offset;
    }
# 266 "/usr/include/c++/15.1.1/bits/stl_bvector.h" 3
    [[__nodiscard__]]
    friend bool
    operator<(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    {
      __x._M_assume_normalized();
      __y._M_assume_normalized();
      return __x._M_p < __y._M_p
     || (__x._M_p == __y._M_p && __x._M_offset < __y._M_offset);
    }

    [[__nodiscard__]]
    friend bool
    operator!=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    { return !(__x == __y); }

    [[__nodiscard__]]
    friend bool
    operator>(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    { return __y < __x; }

    [[__nodiscard__]]
    friend bool
    operator<=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    { return !(__y < __x); }

    [[__nodiscard__]]
    friend bool
    operator>=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    { return !(__x < __y); }


    friend ptrdiff_t
    operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
    {
      __x._M_assume_normalized();
      __y._M_assume_normalized();
      return (int(_S_word_bit) * (__x._M_p - __y._M_p)
       + __x._M_offset - __y._M_offset);
    }
  };
#pragma GCC diagnostic pop

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;



    typedef _Bit_reference* pointer;

    typedef _Bit_iterator iterator;

   
    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

   
    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

   
    iterator
    _M_const_cast() const
    { return *this; }

    [[__nodiscard__]]
    reference
    operator*() const
    {
      _M_assume_normalized();
      return reference(_M_p, 1UL << _M_offset);
    }

   
    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

   
    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

   
    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

   
    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

   
    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

   
    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    [[__nodiscard__]]
    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }

    [[__nodiscard__]]
    friend iterator
    operator+(const iterator& __x, difference_type __n)
    {
      iterator __tmp = __x;
      __tmp += __n;
      return __tmp;
    }

    [[__nodiscard__]]
    friend iterator
    operator+(difference_type __n, const iterator& __x)
    { return __x + __n; }

    [[__nodiscard__]]
    friend iterator
    operator-(const iterator& __x, difference_type __n)
    {
      iterator __tmp = __x;
      __tmp -= __n;
      return __tmp;
    }
  };

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;



    typedef const bool* pointer;

    typedef _Bit_const_iterator const_iterator;

   
    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

   
    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

   
    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

   
    _Bit_iterator
    _M_const_cast() const
    { return _Bit_iterator(_M_p, _M_offset); }

    [[__nodiscard__]]
    const_reference
    operator*() const
    {
      _M_assume_normalized();
      return _Bit_reference(_M_p, 1UL << _M_offset);
    }

   
    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

   
    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

   
    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

   
    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

   
    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

   
    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    [[__nodiscard__]]
    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }

    [[__nodiscard__]]
    friend const_iterator
    operator+(const const_iterator& __x, difference_type __n)
    {
      const_iterator __tmp = __x;
      __tmp += __n;
      return __tmp;
    }

    [[__nodiscard__]]
    friend const_iterator
    operator-(const const_iterator& __x, difference_type __n)
    {
      const_iterator __tmp = __x;
      __tmp -= __n;
      return __tmp;
    }

    [[__nodiscard__]]
    friend const_iterator
    operator+(difference_type __n, const const_iterator& __x)
    { return __x + __n; }
  };

  template<typename _Alloc>
    struct _Bvector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Bit_type>::other _Bit_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Bit_alloc_type>
 _Bit_alloc_traits;
      typedef typename _Bit_alloc_traits::pointer _Bit_pointer;

      struct _Bvector_impl_data
      {

 _Bit_iterator _M_start;
# 553 "/usr/include/c++/15.1.1/bits/stl_bvector.h" 3
 _Bit_iterator _M_finish;
 _Bit_pointer _M_end_of_storage;


 _Bvector_impl_data() noexcept
 : _M_start(), _M_finish(), _M_end_of_storage()
 { }


 _Bvector_impl_data(const _Bvector_impl_data&) = default;

 _Bvector_impl_data&
 operator=(const _Bvector_impl_data&) = default;


 _Bvector_impl_data(_Bvector_impl_data&& __x) noexcept
 : _Bvector_impl_data(__x)
 { __x._M_reset(); }


 void
 _M_move_data(_Bvector_impl_data&& __x) noexcept
 {
   *this = __x;
   __x._M_reset();
 }



 void
 _M_reset() noexcept
 { *this = _Bvector_impl_data(); }


 void
 _M_swap_data(_Bvector_impl_data& __x) noexcept
 {


   std::swap(*this, __x);
 }
      };

      struct _Bvector_impl
 : public _Bit_alloc_type, public _Bvector_impl_data
      {

 _Bvector_impl() noexcept(is_nothrow_default_constructible<_Bit_alloc_type>::value)




 : _Bit_alloc_type()
 { }


 _Bvector_impl(const _Bit_alloc_type& __a) noexcept
 : _Bit_alloc_type(__a)
 { }





 _Bvector_impl(_Bvector_impl&& __x) noexcept
 : _Bit_alloc_type(std::move(__x)), _Bvector_impl_data(std::move(__x))
 { }


 _Bvector_impl(_Bit_alloc_type&& __a, _Bvector_impl&& __x) noexcept
 : _Bit_alloc_type(std::move(__a)), _Bvector_impl_data(std::move(__x))
 { }



 _Bit_type*
 _M_end_addr() const noexcept
 {
   if (this->_M_end_of_storage)
     return std::__addressof(this->_M_end_of_storage[-1]) + 1;
   return 0;
 }
      };

    public:
      typedef _Alloc allocator_type;

     
      _Bit_alloc_type&
      _M_get_Bit_allocator() noexcept
      { return this->_M_impl; }

     
      const _Bit_alloc_type&
      _M_get_Bit_allocator() const noexcept
      { return this->_M_impl; }

     
      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Bit_allocator()); }


      _Bvector_base() = default;




     
      _Bvector_base(const allocator_type& __a)
      : _M_impl(_Bit_alloc_type(__a)) { }


      _Bvector_base(_Bvector_base&&) = default;

     
      _Bvector_base(_Bvector_base&& __x, const allocator_type& __a) noexcept
      : _M_impl(_Bit_alloc_type(__a), std::move(__x._M_impl))
      { }


     
      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

     
      _Bit_pointer
      _M_allocate(size_t __n)
      {
 _Bit_pointer __p = _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n));
# 694 "/usr/include/c++/15.1.1/bits/stl_bvector.h" 3
 return __p;
      }

     
      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   {
     const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
     _Bit_alloc_traits::deallocate(_M_impl,
       _M_impl._M_end_of_storage - __n,
       __n);
     _M_impl._M_reset();
   }
      }


     
      void
      _M_move_data(_Bvector_base&& __x) noexcept
      { _M_impl._M_move_data(std::move(__x._M_impl)); }


      constexpr
      static size_t
      _S_nword(size_t __n)
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
    };
# 745 "/usr/include/c++/15.1.1/bits/stl_bvector.h" 3
  template<typename _Alloc>
    class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
    {
      typedef _Bvector_base<_Alloc> _Base;
      typedef typename _Base::_Bit_pointer _Bit_pointer;
      typedef typename _Base::_Bit_alloc_traits _Bit_alloc_traits;


      friend struct std::hash<vector>;






    public:
      typedef bool value_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Bit_reference reference;
      typedef bool const_reference;
      typedef _Bit_reference* pointer;
      typedef const bool* const_pointer;
      typedef _Bit_iterator iterator;
      typedef _Bit_const_iterator const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef _Alloc allocator_type;

     
      allocator_type
      get_allocator() const
      { return _Base::get_allocator(); }

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_S_nword;
      using _Base::_M_get_Bit_allocator;

    public:

      vector() = default;




     
      explicit
      vector(const allocator_type& __a) noexcept
      : _Base(__a) { }


     
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : vector(__n, false, __a)
      { }

     
      vector(size_type __n, const bool& __value,
      const allocator_type& __a = allocator_type())





      : _Base(__a)
      {
 _M_initialize(__n);
 _M_initialize_value(__value);
      }

     
      vector(const vector& __x)
      : _Base(_Bit_alloc_traits::_S_select_on_copy(__x._M_get_Bit_allocator()))
      {
 const_iterator __xbegin = __x.begin(), __xend = __x.end();
 _M_initialize(__x.size());
 _M_copy_aligned(__xbegin, __xend, begin());
      }


      vector(vector&&) = default;

    private:
     
      vector(vector&& __x, const allocator_type& __a, true_type) noexcept
      : _Base(std::move(__x), __a)
      { }

     
      vector(vector&& __x, const allocator_type& __a, false_type)
      : _Base(__a)
      {
 if (__x.get_allocator() == __a)
   this->_M_move_data(std::move(__x));
 else
   {
     _M_initialize(__x.size());
     _M_copy_aligned(__x.begin(), __x.end(), begin());
     __x.clear();
   }
      }

    public:
     
      vector(vector&& __x, const __type_identity_t<allocator_type>& __a)
      noexcept(_Bit_alloc_traits::_S_always_equal())
      : vector(std::move(__x), __a,
        typename _Bit_alloc_traits::is_always_equal{})
      { }

     
      vector(const vector& __x, const __type_identity_t<allocator_type>& __a)
      : _Base(__a)
      {
 _M_initialize(__x.size());
 _M_copy_aligned(__x.begin(), __x.end(), begin());
      }

     
      vector(initializer_list<bool> __l,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_initialize_range(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }



      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>

 vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
 {
   _M_initialize_range(__first, __last,
         std::__iterator_category(__first));
 }
# 925 "/usr/include/c++/15.1.1/bits/stl_bvector.h" 3
     
      ~vector() noexcept { }

     
      vector&
      operator=(const vector& __x)
      {
 if (&__x == this)
   return *this;

 if (_Bit_alloc_traits::_S_propagate_on_copy_assign())
   {
     if (this->_M_get_Bit_allocator() != __x._M_get_Bit_allocator())
       {
  this->_M_deallocate();
  std::__alloc_on_copy(_M_get_Bit_allocator(),
         __x._M_get_Bit_allocator());
  _M_initialize(__x.size());
       }
     else
       std::__alloc_on_copy(_M_get_Bit_allocator(),
       __x._M_get_Bit_allocator());
   }

 if (__x.size() > capacity())
   {
     this->_M_deallocate();
     _M_initialize(__x.size());
   }
 this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
        begin());
 return *this;
      }


     
      vector&
      operator=(vector&& __x) noexcept(_Bit_alloc_traits::_S_nothrow_move())
      {
 if (_Bit_alloc_traits::_S_propagate_on_move_assign()
     || this->_M_get_Bit_allocator() == __x._M_get_Bit_allocator())
   {
     this->_M_deallocate();
     this->_M_move_data(std::move(__x));
     std::__alloc_on_move(_M_get_Bit_allocator(),
     __x._M_get_Bit_allocator());
   }
 else
   {
     if (__x.size() > capacity())
       {
  this->_M_deallocate();
  _M_initialize(__x.size());
       }
     this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
            begin());
     __x.clear();
   }
 return *this;
      }

     
      vector&
      operator=(initializer_list<bool> __l)
      {
 this->assign(__l.begin(), __l.end());
 return *this;
      }






     
      void
      assign(size_type __n, const bool& __x)
      { _M_fill_assign(__n, __x); }


      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>

 void
 assign(_InputIterator __first, _InputIterator __last)
 { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
# 1023 "/usr/include/c++/15.1.1/bits/stl_bvector.h" 3
     
      void
      assign(initializer_list<bool> __l)
      { _M_assign_aux(__l.begin(), __l.end(), random_access_iterator_tag()); }
# 1063 "/usr/include/c++/15.1.1/bits/stl_bvector.h" 3
      [[__nodiscard__]]
      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_start._M_p, 0); }

      [[__nodiscard__]]
      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_start._M_p, 0); }

      [[__nodiscard__]]
      iterator
      end() noexcept
      { return this->_M_impl._M_finish; }

      [[__nodiscard__]]
      const_iterator
      end() const noexcept
      { return this->_M_impl._M_finish; }

      [[__nodiscard__]]
      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

      [[__nodiscard__]]
      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

      [[__nodiscard__]]
      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

      [[__nodiscard__]]
      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }


      [[__nodiscard__]]
      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_impl._M_start._M_p, 0); }

      [[__nodiscard__]]
      const_iterator
      cend() const noexcept
      { return this->_M_impl._M_finish; }

      [[__nodiscard__]]
      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }

      [[__nodiscard__]]
      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }


      [[__nodiscard__]]
      size_type
      size() const noexcept
      { return size_type(end() - begin()); }

      [[__nodiscard__]]
      size_type
      max_size() const noexcept
      {
 const size_type __isize =
   __gnu_cxx::__numeric_traits<difference_type>::__max
   - int(_S_word_bit) + 1;
 const size_type __asize
   = _Bit_alloc_traits::max_size(_M_get_Bit_allocator());
 return (__asize <= __isize / int(_S_word_bit)
  ? __asize * int(_S_word_bit) : __isize);
      }

      [[__nodiscard__]]
      size_type
      capacity() const noexcept
      { return size_type(const_iterator(this->_M_impl._M_end_addr(), 0)
    - begin()); }

      [[__nodiscard__]]
      bool
      empty() const noexcept
      { return begin() == end(); }

      [[__nodiscard__]]
      reference
      operator[](size_type __n)
      {
 do { if (std::__is_constant_evaluated() && !bool(__n < this->size())) std::__glibcxx_assert_fail(); } while (false);
 return _Bit_reference (this->_M_impl._M_start._M_p
          + __n / int(_S_word_bit),
          1UL << __n % int(_S_word_bit));
      }

      [[__nodiscard__]]
      const_reference
      operator[](size_type __n) const
      {
 do { if (std::__is_constant_evaluated() && !bool(__n < this->size())) std::__glibcxx_assert_fail(); } while (false);
 return _Bit_reference (this->_M_impl._M_start._M_p
          + __n / int(_S_word_bit),
          1UL << __n % int(_S_word_bit));
      }

    protected:
     
      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("vector<bool>::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
      }

    public:
      [[__nodiscard__]]
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }

      [[__nodiscard__]]
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }

     
      void
      reserve(size_type __n)
      {
 if (__n > max_size())
   __throw_length_error(("vector::reserve"));
 if (capacity() < __n)
   _M_reallocate(__n);
      }

      [[__nodiscard__]]
      reference
      front()
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return *begin();
      }

      [[__nodiscard__]]
      const_reference
      front() const
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return *begin();
      }

      [[__nodiscard__]]
      reference
      back()
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return *(end() - 1);
      }

      [[__nodiscard__]]
      const_reference
      back() const
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return *(end() - 1);
      }

     
      void
      push_back(bool __x)
      {
 if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
   *this->_M_impl._M_finish++ = __x;
 else
   _M_insert_aux(end(), __x);
      }

     
      void
      swap(vector& __x) noexcept
      {

 do { if (std::__is_constant_evaluated() && !bool(_Bit_alloc_traits::propagate_on_container_swap::value || _M_get_Bit_allocator() == __x._M_get_Bit_allocator())) std::__glibcxx_assert_fail(); } while (false)
                                                            ;

 this->_M_impl._M_swap_data(__x._M_impl);
 _Bit_alloc_traits::_S_on_swap(_M_get_Bit_allocator(),
          __x._M_get_Bit_allocator());
      }


     
      static void
      swap(reference __x, reference __y) noexcept
      {
 bool __tmp = __x;
 __x = __y;
 __y = __tmp;
      }

     
      iterator

      insert(const_iterator __position, const bool& __x)



      {
 const difference_type __n = __position - begin();
 if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr()
     && __position == end())
   *this->_M_impl._M_finish++ = __x;
 else
   _M_insert_aux(__position._M_const_cast(), __x);
 return begin() + __n;
      }


      __attribute__ ((__deprecated__ ("use '" "insert(position, false)" "' instead")))
      iterator
      insert(const_iterator __position)
      { return this->insert(__position._M_const_cast(), false); }



      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>

 iterator
 insert(const_iterator __position,
        _InputIterator __first, _InputIterator __last)
 {
   difference_type __offset = __position - cbegin();
   _M_insert_range(__position._M_const_cast(),
     __first, __last,
     std::__iterator_category(__first));
   return begin() + __offset;
 }
# 1329 "/usr/include/c++/15.1.1/bits/stl_bvector.h" 3
     
      iterator
      insert(const_iterator __position, size_type __n, const bool& __x)
      {
 difference_type __offset = __position - cbegin();
 _M_fill_insert(__position._M_const_cast(), __n, __x);
 return begin() + __offset;
      }







     
      iterator
      insert(const_iterator __p, initializer_list<bool> __l)
      { return this->insert(__p, __l.begin(), __l.end()); }
# 1463 "/usr/include/c++/15.1.1/bits/stl_bvector.h" 3
     
      void
      pop_back()
      { --this->_M_impl._M_finish; }

     
      iterator

      erase(const_iterator __position)



      { return _M_erase(__position._M_const_cast()); }

     
      iterator

      erase(const_iterator __first, const_iterator __last)



      { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }

     
      void
      resize(size_type __new_size, bool __x = bool())
      {
 if (__new_size < size())
   _M_erase_at_end(begin() + difference_type(__new_size));
 else
   insert(end(), __new_size - size(), __x);
      }


     
      void
      shrink_to_fit()
      { _M_shrink_to_fit(); }


     
      void
      flip() noexcept
      {
 _Bit_type * const __end = this->_M_impl._M_end_addr();
 for (_Bit_type * __p = this->_M_impl._M_start._M_p; __p != __end; ++__p)
   *__p = ~*__p;
      }

     
      void
      clear() noexcept
      { _M_erase_at_end(begin()); }


      template<typename... _Args>


 reference



 emplace_back(_Args&&... __args)
 {
   push_back(bool(std::forward<_Args>(__args)...));

   return back();

 }

      template<typename... _Args>

 iterator
 emplace(const_iterator __pos, _Args&&... __args)
 { return insert(__pos, bool(std::forward<_Args>(__args)...)); }


    protected:

     
      iterator
      _M_copy_aligned(const_iterator __first, const_iterator __last,
        iterator __result)
      {
 _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
 return std::copy(const_iterator(__last._M_p, 0), __last,
    iterator(__q, 0));
      }

     
      void
      _M_initialize(size_type __n)
      {
 if (__n)
   {
     _Bit_pointer __q = this->_M_allocate(__n);
     this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
     iterator __start = iterator(std::__addressof(*__q), 0);
     this->_M_impl._M_start = __start;
     this->_M_impl._M_finish = __start + difference_type(__n);
   }
      }

     
      void
      _M_initialize_value(bool __x) noexcept
      {
 if (_Bit_type* __p = this->_M_impl._M_start._M_p)
   __fill_bvector_n(__p, this->_M_impl._M_end_addr() - __p, __x);
      }

     
      void
      _M_reallocate(size_type __n);


     
      bool
      _M_shrink_to_fit();
# 1603 "/usr/include/c++/15.1.1/bits/stl_bvector.h" 3
      template<typename _InputIterator>

 void
 _M_initialize_range(_InputIterator __first, _InputIterator __last,
       std::input_iterator_tag)
 {
   for (; __first != __last; ++__first)
     push_back(*__first);
 }

      template<typename _ForwardIterator>

 void
 _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
       std::forward_iterator_tag)
 {
   const size_type __n = std::distance(__first, __last);
   _M_initialize(__n);
   std::copy(__first, __last, begin());
 }
# 1639 "/usr/include/c++/15.1.1/bits/stl_bvector.h" 3
     
      void
      _M_fill_assign(size_t __n, bool __x)
      {
 if (__n > size())
   {
     _M_initialize_value(__x);
     insert(end(), __n - size(), __x);
   }
 else
   {
     _M_erase_at_end(begin() + __n);
     _M_initialize_value(__x);
   }
      }

      template<typename _InputIterator>

 void
 _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag)
 {
   iterator __cur = begin();
   for (; __first != __last && __cur != end(); ++__cur, (void)++__first)
     *__cur = *__first;
   if (__first == __last)
     _M_erase_at_end(__cur);
   else
     insert(end(), __first, __last);
 }

      template<typename _ForwardIterator>

 void
 _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag)
 {
   const size_type __len = std::distance(__first, __last);
   if (__len < size())
     _M_erase_at_end(std::copy(__first, __last, begin()));
   else
     {
       _ForwardIterator __mid = __first;
       std::advance(__mid, size());
       std::copy(__first, __mid, begin());
       insert(end(), __mid, __last);
     }
 }
# 1706 "/usr/include/c++/15.1.1/bits/stl_bvector.h" 3
     
      void
      _M_fill_insert(iterator __position, size_type __n, bool __x);

      template<typename _InputIterator>

 void
 _M_insert_range(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag)
 {
   for (; __first != __last; ++__first)
     {
       __pos = insert(__pos, *__first);
       ++__pos;
     }
 }

      template<typename _ForwardIterator>

 void
 _M_insert_range(iterator __position, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);

     
      void
      _M_insert_aux(iterator __position, bool __x);

     
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

     
      void
      _M_erase_at_end(iterator __pos)
      { this->_M_impl._M_finish = __pos; }

     
      iterator
      _M_erase(iterator __pos);

     
      iterator
      _M_erase(iterator __first, iterator __last);

    protected:






      void data() = delete;



    };




 
  inline void
  __fill_bvector(_Bit_type* __v, unsigned int __first, unsigned int __last,
   bool __x) noexcept
  {
    const _Bit_type __fmask = ~0ul << __first;
    const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
    const _Bit_type __mask = __fmask & __lmask;

    if (__x)
      *__v |= __mask;
    else
      *__v &= ~__mask;
  }


  __attribute__((__nonnull__))
 
  inline void
  __fill_bvector_n(_Bit_type* __p, size_t __n, bool __x) noexcept
  {
# 1802 "/usr/include/c++/15.1.1/bits/stl_bvector.h" 3
    __builtin_memset(__p, __x ? ~0 : 0, __n * sizeof(_Bit_type));
  }


 
  inline void
  __fill_a1(std::_Bit_iterator __first,
     std::_Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
      {
 _Bit_type* __first_p = __first._M_p;
 if (__first._M_offset != 0)
   __fill_bvector(__first_p++, __first._M_offset, _S_word_bit, __x);

 __fill_bvector_n(__first_p, __last._M_p - __first_p, __x);

 if (__last._M_offset != 0)
   __fill_bvector(__last._M_p, 0, __last._M_offset, __x);
      }
    else if (__first._M_offset != __last._M_offset)
      __fill_bvector(__first._M_p, __first._M_offset, __last._M_offset, __x);
  }




  template<typename _Alloc>
    struct hash<std::vector<bool, _Alloc>>
    : public __hash_base<size_t, std::vector<bool, _Alloc>>
    {
      size_t
      operator()(const std::vector<bool, _Alloc>&) const noexcept;
    };



}
# 70 "/usr/include/c++/15.1.1/vector" 2 3
# 1 "/usr/include/c++/15.1.1/bits/refwrap.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/refwrap.h" 3
#define _GLIBCXX_REFWRAP_H 1
# 40 "/usr/include/c++/15.1.1/bits/refwrap.h" 3
# 1 "/usr/include/c++/15.1.1/bits/invoke.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/invoke.h" 3
#define _GLIBCXX_INVOKE_H 1
# 44 "/usr/include/c++/15.1.1/bits/invoke.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 55 "/usr/include/c++/15.1.1/bits/invoke.h" 3
  template<typename _Tp, typename _Up = typename __inv_unwrap<_Tp>::type>
    constexpr _Up&&
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
    _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
    _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
    }

  template<typename _Res, typename _MemPtr, typename _Tp>
    constexpr _Res
    __invoke_impl(__invoke_memobj_ref, _MemPtr&& __f, _Tp&& __t)
    { return __invfwd<_Tp>(__t).*__f; }

  template<typename _Res, typename _MemPtr, typename _Tp>
    constexpr _Res
    __invoke_impl(__invoke_memobj_deref, _MemPtr&& __f, _Tp&& __t)
    { return (*std::forward<_Tp>(__t)).*__f; }


  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
     std::forward<_Args>(__args)...);
    }



  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
    noexcept(is_nothrow_invocable_r_v<_Res, _Callable, _Args...>)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
 std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
     std::forward<_Args>(__args)...);
      else
 return std::__invoke_impl<__type>(__tag{},
       std::forward<_Callable>(__fn),
       std::forward<_Args>(__args)...);
    }
# 157 "/usr/include/c++/15.1.1/bits/invoke.h" 3

}
# 41 "/usr/include/c++/15.1.1/bits/refwrap.h" 2 3
# 1 "/usr/include/c++/15.1.1/bits/stl_function.h" 1 3
# 57 "/usr/include/c++/15.1.1/bits/stl_function.h" 3
#define _STL_FUNCTION_H 1





namespace std __attribute__ ((__visibility__ ("default")))
{

# 116 "/usr/include/c++/15.1.1/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    } __attribute__ ((__deprecated__));





  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    } __attribute__ ((__deprecated__));
# 157 "/usr/include/c++/15.1.1/bits/stl_function.h" 3
  struct __is_transparent;

  template<typename _Tp = void>
    struct plus;

  template<typename _Tp = void>
    struct minus;

  template<typename _Tp = void>
    struct multiplies;

  template<typename _Tp = void>
    struct divides;

  template<typename _Tp = void>
    struct modulus;

  template<typename _Tp = void>
    struct negate;



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"


  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {

      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };
#pragma GCC diagnostic pop


  template<>
    struct plus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) + std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) + std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) + std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct minus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) - std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) - std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) - std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct multiplies<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) * std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) * std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) * std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct divides<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) / std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) / std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) / std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct modulus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) % std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) % std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) % std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct negate<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(-std::forward<_Tp>(__t)))
 -> decltype(-std::forward<_Tp>(__t))
 { return -std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };
# 346 "/usr/include/c++/15.1.1/bits/stl_function.h" 3
  template<typename _Tp = void>
    struct equal_to;

  template<typename _Tp = void>
    struct not_equal_to;

  template<typename _Tp = void>
    struct greater;

  template<typename _Tp = void>
    struct less;

  template<typename _Tp = void>
    struct greater_equal;

  template<typename _Tp = void>
    struct less_equal;


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"


  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };


  template<typename _Tp>
    struct greater<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {

 if (std::__is_constant_evaluated())
   return __x > __y;

 return (long unsigned int)__x > (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {

 if (std::__is_constant_evaluated())
   return __x < __y;

 return (long unsigned int)__x < (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct greater_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {

 if (std::__is_constant_evaluated())
   return __x >= __y;

 return (long unsigned int)__x >= (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct less_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {

 if (std::__is_constant_evaluated())
   return __x <= __y;

 return (long unsigned int)__x <= (long unsigned int)__y;
      }
    };
#pragma GCC diagnostic pop



  template<>
    struct equal_to<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) == std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) == std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) == std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct not_equal_to<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) != std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) != std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) != std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct greater<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) > std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) > std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return greater<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) > std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return greater<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator>(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator>(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct less<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) < std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) < std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return less<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) < std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return less<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator<(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator<(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct greater_equal<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) >= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) >= std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return greater_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) >= std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return greater_equal<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator>=(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator>=(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct less_equal<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) <= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) <= std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return less_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) <= std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return less_equal<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator<=(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator<=(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };
# 778 "/usr/include/c++/15.1.1/bits/stl_function.h" 3
  template<typename _Tp = void>
    struct logical_and;

  template<typename _Tp = void>
    struct logical_or;

  template<typename _Tp = void>
    struct logical_not;


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"


  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };
#pragma GCC diagnostic pop



  template<>
    struct logical_and<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) && std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) && std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) && std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_or<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) || std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) || std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) || std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_not<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(!std::forward<_Tp>(__t)))
 -> decltype(!std::forward<_Tp>(__t))
 { return !std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };




  template<typename _Tp = void>
    struct bit_and;

  template<typename _Tp = void>
    struct bit_or;

  template<typename _Tp = void>
    struct bit_xor;

  template<typename _Tp = void>
    struct bit_not;


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"



  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };

  template<typename _Tp>
    struct bit_not : public unary_function<_Tp, _Tp>
    {
    constexpr
      _Tp
      operator()(const _Tp& __x) const
      { return ~__x; }
    };
#pragma GCC diagnostic pop


  template <>
    struct bit_and<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) & std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) & std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) & std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_or<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) | std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) | std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) | std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_xor<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) ^ std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_not<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(~std::forward<_Tp>(__t)))
 -> decltype(~std::forward<_Tp>(__t))
 { return ~std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 1020 "/usr/include/c++/15.1.1/bits/stl_function.h" 3
  template<typename _Predicate>
    class [[__deprecated__]] unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      constexpr
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      constexpr
      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    __attribute__ ((__deprecated__ ("use '" "std::not_fn" "' instead")))
    constexpr
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class [[__deprecated__]] binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      constexpr
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      constexpr
      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    __attribute__ ((__deprecated__ ("use '" "std::not_fn" "' instead")))
    constexpr
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 1101 "/usr/include/c++/15.1.1/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    } __attribute__ ((__deprecated__));


  template<typename _Arg, typename _Result>
    __attribute__ ((__deprecated__ ("use '" "std::function" "' instead")))
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    } __attribute__ ((__deprecated__));


  template<typename _Arg1, typename _Arg2, typename _Result>
    __attribute__ ((__deprecated__ ("use '" "std::function" "' instead")))
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity
    : public unary_function<_Tp, _Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };


  template<typename _Tp> struct _Identity<const _Tp> : _Identity<_Tp> { };

  template<typename _Pair>
    struct _Select1st
    : public unary_function<_Pair, typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }


      template<typename _Pair2>
        typename _Pair2::first_type&
        operator()(_Pair2& __x) const
        { return __x.first; }

      template<typename _Pair2>
        const typename _Pair2::first_type&
        operator()(const _Pair2& __x) const
        { return __x.first; }

    };

  template<typename _Pair>
    struct _Select2nd
    : public unary_function<_Pair, typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 1228 "/usr/include/c++/15.1.1/bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    } __attribute__ ((__deprecated__));


  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    } __attribute__ ((__deprecated__));


  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    } __attribute__ ((__deprecated__));


  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    } __attribute__ ((__deprecated__));


  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    } __attribute__ ((__deprecated__));


  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    } __attribute__ ((__deprecated__));


  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    } __attribute__ ((__deprecated__));


  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    } __attribute__ ((__deprecated__));



  template<typename _Ret, typename _Tp>
    __attribute__ ((__deprecated__ ("use '" "std::mem_fn" "' instead")))
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    __attribute__ ((__deprecated__ ("use '" "std::mem_fn" "' instead")))
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    __attribute__ ((__deprecated__ ("use '" "std::mem_fn" "' instead")))
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    __attribute__ ((__deprecated__ ("use '" "std::mem_fn" "' instead")))
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    __attribute__ ((__deprecated__ ("use '" "std::mem_fn" "' instead")))
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    __attribute__ ((__deprecated__ ("use '" "std::mem_fn" "' instead")))
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    __attribute__ ((__deprecated__ ("use '" "std::mem_fn" "' instead")))
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    __attribute__ ((__deprecated__ ("use '" "std::mem_fn" "' instead")))
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }
#pragma GCC diagnostic pop




  template<typename _Func, typename _SfinaeType, typename = __void_t<>>
    struct __has_is_transparent
    { };

  template<typename _Func, typename _SfinaeType>
    struct __has_is_transparent<_Func, _SfinaeType,
    __void_t<typename _Func::is_transparent>>
    { typedef void type; };

  template<typename _Func, typename _SfinaeType>
    using __has_is_transparent_t
      = typename __has_is_transparent<_Func, _SfinaeType>::type;
# 1437 "/usr/include/c++/15.1.1/bits/stl_function.h" 3

}


# 1 "/usr/include/c++/15.1.1/backward/binders.h" 1 3
# 57 "/usr/include/c++/15.1.1/backward/binders.h" 3
#define _BACKWARD_BINDERS_H 1


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

namespace std __attribute__ ((__visibility__ ("default")))
{

# 107 "/usr/include/c++/15.1.1/backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } __attribute__ ((__deprecated__ ("use '" "std::bind" "' instead")));


  template<typename _Operation, typename _Tp>
    __attribute__ ((__deprecated__ ("use '" "std::bind" "' instead")))
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } __attribute__ ((__deprecated__ ("use '" "std::bind" "' instead")));


  template<typename _Operation, typename _Tp>
    __attribute__ ((__deprecated__ ("use '" "std::bind" "' instead")))
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}

#pragma GCC diagnostic pop
# 1442 "/usr/include/c++/15.1.1/bits/stl_function.h" 2 3
# 42 "/usr/include/c++/15.1.1/bits/refwrap.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 58 "/usr/include/c++/15.1.1/bits/refwrap.h" 3
  template<typename _Res, typename... _ArgTypes>
    struct _Maybe_unary_or_binary_function { };


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"


  template<typename _Res, typename _T1>
    struct _Maybe_unary_or_binary_function<_Res, _T1>
    : std::unary_function<_T1, _Res> { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Maybe_unary_or_binary_function<_Res, _T1, _T2>
    : std::binary_function<_T1, _T2, _Res> { };

#pragma GCC diagnostic pop

  template<typename _Signature>
    struct _Mem_fn_traits;

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Mem_fn_traits_base
    {
      using __result_type = _Res;
      using __maybe_type
 = _Maybe_unary_or_binary_function<_Res, _Class*, _ArgTypes...>;
      using __arity = integral_constant<size_t, sizeof...(_ArgTypes)>;
    };

#define _GLIBCXX_MEM_FN_TRAITS2(_CV,_REF,_LVAL,_RVAL) template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) _CV _REF> : _Mem_fn_traits_base<_Res, _CV _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) _CV _REF> : _Mem_fn_traits_base<_Res, _CV _Class, _ArgTypes...> { using __vararg = true_type; };
# 103 "/usr/include/c++/15.1.1/bits/refwrap.h" 3
#define _GLIBCXX_MEM_FN_TRAITS(_REF,_LVAL,_RVAL) _GLIBCXX_MEM_FN_TRAITS2( , _REF, _LVAL, _RVAL) _GLIBCXX_MEM_FN_TRAITS2(const , _REF, _LVAL, _RVAL) _GLIBCXX_MEM_FN_TRAITS2(volatile , _REF, _LVAL, _RVAL) _GLIBCXX_MEM_FN_TRAITS2(const volatile, _REF, _LVAL, _RVAL)





template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) > : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) > : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const > : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) const > : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile > : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) volatile > : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile > : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) const volatile > : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };
template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) &> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) &> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const &> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) const &> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile &> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) volatile &> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile &> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) const volatile &> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };
template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) &&> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) &&> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const &&> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) const &&> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile &&> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) volatile &&> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile &&> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) const volatile &&> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };


template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) noexcept> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) noexcept> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const noexcept> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) const noexcept> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile noexcept> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) volatile noexcept> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile noexcept> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) const volatile noexcept> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };
template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) & noexcept> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) & noexcept> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const & noexcept> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) const & noexcept> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile & noexcept> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) volatile & noexcept> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile & noexcept> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) const volatile & noexcept> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };
template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) && noexcept> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) && noexcept> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const && noexcept> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) const && noexcept> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile && noexcept> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) volatile && noexcept> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile && noexcept> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes..., ...) const volatile && noexcept> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };


#undef _GLIBCXX_MEM_FN_TRAITS
#undef _GLIBCXX_MEM_FN_TRAITS2


  template<typename _Functor, typename = __void_t<>>
    struct _Maybe_get_result_type
    { };

  template<typename _Functor>
    struct _Maybe_get_result_type<_Functor,
      __void_t<typename _Functor::result_type>>
    { typedef typename _Functor::result_type result_type; };





  template<typename _Functor>
    struct _Weak_result_type_impl
    : _Maybe_get_result_type<_Functor>
    { };


  template<typename _Res, typename... _ArgTypes , bool _NE>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) noexcept (_NE)>
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes , bool _NE>
    struct _Weak_result_type_impl<_Res(_ArgTypes...,
           ...) noexcept (_NE)>
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes , bool _NE>
    struct _Weak_result_type_impl<_Res(*)(_ArgTypes...) noexcept (_NE)>
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes , bool _NE>
    struct
    _Weak_result_type_impl<_Res(*)(_ArgTypes..., ...) noexcept (_NE)>
    { typedef _Res result_type; };


  template<typename _Functor,
    bool = is_member_function_pointer<_Functor>::value>
    struct _Weak_result_type_memfun
    : _Weak_result_type_impl<_Functor>
    { };


  template<typename _MemFunPtr>
    struct _Weak_result_type_memfun<_MemFunPtr, true>
    {
      using result_type = typename _Mem_fn_traits<_MemFunPtr>::__result_type;
    };


  template<typename _Func, typename _Class>
    struct _Weak_result_type_memfun<_Func _Class::*, false>
    { };





  template<typename _Functor>
    struct _Weak_result_type
    : _Weak_result_type_memfun<typename remove_cv<_Functor>::type>
    { };



  template<typename _Tp, typename = __void_t<>>
    struct _Refwrap_base_arg1
    { };


  template<typename _Tp>
    struct _Refwrap_base_arg1<_Tp,
         __void_t<typename _Tp::argument_type>>
    {
      typedef typename _Tp::argument_type argument_type;
    };


  template<typename _Tp, typename = __void_t<>>
    struct _Refwrap_base_arg2
    { };


  template<typename _Tp>
    struct _Refwrap_base_arg2<_Tp,
         __void_t<typename _Tp::first_argument_type,
           typename _Tp::second_argument_type>>
    {
      typedef typename _Tp::first_argument_type first_argument_type;
      typedef typename _Tp::second_argument_type second_argument_type;
    };







  template<typename _Tp>
    struct _Reference_wrapper_base
    : _Weak_result_type<_Tp>, _Refwrap_base_arg1<_Tp>, _Refwrap_base_arg2<_Tp>
    { };


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"


  template<typename _Res, typename _T1 , bool _NE>
    struct _Reference_wrapper_base<_Res(_T1) noexcept (_NE)>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) volatile>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const volatile>
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2 , bool _NE>
    struct _Reference_wrapper_base<_Res(_T1, _T2) noexcept (_NE)>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) volatile>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const volatile>
    : binary_function<_T1, _T2, _Res>
    { };


  template<typename _Res, typename _T1 , bool _NE>
    struct _Reference_wrapper_base<_Res(*)(_T1) noexcept (_NE)>
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2 , bool _NE>
    struct _Reference_wrapper_base<_Res(*)(_T1, _T2) noexcept (_NE)>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Tp, bool = is_member_function_pointer<_Tp>::value>
    struct _Reference_wrapper_base_memfun
    : _Reference_wrapper_base<_Tp>
    { };

  template<typename _MemFunPtr>
    struct _Reference_wrapper_base_memfun<_MemFunPtr, true>
    : _Mem_fn_traits<_MemFunPtr>::__maybe_type
    {
      using result_type = typename _Mem_fn_traits<_MemFunPtr>::__result_type;
    };
#pragma GCC diagnostic pop
# 309 "/usr/include/c++/15.1.1/bits/refwrap.h" 3
  template<typename _Tp>
    class reference_wrapper



    : public _Reference_wrapper_base_memfun<typename remove_cv<_Tp>::type>

    {
      _Tp* _M_data;

     
      static _Tp* _S_fun(_Tp& __r) noexcept { return std::__addressof(__r); }

      static void _S_fun(_Tp&&) = delete;

      template<typename _Up, typename _Up2 = __remove_cvref_t<_Up>>
 using __not_same
   = typename enable_if<!is_same<reference_wrapper, _Up2>::value>::type;

    public:
      typedef _Tp type;




      template<typename _Up, typename = __not_same<_Up>, typename
  = decltype(reference_wrapper::_S_fun(std::declval<_Up>()))>

 reference_wrapper(_Up&& __uref)
 noexcept(noexcept(reference_wrapper::_S_fun(std::declval<_Up>())))
 : _M_data(reference_wrapper::_S_fun(std::forward<_Up>(__uref)))
 { }

      reference_wrapper(const reference_wrapper&) = default;

      reference_wrapper&
      operator=(const reference_wrapper&) = default;

     
      operator _Tp&() const noexcept
      { return this->get(); }

     
      _Tp&
      get() const noexcept
      { return *_M_data; }

      template<typename... _Args>

 typename __invoke_result<_Tp&, _Args...>::type
 operator()(_Args&&... __args) const
 noexcept(__is_nothrow_invocable<_Tp&, _Args...>::value)
 {




   return std::__invoke(get(), std::forward<_Args>(__args)...);
 }
# 415 "/usr/include/c++/15.1.1/bits/refwrap.h" 3
    };


  template<typename _Tp>
    reference_wrapper(_Tp&) -> reference_wrapper<_Tp>;





  template<typename _Tp>
   
    inline reference_wrapper<_Tp>
    ref(_Tp& __t) noexcept
    { return reference_wrapper<_Tp>(__t); }


  template<typename _Tp>
   
    inline reference_wrapper<const _Tp>
    cref(const _Tp& __t) noexcept
    { return reference_wrapper<const _Tp>(__t); }

  template<typename _Tp>
    void ref(const _Tp&&) = delete;

  template<typename _Tp>
    void cref(const _Tp&&) = delete;


  template<typename _Tp>
   
    inline reference_wrapper<_Tp>
    ref(reference_wrapper<_Tp> __t) noexcept
    { return __t; }


  template<typename _Tp>
   
    inline reference_wrapper<const _Tp>
    cref(reference_wrapper<_Tp> __t) noexcept
    { return { __t.get() }; }




}
# 71 "/usr/include/c++/15.1.1/vector" 2 3
# 1 "/usr/include/c++/15.1.1/bits/range_access.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/range_access.h" 3
#define _GLIBCXX_RANGE_ACCESS_H 1
# 42 "/usr/include/c++/15.1.1/bits/range_access.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline constexpr auto
    begin(_Container& __cont) noexcept(noexcept(__cont.begin()))
    -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline constexpr auto
    begin(const _Container& __cont) noexcept(noexcept(__cont.begin()))
    -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline constexpr auto
    end(_Container& __cont) noexcept(noexcept(__cont.end()))
    -> decltype(__cont.end())
    { return __cont.end(); }






  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline constexpr auto
    end(const _Container& __cont) noexcept(noexcept(__cont.end()))
    -> decltype(__cont.end())
    { return __cont.end(); }





  template<typename _Tp, size_t _Nm>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline constexpr _Tp*
    begin(_Tp (&__arr)[_Nm]) noexcept
    { return __arr; }






  template<typename _Tp, size_t _Nm>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline constexpr _Tp*
    end(_Tp (&__arr)[_Nm]) noexcept
    { return __arr + _Nm; }



  template<typename _Tp> class valarray;

  template<typename _Tp> _Tp* begin(valarray<_Tp>&) noexcept;
  template<typename _Tp> const _Tp* begin(const valarray<_Tp>&) noexcept;
  template<typename _Tp> _Tp* end(valarray<_Tp>&) noexcept;
  template<typename _Tp> const _Tp* end(const valarray<_Tp>&) noexcept;






  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    constexpr auto
    cbegin(const _Container& __cont) noexcept(noexcept(std::begin(__cont)))
      -> decltype(std::begin(__cont))
    { return std::begin(__cont); }






  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    constexpr auto
    cend(const _Container& __cont) noexcept(noexcept(std::end(__cont)))
      -> decltype(std::end(__cont))
    { return std::end(__cont); }






  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline constexpr auto
    rbegin(_Container& __cont) noexcept(noexcept(__cont.rbegin()))
      -> decltype(__cont.rbegin())
    { return __cont.rbegin(); }






  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline constexpr auto
    rbegin(const _Container& __cont) noexcept(noexcept(__cont.rbegin()))
      -> decltype(__cont.rbegin())
    { return __cont.rbegin(); }






  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline constexpr auto
    rend(_Container& __cont) noexcept(noexcept(__cont.rend()))
      -> decltype(__cont.rend())
    { return __cont.rend(); }






  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline constexpr auto
    rend(const _Container& __cont) noexcept(noexcept(__cont.rend()))
      -> decltype(__cont.rend())
    { return __cont.rend(); }






  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline constexpr reverse_iterator<_Tp*>
    rbegin(_Tp (&__arr)[_Nm]) noexcept
    { return reverse_iterator<_Tp*>(__arr + _Nm); }






  template<typename _Tp, size_t _Nm>
    [[__nodiscard__]]
    inline constexpr reverse_iterator<_Tp*>
    rend(_Tp (&__arr)[_Nm]) noexcept
    { return reverse_iterator<_Tp*>(__arr); }






  template<typename _Tp>
    [[__nodiscard__]]
    inline constexpr reverse_iterator<const _Tp*>
    rbegin(initializer_list<_Tp> __il) noexcept
    { return reverse_iterator<const _Tp*>(__il.end()); }






  template<typename _Tp>
    [[__nodiscard__]]
    inline constexpr reverse_iterator<const _Tp*>
    rend(initializer_list<_Tp> __il) noexcept
    { return reverse_iterator<const _Tp*>(__il.begin()); }






  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline constexpr auto
    crbegin(const _Container& __cont) noexcept(noexcept(std::rbegin(__cont)))
      -> decltype(std::rbegin(__cont))
    { return std::rbegin(__cont); }






  template<typename _Container>
    [[__nodiscard__, __gnu__::__always_inline__]]
    inline constexpr auto
    crend(const _Container& __cont) noexcept(noexcept(std::rend(__cont)))
      -> decltype(std::rend(__cont))
    { return std::rend(__cont); }
# 271 "/usr/include/c++/15.1.1/bits/range_access.h" 3
  template <typename _Container>
    [[nodiscard, __gnu__::__always_inline__]]
    constexpr auto
    size(const _Container& __cont) noexcept(noexcept(__cont.size()))
    -> decltype(__cont.size())
    { return __cont.size(); }




  template <typename _Tp, size_t _Nm>
    [[nodiscard, __gnu__::__always_inline__]]
    constexpr size_t
    size(const _Tp (&)[_Nm]) noexcept
    { return _Nm; }





  template <typename _Container>
    [[nodiscard, __gnu__::__always_inline__]]
    constexpr auto
    empty(const _Container& __cont) noexcept(noexcept(__cont.empty()))
    -> decltype(__cont.empty())
    { return __cont.empty(); }




  template <typename _Tp, size_t _Nm>
    [[nodiscard, __gnu__::__always_inline__]]
    constexpr bool
    empty(const _Tp (&)[_Nm]) noexcept
    { return false; }





  template <typename _Tp>
    [[nodiscard, __gnu__::__always_inline__]]
    constexpr bool
    empty(initializer_list<_Tp> __il) noexcept
    { return __il.size() == 0;}





  template <typename _Container>
    [[nodiscard, __gnu__::__always_inline__]]
    constexpr auto
    data(_Container& __cont) noexcept(noexcept(__cont.data()))
    -> decltype(__cont.data())
    { return __cont.data(); }





  template <typename _Container>
    [[nodiscard, __gnu__::__always_inline__]]
    constexpr auto
    data(const _Container& __cont) noexcept(noexcept(__cont.data()))
    -> decltype(__cont.data())
    { return __cont.data(); }





  template <typename _Tp, size_t _Nm>
    [[nodiscard, __gnu__::__always_inline__]]
    constexpr _Tp*
    data(_Tp (&__array)[_Nm]) noexcept
    { return __array; }





  template <typename _Tp>
    [[nodiscard, __gnu__::__always_inline__]]
    constexpr const _Tp*
    data(initializer_list<_Tp> __il) noexcept
    { return __il.begin(); }
# 377 "/usr/include/c++/15.1.1/bits/range_access.h" 3

}
# 72 "/usr/include/c++/15.1.1/vector" 2 3


# 1 "/usr/include/c++/15.1.1/bits/vector.tcc" 1 3
# 57 "/usr/include/c++/15.1.1/bits/vector.tcc" 3
#define _VECTOR_TCC 1

namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp, typename _Alloc>
   
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp;

   if constexpr (_S_use_relocate())
     {
       __tmp = this->_M_allocate(__n);
       _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
     __tmp, _M_get_Tp_allocator());
     }
   else

     {
       __tmp = _M_allocate_and_copy(__n,
  std::__make_move_if_noexcept_iterator(this->_M_impl._M_start),
  std::__make_move_if_noexcept_iterator(this->_M_impl._M_finish));
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   ;
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>

     
      typename vector<_Tp, _Alloc>::reference



      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     ;
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
     ;
   }
 else
   _M_realloc_append(std::forward<_Args>(__args)...);

 return back();

      }


  template<typename _Tp, typename _Alloc>
   
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::

    insert(const_iterator __position, const value_type& __x)



    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 {
   do { if (std::__is_constant_evaluated() && !bool(__position != const_iterator())) std::__glibcxx_assert_fail(); } while (false);
   if (!(__position != const_iterator()))
     __builtin_unreachable();

   if (__position == end())
     {
       ;
       _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
           __x);
       ++this->_M_impl._M_finish;
       ;
     }
   else
     {

       const auto __pos = begin() + (__position - cbegin());


       _Temporary_value __x_copy(this, __x);
       _M_insert_aux(__pos, std::move(__x_copy._M_val()));



     }
 }
      else

 _M_realloc_insert(begin() + (__position - cbegin()), __x);




      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
   
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 std::move(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      ;
      return __position;
    }

  template<typename _Tp, typename _Alloc>
   
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 {
   if (__last != end())
     std::move(__last, end(), __first);
   _M_erase_at_end(__first.base() + (end() - __last));
 }
      return __first;
    }

  template<typename _Tp, typename _Alloc>
   
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (std::__addressof(__x) != this)
 {
   ;

   if (_Alloc_traits::_S_propagate_on_copy_assign())
     {
       if (!_Alloc_traits::_S_always_equal()
           && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
         {

    this->clear();
    _M_deallocate(this->_M_impl._M_start,
    this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start);
    this->_M_impl._M_start = nullptr;
    this->_M_impl._M_finish = nullptr;
    this->_M_impl._M_end_of_storage = nullptr;
  }
       std::__alloc_on_copy(_M_get_Tp_allocator(),
       __x._M_get_Tp_allocator());
     }

   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
       end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       __x._M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
   
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      const size_type __sz = size();
      if (__n > capacity())
 {
   if (__n <= __sz)
     __builtin_unreachable();
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp._M_impl._M_swap_data(this->_M_impl);
 }
      else if (__n > __sz)
 {
   std::fill(begin(), end(), __val);
   const size_type __add = __n - __sz;
   ;
   this->_M_impl._M_finish =
     std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
       __add, __val, _M_get_Tp_allocator());
   ;
 }
      else
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
     
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 pointer __cur(this->_M_impl._M_start);
 for (; __first != __last && __cur != this->_M_impl._M_finish;
      ++__cur, (void)++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   _M_range_insert(end(), __first, __last,
     std::__iterator_category(__first));
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
     
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __sz = size();
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     if (__len <= __sz)
       __builtin_unreachable();

     _S_check_init_len(__len, _M_get_Tp_allocator());
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     ;
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (__sz >= __len)
   _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, __sz);
     std::copy(__first, __mid, this->_M_impl._M_start);
     const size_type __attribute__((__unused__)) __n = __len - __sz;
     ;
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     ;
   }
      }


  template<typename _Tp, typename _Alloc>
   
    auto
    vector<_Tp, _Alloc>::
    _M_insert_rval(const_iterator __position, value_type&& __v) -> iterator
    {
      const auto __n = __position - cbegin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 if (__position == cend())
   {
     ;
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         std::move(__v));
     ++this->_M_impl._M_finish;
     ;
   }
 else
   _M_insert_aux(begin() + __n, std::move(__v));
      else
 _M_realloc_insert(begin() + __n, std::move(__v));

      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
     
      auto
      vector<_Tp, _Alloc>::
      _M_emplace_aux(const_iterator __position, _Args&&... __args)
      -> iterator
      {
 const auto __n = __position - cbegin();
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   if (__position == cend())
     {
       ;
       _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
           std::forward<_Args>(__args)...);
       ++this->_M_impl._M_finish;
       ;
     }
   else
     {



       _Temporary_value __tmp(this, std::forward<_Args>(__args)...);
       _M_insert_aux(begin() + __n, std::move(__tmp._M_val()));
     }
 else
   _M_realloc_insert(begin() + __n, std::forward<_Args>(__args)...);

 return iterator(this->_M_impl._M_start + __n);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _Arg>
     
      void
      vector<_Tp, _Alloc>::
      _M_insert_aux(iterator __position, _Arg&& __arg)






    {
      ;
      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
          std::move(*(this->_M_impl._M_finish - 1)));
      ++this->_M_impl._M_finish;
      ;



      std::move_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1)

                                     ;



      *__position = std::forward<_Arg>(__arg);

    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
     
      void
      vector<_Tp, _Alloc>::
      _M_realloc_insert(iterator __position, _Args&&... __args)






    {
      const size_type __len = _M_check_len(1u, "vector::_M_realloc_insert");
      if (__len <= 0)
 __builtin_unreachable ();
      pointer __old_start = this->_M_impl._M_start;
      pointer __old_finish = this->_M_impl._M_finish;
      const size_type __elems_before = __position - begin();
      pointer __new_start(this->_M_allocate(__len));
      pointer __new_finish(__new_start);

      {
 _Guard_alloc __guard(__new_start, __len, *this);
# 481 "/usr/include/c++/15.1.1/bits/vector.tcc" 3
 _Alloc_traits::construct(this->_M_impl,
     std::__to_address(__new_start + __elems_before),
     std::forward<_Args>(__args)...);







 if constexpr (_S_use_relocate())
   {

     __new_finish = _S_relocate(__old_start, __position.base(),
           __new_start, _M_get_Tp_allocator());
     ++__new_finish;
     __new_finish = _S_relocate(__position.base(), __old_finish,
           __new_finish, _M_get_Tp_allocator());
   }
 else

   {

     struct _Guard_elts
     {
       pointer _M_first, _M_last;
       _Tp_alloc_type& _M_alloc;

      
       _Guard_elts(pointer __elt, _Tp_alloc_type& __a)
       : _M_first(__elt), _M_last(__elt + 1), _M_alloc(__a)
       { }

      
       ~_Guard_elts()
       { std::_Destroy(_M_first, _M_last, _M_alloc); }

     private:
       _Guard_elts(const _Guard_elts&);
     };


     _Guard_elts __guard_elts(__new_start + __elems_before, _M_impl);

     __new_finish = std::__uninitialized_move_if_noexcept_a(
        __old_start, __position.base(),
        __new_start, _M_get_Tp_allocator());

     ++__new_finish;

     __guard_elts._M_first = __new_start;

     __new_finish = std::__uninitialized_move_if_noexcept_a(
         __position.base(), __old_finish,
         __new_finish, _M_get_Tp_allocator());


     __guard_elts._M_first = __old_start;
     __guard_elts._M_last = __old_finish;
   }
 __guard._M_storage = __old_start;
 __guard._M_len = this->_M_impl._M_end_of_storage - __old_start;
      }



      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
     
      void
      vector<_Tp, _Alloc>::
      _M_realloc_append(_Args&&... __args)






    {
      const size_type __len = _M_check_len(1u, "vector::_M_realloc_append");
      if (__len <= 0)
 __builtin_unreachable ();
      pointer __old_start = this->_M_impl._M_start;
      pointer __old_finish = this->_M_impl._M_finish;
      const size_type __elems = end() - begin();
      pointer __new_start(this->_M_allocate(__len));
      pointer __new_finish(__new_start);

      {
 _Guard_alloc __guard(__new_start, __len, *this);
# 586 "/usr/include/c++/15.1.1/bits/vector.tcc" 3
 _Alloc_traits::construct(this->_M_impl,
     std::__to_address(__new_start + __elems),
     std::forward<_Args>(__args)...);







 if constexpr (_S_use_relocate())
   {

     __new_finish = _S_relocate(__old_start, __old_finish,
           __new_start, _M_get_Tp_allocator());
     ++__new_finish;
   }
 else

   {

     struct _Guard_elts
     {
       pointer _M_first, _M_last;
       _Tp_alloc_type& _M_alloc;

      
       _Guard_elts(pointer __elt, _Tp_alloc_type& __a)
       : _M_first(__elt), _M_last(__elt + 1), _M_alloc(__a)
       { }

      
       ~_Guard_elts()
       { std::_Destroy(_M_first, _M_last, _M_alloc); }

     private:
       _Guard_elts(const _Guard_elts&);
     };


     _Guard_elts __guard_elts(__new_start + __elems, _M_impl);

     __new_finish = std::__uninitialized_move_if_noexcept_a(
        __old_start, __old_finish,
        __new_start, _M_get_Tp_allocator());

     ++__new_finish;


     __guard_elts._M_first = __old_start;
     __guard_elts._M_last = __old_finish;
   }
 __guard._M_storage = __old_start;
 __guard._M_len = this->_M_impl._M_end_of_storage - __old_start;
      }



      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
    }

  template<typename _Tp, typename _Alloc>
   
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {



       _Temporary_value __tmp(this, __x);
       value_type& __x_copy = __tmp._M_val();

       const size_type __elems_after = end() - __position;
       pointer __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
    ;
    std::__uninitialized_move_a(__old_finish - __n,
           __old_finish,
           __old_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
    ;
    std::move_backward(__position.base(), __old_finish - __n, __old_finish)
                                        ;
    std::fill(__position.base(), __position.base() + __n,
       __x_copy);
  }
       else
  {
    ;
    this->_M_impl._M_finish =
      std::__uninitialized_fill_n_a(__old_finish,
        __n - __elems_after,
        __x_copy,
        _M_get_Tp_allocator());
    ;
    std::__uninitialized_move_a(__position.base(), __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
    ;
    std::fill(__position.base(), __old_finish, __x_copy);
  }
     }
   else
     {


       pointer __old_start = this->_M_impl._M_start;
       pointer __old_finish = this->_M_impl._M_finish;
       const pointer __pos = __position.base();

       const size_type __len =
  _M_check_len(__n, "vector::_M_fill_insert");
       const size_type __elems_before = __pos - __old_start;
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       try
  {

    std::__uninitialized_fill_n_a(__new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator());
    __new_finish = pointer();

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (__old_start, __pos, __new_start, _M_get_Tp_allocator());

    __new_finish += __n;

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (__pos, __old_finish, __new_finish, _M_get_Tp_allocator());
  }
       catch(...)
  {
    if (!__new_finish)
      std::_Destroy(__new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator());
    else
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
       ;
       _M_deallocate(__old_start,
       this->_M_impl._M_end_of_storage - __old_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }


  template<typename _Tp, typename _Alloc>
   
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 {
   const size_type __size = size();
   size_type __navail = size_type(this->_M_impl._M_end_of_storage
      - this->_M_impl._M_finish);

   if (__size > max_size() || __navail > max_size() - __size)
     __builtin_unreachable();

   if (__navail >= __n)
     {
       if (!this->_M_impl._M_finish)
  __builtin_unreachable();

       ;
       this->_M_impl._M_finish =
  std::__uninitialized_default_n_a(this->_M_impl._M_finish,
       __n, _M_get_Tp_allocator());
       ;
     }
   else
     {


       pointer __old_start = this->_M_impl._M_start;
       pointer __old_finish = this->_M_impl._M_finish;

       const size_type __len =
  _M_check_len(__n, "vector::_M_default_append");
       pointer __new_start(this->_M_allocate(__len));

       {
  _Guard_alloc __guard(__new_start, __len, *this);

  std::__uninitialized_default_n_a(__new_start + __size, __n,
       _M_get_Tp_allocator());

  if constexpr (_S_use_relocate())
    {
      _S_relocate(__old_start, __old_finish,
    __new_start, _M_get_Tp_allocator());
    }
  else
    {

      struct _Guard_elts
      {
        pointer _M_first, _M_last;
        _Tp_alloc_type& _M_alloc;

       
        _Guard_elts(pointer __first, size_type __n,
      _Tp_alloc_type& __a)
        : _M_first(__first), _M_last(__first + __n), _M_alloc(__a)
        { }

       
        ~_Guard_elts()
        { std::_Destroy(_M_first, _M_last, _M_alloc); }

      private:
        _Guard_elts(const _Guard_elts&);
      };
      _Guard_elts __guard_elts(__new_start + __size, __n, _M_impl);

      std::__uninitialized_move_if_noexcept_a(
        __old_start, __old_finish, __new_start,
        _M_get_Tp_allocator());

      __guard_elts._M_first = __old_start;
      __guard_elts._M_last = __old_finish;
    }
  ;
  __guard._M_storage = __old_start;
  __guard._M_len = this->_M_impl._M_end_of_storage - __old_start;
       }



       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_start + __size + __n;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }

  template<typename _Tp, typename _Alloc>
   
    bool
    vector<_Tp, _Alloc>::
    _M_shrink_to_fit()
    {
      if (capacity() == size())
 return false;
      ;
      return std::__shrink_to_fit_aux<vector>::_S_do_it(*this);
    }


  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
     
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 if (__pos == end())
   {
     for (; __first != __last; ++__first)
       insert(end(), *__first);
   }
 else if (__first != __last)
   {
     vector __tmp(__first, __last, _M_get_Tp_allocator());
     insert(__pos,
     std::make_move_iterator(__tmp.begin()),
     std::make_move_iterator(__tmp.end()));
   }
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
     
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  pointer __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
      ;
      std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
      ;
      std::move_backward(__position.base(), __old_finish - __n, __old_finish)
                                          ;
      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
      ;
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
      ;
      std::__uninitialized_move_a(__position.base(),
      __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
      ;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {



  pointer __old_start = this->_M_impl._M_start;
  pointer __old_finish = this->_M_impl._M_finish;

  const size_type __len =
    _M_check_len(__n, "vector::_M_range_insert");





  pointer __new_start(this->_M_allocate(__len));
  pointer __new_finish(__new_start);
  try
    {
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (__old_start, __position.base(),
         __new_start, _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_copy_a(__first, __last,
          __new_finish,
          _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (__position.base(), __old_finish,
         __new_finish, _M_get_Tp_allocator());
    }
  catch(...)
    {
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
      throw;
    }
  std::_Destroy(__old_start, __old_finish,
         _M_get_Tp_allocator());
  ;
  _M_deallocate(__old_start,
         this->_M_impl._M_end_of_storage - __old_start);
  this->_M_impl._M_start = __new_start;
  this->_M_impl._M_finish = __new_finish;
  this->_M_impl._M_end_of_storage = __new_start + __len;
       }
   }
      }
# 1106 "/usr/include/c++/15.1.1/bits/vector.tcc" 3
  template<typename _Alloc>
   
    void
    vector<bool, _Alloc>::
    _M_reallocate(size_type __n)
    {
      const iterator __begin = begin(), __end = end();
      if (size_type(__end - __begin) > __n)
 __builtin_unreachable();
      _Bit_pointer __q = this->_M_allocate(__n);
      iterator __start(std::__addressof(*__q), 0);
      iterator __finish(_M_copy_aligned(__begin, __end, __start));
      this->_M_deallocate();
      this->_M_impl._M_start = __start;
      this->_M_impl._M_finish = __finish;
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
    }

  template<typename _Alloc>
   
    void
    vector<bool, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len =
     _M_check_len(__n, "vector<bool>::_M_fill_insert");
   iterator __begin = begin(), __end = end();
   _Bit_pointer __q = this->_M_allocate(__len);
   iterator __start(std::__addressof(*__q), 0);
   iterator __i = _M_copy_aligned(__begin, __position, __start);
   std::fill(__i, __i + difference_type(__n), __x);
   iterator __finish = std::copy(__position, __end,
     __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = __start;
   this->_M_impl._M_finish = __finish;
 }
    }

  template<typename _Alloc>
    template<typename _ForwardIterator>
     
      void
      vector<bool, _Alloc>::
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector<bool>::_M_insert_range");
  const iterator __begin = begin(), __end = end();
  _Bit_pointer __q = this->_M_allocate(__len);
  iterator __start(std::__addressof(*__q), 0);
  iterator __i = _M_copy_aligned(__begin, __position, __start);
  __i = std::copy(__first, __last, __i);
  iterator __finish = std::copy(__position, __end, __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
  this->_M_impl._M_start = __start;
  this->_M_impl._M_finish = __finish;
       }
   }
      }

  template<typename _Alloc>
   
    void
    vector<bool, _Alloc>::
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
   _Bit_pointer __q = this->_M_allocate(__len);
   iterator __start(std::__addressof(*__q), 0);
   iterator __i = _M_copy_aligned(begin(), __position, __start);
   *__i++ = __x;
   iterator __finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = __start;
   this->_M_impl._M_finish = __finish;
 }
    }

  template<typename _Alloc>
   
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

  template<typename _Alloc>
   
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 _M_erase_at_end(std::copy(__last, end(), __first));
      return __first;
    }


  template<typename _Alloc>
   
    bool
    vector<bool, _Alloc>::
    _M_shrink_to_fit()
    {
      if (capacity() - size() < int(_S_word_bit))
 return false;
      try
 {
   if (size_type __n = size())
     _M_reallocate(__n);
   else
     {
       this->_M_deallocate();
       this->_M_impl._M_reset();
     }
   return true;
 }
      catch(...)
 { return false; }
    }




}



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc>
    size_t
    hash<std::vector<bool, _Alloc>>::
    operator()(const std::vector<bool, _Alloc>& __b) const noexcept
    {
      size_t __hash = 0;
      const size_t __words = __b.size() / _S_word_bit;
      if (__words)
 {
   const size_t __clength = __words * sizeof(_Bit_type);
   __hash = std::_Hash_impl::hash(__b._M_impl._M_start._M_p, __clength);
 }

      const size_t __extrabits = __b.size() % _S_word_bit;
      if (__extrabits)
 {
   _Bit_type __hiword = *__b._M_impl._M_finish._M_p;
   __hiword &= ~((~static_cast<_Bit_type>(0)) << __extrabits);

   const size_t __clength
     = (__extrabits + 8 - 1) / 8;
   if (__words)
     __hash = std::_Hash_impl::hash(&__hiword, __clength, __hash);
   else
     __hash = std::_Hash_impl::hash(&__hiword, __clength);
 }

      return __hash;
    }


}



#undef _GLIBCXX_ASAN_ANNOTATE_REINIT
#undef _GLIBCXX_ASAN_ANNOTATE_GROW
#undef _GLIBCXX_ASAN_ANNOTATE_GREW
#undef _GLIBCXX_ASAN_ANNOTATE_SHRINK
# 75 "/usr/include/c++/15.1.1/vector" 2 3






#define __glibcxx_want_algorithm_default_value_type 
#define __glibcxx_want_allocator_traits_is_always_equal 
#define __glibcxx_want_constexpr_vector 
#define __glibcxx_want_containers_ranges 
#define __glibcxx_want_erase_if 
#define __glibcxx_want_incomplete_container_elements 
#define __glibcxx_want_nonmember_container_access 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 55 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_incomplete_container_elements 201505L

#define __cpp_lib_incomplete_container_elements 201505L



#undef __glibcxx_want_incomplete_container_elements



#define __glibcxx_uncaught_exceptions 201411L





#undef __glibcxx_want_uncaught_exceptions



#define __glibcxx_allocator_traits_is_always_equal 201411L

#define __cpp_lib_allocator_traits_is_always_equal 201411L



#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 110 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_shared_ptr_arrays 201611L





#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t



#define __glibcxx_enable_shared_from_this 201603L





#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine



#define __glibcxx_exchange_function 201304L





#undef __glibcxx_want_exchange_function



#define __glibcxx_integer_sequence 201304L





#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final



#define __glibcxx_make_reverse_iterator 201402L





#undef __glibcxx_want_make_reverse_iterator



#define __glibcxx_null_iterators 201304L





#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases



#define __glibcxx_transparent_operators 201510L





#undef __glibcxx_want_transparent_operators



#define __glibcxx_tuple_element_t 201402L





#undef __glibcxx_want_tuple_element_t



#define __glibcxx_tuples_by_type 201304L





#undef __glibcxx_want_tuples_by_type



#define __glibcxx_robust_nonmodifying_seq_ops 201304L





#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 285 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_to_chars 201611L





#undef __glibcxx_want_to_chars



#define __glibcxx_chrono_udls 201304L





#undef __glibcxx_want_chrono_udls



#define __glibcxx_complex_udls 201309L





#undef __glibcxx_want_complex_udls



#define __glibcxx_generic_associative_lookup 201304L





#undef __glibcxx_want_generic_associative_lookup



#define __glibcxx_make_unique 201304L





#undef __glibcxx_want_make_unique



#define __glibcxx_quoted_string_io 201304L





#undef __glibcxx_want_quoted_string_io



#define __glibcxx_shared_timed_mutex 201402L





#undef __glibcxx_want_shared_timed_mutex



#define __glibcxx_string_udls 201304L





#undef __glibcxx_want_string_udls



#define __glibcxx_addressof_constexpr 201603L





#undef __glibcxx_want_addressof_constexpr



#define __glibcxx_any 201606L





#undef __glibcxx_want_any



#define __glibcxx_apply 201603L





#undef __glibcxx_want_apply



#define __glibcxx_as_const 201510L





#undef __glibcxx_want_as_const



#define __glibcxx_atomic_is_always_lock_free 201603L





#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant



#define __glibcxx_byte 201603L





#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size



#define __glibcxx_invoke 201411L





#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits



#define __glibcxx_make_from_tuple 201606L





#undef __glibcxx_want_make_from_tuple



#define __glibcxx_not_fn 201603L





#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 545 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_variant 202102L





#undef __glibcxx_want_variant



#define __glibcxx_lcm 201606L





#undef __glibcxx_want_lcm



#define __glibcxx_gcd 201606L





#undef __glibcxx_want_gcd



#define __glibcxx_gcd_lcm 201606L





#undef __glibcxx_want_gcd_lcm
# 590 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_raw_memory_algorithms 201606L





#undef __glibcxx_want_raw_memory_algorithms
# 605 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_array_constexpr 201803L





#undef __glibcxx_want_array_constexpr



#define __glibcxx_nonmember_container_access 201411L

#define __cpp_lib_nonmember_container_access 201411L



#undef __glibcxx_want_nonmember_container_access



#define __glibcxx_clamp 201603L





#undef __glibcxx_want_clamp



#define __glibcxx_sample 201603L





#undef __glibcxx_want_sample



#define __glibcxx_boyer_moore_searcher 201603L





#undef __glibcxx_want_boyer_moore_searcher
# 660 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_chrono 201611L





#undef __glibcxx_want_chrono



#define __glibcxx_execution 201902L





#undef __glibcxx_want_execution



#define __glibcxx_filesystem 201703L





#undef __glibcxx_want_filesystem



#define __glibcxx_hypot 201603L





#undef __glibcxx_want_hypot



#define __glibcxx_map_try_emplace 201411L





#undef __glibcxx_want_map_try_emplace



#define __glibcxx_math_special_functions 201603L





#undef __glibcxx_want_math_special_functions



#define __glibcxx_memory_resource 201603L
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource



#define __glibcxx_node_extract 201606L





#undef __glibcxx_want_node_extract



#define __glibcxx_parallel_algorithm 201603L





#undef __glibcxx_want_parallel_algorithm



#define __glibcxx_scoped_lock 201703L





#undef __glibcxx_want_scoped_lock



#define __glibcxx_shared_mutex 201505L





#undef __glibcxx_want_shared_mutex



#define __glibcxx_shared_ptr_weak_type 201606L





#undef __glibcxx_want_shared_ptr_weak_type
# 790 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_string_view 201803L





#undef __glibcxx_want_string_view



#define __glibcxx_unordered_map_try_emplace 201411L





#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 950 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_optional 201606L





#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1025 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_char_traits 201611L





#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1390 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_string 201611L





#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 89 "/usr/include/c++/15.1.1/vector" 2 3


# 1 "/usr/include/c++/15.1.1/bits/memory_resource.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/memory_resource.h" 3
#define _GLIBCXX_MEMORY_RESOURCE_H 1
# 40 "/usr/include/c++/15.1.1/bits/memory_resource.h" 3
# 1 "/usr/include/c++/15.1.1/cstddef" 1 3
# 40 "/usr/include/c++/15.1.1/cstddef" 3
#define _GLIBCXX_CSTDDEF 1





#undef __need_wchar_t
#undef __need_ptrdiff_t
#undef __need_size_t
#undef __need_NULL
#undef __need_wint_t

# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 1 3 4
# 39 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#define _STDDEF_H 
#define _STDDEF_H_ 

#define _ANSI_STDDEF_H 
# 147 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#define _PTRDIFF_T 
#define _T_PTRDIFF_ 
#define _T_PTRDIFF 
#define __PTRDIFF_T 
#define _PTRDIFF_T_ 
#define _BSD_PTRDIFF_T_ 
#define ___int_ptrdiff_t_h 
#define _GCC_PTRDIFF_T 
#define _PTRDIFF_T_DECLARED 
#define __DEFINED_ptrdiff_t 



typedef long int ptrdiff_t;
# 173 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 252 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_size_t
# 282 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#define __wchar_t__ 
#define __WCHAR_T__ 
#define _WCHAR_T 
#define _T_WCHAR_ 
#define _T_WCHAR 
#define __WCHAR_T 
#define _WCHAR_T_ 
#define _BSD_WCHAR_T_ 
#define _WCHAR_T_DEFINED_ 
#define _WCHAR_T_DEFINED 
#define _WCHAR_T_H 
#define ___int_wchar_t_h 
#define __INT_WCHAR_T_H 
#define _GCC_WCHAR_T 
#define _WCHAR_T_DECLARED 
#define __DEFINED_wchar_t 
# 310 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef _BSD_WCHAR_T_
# 364 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_wchar_t
# 414 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef NULL

#define NULL __null
# 425 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_NULL




#undef offsetof
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)




#define _GCC_MAX_ALIGN_T 



typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 451 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
} max_align_t;





#define _GXX_NULLPTR_T 
  typedef decltype(nullptr) nullptr_t;
# 53 "/usr/include/c++/15.1.1/cstddef" 2 3

#define __glibcxx_want_byte 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements



#define __glibcxx_uncaught_exceptions 201411L





#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 110 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_shared_ptr_arrays 201611L





#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t



#define __glibcxx_enable_shared_from_this 201603L





#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine



#define __glibcxx_exchange_function 201304L





#undef __glibcxx_want_exchange_function



#define __glibcxx_integer_sequence 201304L





#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final



#define __glibcxx_make_reverse_iterator 201402L





#undef __glibcxx_want_make_reverse_iterator



#define __glibcxx_null_iterators 201304L





#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases



#define __glibcxx_transparent_operators 201510L





#undef __glibcxx_want_transparent_operators



#define __glibcxx_tuple_element_t 201402L





#undef __glibcxx_want_tuple_element_t



#define __glibcxx_tuples_by_type 201304L





#undef __glibcxx_want_tuples_by_type



#define __glibcxx_robust_nonmodifying_seq_ops 201304L





#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 285 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_to_chars 201611L





#undef __glibcxx_want_to_chars



#define __glibcxx_chrono_udls 201304L





#undef __glibcxx_want_chrono_udls



#define __glibcxx_complex_udls 201309L





#undef __glibcxx_want_complex_udls



#define __glibcxx_generic_associative_lookup 201304L





#undef __glibcxx_want_generic_associative_lookup



#define __glibcxx_make_unique 201304L





#undef __glibcxx_want_make_unique



#define __glibcxx_quoted_string_io 201304L





#undef __glibcxx_want_quoted_string_io



#define __glibcxx_shared_timed_mutex 201402L





#undef __glibcxx_want_shared_timed_mutex



#define __glibcxx_string_udls 201304L





#undef __glibcxx_want_string_udls



#define __glibcxx_addressof_constexpr 201603L





#undef __glibcxx_want_addressof_constexpr



#define __glibcxx_any 201606L





#undef __glibcxx_want_any



#define __glibcxx_apply 201603L





#undef __glibcxx_want_apply



#define __glibcxx_as_const 201510L





#undef __glibcxx_want_as_const



#define __glibcxx_atomic_is_always_lock_free 201603L





#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant



#define __glibcxx_byte 201603L

#define __cpp_lib_byte 201603L



#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size



#define __glibcxx_invoke 201411L





#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits



#define __glibcxx_make_from_tuple 201606L





#undef __glibcxx_want_make_from_tuple



#define __glibcxx_not_fn 201603L





#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 545 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_variant 202102L





#undef __glibcxx_want_variant



#define __glibcxx_lcm 201606L





#undef __glibcxx_want_lcm



#define __glibcxx_gcd 201606L





#undef __glibcxx_want_gcd



#define __glibcxx_gcd_lcm 201606L





#undef __glibcxx_want_gcd_lcm
# 590 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_raw_memory_algorithms 201606L





#undef __glibcxx_want_raw_memory_algorithms
# 605 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_array_constexpr 201803L





#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access



#define __glibcxx_clamp 201603L





#undef __glibcxx_want_clamp



#define __glibcxx_sample 201603L





#undef __glibcxx_want_sample



#define __glibcxx_boyer_moore_searcher 201603L





#undef __glibcxx_want_boyer_moore_searcher
# 660 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_chrono 201611L





#undef __glibcxx_want_chrono



#define __glibcxx_execution 201902L





#undef __glibcxx_want_execution



#define __glibcxx_filesystem 201703L





#undef __glibcxx_want_filesystem



#define __glibcxx_hypot 201603L





#undef __glibcxx_want_hypot



#define __glibcxx_map_try_emplace 201411L





#undef __glibcxx_want_map_try_emplace



#define __glibcxx_math_special_functions 201603L





#undef __glibcxx_want_math_special_functions



#define __glibcxx_memory_resource 201603L
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource



#define __glibcxx_node_extract 201606L





#undef __glibcxx_want_node_extract



#define __glibcxx_parallel_algorithm 201603L





#undef __glibcxx_want_parallel_algorithm



#define __glibcxx_scoped_lock 201703L





#undef __glibcxx_want_scoped_lock



#define __glibcxx_shared_mutex 201505L





#undef __glibcxx_want_shared_mutex



#define __glibcxx_shared_ptr_weak_type 201606L





#undef __glibcxx_want_shared_ptr_weak_type
# 790 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_string_view 201803L





#undef __glibcxx_want_string_view



#define __glibcxx_unordered_map_try_emplace 201411L





#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 950 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_optional 201606L





#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1025 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_char_traits 201611L





#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1390 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_string 201611L





#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 56 "/usr/include/c++/15.1.1/cstddef" 2 3

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"

extern "C++"
{

namespace std
{

  using ::max_align_t;
}



namespace std
{


  enum class byte : unsigned char {};

  template<typename _IntegerType> struct __byte_operand { };
  template<> struct __byte_operand<bool> { using __type = byte; };
  template<> struct __byte_operand<char> { using __type = byte; };
  template<> struct __byte_operand<signed char> { using __type = byte; };
  template<> struct __byte_operand<unsigned char> { using __type = byte; };
  template<> struct __byte_operand<wchar_t> { using __type = byte; };



  template<> struct __byte_operand<char16_t> { using __type = byte; };
  template<> struct __byte_operand<char32_t> { using __type = byte; };
  template<> struct __byte_operand<short> { using __type = byte; };
  template<> struct __byte_operand<unsigned short> { using __type = byte; };
  template<> struct __byte_operand<int> { using __type = byte; };
  template<> struct __byte_operand<unsigned int> { using __type = byte; };
  template<> struct __byte_operand<long> { using __type = byte; };
  template<> struct __byte_operand<unsigned long> { using __type = byte; };
  template<> struct __byte_operand<long long> { using __type = byte; };
  template<> struct __byte_operand<unsigned long long> { using __type = byte; };

  template<> struct __byte_operand<__int128>
  { using __type = byte; };
  template<> struct __byte_operand<unsigned __int128>
  { using __type = byte; };
# 114 "/usr/include/c++/15.1.1/cstddef" 3
  template<typename _IntegerType>
    struct __byte_operand<const _IntegerType>
    : __byte_operand<_IntegerType> { };
  template<typename _IntegerType>
    struct __byte_operand<volatile _IntegerType>
    : __byte_operand<_IntegerType> { };
  template<typename _IntegerType>
    struct __byte_operand<const volatile _IntegerType>
    : __byte_operand<_IntegerType> { };

  template<typename _IntegerType>
    using __byte_op_t = typename __byte_operand<_IntegerType>::__type;

  template<typename _IntegerType>
    [[__gnu__::__always_inline__]]
    constexpr __byte_op_t<_IntegerType>
    operator<<(byte __b, _IntegerType __shift) noexcept
    { return (byte)(unsigned char)((unsigned)__b << __shift); }

  template<typename _IntegerType>
    [[__gnu__::__always_inline__]]
    constexpr __byte_op_t<_IntegerType>
    operator>>(byte __b, _IntegerType __shift) noexcept
    { return (byte)(unsigned char)((unsigned)__b >> __shift); }

  [[__gnu__::__always_inline__]]
  constexpr byte
  operator|(byte __l, byte __r) noexcept
  { return (byte)(unsigned char)((unsigned)__l | (unsigned)__r); }

  [[__gnu__::__always_inline__]]
  constexpr byte
  operator&(byte __l, byte __r) noexcept
  { return (byte)(unsigned char)((unsigned)__l & (unsigned)__r); }

  [[__gnu__::__always_inline__]]
  constexpr byte
  operator^(byte __l, byte __r) noexcept
  { return (byte)(unsigned char)((unsigned)__l ^ (unsigned)__r); }

  [[__gnu__::__always_inline__]]
  constexpr byte
  operator~(byte __b) noexcept
  { return (byte)(unsigned char)~(unsigned)__b; }

  template<typename _IntegerType>
    [[__gnu__::__always_inline__]]
    constexpr __byte_op_t<_IntegerType>&
    operator<<=(byte& __b, _IntegerType __shift) noexcept
    { return __b = __b << __shift; }

  template<typename _IntegerType>
    [[__gnu__::__always_inline__]]
    constexpr __byte_op_t<_IntegerType>&
    operator>>=(byte& __b, _IntegerType __shift) noexcept
    { return __b = __b >> __shift; }

  [[__gnu__::__always_inline__]]
  constexpr byte&
  operator|=(byte& __l, byte __r) noexcept
  { return __l = __l | __r; }

  [[__gnu__::__always_inline__]]
  constexpr byte&
  operator&=(byte& __l, byte __r) noexcept
  { return __l = __l & __r; }

  [[__gnu__::__always_inline__]]
  constexpr byte&
  operator^=(byte& __l, byte __r) noexcept
  { return __l = __l ^ __r; }

  template<typename _IntegerType>
    [[nodiscard,__gnu__::__always_inline__]]
    constexpr _IntegerType
    to_integer(__byte_op_t<_IntegerType> __b) noexcept
    { return _IntegerType(__b); }


}

}

#pragma GCC diagnostic pop
# 41 "/usr/include/c++/15.1.1/bits/memory_resource.h" 2 3

# 1 "/usr/include/c++/15.1.1/bits/uses_allocator.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/uses_allocator.h" 3
#define _USES_ALLOCATOR_H 1
# 40 "/usr/include/c++/15.1.1/bits/uses_allocator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{




  struct __erased_type { };




  template<typename _Alloc, typename _Tp>
    using __is_erased_or_convertible
      = __or_<is_convertible<_Alloc, _Tp>, is_same<_Tp, __erased_type>>;


  struct allocator_arg_t { explicit allocator_arg_t() = default; };

  inline constexpr allocator_arg_t allocator_arg =
    allocator_arg_t();

  template<typename _Tp, typename _Alloc, typename = __void_t<>>
    struct __uses_allocator_helper
    : false_type { };

  template<typename _Tp, typename _Alloc>
    struct __uses_allocator_helper<_Tp, _Alloc,
       __void_t<typename _Tp::allocator_type>>
    : __is_erased_or_convertible<_Alloc, typename _Tp::allocator_type>::type
    { };


  template<typename _Tp, typename _Alloc>
    struct uses_allocator
    : __uses_allocator_helper<_Tp, _Alloc>::type
    { };

  struct __uses_alloc_base { };

  struct __uses_alloc0 : __uses_alloc_base
  {
    struct _Sink { void operator=(const void*) { } } _M_a;
  };

  template<typename _Alloc>
    struct __uses_alloc1 : __uses_alloc_base { const _Alloc* _M_a; };

  template<typename _Alloc>
    struct __uses_alloc2 : __uses_alloc_base { const _Alloc* _M_a; };

  template<bool, typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc;

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc<true, _Tp, _Alloc, _Args...>
    : __conditional_t<
        is_constructible<_Tp, allocator_arg_t, const _Alloc&, _Args...>::value,
        __uses_alloc1<_Alloc>,
        __uses_alloc2<_Alloc>>
    {


      static_assert(__or_<
   is_constructible<_Tp, allocator_arg_t, const _Alloc&, _Args...>,
   is_constructible<_Tp, _Args..., const _Alloc&>>::value,
   "construction with an allocator must be possible"
   " if uses_allocator is true");
    };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc<false, _Tp, _Alloc, _Args...>
    : __uses_alloc0 { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    using __uses_alloc_t =
      __uses_alloc<uses_allocator<_Tp, _Alloc>::value, _Tp, _Alloc, _Args...>;

  template<typename _Tp, typename _Alloc, typename... _Args>
   
    inline __uses_alloc_t<_Tp, _Alloc, _Args...>
    __use_alloc(const _Alloc& __a)
    {
      __uses_alloc_t<_Tp, _Alloc, _Args...> __ret;
      __ret._M_a = std::__addressof(__a);
      return __ret;
    }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void
    __use_alloc(const _Alloc&&) = delete;


  template <typename _Tp, typename _Alloc>
    inline constexpr bool uses_allocator_v =
      uses_allocator<_Tp, _Alloc>::value;







  template<template<typename...> class _Predicate,
    typename _Tp, typename _Alloc, typename... _Args>
    struct __is_uses_allocator_predicate
    : __conditional_t<uses_allocator<_Tp, _Alloc>::value,
      __or_<_Predicate<_Tp, allocator_arg_t, _Alloc, _Args...>,
     _Predicate<_Tp, _Args..., _Alloc>>,
      _Predicate<_Tp, _Args...>> { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __is_uses_allocator_constructible
    : __is_uses_allocator_predicate<is_constructible, _Tp, _Alloc, _Args...>
    { };


  template<typename _Tp, typename _Alloc, typename... _Args>
    inline constexpr bool __is_uses_allocator_constructible_v =
      __is_uses_allocator_constructible<_Tp, _Alloc, _Args...>::value;


  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __is_nothrow_uses_allocator_constructible
    : __is_uses_allocator_predicate<is_nothrow_constructible,
        _Tp, _Alloc, _Args...>
    { };



  template<typename _Tp, typename _Alloc, typename... _Args>
    inline constexpr bool
    __is_nothrow_uses_allocator_constructible_v =
      __is_nothrow_uses_allocator_constructible<_Tp, _Alloc, _Args...>::value;


  template<typename _Tp, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc0, _Tp* __ptr,
      _Args&&... __args)
    { ::new ((void*)__ptr) _Tp(std::forward<_Args>(__args)...); }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc1<_Alloc> __a, _Tp* __ptr,
      _Args&&... __args)
    {
      ::new ((void*)__ptr) _Tp(allocator_arg, *__a._M_a,
          std::forward<_Args>(__args)...);
    }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc2<_Alloc> __a, _Tp* __ptr,
      _Args&&... __args)
    { ::new ((void*)__ptr) _Tp(std::forward<_Args>(__args)..., *__a._M_a); }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct(const _Alloc& __a, _Tp* __ptr,
        _Args&&... __args)
    {
      std::__uses_allocator_construct_impl(
   std::__use_alloc<_Tp, _Alloc, _Args...>(__a), __ptr,
   std::forward<_Args>(__args)...);
    }



}
# 43 "/usr/include/c++/15.1.1/bits/memory_resource.h" 2 3
# 1 "/usr/include/c++/15.1.1/bits/uses_allocator_args.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/uses_allocator_args.h" 3
#define _USES_ALLOCATOR_ARGS 1





# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements



#define __glibcxx_uncaught_exceptions 201411L





#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 110 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_shared_ptr_arrays 201611L





#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t



#define __glibcxx_enable_shared_from_this 201603L





#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine



#define __glibcxx_exchange_function 201304L





#undef __glibcxx_want_exchange_function



#define __glibcxx_integer_sequence 201304L





#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final



#define __glibcxx_make_reverse_iterator 201402L





#undef __glibcxx_want_make_reverse_iterator



#define __glibcxx_null_iterators 201304L





#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases



#define __glibcxx_transparent_operators 201510L





#undef __glibcxx_want_transparent_operators



#define __glibcxx_tuple_element_t 201402L





#undef __glibcxx_want_tuple_element_t



#define __glibcxx_tuples_by_type 201304L





#undef __glibcxx_want_tuples_by_type



#define __glibcxx_robust_nonmodifying_seq_ops 201304L





#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 285 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_to_chars 201611L





#undef __glibcxx_want_to_chars



#define __glibcxx_chrono_udls 201304L





#undef __glibcxx_want_chrono_udls



#define __glibcxx_complex_udls 201309L





#undef __glibcxx_want_complex_udls



#define __glibcxx_generic_associative_lookup 201304L





#undef __glibcxx_want_generic_associative_lookup



#define __glibcxx_make_unique 201304L





#undef __glibcxx_want_make_unique



#define __glibcxx_quoted_string_io 201304L





#undef __glibcxx_want_quoted_string_io



#define __glibcxx_shared_timed_mutex 201402L





#undef __glibcxx_want_shared_timed_mutex



#define __glibcxx_string_udls 201304L





#undef __glibcxx_want_string_udls



#define __glibcxx_addressof_constexpr 201603L





#undef __glibcxx_want_addressof_constexpr



#define __glibcxx_any 201606L





#undef __glibcxx_want_any



#define __glibcxx_apply 201603L





#undef __glibcxx_want_apply



#define __glibcxx_as_const 201510L





#undef __glibcxx_want_as_const



#define __glibcxx_atomic_is_always_lock_free 201603L





#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size



#define __glibcxx_invoke 201411L





#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits



#define __glibcxx_make_from_tuple 201606L





#undef __glibcxx_want_make_from_tuple



#define __glibcxx_not_fn 201603L





#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 545 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_variant 202102L





#undef __glibcxx_want_variant



#define __glibcxx_lcm 201606L





#undef __glibcxx_want_lcm



#define __glibcxx_gcd 201606L





#undef __glibcxx_want_gcd



#define __glibcxx_gcd_lcm 201606L





#undef __glibcxx_want_gcd_lcm
# 590 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_raw_memory_algorithms 201606L





#undef __glibcxx_want_raw_memory_algorithms
# 605 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_array_constexpr 201803L





#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access



#define __glibcxx_clamp 201603L





#undef __glibcxx_want_clamp



#define __glibcxx_sample 201603L





#undef __glibcxx_want_sample



#define __glibcxx_boyer_moore_searcher 201603L





#undef __glibcxx_want_boyer_moore_searcher
# 660 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_chrono 201611L





#undef __glibcxx_want_chrono



#define __glibcxx_execution 201902L





#undef __glibcxx_want_execution



#define __glibcxx_filesystem 201703L





#undef __glibcxx_want_filesystem



#define __glibcxx_hypot 201603L





#undef __glibcxx_want_hypot



#define __glibcxx_map_try_emplace 201411L





#undef __glibcxx_want_map_try_emplace



#define __glibcxx_math_special_functions 201603L





#undef __glibcxx_want_math_special_functions



#define __glibcxx_memory_resource 201603L
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource



#define __glibcxx_node_extract 201606L





#undef __glibcxx_want_node_extract



#define __glibcxx_parallel_algorithm 201603L





#undef __glibcxx_want_parallel_algorithm



#define __glibcxx_scoped_lock 201703L





#undef __glibcxx_want_scoped_lock



#define __glibcxx_shared_mutex 201505L





#undef __glibcxx_want_shared_mutex



#define __glibcxx_shared_ptr_weak_type 201606L





#undef __glibcxx_want_shared_ptr_weak_type
# 790 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_string_view 201803L





#undef __glibcxx_want_string_view



#define __glibcxx_unordered_map_try_emplace 201411L





#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 950 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_optional 201606L





#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1025 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_char_traits 201611L





#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1390 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_string 201611L





#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 38 "/usr/include/c++/15.1.1/bits/uses_allocator_args.h" 2 3
# 44 "/usr/include/c++/15.1.1/bits/memory_resource.h" 2 3





# 1 "/usr/include/c++/15.1.1/tuple" 1 3
# 30 "/usr/include/c++/15.1.1/tuple" 3
#define _GLIBCXX_TUPLE 1
# 49 "/usr/include/c++/15.1.1/tuple" 3
#define __glibcxx_want_constexpr_tuple 
#define __glibcxx_want_tuple_element_t 
#define __glibcxx_want_tuples_by_type 
#define __glibcxx_want_apply 
#define __glibcxx_want_make_from_tuple 
#define __glibcxx_want_ranges_zip 
#define __glibcxx_want_tuple_like 
#define __glibcxx_want_constrained_equality 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements



#define __glibcxx_uncaught_exceptions 201411L





#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 110 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_shared_ptr_arrays 201611L





#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t



#define __glibcxx_enable_shared_from_this 201603L





#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine



#define __glibcxx_exchange_function 201304L





#undef __glibcxx_want_exchange_function



#define __glibcxx_integer_sequence 201304L





#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final



#define __glibcxx_make_reverse_iterator 201402L





#undef __glibcxx_want_make_reverse_iterator



#define __glibcxx_null_iterators 201304L





#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases



#define __glibcxx_transparent_operators 201510L





#undef __glibcxx_want_transparent_operators



#define __glibcxx_tuple_element_t 201402L

#define __cpp_lib_tuple_element_t 201402L



#undef __glibcxx_want_tuple_element_t



#define __glibcxx_tuples_by_type 201304L

#define __cpp_lib_tuples_by_type 201304L



#undef __glibcxx_want_tuples_by_type



#define __glibcxx_robust_nonmodifying_seq_ops 201304L





#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 285 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_to_chars 201611L





#undef __glibcxx_want_to_chars



#define __glibcxx_chrono_udls 201304L





#undef __glibcxx_want_chrono_udls



#define __glibcxx_complex_udls 201309L





#undef __glibcxx_want_complex_udls



#define __glibcxx_generic_associative_lookup 201304L





#undef __glibcxx_want_generic_associative_lookup



#define __glibcxx_make_unique 201304L





#undef __glibcxx_want_make_unique



#define __glibcxx_quoted_string_io 201304L





#undef __glibcxx_want_quoted_string_io



#define __glibcxx_shared_timed_mutex 201402L





#undef __glibcxx_want_shared_timed_mutex



#define __glibcxx_string_udls 201304L





#undef __glibcxx_want_string_udls



#define __glibcxx_addressof_constexpr 201603L





#undef __glibcxx_want_addressof_constexpr



#define __glibcxx_any 201606L





#undef __glibcxx_want_any



#define __glibcxx_apply 201603L

#define __cpp_lib_apply 201603L



#undef __glibcxx_want_apply



#define __glibcxx_as_const 201510L





#undef __glibcxx_want_as_const



#define __glibcxx_atomic_is_always_lock_free 201603L





#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size



#define __glibcxx_invoke 201411L





#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits



#define __glibcxx_make_from_tuple 201606L

#define __cpp_lib_make_from_tuple 201606L



#undef __glibcxx_want_make_from_tuple



#define __glibcxx_not_fn 201603L





#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 545 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_variant 202102L





#undef __glibcxx_want_variant



#define __glibcxx_lcm 201606L





#undef __glibcxx_want_lcm



#define __glibcxx_gcd 201606L





#undef __glibcxx_want_gcd



#define __glibcxx_gcd_lcm 201606L





#undef __glibcxx_want_gcd_lcm
# 590 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_raw_memory_algorithms 201606L





#undef __glibcxx_want_raw_memory_algorithms
# 605 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_array_constexpr 201803L





#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access



#define __glibcxx_clamp 201603L





#undef __glibcxx_want_clamp



#define __glibcxx_sample 201603L





#undef __glibcxx_want_sample



#define __glibcxx_boyer_moore_searcher 201603L





#undef __glibcxx_want_boyer_moore_searcher
# 660 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_chrono 201611L





#undef __glibcxx_want_chrono



#define __glibcxx_execution 201902L





#undef __glibcxx_want_execution



#define __glibcxx_filesystem 201703L





#undef __glibcxx_want_filesystem



#define __glibcxx_hypot 201603L





#undef __glibcxx_want_hypot



#define __glibcxx_map_try_emplace 201411L





#undef __glibcxx_want_map_try_emplace



#define __glibcxx_math_special_functions 201603L





#undef __glibcxx_want_math_special_functions



#define __glibcxx_memory_resource 201603L
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource



#define __glibcxx_node_extract 201606L





#undef __glibcxx_want_node_extract



#define __glibcxx_parallel_algorithm 201603L





#undef __glibcxx_want_parallel_algorithm



#define __glibcxx_scoped_lock 201703L





#undef __glibcxx_want_scoped_lock



#define __glibcxx_shared_mutex 201505L





#undef __glibcxx_want_shared_mutex



#define __glibcxx_shared_ptr_weak_type 201606L





#undef __glibcxx_want_shared_ptr_weak_type
# 790 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_string_view 201803L





#undef __glibcxx_want_string_view



#define __glibcxx_unordered_map_try_emplace 201411L





#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 950 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_optional 201606L





#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1025 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_char_traits 201611L





#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1390 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_string 201611L





#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 58 "/usr/include/c++/15.1.1/tuple" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename... _Elements>
    class tuple;


  template<typename _Tp>
    struct __is_empty_non_tuple : is_empty<_Tp> { };


  template<typename _El0, typename... _El>
    struct __is_empty_non_tuple<tuple<_El0, _El...>> : false_type { };


  template<typename _Tp>
    using __empty_not_final
    = __conditional_t<__is_final(_Tp), false_type,
        __is_empty_non_tuple<_Tp>>;

  template<size_t _Idx, typename _Head,
    bool = __empty_not_final<_Head>::value>
    struct _Head_base;


  template<size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, true>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
 constexpr _Head_base(_UHead&& __h)
 : _M_head_impl(std::forward<_UHead>(__h)) { }

     
      _Head_base(allocator_arg_t, __uses_alloc0)
      : _M_head_impl() { }

      template<typename _Alloc>

 _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 : _M_head_impl(allocator_arg, *__a._M_a) { }

      template<typename _Alloc>

 _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 : _M_head_impl(*__a._M_a) { }

      template<typename _UHead>

 _Head_base(__uses_alloc0, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>

 _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))
 { }

      template<typename _Alloc, typename _UHead>

 _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }

      [[__no_unique_address__]] _Head _M_head_impl;
    };
# 199 "/usr/include/c++/15.1.1/tuple" 3
  template<size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
 : _M_head_impl(std::forward<_UHead>(__h)) { }

     
      _Head_base(allocator_arg_t, __uses_alloc0)
      : _M_head_impl() { }

      template<typename _Alloc>

 _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 : _M_head_impl(allocator_arg, *__a._M_a) { }

      template<typename _Alloc>

 _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 : _M_head_impl(*__a._M_a) { }

      template<typename _UHead>

 _Head_base(__uses_alloc0, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>

 _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))
 { }

      template<typename _Alloc, typename _UHead>

 _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }

      _Head _M_head_impl;
    };
# 272 "/usr/include/c++/15.1.1/tuple" 3
  template<size_t _Idx, typename... _Elements>
    struct _Tuple_impl;






  template<size_t _Idx, typename _Head, typename... _Tail>
    struct _Tuple_impl<_Idx, _Head, _Tail...>
    : public _Tuple_impl<_Idx + 1, _Tail...>,
      private _Head_base<_Idx, _Head>
    {
      template<size_t, typename...> friend struct _Tuple_impl;

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }

      static constexpr const _Inherited&
      _M_tail(const _Tuple_impl& __t) noexcept { return __t; }

      constexpr _Tuple_impl()
      : _Inherited(), _Base() { }

      explicit constexpr
      _Tuple_impl(const _Head& __head, const _Tail&... __tail)
      : _Inherited(__tail...), _Base(__head)
      { }

      template<typename _UHead, typename... _UTail,
        typename = __enable_if_t<sizeof...(_Tail) == sizeof...(_UTail)>>
 explicit constexpr
 _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 : _Inherited(std::forward<_UTail>(__tail)...),
   _Base(std::forward<_UHead>(__head))
 { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;



      _Tuple_impl& operator=(const _Tuple_impl&) = delete;

      _Tuple_impl(_Tuple_impl&&) = default;

      template<typename... _UElements>
 constexpr
 _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
 : _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
   _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in))
 { }

      template<typename _UHead, typename... _UTails>
 constexpr
 _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(std::move
       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
   _Base(std::forward<_UHead>
  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in)))
 { }
# 368 "/usr/include/c++/15.1.1/tuple" 3
      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a),
   _Base(__tag, __use_alloc<_Head>(__a))
 { }

      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Head& __head, const _Tail&... __tail)
 : _Inherited(__tag, __a, __tail...),
   _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head)
 { }

      template<typename _Alloc, typename _UHead, typename... _UTail,
        typename = __enable_if_t<sizeof...(_Tail) == sizeof...(_UTail)>>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      _UHead&& __head, _UTail&&... __tail)
 : _Inherited(__tag, __a, std::forward<_UTail>(__tail)...),
   _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
  std::forward<_UHead>(__head))
 { }

      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Tuple_impl& __in)
 : _Inherited(__tag, __a, _M_tail(__in)),
   _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in))
 { }

      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      _Tuple_impl&& __in)
 : _Inherited(__tag, __a, std::move(_M_tail(__in))),
   _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
  std::forward<_Head>(_M_head(__in)))
 { }

      template<typename _Alloc, typename _UHead, typename... _UTails>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Tuple_impl<_Idx, _UHead, _UTails...>& __in)
 : _Inherited(__tag, __a,
       _Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)),
   _Base(__use_alloc<_Head, _Alloc, const _UHead&>(__a),
  _Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))
 { }

      template<typename _Alloc, typename _UHead, typename... _UTails>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(__tag, __a, std::move
       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
   _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
  std::forward<_UHead>
  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in)))
 { }
# 463 "/usr/include/c++/15.1.1/tuple" 3
      template<typename... _UElements>

 void
 _M_assign(const _Tuple_impl<_Idx, _UElements...>& __in)
 {
   _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(__in);
   _M_tail(*this)._M_assign(
       _Tuple_impl<_Idx, _UElements...>::_M_tail(__in));
 }

      template<typename _UHead, typename... _UTails>

 void
 _M_assign(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 {
   _M_head(*this) = std::forward<_UHead>
     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in));
   _M_tail(*this)._M_assign(
       std::move(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)));
 }
# 523 "/usr/include/c++/15.1.1/tuple" 3
    protected:
     
      void
      _M_swap(_Tuple_impl& __in)
      {
 using std::swap;
 swap(_M_head(*this), _M_head(__in));
 _Inherited::_M_swap(_M_tail(__in));
      }
# 542 "/usr/include/c++/15.1.1/tuple" 3
    };


  template<size_t _Idx, typename _Head>
    struct _Tuple_impl<_Idx, _Head>
    : private _Head_base<_Idx, _Head>
    {
      template<size_t, typename...> friend struct _Tuple_impl;

      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      constexpr
      _Tuple_impl()
      : _Base() { }

      explicit constexpr
      _Tuple_impl(const _Head& __head)
      : _Base(__head)
      { }

      template<typename _UHead>
 explicit constexpr
 _Tuple_impl(_UHead&& __head)
 : _Base(std::forward<_UHead>(__head))
 { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;



      _Tuple_impl& operator=(const _Tuple_impl&) = delete;




      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
      noexcept(is_nothrow_move_constructible<_Head>::value)
      : _Base(static_cast<_Base&&>(__in))
      { }


      template<typename _UHead>
 constexpr
 _Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)
 : _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in))
 { }

      template<typename _UHead>
 constexpr
 _Tuple_impl(_Tuple_impl<_Idx, _UHead>&& __in)
 : _Base(std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 { }
# 624 "/usr/include/c++/15.1.1/tuple" 3
      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 : _Base(__tag, __use_alloc<_Head>(__a))
 { }

      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t, const _Alloc& __a,
      const _Head& __head)
 : _Base(__use_alloc<_Head, _Alloc, const _Head&>(__a), __head)
 { }

      template<typename _Alloc, typename _UHead>

 _Tuple_impl(allocator_arg_t, const _Alloc& __a,
      _UHead&& __head)
 : _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
  std::forward<_UHead>(__head))
 { }

      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t, const _Alloc& __a,
      const _Tuple_impl& __in)
 : _Base(__use_alloc<_Head, _Alloc, const _Head&>(__a), _M_head(__in))
 { }

      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t, const _Alloc& __a,
      _Tuple_impl&& __in)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
  std::forward<_Head>(_M_head(__in)))
 { }

      template<typename _Alloc, typename _UHead>

 _Tuple_impl(allocator_arg_t, const _Alloc& __a,
      const _Tuple_impl<_Idx, _UHead>& __in)
 : _Base(__use_alloc<_Head, _Alloc, const _UHead&>(__a),
  _Tuple_impl<_Idx, _UHead>::_M_head(__in))
 { }

      template<typename _Alloc, typename _UHead>

 _Tuple_impl(allocator_arg_t, const _Alloc& __a,
      _Tuple_impl<_Idx, _UHead>&& __in)
 : _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
  std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 { }
# 703 "/usr/include/c++/15.1.1/tuple" 3
      template<typename _UHead>

 void
 _M_assign(const _Tuple_impl<_Idx, _UHead>& __in)
 {
   _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(__in);
 }

      template<typename _UHead>

 void
 _M_assign(_Tuple_impl<_Idx, _UHead>&& __in)
 {
   _M_head(*this)
     = std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in));
 }
# 749 "/usr/include/c++/15.1.1/tuple" 3
    protected:
     
      void
      _M_swap(_Tuple_impl& __in)
      {
 using std::swap;
 swap(_M_head(*this), _M_head(__in));
      }
# 766 "/usr/include/c++/15.1.1/tuple" 3
    };



  template<bool, typename... _Types>
    struct _TupleConstraints
    {
      template<typename... _UTypes>
 using __constructible = __and_<is_constructible<_Types, _UTypes>...>;

      template<typename... _UTypes>
 using __convertible = __and_<is_convertible<_UTypes, _Types>...>;




      template<typename... _UTypes>
 static constexpr bool __is_implicitly_constructible()
 {
   return __and_<__constructible<_UTypes...>,
   __convertible<_UTypes...>
   >::value;
 }




      template<typename... _UTypes>
 static constexpr bool __is_explicitly_constructible()
 {
   return __and_<__constructible<_UTypes...>,
   __not_<__convertible<_UTypes...>>
   >::value;
 }

      static constexpr bool __is_implicitly_default_constructible()
      {
 return __and_<std::__is_implicitly_default_constructible<_Types>...
        >::value;
      }

      static constexpr bool __is_explicitly_default_constructible()
      {
 return __and_<is_default_constructible<_Types>...,
        __not_<__and_<
   std::__is_implicitly_default_constructible<_Types>...>
        >>::value;
      }
    };



  template<typename... _Types>
    struct _TupleConstraints<false, _Types...>
    {
      template<typename... _UTypes>
 static constexpr bool __is_implicitly_constructible()
 { return false; }

      template<typename... _UTypes>
 static constexpr bool __is_explicitly_constructible()
 { return false; }
    };



  template<typename... _Elements>
    class tuple : public _Tuple_impl<0, _Elements...>
    {
      using _Inherited = _Tuple_impl<0, _Elements...>;
# 1352 "/usr/include/c++/15.1.1/tuple" 3
      template<bool _Cond>
 using _TCC = _TupleConstraints<_Cond, _Elements...>;


      template<bool _Dummy>
 using _ImplicitDefaultCtor = __enable_if_t<
   _TCC<_Dummy>::__is_implicitly_default_constructible(),
   bool>;


      template<bool _Dummy>
 using _ExplicitDefaultCtor = __enable_if_t<
   _TCC<_Dummy>::__is_explicitly_default_constructible(),
   bool>;


      template<bool _Cond, typename... _Args>
 using _ImplicitCtor = __enable_if_t<
   _TCC<_Cond>::template __is_implicitly_constructible<_Args...>(),
   bool>;


      template<bool _Cond, typename... _Args>
 using _ExplicitCtor = __enable_if_t<
   _TCC<_Cond>::template __is_explicitly_constructible<_Args...>(),
   bool>;


      template<typename... _UElements>
 static constexpr bool __nothrow_constructible()
 {
   return
     __and_<is_nothrow_constructible<_Elements, _UElements>...>::value;
 }


      template<typename _Up>
 static constexpr bool __valid_args()
 {
   return sizeof...(_Elements) == 1
     && !is_same<tuple, __remove_cvref_t<_Up>>::value;
 }


      template<typename, typename, typename... _Tail>
 static constexpr bool __valid_args()
 { return (sizeof...(_Tail) + 2) == sizeof...(_Elements); }
# 1409 "/usr/include/c++/15.1.1/tuple" 3
      template<typename _Tuple, typename = tuple,
        typename = __remove_cvref_t<_Tuple>>
 struct _UseOtherCtor
 : false_type
 { };


      template<typename _Tuple, typename _Tp, typename _Up>
 struct _UseOtherCtor<_Tuple, tuple<_Tp>, tuple<_Up>>
 : __or_<is_convertible<_Tuple, _Tp>, is_constructible<_Tp, _Tuple>>::type
 { };


      template<typename _Tuple, typename _Tp>
 struct _UseOtherCtor<_Tuple, tuple<_Tp>, tuple<_Tp>>
 : true_type
 { };




      template<typename _Tuple>
 static constexpr bool __use_other_ctor()
 { return _UseOtherCtor<_Tuple>::value; }


#undef __glibcxx_no_dangling_refs
# 1451 "/usr/include/c++/15.1.1/tuple" 3
#define __glibcxx_no_dangling_refs(U) 



    public:
      template<typename _Dummy = void,
        _ImplicitDefaultCtor<is_void<_Dummy>::value> = true>
 constexpr
 tuple()
 noexcept(__and_<is_nothrow_default_constructible<_Elements>...>::value)
 : _Inherited() { }

      template<typename _Dummy = void,
        _ExplicitDefaultCtor<is_void<_Dummy>::value> = false>
 explicit constexpr
 tuple()
 noexcept(__and_<is_nothrow_default_constructible<_Elements>...>::value)
 : _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
        _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
 constexpr
 tuple(const _Elements&... __elements)
 noexcept(__nothrow_constructible<const _Elements&...>())
 : _Inherited(__elements...) { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
        _ExplicitCtor<_NotEmpty, const _Elements&...> = false>
 explicit constexpr
 tuple(const _Elements&... __elements)
 noexcept(__nothrow_constructible<const _Elements&...>())
 : _Inherited(__elements...) { }

      template<typename... _UElements,
        bool _Valid = __valid_args<_UElements...>(),
        _ImplicitCtor<_Valid, _UElements...> = true>
 constexpr
 tuple(_UElements&&... __elements)
 noexcept(__nothrow_constructible<_UElements...>())
 : _Inherited(std::forward<_UElements>(__elements)...)
 { ; }

      template<typename... _UElements,
        bool _Valid = __valid_args<_UElements...>(),
        _ExplicitCtor<_Valid, _UElements...> = false>
 explicit constexpr
 tuple(_UElements&&... __elements)
 noexcept(__nothrow_constructible<_UElements...>())
 : _Inherited(std::forward<_UElements>(__elements)...)
 { ; }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;

      template<typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
      && !__use_other_ctor<const tuple<_UElements...>&>(),
        _ImplicitCtor<_Valid, const _UElements&...> = true>
 constexpr
 tuple(const tuple<_UElements...>& __in)
 noexcept(__nothrow_constructible<const _UElements&...>())
 : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { ; }

      template<typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
      && !__use_other_ctor<const tuple<_UElements...>&>(),
        _ExplicitCtor<_Valid, const _UElements&...> = false>
 explicit constexpr
 tuple(const tuple<_UElements...>& __in)
 noexcept(__nothrow_constructible<const _UElements&...>())
 : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { ; }

      template<typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<tuple<_UElements...>&&>(),
        _ImplicitCtor<_Valid, _UElements...> = true>
 constexpr
 tuple(tuple<_UElements...>&& __in)
 noexcept(__nothrow_constructible<_UElements...>())
 : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { ; }

      template<typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<tuple<_UElements...>&&>(),
        _ExplicitCtor<_Valid, _UElements...> = false>
 explicit constexpr
 tuple(tuple<_UElements...>&& __in)
 noexcept(__nothrow_constructible<_UElements...>())
 : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { ; }



      template<typename _Alloc,
        _ImplicitDefaultCtor<is_object<_Alloc>::value> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc,
        _ExplicitDefaultCtor<is_object<_Alloc>::value> = false>

 explicit
 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc, bool _NotEmpty = (sizeof...(_Elements) >= 1),
        _ImplicitCtor<_NotEmpty, const _Elements&...> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _Elements&... __elements)
 : _Inherited(__tag, __a, __elements...) { }

      template<typename _Alloc, bool _NotEmpty = (sizeof...(_Elements) >= 1),
        _ExplicitCtor<_NotEmpty, const _Elements&...> = false>

 explicit
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _Elements&... __elements)
 : _Inherited(__tag, __a, __elements...) { }

      template<typename _Alloc, typename... _UElements,
        bool _Valid = __valid_args<_UElements...>(),
        _ImplicitCtor<_Valid, _UElements...> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       _UElements&&... __elements)
 : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
 { ; }

      template<typename _Alloc, typename... _UElements,
   bool _Valid = __valid_args<_UElements...>(),
        _ExplicitCtor<_Valid, _UElements...> = false>

 explicit
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       _UElements&&... __elements)
 : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
 { ; }

      template<typename _Alloc>

 tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }

      template<typename _Alloc>

 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }

      template<typename _Alloc, typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<const tuple<_UElements...>&>(),
        _ImplicitCtor<_Valid, const _UElements&...> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_UElements...>& __in)
 : _Inherited(__tag, __a,
       static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { ; }

      template<typename _Alloc, typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<const tuple<_UElements...>&>(),
        _ExplicitCtor<_Valid, const _UElements&...> = false>

 explicit
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_UElements...>& __in)
 : _Inherited(__tag, __a,
       static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { ; }

      template<typename _Alloc, typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<tuple<_UElements...>&&>(),
        _ImplicitCtor<_Valid, _UElements...> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       tuple<_UElements...>&& __in)
 : _Inherited(__tag, __a,
       static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { ; }

      template<typename _Alloc, typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<tuple<_UElements...>&&>(),
        _ExplicitCtor<_Valid, _UElements...> = false>

 explicit
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       tuple<_UElements...>&& __in)
 : _Inherited(__tag, __a,
       static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { ; }
# 1887 "/usr/include/c++/15.1.1/tuple" 3
    private:
      template<typename... _UElements>
 static constexpr
 __enable_if_t<sizeof...(_UElements) == sizeof...(_Elements), bool>
 __assignable()
 { return __and_<is_assignable<_Elements&, _UElements>...>::value; }


      template<typename... _UElements>
 static constexpr bool __nothrow_assignable()
 {
   return
     __and_<is_nothrow_assignable<_Elements&, _UElements>...>::value;
 }

    public:

     
      tuple&
      operator=(__conditional_t<__assignable<const _Elements&...>(),
    const tuple&,
    const __nonesuch&> __in)
      noexcept(__nothrow_assignable<const _Elements&...>())
      {
 this->_M_assign(__in);
 return *this;
      }

     
      tuple&
      operator=(__conditional_t<__assignable<_Elements...>(),
    tuple&&,
    __nonesuch&&> __in)
      noexcept(__nothrow_assignable<_Elements...>())
      {
 this->_M_assign(std::move(__in));
 return *this;
      }

      template<typename... _UElements>

 __enable_if_t<__assignable<const _UElements&...>(), tuple&>
 operator=(const tuple<_UElements...>& __in)
 noexcept(__nothrow_assignable<const _UElements&...>())
 {
   this->_M_assign(__in);
   return *this;
 }

      template<typename... _UElements>

 __enable_if_t<__assignable<_UElements...>(), tuple&>
 operator=(tuple<_UElements...>&& __in)
 noexcept(__nothrow_assignable<_UElements...>())
 {
   this->_M_assign(std::move(__in));
   return *this;
 }



     
      void
      swap(tuple& __in)
      noexcept(__and_<__is_nothrow_swappable<_Elements>...>::value)
      { _Inherited::_M_swap(__in); }
# 1967 "/usr/include/c++/15.1.1/tuple" 3
    };


  template<typename... _UTypes>
    tuple(_UTypes...) -> tuple<_UTypes...>;
  template<typename _T1, typename _T2>
    tuple(pair<_T1, _T2>) -> tuple<_T1, _T2>;
  template<typename _Alloc, typename... _UTypes>
    tuple(allocator_arg_t, _Alloc, _UTypes...) -> tuple<_UTypes...>;
  template<typename _Alloc, typename _T1, typename _T2>
    tuple(allocator_arg_t, _Alloc, pair<_T1, _T2>) -> tuple<_T1, _T2>;
  template<typename _Alloc, typename... _UTypes>
    tuple(allocator_arg_t, _Alloc, tuple<_UTypes...>) -> tuple<_UTypes...>;



  template<>
    class tuple<>
    {
    public:
     
      void swap(tuple&) noexcept { }





      tuple() = default;

      template<typename _Alloc>

 tuple(allocator_arg_t, const _Alloc&) noexcept { }
      template<typename _Alloc>

 tuple(allocator_arg_t, const _Alloc&, const tuple&) noexcept { }
    };




  template<typename _T1, typename _T2>
    class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>
    {
      typedef _Tuple_impl<0, _T1, _T2> _Inherited;


      template<bool _Dummy, typename _U1, typename _U2>
 using _ImplicitDefaultCtor = __enable_if_t<
   _TupleConstraints<_Dummy, _U1, _U2>::
     __is_implicitly_default_constructible(),
   bool>;


      template<bool _Dummy, typename _U1, typename _U2>
 using _ExplicitDefaultCtor = __enable_if_t<
   _TupleConstraints<_Dummy, _U1, _U2>::
     __is_explicitly_default_constructible(),
   bool>;

      template<bool _Dummy>
 using _TCC = _TupleConstraints<_Dummy, _T1, _T2>;


      template<bool _Cond, typename _U1, typename _U2>
 using _ImplicitCtor = __enable_if_t<
   _TCC<_Cond>::template __is_implicitly_constructible<_U1, _U2>(),
   bool>;


      template<bool _Cond, typename _U1, typename _U2>
 using _ExplicitCtor = __enable_if_t<
   _TCC<_Cond>::template __is_explicitly_constructible<_U1, _U2>(),
   bool>;

      template<typename _U1, typename _U2>
 static constexpr bool __assignable()
 {
   return __and_<is_assignable<_T1&, _U1>,
   is_assignable<_T2&, _U2>>::value;
 }

      template<typename _U1, typename _U2>
 static constexpr bool __nothrow_assignable()
 {
   return __and_<is_nothrow_assignable<_T1&, _U1>,
   is_nothrow_assignable<_T2&, _U2>>::value;
 }

      template<typename _U1, typename _U2>
 static constexpr bool __nothrow_constructible()
 {
   return __and_<is_nothrow_constructible<_T1, _U1>,
       is_nothrow_constructible<_T2, _U2>>::value;
 }

      static constexpr bool __nothrow_default_constructible()
      {
 return __and_<is_nothrow_default_constructible<_T1>,
        is_nothrow_default_constructible<_T2>>::value;
      }

      template<typename _U1>
 static constexpr bool __is_alloc_arg()
 { return is_same<__remove_cvref_t<_U1>, allocator_arg_t>::value; }


#undef __glibcxx_no_dangling_refs
# 2082 "/usr/include/c++/15.1.1/tuple" 3
#define __glibcxx_no_dangling_refs(_U1,_U2) 



    public:
      template<bool _Dummy = true,
        _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
 constexpr
 tuple()
 noexcept(__nothrow_default_constructible())
 : _Inherited() { }

      template<bool _Dummy = true,
        _ExplicitDefaultCtor<_Dummy, _T1, _T2> = false>
 explicit constexpr
 tuple()
 noexcept(__nothrow_default_constructible())
 : _Inherited() { }

      template<bool _Dummy = true,
        _ImplicitCtor<_Dummy, const _T1&, const _T2&> = true>
 constexpr
 tuple(const _T1& __a1, const _T2& __a2)
 noexcept(__nothrow_constructible<const _T1&, const _T2&>())
 : _Inherited(__a1, __a2) { }

      template<bool _Dummy = true,
        _ExplicitCtor<_Dummy, const _T1&, const _T2&> = false>
 explicit constexpr
 tuple(const _T1& __a1, const _T2& __a2)
 noexcept(__nothrow_constructible<const _T1&, const _T2&>())
 : _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
        _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
 constexpr
 tuple(_U1&& __a1, _U2&& __a2)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2))
 { ; }

      template<typename _U1, typename _U2,
        _ExplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = false>
 explicit constexpr
 tuple(_U1&& __a1, _U2&& __a2)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2))
 { ; }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;

      template<typename _U1, typename _U2,
        _ImplicitCtor<true, const _U1&, const _U2&> = true>
 constexpr
 tuple(const tuple<_U1, _U2>& __in)
 noexcept(__nothrow_constructible<const _U1&, const _U2&>())
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { ; }

      template<typename _U1, typename _U2,
        _ExplicitCtor<true, const _U1&, const _U2&> = false>
 explicit constexpr
 tuple(const tuple<_U1, _U2>& __in)
 noexcept(__nothrow_constructible<const _U1&, const _U2&>())
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { ; }

      template<typename _U1, typename _U2,
        _ImplicitCtor<true, _U1, _U2> = true>
 constexpr
 tuple(tuple<_U1, _U2>&& __in)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { ; }

      template<typename _U1, typename _U2,
        _ExplicitCtor<true, _U1, _U2> = false>
 explicit constexpr
 tuple(tuple<_U1, _U2>&& __in)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { ; }

      template<typename _U1, typename _U2,
        _ImplicitCtor<true, const _U1&, const _U2&> = true>
 constexpr
 tuple(const pair<_U1, _U2>& __in)
 noexcept(__nothrow_constructible<const _U1&, const _U2&>())
 : _Inherited(__in.first, __in.second)
 { ; }

      template<typename _U1, typename _U2,
        _ExplicitCtor<true, const _U1&, const _U2&> = false>
 explicit constexpr
 tuple(const pair<_U1, _U2>& __in)
 noexcept(__nothrow_constructible<const _U1&, const _U2&>())
 : _Inherited(__in.first, __in.second)
 { ; }

      template<typename _U1, typename _U2,
        _ImplicitCtor<true, _U1, _U2> = true>
 constexpr
 tuple(pair<_U1, _U2>&& __in)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second))
 { ; }

      template<typename _U1, typename _U2,
        _ExplicitCtor<true, _U1, _U2> = false>
 explicit constexpr
 tuple(pair<_U1, _U2>&& __in)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second))
 { ; }



      template<typename _Alloc,
        _ImplicitDefaultCtor<is_object<_Alloc>::value, _T1, _T2> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc,
        _ExplicitDefaultCtor<is_object<_Alloc>::value, _T1, _T2> = false>

 explicit
 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc, bool _Dummy = true,
        _ImplicitCtor<_Dummy, const _T1&, const _T2&> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _T1& __a1, const _T2& __a2)
 : _Inherited(__tag, __a, __a1, __a2) { }

      template<typename _Alloc, bool _Dummy = true,
        _ExplicitCtor<_Dummy, const _T1&, const _T2&> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _T1& __a1, const _T2& __a2)
 : _Inherited(__tag, __a, __a1, __a2) { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ImplicitCtor<true, _U1, _U2> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a, _U1&& __a1, _U2&& __a2)
 : _Inherited(__tag, __a, std::forward<_U1>(__a1),
       std::forward<_U2>(__a2))
 { ; }

      template<typename _Alloc, typename _U1, typename _U2,
        _ExplicitCtor<true, _U1, _U2> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       _U1&& __a1, _U2&& __a2)
 : _Inherited(__tag, __a, std::forward<_U1>(__a1),
       std::forward<_U2>(__a2))
 { ; }

      template<typename _Alloc>

 tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }

      template<typename _Alloc>

 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ImplicitCtor<true, const _U1&, const _U2&> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_U1, _U2>& __in)
 : _Inherited(__tag, __a,
       static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { ; }

      template<typename _Alloc, typename _U1, typename _U2,
        _ExplicitCtor<true, const _U1&, const _U2&> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_U1, _U2>& __in)
 : _Inherited(__tag, __a,
       static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { ; }

      template<typename _Alloc, typename _U1, typename _U2,
        _ImplicitCtor<true, _U1, _U2> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { ; }

      template<typename _Alloc, typename _U1, typename _U2,
        _ExplicitCtor<true, _U1, _U2> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { ; }

      template<typename _Alloc, typename _U1, typename _U2,
        _ImplicitCtor<true, const _U1&, const _U2&> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const pair<_U1, _U2>& __in)
 : _Inherited(__tag, __a, __in.first, __in.second)
 { ; }

      template<typename _Alloc, typename _U1, typename _U2,
        _ExplicitCtor<true, const _U1&, const _U2&> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const pair<_U1, _U2>& __in)
 : _Inherited(__tag, __a, __in.first, __in.second)
 { ; }

      template<typename _Alloc, typename _U1, typename _U2,
        _ImplicitCtor<true, _U1, _U2> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second))
 { ; }

      template<typename _Alloc, typename _U1, typename _U2,
        _ExplicitCtor<true, _U1, _U2> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second))
 { ; }



     
      tuple&
      operator=(__conditional_t<__assignable<const _T1&, const _T2&>(),
    const tuple&,
    const __nonesuch&> __in)
      noexcept(__nothrow_assignable<const _T1&, const _T2&>())
      {
 this->_M_assign(__in);
 return *this;
      }

     
      tuple&
      operator=(__conditional_t<__assignable<_T1, _T2>(),
    tuple&&,
    __nonesuch&&> __in)
      noexcept(__nothrow_assignable<_T1, _T2>())
      {
 this->_M_assign(std::move(__in));
 return *this;
      }

      template<typename _U1, typename _U2>

 __enable_if_t<__assignable<const _U1&, const _U2&>(), tuple&>
 operator=(const tuple<_U1, _U2>& __in)
 noexcept(__nothrow_assignable<const _U1&, const _U2&>())
 {
   this->_M_assign(__in);
   return *this;
 }

      template<typename _U1, typename _U2>

 __enable_if_t<__assignable<_U1, _U2>(), tuple&>
 operator=(tuple<_U1, _U2>&& __in)
 noexcept(__nothrow_assignable<_U1, _U2>())
 {
   this->_M_assign(std::move(__in));
   return *this;
 }

      template<typename _U1, typename _U2>

 __enable_if_t<__assignable<const _U1&, const _U2&>(), tuple&>
 operator=(const pair<_U1, _U2>& __in)
 noexcept(__nothrow_assignable<const _U1&, const _U2&>())
 {
   this->_M_head(*this) = __in.first;
   this->_M_tail(*this)._M_head(*this) = __in.second;
   return *this;
 }

      template<typename _U1, typename _U2>

 __enable_if_t<__assignable<_U1, _U2>(), tuple&>
 operator=(pair<_U1, _U2>&& __in)
 noexcept(__nothrow_assignable<_U1, _U2>())
 {
   this->_M_head(*this) = std::forward<_U1>(__in.first);
   this->_M_tail(*this)._M_head(*this) = std::forward<_U2>(__in.second);
   return *this;
 }

     
      void
      swap(tuple& __in)
      noexcept(__and_<__is_nothrow_swappable<_T1>,
        __is_nothrow_swappable<_T2>>::value)
      { _Inherited::_M_swap(__in); }
    };



  template<typename... _Elements>
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<size_t, sizeof...(_Elements)> { };


  template<typename... _Types>
    inline constexpr size_t tuple_size_v<tuple<_Types...>>
      = sizeof...(_Types);

  template<typename... _Types>
    inline constexpr size_t tuple_size_v<const tuple<_Types...>>
      = sizeof...(_Types);



  template<size_t __i, typename... _Types>
    struct tuple_element<__i, tuple<_Types...>>
    {
      static_assert(__i < sizeof...(_Types), "tuple index must be in range");

      using type = typename _Nth_type<__i, _Types...>::type;
    };

  template<size_t __i, typename _Head, typename... _Tail>
    constexpr _Head&
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<size_t __i, typename _Head, typename... _Tail>
    constexpr const _Head&
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }


  template<size_t __i, typename... _Types>
    __enable_if_t<(__i >= sizeof...(_Types))>
    __get_helper(const tuple<_Types...>&) = delete;


  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
    { return std::__get_helper<__i>(__t); }


  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
    { return std::__get_helper<__i>(__t); }


  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&&
    get(tuple<_Elements...>&& __t) noexcept
    {
      typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
      return std::forward<__element_type>(std::__get_helper<__i>(__t));
    }


  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&&
    get(const tuple<_Elements...>&& __t) noexcept
    {
      typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
      return std::forward<const __element_type>(std::__get_helper<__i>(__t));
    }



  template<size_t __i, typename... _Elements>
    constexpr __enable_if_t<(__i >= sizeof...(_Elements))>
    get(const tuple<_Elements...>&) = delete;




  template <typename _Tp, typename... _Types>
    constexpr _Tp&
    get(tuple<_Types...>& __t) noexcept
    {
      constexpr size_t __idx = __find_uniq_type_in_pack<_Tp, _Types...>();
      static_assert(__idx < sizeof...(_Types),
   "the type T in std::get<T> must occur exactly once in the tuple");
      return std::__get_helper<__idx>(__t);
    }


  template <typename _Tp, typename... _Types>
    constexpr _Tp&&
    get(tuple<_Types...>&& __t) noexcept
    {
      constexpr size_t __idx = __find_uniq_type_in_pack<_Tp, _Types...>();
      static_assert(__idx < sizeof...(_Types),
   "the type T in std::get<T> must occur exactly once in the tuple");
      return std::forward<_Tp>(std::__get_helper<__idx>(__t));
    }


  template <typename _Tp, typename... _Types>
    constexpr const _Tp&
    get(const tuple<_Types...>& __t) noexcept
    {
      constexpr size_t __idx = __find_uniq_type_in_pack<_Tp, _Types...>();
      static_assert(__idx < sizeof...(_Types),
   "the type T in std::get<T> must occur exactly once in the tuple");
      return std::__get_helper<__idx>(__t);
    }



  template <typename _Tp, typename... _Types>
    constexpr const _Tp&&
    get(const tuple<_Types...>&& __t) noexcept
    {
      constexpr size_t __idx = __find_uniq_type_in_pack<_Tp, _Types...>();
      static_assert(__idx < sizeof...(_Types),
   "the type T in std::get<T> must occur exactly once in the tuple");
      return std::forward<const _Tp>(std::__get_helper<__idx>(__t));
    }
# 2578 "/usr/include/c++/15.1.1/tuple" 3
  template<typename _Tp, typename _Up, size_t __i, size_t __size>
    struct __tuple_compare
    {
      static constexpr bool
      __eq(const _Tp& __t, const _Up& __u)
      {
 return bool(std::get<__i>(__t) == std::get<__i>(__u))
   && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);
      }

      static constexpr bool
      __less(const _Tp& __t, const _Up& __u)
      {
 return bool(std::get<__i>(__t) < std::get<__i>(__u))
   || (!bool(std::get<__i>(__u) < std::get<__i>(__t))
       && __tuple_compare<_Tp, _Up, __i + 1, __size>::__less(__t, __u));
      }
    };

  template<typename _Tp, typename _Up, size_t __size>
    struct __tuple_compare<_Tp, _Up, __size, __size>
    {
      static constexpr bool
      __eq(const _Tp&, const _Up&) { return true; }

      static constexpr bool
      __less(const _Tp&, const _Up&) { return false; }
    };

  template<typename... _TElements, typename... _UElements>
    [[__nodiscard__]]
    constexpr bool
    operator==(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    {
      static_assert(sizeof...(_TElements) == sizeof...(_UElements),
   "tuple objects can only be compared if they have equal sizes.");
      using __compare = __tuple_compare<tuple<_TElements...>,
     tuple<_UElements...>,
     0, sizeof...(_TElements)>;
      return __compare::__eq(__t, __u);
    }

  template<typename... _TElements, typename... _UElements>
    [[__nodiscard__]]
    constexpr bool
    operator<(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    {
      static_assert(sizeof...(_TElements) == sizeof...(_UElements),
   "tuple objects can only be compared if they have equal sizes.");
      using __compare = __tuple_compare<tuple<_TElements...>,
     tuple<_UElements...>,
     0, sizeof...(_TElements)>;
      return __compare::__less(__t, __u);
    }

  template<typename... _TElements, typename... _UElements>
    [[__nodiscard__]]
    constexpr bool
    operator!=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t == __u); }

  template<typename... _TElements, typename... _UElements>
    [[__nodiscard__]]
    constexpr bool
    operator>(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    { return __u < __t; }

  template<typename... _TElements, typename... _UElements>
    [[__nodiscard__]]
    constexpr bool
    operator<=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__u < __t); }

  template<typename... _TElements, typename... _UElements>
    [[__nodiscard__]]
    constexpr bool
    operator>=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t < __u); }




  template<typename... _Elements>
    constexpr tuple<typename __decay_and_strip<_Elements>::__type...>
    make_tuple(_Elements&&... __args)
    {
      typedef tuple<typename __decay_and_strip<_Elements>::__type...>
 __result_type;
      return __result_type(std::forward<_Elements>(__args)...);
    }




  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }


  template<size_t, typename, typename, size_t>
    struct __make_tuple_impl;

  template<size_t _Idx, typename _Tuple, typename... _Tp, size_t _Nm>
    struct __make_tuple_impl<_Idx, tuple<_Tp...>, _Tuple, _Nm>
    : __make_tuple_impl<_Idx + 1,
   tuple<_Tp..., __tuple_element_t<_Idx, _Tuple>>,
   _Tuple, _Nm>
    { };

  template<size_t _Nm, typename _Tuple, typename... _Tp>
    struct __make_tuple_impl<_Nm, tuple<_Tp...>, _Tuple, _Nm>
    {
      typedef tuple<_Tp...> __type;
    };

  template<typename _Tuple>
    struct __do_make_tuple
    : __make_tuple_impl<0, tuple<>, _Tuple, tuple_size<_Tuple>::value>
    { };


  template<typename _Tuple>
    struct __make_tuple
    : public __do_make_tuple<__remove_cvref_t<_Tuple>>
    { };


  template<typename...>
    struct __combine_tuples;

  template<>
    struct __combine_tuples<>
    {
      typedef tuple<> __type;
    };

  template<typename... _Ts>
    struct __combine_tuples<tuple<_Ts...>>
    {
      typedef tuple<_Ts...> __type;
    };

  template<typename... _T1s, typename... _T2s, typename... _Rem>
    struct __combine_tuples<tuple<_T1s...>, tuple<_T2s...>, _Rem...>
    {
      typedef typename __combine_tuples<tuple<_T1s..., _T2s...>,
     _Rem...>::__type __type;
    };


  template<typename... _Tpls>
    struct __tuple_cat_result
    {
      typedef typename __combine_tuples
        <typename __make_tuple<_Tpls>::__type...>::__type __type;
    };



  template<typename...>
    struct __make_1st_indices;

  template<>
    struct __make_1st_indices<>
    {
      typedef _Index_tuple<> __type;
    };

  template<typename _Tp, typename... _Tpls>
    struct __make_1st_indices<_Tp, _Tpls...>
    {
      typedef typename _Build_index_tuple<tuple_size<
 typename remove_reference<_Tp>::type>::value>::__type __type;
    };




  template<typename _Ret, typename _Indices, typename... _Tpls>
    struct __tuple_concater;

  template<typename _Ret, size_t... _Is, typename _Tp, typename... _Tpls>
    struct __tuple_concater<_Ret, _Index_tuple<_Is...>, _Tp, _Tpls...>
    {
      template<typename... _Us>
        static constexpr _Ret
        _S_do(_Tp&& __tp, _Tpls&&... __tps, _Us&&... __us)
        {
   typedef typename __make_1st_indices<_Tpls...>::__type __idx;
   typedef __tuple_concater<_Ret, __idx, _Tpls...> __next;
   return __next::_S_do(std::forward<_Tpls>(__tps)...,
          std::forward<_Us>(__us)...,
          std::get<_Is>(std::forward<_Tp>(__tp))...);
 }
    };

  template<typename _Ret>
    struct __tuple_concater<_Ret, _Index_tuple<>>
    {
      template<typename... _Us>
 static constexpr _Ret
 _S_do(_Us&&... __us)
        {
   return _Ret(std::forward<_Us>(__us)...);
 }
    };

  template<typename... _Tps>
    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type
    { };






  template<typename... _Tpls, typename = typename
           enable_if<__and_<__is_tuple_like<_Tpls>...>::value>::type>

    constexpr auto
    tuple_cat(_Tpls&&... __tpls)
    -> typename __tuple_cat_result<_Tpls...>::__type
    {
      typedef typename __tuple_cat_result<_Tpls...>::__type __ret;
      typedef typename __make_1st_indices<_Tpls...>::__type __idx;
      typedef __tuple_concater<__ret, __idx, _Tpls...> __concater;
      return __concater::_S_do(std::forward<_Tpls>(__tpls)...);
    }




  template<typename... _Elements>
    constexpr tuple<_Elements&...>
    tie(_Elements&... __args) noexcept
    { return tuple<_Elements&...>(__args...); }


  template<typename... _Elements>
   
    inline


    typename enable_if<__and_<__is_swappable<_Elements>...>::value
      >::type



    swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }
# 2848 "/usr/include/c++/15.1.1/tuple" 3
  template<typename... _Elements>
   
    typename enable_if<!__and_<__is_swappable<_Elements>...>::value>::type
    swap(tuple<_Elements...>&, tuple<_Elements...>&) = delete;



  template<typename... _Types, typename _Alloc>
    struct uses_allocator<tuple<_Types...>, _Alloc> : true_type { };
# 2867 "/usr/include/c++/15.1.1/tuple" 3
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
     
      inline
      pair<_T1, _T2>::
      pair(piecewise_construct_t,
    tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
      typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
      typename _Build_index_tuple<sizeof...(_Args2)>::__type())
      { }

  template<class _T1, class _T2>
    template<typename... _Args1, size_t... _Indexes1,
      typename... _Args2, size_t... _Indexes2>
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
    _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
      { }






  template<template<typename...> class _Trait, typename _Tp, typename _Tuple>
    inline constexpr bool __unpack_std_tuple = false;

  template<template<typename...> class _Trait, typename _Tp, typename... _Up>
    inline constexpr bool __unpack_std_tuple<_Trait, _Tp, tuple<_Up...>>
      = _Trait<_Tp, _Up...>::value;

  template<template<typename...> class _Trait, typename _Tp, typename... _Up>
    inline constexpr bool __unpack_std_tuple<_Trait, _Tp, tuple<_Up...>&>
      = _Trait<_Tp, _Up&...>::value;

  template<template<typename...> class _Trait, typename _Tp, typename... _Up>
    inline constexpr bool __unpack_std_tuple<_Trait, _Tp, const tuple<_Up...>>
      = _Trait<_Tp, const _Up...>::value;

  template<template<typename...> class _Trait, typename _Tp, typename... _Up>
    inline constexpr bool __unpack_std_tuple<_Trait, _Tp, const tuple<_Up...>&>
      = _Trait<_Tp, const _Up&...>::value;



  template <typename _Fn, typename _Tuple, size_t... _Idx>
    constexpr decltype(auto)
    __apply_impl(_Fn&& __f, _Tuple&& __t, index_sequence<_Idx...>)
    {
      return std::__invoke(std::forward<_Fn>(__f),
      std::get<_Idx>(std::forward<_Tuple>(__t))...);
    }




  template <typename _Fn, typename _Tuple>

    constexpr decltype(auto)
    apply(_Fn&& __f, _Tuple&& __t)
    noexcept(__unpack_std_tuple<is_nothrow_invocable, _Fn, _Tuple>)
    {
      using _Indices
 = make_index_sequence<tuple_size_v<remove_reference_t<_Tuple>>>;
      return std::__apply_impl(std::forward<_Fn>(__f),
          std::forward<_Tuple>(__t),
          _Indices{});
    }



  template <typename _Tp, typename _Tuple, size_t... _Idx>
    constexpr _Tp
    __make_from_tuple_impl(_Tuple&& __t, index_sequence<_Idx...>)
    { return _Tp(std::get<_Idx>(std::forward<_Tuple>(__t))...); }




  template <typename _Tp, typename _Tuple>

    constexpr _Tp
    make_from_tuple(_Tuple&& __t)
    noexcept(__unpack_std_tuple<is_nothrow_constructible, _Tp, _Tuple>)
    {
      constexpr size_t __n = tuple_size_v<remove_reference_t<_Tuple>>;

      if constexpr (__n == 1)
 {
   using _Elt = decltype(std::get<0>(std::declval<_Tuple>()));
   static_assert(!__reference_constructs_from_temporary(_Tp, _Elt));
 }

      return __make_from_tuple_impl<_Tp>(std::forward<_Tuple>(__t),
      make_index_sequence<__n>{});
    }
# 3027 "/usr/include/c++/15.1.1/tuple" 3
#undef __glibcxx_no_dangling_refs


}
# 50 "/usr/include/c++/15.1.1/bits/memory_resource.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{

namespace pmr
{






  class memory_resource
  {
    static constexpr size_t _S_max_align = alignof(max_align_t);

  public:
    memory_resource() = default;
    memory_resource(const memory_resource&) = default;
    virtual ~memory_resource();

    memory_resource& operator=(const memory_resource&) = default;

    [[nodiscard]]
    void*
    allocate(size_t __bytes, size_t __alignment = _S_max_align)
    __attribute__((__returns_nonnull__,__alloc_size__(2),__alloc_align__(3)))
    { return ::operator new(__bytes, do_allocate(__bytes, __alignment)); }

    void
    deallocate(void* __p, size_t __bytes, size_t __alignment = _S_max_align)
    __attribute__((__nonnull__))
    { return do_deallocate(__p, __bytes, __alignment); }

    [[nodiscard]]
    bool
    is_equal(const memory_resource& __other) const noexcept
    { return do_is_equal(__other); }

  private:
    virtual void*
    do_allocate(size_t __bytes, size_t __alignment) = 0;

    virtual void
    do_deallocate(void* __p, size_t __bytes, size_t __alignment) = 0;

    virtual bool
    do_is_equal(const memory_resource& __other) const noexcept = 0;
  };

  [[nodiscard]]
  inline bool
  operator==(const memory_resource& __a, const memory_resource& __b) noexcept
  { return &__a == &__b || __a.is_equal(__b); }


  [[nodiscard]]
  inline bool
  operator!=(const memory_resource& __a, const memory_resource& __b) noexcept
  { return !(__a == __b); }
# 121 "/usr/include/c++/15.1.1/bits/memory_resource.h" 3
  template<typename _Tp>
    class polymorphic_allocator
    {


      template<typename _Up>
 struct __not_pair { using type = void; };

      template<typename _Up1, typename _Up2>
 struct __not_pair<pair<_Up1, _Up2>> { };

    public:
      using value_type = _Tp;

      polymorphic_allocator() noexcept
      {
 extern memory_resource* get_default_resource() noexcept
   __attribute__((__returns_nonnull__));
 _M_resource = get_default_resource();
      }

      polymorphic_allocator(memory_resource* __r) noexcept
      __attribute__((__nonnull__))
      : _M_resource(__r)
      { ; }

      polymorphic_allocator(const polymorphic_allocator& __other) = default;

      template<typename _Up>
 polymorphic_allocator(const polymorphic_allocator<_Up>& __x) noexcept
 : _M_resource(__x.resource())
 { }

      polymorphic_allocator&
      operator=(const polymorphic_allocator&) = delete;

      [[nodiscard]]
      _Tp*
      allocate(size_t __n)
      __attribute__((__returns_nonnull__))
      {
 if ((__gnu_cxx::__int_traits<size_t>::__max / sizeof(_Tp)) < __n)
   std::__throw_bad_array_new_length();
 return static_cast<_Tp*>(_M_resource->allocate(__n * sizeof(_Tp),
             alignof(_Tp)));
      }

      void
      deallocate(_Tp* __p, size_t __n) noexcept
      __attribute__((__nonnull__))
      { _M_resource->deallocate(__p, __n * sizeof(_Tp), alignof(_Tp)); }
# 226 "/usr/include/c++/15.1.1/bits/memory_resource.h" 3
      template<typename _Tp1, typename... _Args>
 __attribute__((__nonnull__))
 typename __not_pair<_Tp1>::type
 construct(_Tp1* __p, _Args&&... __args)
 {


   using __use_tag
     = std::__uses_alloc_t<_Tp1, polymorphic_allocator, _Args...>;
   if constexpr (is_base_of_v<__uses_alloc0, __use_tag>)
     ::new(__p) _Tp1(std::forward<_Args>(__args)...);
   else if constexpr (is_base_of_v<__uses_alloc1_, __use_tag>)
     ::new(__p) _Tp1(allocator_arg, *this,
       std::forward<_Args>(__args)...);
   else
     ::new(__p) _Tp1(std::forward<_Args>(__args)..., *this);
 }

      template<typename _Tp1, typename _Tp2,
        typename... _Args1, typename... _Args2>
 __attribute__((__nonnull__))
 void
 construct(pair<_Tp1, _Tp2>* __p, piecewise_construct_t,
    tuple<_Args1...> __x, tuple<_Args2...> __y)
 {
   auto __x_tag =
     __use_alloc<_Tp1, polymorphic_allocator, _Args1...>(*this);
   auto __y_tag =
     __use_alloc<_Tp2, polymorphic_allocator, _Args2...>(*this);
   index_sequence_for<_Args1...> __x_i;
   index_sequence_for<_Args2...> __y_i;

   ::new(__p) pair<_Tp1, _Tp2>(piecewise_construct,
          _S_construct_p(__x_tag, __x_i, __x),
          _S_construct_p(__y_tag, __y_i, __y));
 }

      template<typename _Tp1, typename _Tp2>
 __attribute__((__nonnull__))
 void
 construct(pair<_Tp1, _Tp2>* __p)
 { this->construct(__p, piecewise_construct, tuple<>(), tuple<>()); }

      template<typename _Tp1, typename _Tp2, typename _Up, typename _Vp>
 __attribute__((__nonnull__))
 void
 construct(pair<_Tp1, _Tp2>* __p, _Up&& __x, _Vp&& __y)
 {
   this->construct(__p, piecewise_construct,
       std::forward_as_tuple(std::forward<_Up>(__x)),
       std::forward_as_tuple(std::forward<_Vp>(__y)));
 }

      template <typename _Tp1, typename _Tp2, typename _Up, typename _Vp>
 __attribute__((__nonnull__))
 void
 construct(pair<_Tp1, _Tp2>* __p, const std::pair<_Up, _Vp>& __pr)
 {
   this->construct(__p, piecewise_construct,
       std::forward_as_tuple(__pr.first),
       std::forward_as_tuple(__pr.second));
 }

      template<typename _Tp1, typename _Tp2, typename _Up, typename _Vp>
 __attribute__((__nonnull__))
 void
 construct(pair<_Tp1, _Tp2>* __p, pair<_Up, _Vp>&& __pr)
 {
   this->construct(__p, piecewise_construct,
       std::forward_as_tuple(std::forward<_Up>(__pr.first)),
       std::forward_as_tuple(std::forward<_Vp>(__pr.second)));
 }
# 309 "/usr/include/c++/15.1.1/bits/memory_resource.h" 3
      template<typename _Up>
 __attribute__((__nonnull__))
 void
 destroy(_Up* __p)
 { __p->~_Up(); }

      polymorphic_allocator
      select_on_container_copy_construction() const noexcept
      { return polymorphic_allocator(); }

      memory_resource*
      resource() const noexcept
      __attribute__((__returns_nonnull__))
      { return _M_resource; }



      [[nodiscard]]
      friend bool
      operator==(const polymorphic_allocator& __a,
   const polymorphic_allocator& __b) noexcept
      { return *__a.resource() == *__b.resource(); }


      [[nodiscard]]
      friend bool
      operator!=(const polymorphic_allocator& __a,
   const polymorphic_allocator& __b) noexcept
      { return !(__a == __b); }


    private:

      using __uses_alloc1_ = __uses_alloc1<polymorphic_allocator>;
      using __uses_alloc2_ = __uses_alloc2<polymorphic_allocator>;

      template<typename _Ind, typename... _Args>
 static tuple<_Args&&...>
 _S_construct_p(__uses_alloc0, _Ind, tuple<_Args...>& __t)
 { return std::move(__t); }

      template<size_t... _Ind, typename... _Args>
 static tuple<allocator_arg_t, polymorphic_allocator, _Args&&...>
 _S_construct_p(__uses_alloc1_ __ua, index_sequence<_Ind...>,
         tuple<_Args...>& __t)
 {
   return {
       allocator_arg, *__ua._M_a, std::get<_Ind>(std::move(__t))...
   };
 }

      template<size_t... _Ind, typename... _Args>
 static tuple<_Args&&..., polymorphic_allocator>
 _S_construct_p(__uses_alloc2_ __ua, index_sequence<_Ind...>,
         tuple<_Args...>& __t)
 { return { std::get<_Ind>(std::move(__t))..., *__ua._M_a }; }


      memory_resource* _M_resource;
    };

  template<typename _Tp1, typename _Tp2>
    [[nodiscard]]
    inline bool
    operator==(const polymorphic_allocator<_Tp1>& __a,
        const polymorphic_allocator<_Tp2>& __b) noexcept
    { return *__a.resource() == *__b.resource(); }


  template<typename _Tp1, typename _Tp2>
    [[nodiscard]]
    inline bool
    operator!=(const polymorphic_allocator<_Tp1>& __a,
        const polymorphic_allocator<_Tp2>& __b) noexcept
    { return !(__a == __b); }


}

  template<typename _Alloc> struct allocator_traits;







  template<typename _Tp>
    struct allocator_traits<pmr::polymorphic_allocator<_Tp>>
    {

      using allocator_type = pmr::polymorphic_allocator<_Tp>;


      using value_type = _Tp;


      using pointer = _Tp*;


      using const_pointer = const _Tp*;


      using void_pointer = void*;


      using const_void_pointer = const void*;


      using difference_type = std::ptrdiff_t;


      using size_type = std::size_t;





      using propagate_on_container_copy_assignment = false_type;
      using propagate_on_container_move_assignment = false_type;
      using propagate_on_container_swap = false_type;

      static allocator_type
      select_on_container_copy_construction(const allocator_type&) noexcept
      { return allocator_type(); }



      using is_always_equal = false_type;

      template<typename _Up>
 using rebind_alloc = pmr::polymorphic_allocator<_Up>;

      template<typename _Up>
 using rebind_traits = allocator_traits<pmr::polymorphic_allocator<_Up>>;
# 452 "/usr/include/c++/15.1.1/bits/memory_resource.h" 3
      [[nodiscard]] static pointer
      allocate(allocator_type& __a, size_type __n)
      { return __a.allocate(__n); }
# 467 "/usr/include/c++/15.1.1/bits/memory_resource.h" 3
      [[nodiscard]] static pointer
      allocate(allocator_type& __a, size_type __n, const_void_pointer)
      { return __a.allocate(__n); }
# 479 "/usr/include/c++/15.1.1/bits/memory_resource.h" 3
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 494 "/usr/include/c++/15.1.1/bits/memory_resource.h" 3
      template<typename _Up, typename... _Args>
 static void
 construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 { __a.construct(__p, std::forward<_Args>(__args)...); }
# 506 "/usr/include/c++/15.1.1/bits/memory_resource.h" 3
      template<typename _Up>
 static void
 destroy(allocator_type&, _Up* __p)
 noexcept(is_nothrow_destructible<_Up>::value)
 { __p->~_Up(); }





      static size_type
      max_size(const allocator_type&) noexcept
      { return size_t(-1) / sizeof(value_type); }
    };


}
# 92 "/usr/include/c++/15.1.1/vector" 2 3
namespace std __attribute__ ((__visibility__ ("default")))
{

  namespace pmr {
    template<typename _Tp>
      using vector = std::vector<_Tp, polymorphic_allocator<_Tp>>;
  }








}
# 18 "./emc/nml_intf/canon.hh" 2

# 1 "./emc/nml_intf/emcpos.h" 1
# 15 "./emc/nml_intf/emcpos.h"
#define EMCPOS_H 

# 1 "libnml/posemath/posemath.h" 1
# 72 "libnml/posemath/posemath.h"
#define POSEMATH_H 



#define USE_CONST 
#define USE_CCONST 
#define USE_REF 


#define PM_CCONST const





#define PM_CONST const





#define PM_REF &




#define INCLUDE_POSEMATH_COPY_CONSTRUCTORS 





# 103 "libnml/posemath/posemath.h"
struct PM_CARTESIAN;
struct PM_SPHERICAL;
struct PM_CYLINDRICAL;


struct PM_ROTATION_VECTOR;
struct PM_ROTATION_MATRIX;
struct PM_QUATERNION;
struct PM_EULER_ZYZ;
struct PM_EULER_ZYX;
struct PM_RPY;


struct PM_POSE;
struct PM_HOMOGENEOUS;



struct PM_CARTESIAN {

    PM_CARTESIAN() {
    };
    PM_CARTESIAN(double _x, double _y, double _z);

    PM_CARTESIAN(const PM_CARTESIAN & cart);



    PM_CARTESIAN(const PM_CYLINDRICAL & c);
    PM_CARTESIAN(const PM_SPHERICAL & s);


    double &operator[] (int n);
    PM_CARTESIAN & operator += (const PM_CARTESIAN &o);
    PM_CARTESIAN & operator -= (const PM_CARTESIAN &o);


    PM_CARTESIAN & operator *= (double o);
    PM_CARTESIAN & operator /= (double o);


    double x, y, z;
};



struct PM_SPHERICAL {

    PM_SPHERICAL() {
    };

    PM_SPHERICAL(const PM_SPHERICAL & s);

    PM_SPHERICAL(double _theta, double _phi, double _r);
    PM_SPHERICAL(const PM_CYLINDRICAL & v);
    PM_SPHERICAL(const PM_CARTESIAN & v);


    double &operator[] (int n);


    double theta, phi, r;
};



struct PM_CYLINDRICAL {

    PM_CYLINDRICAL() {
    };

    PM_CYLINDRICAL(const PM_CYLINDRICAL & c);

    PM_CYLINDRICAL(double _theta, double _r, double _z);
    PM_CYLINDRICAL(const PM_CARTESIAN & v);
    PM_CYLINDRICAL(const PM_SPHERICAL & v);


    double &operator[] (int n);


    double theta, r, z;
};



struct PM_ROTATION_VECTOR {

    PM_ROTATION_VECTOR() {
    };

    PM_ROTATION_VECTOR(const PM_ROTATION_VECTOR & r);

    PM_ROTATION_VECTOR(double _r, double _x, double _y, double _z);
    PM_ROTATION_VECTOR(const PM_QUATERNION & q);



    double &operator[] (int n);


    double s, x, y, z;
};



struct PM_ROTATION_MATRIX {

    PM_ROTATION_MATRIX() {
    };

    PM_ROTATION_MATRIX(const PM_ROTATION_MATRIX & mat);



    PM_ROTATION_MATRIX(double xx, double xy, double xz,
 double yx, double yy, double yz, double zx, double zy, double zz);
    PM_ROTATION_MATRIX(PM_CARTESIAN _x, PM_CARTESIAN _y, PM_CARTESIAN _z);
    PM_ROTATION_MATRIX(const PM_ROTATION_VECTOR & v);

    PM_ROTATION_MATRIX(const PM_QUATERNION & q);

    PM_ROTATION_MATRIX(const PM_EULER_ZYZ & zyz);

    PM_ROTATION_MATRIX(const PM_EULER_ZYX & zyx);

    PM_ROTATION_MATRIX(const PM_RPY & rpy);


    PM_CARTESIAN & operator[](int n);


    PM_CARTESIAN x, y, z;
};



enum PM_AXIS { PM_X, PM_Y, PM_Z };

struct PM_QUATERNION {

    PM_QUATERNION() {
    };

    PM_QUATERNION(const PM_QUATERNION & quat);


    PM_QUATERNION(double _s, double _x, double _y, double _z);
    PM_QUATERNION(const PM_ROTATION_VECTOR & v);

    PM_QUATERNION(const PM_ROTATION_MATRIX & m);

    PM_QUATERNION(const PM_EULER_ZYZ & zyz);
    PM_QUATERNION(const PM_EULER_ZYX & zyx);
    PM_QUATERNION(const PM_RPY & rpy);
    PM_QUATERNION(PM_AXIS axis, double angle);


    double &operator[] (int n);


    void axisAngleMult(PM_AXIS axis, double angle);


    double s, x, y, z;
};



struct PM_EULER_ZYZ {

    PM_EULER_ZYZ() {
    };

    PM_EULER_ZYZ(const PM_EULER_ZYZ & zyz);

    PM_EULER_ZYZ(double _z, double _y, double _zp);
    PM_EULER_ZYZ(const PM_QUATERNION & q);
    PM_EULER_ZYZ(const PM_ROTATION_MATRIX & m);


    double &operator[] (int n);


    double z, y, zp;
};



struct PM_EULER_ZYX {

    PM_EULER_ZYX() {
    };

    PM_EULER_ZYX(const PM_EULER_ZYX & zyx);

    PM_EULER_ZYX(double _z, double _y, double _x);
    PM_EULER_ZYX(const PM_QUATERNION & q);
    PM_EULER_ZYX(const PM_ROTATION_MATRIX & m);


    double &operator[] (int n);


    double z, y, x;
};



struct PM_RPY {

    PM_RPY() {
    };

    PM_RPY(const PM_RPY & rpy);

    PM_RPY(double _r, double _p, double _y);
    PM_RPY(const PM_QUATERNION & q);
    PM_RPY(const PM_ROTATION_MATRIX & m);


    double &operator[] (int n);


    double r, p, y;
};



struct PM_POSE {

    PM_POSE() {
    };

    PM_POSE(const PM_POSE & p);

    PM_POSE(PM_CARTESIAN v, PM_QUATERNION q);
    PM_POSE(double x, double y, double z,
 double s, double sx, double sy, double sz);
    PM_POSE(const PM_HOMOGENEOUS & h);


    double &operator[] (int n);


    PM_CARTESIAN tran;
    PM_QUATERNION rot;
};



struct PM_HOMOGENEOUS {

    PM_HOMOGENEOUS() {
    };

    PM_HOMOGENEOUS(const PM_HOMOGENEOUS & h);

    PM_HOMOGENEOUS(PM_CARTESIAN v, PM_ROTATION_MATRIX m);
    PM_HOMOGENEOUS(const PM_POSE & p);


    PM_CARTESIAN & operator[](int n);


    PM_CARTESIAN tran;
    PM_ROTATION_MATRIX rot;
};



struct PM_LINE {

    PM_LINE() {
    };

    PM_LINE(const PM_LINE &);



    int init(PM_POSE start, PM_POSE end);
    int point(double len, PM_POSE * point);


    PM_POSE start;
    PM_POSE end;
    PM_CARTESIAN uVec;
};



struct PM_CIRCLE {

    PM_CIRCLE() {
    };

    PM_CIRCLE(const PM_CIRCLE &);



    int init(PM_POSE start, PM_POSE end,
 PM_CARTESIAN center, PM_CARTESIAN normal, int turn);
    int point(double angle, PM_POSE * point);


    PM_CARTESIAN center;
    PM_CARTESIAN normal;
    PM_CARTESIAN rTan;
    PM_CARTESIAN rPerp;
    PM_CARTESIAN rHelix;
    double radius;
    double angle;
    double spiral;
};




extern double dot(const PM_CARTESIAN &v1, const PM_CARTESIAN &v2);


extern PM_CARTESIAN cross(const PM_CARTESIAN &v1, const PM_CARTESIAN &v2);
# 435 "libnml/posemath/posemath.h"
extern PM_CARTESIAN unit(const PM_CARTESIAN &v);
extern PM_QUATERNION unit(const PM_QUATERNION &q);
extern PM_ROTATION_VECTOR unit(const PM_ROTATION_VECTOR &r);
extern PM_ROTATION_MATRIX unit(const PM_ROTATION_MATRIX &m);


extern int isNorm(const PM_CARTESIAN &v);
extern int isNorm(const PM_QUATERNION &q);
extern int isNorm(const PM_ROTATION_VECTOR &r);
extern int isNorm(const PM_ROTATION_MATRIX &m);


extern double mag(const PM_CARTESIAN &v);


extern double disp(const PM_CARTESIAN &v1, const PM_CARTESIAN &v2);


extern PM_CARTESIAN inv(const PM_CARTESIAN &v);
extern PM_ROTATION_MATRIX inv(const PM_ROTATION_MATRIX &m);
extern PM_QUATERNION inv(const PM_QUATERNION &q);
extern PM_POSE inv(const PM_POSE &p);
extern PM_HOMOGENEOUS inv(const PM_HOMOGENEOUS &h);


extern PM_CARTESIAN proj(const PM_CARTESIAN &v1, const PM_CARTESIAN &v2);




extern PM_CARTESIAN operator + (const PM_CARTESIAN &v);
extern PM_CARTESIAN operator - (const PM_CARTESIAN &v);
extern PM_QUATERNION operator + (const PM_QUATERNION &q);
extern PM_QUATERNION operator - (const PM_QUATERNION &q);
extern PM_POSE operator + (const PM_POSE &p);
extern PM_POSE operator - (const PM_POSE &p);


extern int operator == (const PM_CARTESIAN &v1, const PM_CARTESIAN &v2);
extern int operator == (const PM_QUATERNION &q1, const PM_QUATERNION &q2);
extern int operator == (const PM_POSE &p1, const PM_POSE &p2);
extern int operator != (const PM_CARTESIAN &v1, const PM_CARTESIAN &v2);
extern int operator != (const PM_QUATERNION &q1, const PM_QUATERNION &q2);
extern int operator != (const PM_POSE &p1, const PM_POSE &p2);




extern PM_CARTESIAN operator + (PM_CARTESIAN v1, const PM_CARTESIAN &v2);

extern PM_CARTESIAN operator - (PM_CARTESIAN v1, const PM_CARTESIAN &v2);

extern PM_CARTESIAN operator *(PM_CARTESIAN v, double s);

extern PM_CARTESIAN operator *(double s, PM_CARTESIAN v);

extern PM_CARTESIAN operator / (const PM_CARTESIAN &v, double s);




extern PM_QUATERNION operator *(double s, const PM_QUATERNION &q);

extern PM_QUATERNION operator *(const PM_QUATERNION &q, double s);

extern PM_QUATERNION operator / (const PM_QUATERNION &q, double s);

extern PM_CARTESIAN operator *(const PM_QUATERNION &q, const PM_CARTESIAN &v);

extern PM_QUATERNION operator *(const PM_QUATERNION &q1, const PM_QUATERNION &q2);

extern PM_ROTATION_MATRIX operator *(const PM_ROTATION_MATRIX &m1,
    const PM_ROTATION_MATRIX &m2);




extern PM_POSE operator *(const PM_QUATERNION &q, const PM_POSE &p);

extern PM_POSE operator *(const PM_POSE &p1, const PM_POSE &p2);

extern PM_CARTESIAN operator *(const PM_POSE &p, const PM_CARTESIAN &v);






extern "C" {




    typedef struct {
 double x, y, z;

    } PmCartesian;



    typedef struct {
 double theta, phi, r;

    } PmSpherical;



    typedef struct {
 double theta, r, z;

    } PmCylindrical;



    typedef PM_AXIS PmAxis;






    typedef struct {
 double s, x, y, z;

    } PmRotationVector;



    typedef struct {
 PmCartesian x, y, z;

    } PmRotationMatrix;



    typedef struct {
 double s, x, y, z;

    } PmQuaternion;



    typedef struct {
 double z, y, zp;

    } PmEulerZyz;



    typedef struct {
 double z, y, x;

    } PmEulerZyx;



    typedef struct {
 double r, p, y;

    } PmRpy;



    typedef struct {
 PmCartesian tran;
 PmQuaternion rot;

    } PmPose;


    typedef struct {
        PmCartesian start;
        PmCartesian end;
        PmCartesian uVec;
        double tmag;
        int tmag_zero;
    } PmCartLine;



    typedef struct {
 PmCartesian tran;
 PmRotationMatrix rot;

    } PmHomogeneous;



    typedef struct {
 PmPose start;
 PmPose end;
 PmCartesian uVec;
 PmQuaternion qVec;
 double tmag;
 double rmag;
 int tmag_zero;
 int rmag_zero;

    } PmLine;



    typedef struct {
 PmCartesian center;
 PmCartesian normal;
 PmCartesian rTan;
 PmCartesian rPerp;
 PmCartesian rHelix;
 double radius;
 double angle;
 double spiral;

    } PmCircle;
# 657 "libnml/posemath/posemath.h"
#define PM_PI 3.14159265358979323846
#define PM_PI_2 1.57079632679489661923
#define PM_PI_4 0.78539816339744830962
#define PM_2_PI 6.28318530717958647692
# 685 "libnml/posemath/posemath.h"
#define pmClose(a,b,eps) ((fabs((a) - (b)) < (eps)) ? 1 : 0)
#define pmSq(x) ((x)*(x))




#define TO_DEG (180./PM_PI)




#define TO_RAD (PM_PI/180.)






#define DOUBLE_FUZZ 2.2204460492503131e-16
#define DOUBLECP_FUZZ 1.0842021724855044e-19
# 717 "libnml/posemath/posemath.h"
#define CART_FUZZ (1.0e-8)



#define Q_FUZZ (1.0e-06)


#define QS_FUZZ (1.0e-6)


#define RS_FUZZ (1.0e-6)


#define QSIN_FUZZ (1.0e-6)


#define V_FUZZ (1.0e-8)


#define SQRT_FUZZ (-1.0e-6)


#define UNIT_VEC_FUZZ (1.0e-6)


#define UNIT_QUAT_FUZZ (1.0e-6)


#define UNIT_SC_FUZZ (1.0e-6)


#define E_EPSILON (1.0e-6)


#define SINGULAR_EPSILON (1.0e-6)


#define RPY_P_FUZZ (1.0e-6)


#define ZYZ_Y_FUZZ (1.0e-6)


#define ZYX_Y_FUZZ (1.0e-6)


#define CIRCLE_FUZZ (1.0e-6)



    extern void pmPrintError(const char *fmt, ...) __attribute__((format(printf,1,2)));


    extern int pmErrno;
    extern void pmPerror(const char *fmt);
#define PM_OK 0
#define PM_ERR -1
#define PM_IMPL_ERR -2
#define PM_NORM_ERR -3
#define PM_DIV_ERR -4



    extern double pmSqrt(double x);



    extern int pmCartSphConvert(PmCartesian const * const, PmSpherical * const);
    extern int pmCartCylConvert(PmCartesian const * const, PmCylindrical * const);
    extern int pmSphCartConvert(PmSpherical const * const, PmCartesian * const);
    extern int pmSphCylConvert(PmSpherical const * const, PmCylindrical * const);
    extern int pmCylCartConvert(PmCylindrical const * const, PmCartesian * const);
    extern int pmCylSphConvert(PmCylindrical const * const, PmSpherical * const);



    extern int pmAxisAngleQuatConvert(PmAxis, double, PmQuaternion * const);

    extern int pmRotQuatConvert(PmRotationVector const * const, PmQuaternion * const);
    extern int pmRotMatConvert(PmRotationVector const * const, PmRotationMatrix * const);
    extern int pmRotZyzConvert(PmRotationVector const * const, PmEulerZyz * const);
    extern int pmRotZyxConvert(PmRotationVector const * const, PmEulerZyx * const);
    extern int pmRotRpyConvert(PmRotationVector const * const, PmRpy * const);

    extern int pmQuatRotConvert(PmQuaternion const * const, PmRotationVector * const);
    extern int pmQuatMatConvert(PmQuaternion const * const, PmRotationMatrix * const);
    extern int pmQuatZyzConvert(PmQuaternion const * const, PmEulerZyz * const);
    extern int pmQuatZyxConvert(PmQuaternion const * const, PmEulerZyx * const);
    extern int pmQuatRpyConvert(PmQuaternion const * const, PmRpy * const);

    extern int pmMatRotConvert(PmRotationMatrix const * const, PmRotationVector * const);
    extern int pmMatQuatConvert(PmRotationMatrix const * const, PmQuaternion * const);
    extern int pmMatZyzConvert(PmRotationMatrix const * const, PmEulerZyz * const);
    extern int pmMatZyxConvert(PmRotationMatrix const * const, PmEulerZyx * const);
    extern int pmMatRpyConvert(PmRotationMatrix const * const, PmRpy * const);

    extern int pmZyzRotConvert(PmEulerZyz const * const, PmRotationVector * const);
    extern int pmZyzQuatConvert(PmEulerZyz const * const, PmQuaternion * const);
    extern int pmZyzMatConvert(PmEulerZyz const * const, PmRotationMatrix * const);
    extern int pmZyzZyxConvert(PmEulerZyz const * const, PmEulerZyx * const);
    extern int pmZyzRpyConvert(PmEulerZyz const * const, PmRpy * const);

    extern int pmZyxRotConvert(PmEulerZyx const * const, PmRotationVector * const);
    extern int pmZyxQuatConvert(PmEulerZyx const * const, PmQuaternion * const);
    extern int pmZyxMatConvert(PmEulerZyx const * const, PmRotationMatrix * const);
    extern int pmZyxZyzConvert(PmEulerZyx const * const, PmEulerZyz * const);
    extern int pmZyxRpyConvert(PmEulerZyx const * const, PmRpy * const);

    extern int pmRpyRotConvert(PmRpy const * const, PmRotationVector * const);
    extern int pmRpyQuatConvert(PmRpy const * const, PmQuaternion * const);
    extern int pmRpyMatConvert(PmRpy const * const, PmRotationMatrix * const);
    extern int pmRpyZyzConvert(PmRpy const * const, PmEulerZyz * const);
    extern int pmRpyZyxConvert(PmRpy const * const, PmEulerZyx * const);



    extern int pmPoseHomConvert(PmPose const * const, PmHomogeneous* const);

    extern int pmHomPoseConvert(PmHomogeneous const * const, PmPose * const);
# 850 "libnml/posemath/posemath.h"
    extern int pmCartCartCompare(PmCartesian const * const, PmCartesian const * const);
    extern int pmCartCartDot(PmCartesian const * const, PmCartesian const * const, double * const);
    extern int pmCartCartCross(PmCartesian const * const, PmCartesian const * const, PmCartesian * const);
    extern int pmCartCartMult(PmCartesian const * const, PmCartesian const * const, PmCartesian * const);
    extern int pmCartCartDiv(PmCartesian const * const, PmCartesian const * const, PmCartesian * const);
    extern int pmCartInfNorm(PmCartesian const * v, double * out);
    extern int pmCartMag(PmCartesian const * const, double * const);
    extern int pmCartMagSq(PmCartesian const * const, double * const);
    extern int pmCartCartDisp(PmCartesian const * const v1, PmCartesian const * const v2, double *d);
    extern int pmCartCartAdd(PmCartesian const * const, PmCartesian const * const, PmCartesian * const);
    extern int pmCartCartSub(PmCartesian const * const, PmCartesian const * const, PmCartesian * const);
    extern int pmCartScalMult(PmCartesian const * const, double, PmCartesian * const);
    extern int pmCartScalDiv(PmCartesian const * const, double, PmCartesian * const);
    extern int pmCartNeg(PmCartesian const * const, PmCartesian * const);
    extern int pmCartUnit(PmCartesian const * const, PmCartesian * const);
    extern int pmCartAbs(PmCartesian const * const, PmCartesian * const);

    extern int pmCartCartAddEq(PmCartesian * const, PmCartesian const * const);
    extern int pmCartCartSubEq(PmCartesian * const, PmCartesian const * const);
    extern int pmCartScalMultEq(PmCartesian * const, double);
    extern int pmCartScalDivEq(PmCartesian * const, double);
    extern int pmCartUnitEq(PmCartesian * const);
    extern int pmCartNegEq(PmCartesian * const);





#define pmCartNorm(a,b,c,d,e) bad{a.b.c.d.e}


    extern int pmCartIsNorm(PmCartesian const * const v);
    extern int pmCartInv(PmCartesian const * const, PmCartesian * const);
    extern int pmCartInvEq(PmCartesian * const);
    extern int pmCartCartProj(PmCartesian const * const, PmCartesian const * const, PmCartesian * const);
    extern int pmCartPlaneProj(PmCartesian const * const v, PmCartesian const * const normal,
 PmCartesian * vout);





    extern int pmQuatQuatCompare(PmQuaternion const * const, PmQuaternion const * const);
    extern int pmQuatMag(PmQuaternion const * const q, double *d);
    extern int pmQuatNorm(PmQuaternion const * const, PmQuaternion * const);
    extern int pmQuatInv(PmQuaternion const * const, PmQuaternion * const);
    extern int pmQuatIsNorm(PmQuaternion const * const);
    extern int pmQuatScalMult(PmQuaternion const * const q, double s, PmQuaternion * const qout);
    extern int pmQuatScalDiv(PmQuaternion const * const q, double s, PmQuaternion * const qout);
    extern int pmQuatQuatMult(PmQuaternion const * const, PmQuaternion const * const, PmQuaternion * const);
    extern int pmQuatCartMult(PmQuaternion const * const, PmCartesian const * const, PmCartesian * const);
    extern int pmQuatAxisAngleMult(PmQuaternion const * const, PmAxis, double,
 PmQuaternion *);



    extern int pmRotScalMult(PmRotationVector const * const, double, PmRotationVector * const);
    extern int pmRotScalDiv(PmRotationVector const * const, double, PmRotationVector * const);
    extern int pmRotIsNorm(PmRotationVector const * const);
    extern int pmRotNorm(PmRotationVector const * const, PmRotationVector * const);







    extern int pmMatNorm(PmRotationMatrix const * const m, PmRotationMatrix * const mout);
    extern int pmMatIsNorm(PmRotationMatrix const * const m);
    extern int pmMatInv(PmRotationMatrix const * const m, PmRotationMatrix * const mout);
    extern int pmMatCartMult(PmRotationMatrix const * const m, PmCartesian const * const v,
 PmCartesian * const vout);
    extern int pmMatMatMult(PmRotationMatrix const * const m1, PmRotationMatrix const * const m2,
 PmRotationMatrix * const mout);



    extern int pmPosePoseCompare(PmPose const * const, PmPose const * const);
    extern int pmPoseInv(PmPose const * const p, PmPose * const);
    extern int pmPoseCartMult(PmPose const * const, PmCartesian const * const, PmCartesian * const);
    extern int pmPosePoseMult(PmPose const * const, PmPose const * const, PmPose * const);


    extern int pmHomInv(PmHomogeneous const * const, PmHomogeneous * const);



    extern int pmLineInit(PmLine * const line, PmPose const * const start, PmPose const * const end);
    extern int pmLinePoint(PmLine const * const line, double len, PmPose * const point);


    extern int pmCartLineInit(PmCartLine * const line, PmCartesian const * const start, PmCartesian const * const end);
    extern int pmCartLinePoint(PmCartLine const * const line, double len, PmCartesian * const point);
    extern int pmCartLineStretch(PmCartLine * const line, double new_len, int from_end);



    extern int pmCircleInit(PmCircle * const circle,
            PmCartesian const * const start, PmCartesian const * const end,
            PmCartesian const * const center, PmCartesian const * const normal, int turn);

    extern int pmCirclePoint(PmCircle const * const circle, double angle, PmCartesian * const point);
    extern int pmCircleStretch(PmCircle * const circ, double new_angle, int from_end);



#define toCart(src,dst) {(dst)->x = (src).x; (dst)->y = (src).y; (dst)->z = (src).z;}

#define toCyl(src,dst) {(dst)->theta = (src).theta; (dst)->r = (src).r; (dst)->z = (src).z;}

#define toSph(src,dst) {(dst)->theta = (src).theta; (dst)->phi = (src).phi; (dst)->r = (src).r;}

#define toQuat(src,dst) {(dst)->s = (src).s; (dst)->x = (src).x; (dst)->y = (src).y; (dst)->z = (src).z;}

#define toRot(src,dst) {(dst)->s = (src).s; (dst)->x = (src).x; (dst)->y = (src).y; (dst)->z = (src).z;}

#define toMat(src,dst) {toCart((src).x, &((dst)->x)); toCart((src).y, &((dst)->y)); toCart((src).z, &((dst)->z));}

#define toEulerZyz(src,dst) {(dst)->z = (src).z; (dst)->y = (src).y; (dst)->zp = (src).zp;}

#define toEulerZyx(src,dst) {(dst)->z = (src).z; (dst)->y = (src).y; (dst)->x = (src).x;}

#define toRpy(src,dst) {(dst)->r = (src).r; (dst)->p = (src).p; (dst)->y = (src).y;}

#define toPose(src,dst) {toCart((src).tran, &((dst)->tran)); toQuat((src).rot, &((dst)->rot));}

#define toHom(src,dst) {toCart((src).tran, &((dst)->tran)); toMat((src).rot, &((dst)->rot));}

#define toLine(src,dst) {toPose((src).start, &((dst)->start)); toPose((src).end, &((dst)->end)); toCart((src).uVec, &((dst)->uVec));}

#define toCircle(src,dst) {toCart((src).center, &((dst)->center)); toCart((src).normal, &((dst)->normal)); toCart((src).rTan, &((dst)->rTan)); toCart((src).rPerp, &((dst)->rPerp)); toCart((src).rHelix, &((dst)->rHelix)); (dst)->radius = (src).radius; (dst)->angle = (src).angle; (dst)->spiral = (src).spiral;}


}
# 18 "./emc/nml_intf/emcpos.h" 2

typedef struct EmcPose {
    PmCartesian tran;
    double a, b, c;
    double u, v, w;
} EmcPose;

#define ZERO_EMC_POSE(pos) do { pos.tran.x = 0.0; pos.tran.y = 0.0; pos.tran.z = 0.0; pos.a = 0.0; pos.b = 0.0; pos.c = 0.0; pos.u = 0.0; pos.v = 0.0; pos.w = 0.0; } while(0)
# 20 "./emc/nml_intf/canon.hh" 2
# 1 "./emc/nml_intf/emctool.h" 1
# 18 "./emc/nml_intf/emctool.h"
#define EMCTOOL_H 






#define CANON_POCKETS_MAX 1001
#define CANON_TOOL_ENTRY_LEN 256

struct CANON_TOOL_TABLE {
    int toolno;
    int pocketno;
    EmcPose offset;
    double diameter;
    double frontangle;
    double backangle;
    int orientation;
};
# 21 "./emc/nml_intf/canon.hh" 2
# 1 "./emc/nml_intf/canon_position.hh" 1
# 15 "./emc/nml_intf/canon_position.hh"
#define CANON_POSITION_HH 
# 24 "./emc/nml_intf/canon_position.hh"
struct CANON_POSITION {

    CANON_POSITION() :
        x(0.0),
        y(0.0),
        z(0.0),
        a(0.0),
        b(0.0),
        c(0.0),
        u(0.0),
        v(0.0),
        w(0.0) {}

    CANON_POSITION(double _x, double _y, double _z,
                   double _a, double _b, double _c,
                   double _u, double _v, double _w);
    CANON_POSITION(const EmcPose &_pos);
    CANON_POSITION(PM_CARTESIAN const &xyz);
    CANON_POSITION(PM_CARTESIAN const &xyz, PM_CARTESIAN const &abc);

    bool operator==(const CANON_POSITION &o) const;
    bool operator!=(const CANON_POSITION &o) const;
    CANON_POSITION & operator+=(const CANON_POSITION &o);
    CANON_POSITION & operator+=(const EmcPose &o);

    const CANON_POSITION operator+(const CANON_POSITION &o) const;
    const CANON_POSITION operator+(const EmcPose &o) const;
    CANON_POSITION & operator-=(const CANON_POSITION &o);
    CANON_POSITION & operator-=(const EmcPose &o);

    const CANON_POSITION operator-(const CANON_POSITION &o) const;
    const CANON_POSITION operator-(const EmcPose &o) const;

    double &operator[](const int ind);

    const CANON_POSITION abs() const;
    const CANON_POSITION absdiff(const CANON_POSITION &o) const;
    const double max() const;

    const EmcPose toEmcPose() const;

    const PM_CARTESIAN xyz() const;
    const PM_CARTESIAN abc() const;
    const PM_CARTESIAN uvw() const;

    void set_xyz(const PM_CARTESIAN & xyz);

    void print() const;


    double x, y, z, a, b, c, u, v, w;
};
# 22 "./emc/nml_intf/canon.hh" 2
# 1 "emc/motion/emcmotcfg.h" 1
# 14 "emc/motion/emcmotcfg.h"
#define EMCMOTCFG_H 


#define DEFAULT_EMCMOT_INIFILE "emc.ini"







#define EMCMOT_MAX_JOINTS 16


#define EMCMOT_MAX_EXTRAJOINTS EMCMOT_MAX_JOINTS


#define EMCMOT_MAX_AXIS 9

#define EMCMOT_MAX_SPINDLES 8
#define EMCMOT_MAX_DIO 64
#define EMCMOT_MAX_AIO 64
#define EMCMOT_MAX_MISC_ERROR 64





#define EMCMOT_ERROR_NUM 32
#define EMCMOT_ERROR_LEN 1024





#define DEFAULT_SHMEM_KEY 100


#define DEFAULT_EMCMOT_COMM_TIMEOUT 1.0


#define DEFAULT_VELOCITY 1.0
#define DEFAULT_ACCELERATION 10.0


#define DEFAULT_MAX_LIMIT 1000
#define DEFAULT_MIN_LIMIT -1000


#define DEFAULT_DIO 4
#define DEFAULT_AIO 4
#define DEFAULT_MISC_ERROR 0




#define DEFAULT_TC_QUEUE_SIZE 2000


#define DEFAULT_MAX_FERROR 100
# 23 "./emc/nml_intf/canon.hh" 2
# 1 "emc/rs274ngc/modal_state.hh" 1
# 24 "emc/rs274ngc/modal_state.hh"
#define MODAL_STATE_HH 

# 1 "/usr/include/c++/15.1.1/bitset" 1 3
# 43 "/usr/include/c++/15.1.1/bitset" 3
#define _GLIBCXX_BITSET 1
# 54 "/usr/include/c++/15.1.1/bitset" 3
# 1 "/usr/include/c++/15.1.1/string" 1 3
# 34 "/usr/include/c++/15.1.1/string" 3
#define _GLIBCXX_STRING 1
# 43 "/usr/include/c++/15.1.1/string" 3
# 1 "/usr/include/c++/15.1.1/bits/stringfwd.h" 1 3
# 35 "/usr/include/c++/15.1.1/bits/stringfwd.h" 3
#define _STRINGFWD_H 1
# 44 "/usr/include/c++/15.1.1/bits/stringfwd.h" 3

# 44 "/usr/include/c++/15.1.1/bits/stringfwd.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{








  template<class _CharT>
    struct char_traits;

  template<> struct char_traits<char>;

  template<> struct char_traits<wchar_t>;






  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

}


  typedef basic_string<char> string;


  typedef basic_string<wchar_t> wstring;
# 91 "/usr/include/c++/15.1.1/bits/stringfwd.h" 3
  typedef basic_string<char16_t> u16string;


  typedef basic_string<char32_t> u32string;





}
# 44 "/usr/include/c++/15.1.1/string" 2 3
# 1 "/usr/include/c++/15.1.1/bits/char_traits.h" 1 3
# 35 "/usr/include/c++/15.1.1/bits/char_traits.h" 3
#define _CHAR_TRAITS_H 1
# 44 "/usr/include/c++/15.1.1/bits/char_traits.h" 3
# 1 "/usr/include/c++/15.1.1/bits/postypes.h" 1 3
# 36 "/usr/include/c++/15.1.1/bits/postypes.h" 3
#define _GLIBCXX_POSTYPES_H 1





# 1 "/usr/include/c++/15.1.1/cwchar" 1 3
# 40 "/usr/include/c++/15.1.1/cwchar" 3
#define _GLIBCXX_CWCHAR 1
# 49 "/usr/include/c++/15.1.1/cwchar" 3
# 1 "/usr/include/wchar.h" 1 3 4
# 24 "/usr/include/wchar.h" 3 4
#define _WCHAR_H 1

#define __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION 
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 31 "/usr/include/bits/libc-header-start.h" 3 4
#undef __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION





#undef __GLIBC_USE_LIB_EXT2


#define __GLIBC_USE_LIB_EXT2 1
# 67 "/usr/include/bits/libc-header-start.h" 3 4
#undef __GLIBC_USE_IEC_60559_BFP_EXT

#define __GLIBC_USE_IEC_60559_BFP_EXT 1



#undef __GLIBC_USE_IEC_60559_BFP_EXT_C23

#define __GLIBC_USE_IEC_60559_BFP_EXT_C23 1



#undef __GLIBC_USE_IEC_60559_EXT

#define __GLIBC_USE_IEC_60559_EXT 1
# 90 "/usr/include/bits/libc-header-start.h" 3 4
#undef __GLIBC_USE_IEC_60559_FUNCS_EXT

#define __GLIBC_USE_IEC_60559_FUNCS_EXT 1



#undef __GLIBC_USE_IEC_60559_FUNCS_EXT_C23

#define __GLIBC_USE_IEC_60559_FUNCS_EXT_C23 1






#undef __GLIBC_USE_IEC_60559_TYPES_EXT

#define __GLIBC_USE_IEC_60559_TYPES_EXT 1
# 28 "/usr/include/wchar.h" 2 3 4




#define __need_size_t 
#define __need_wchar_t 
#define __need_NULL 
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 1 3 4
# 173 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 252 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_size_t
# 364 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_wchar_t
# 414 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef NULL

#define NULL __null
# 425 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_NULL




#undef offsetof
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 36 "/usr/include/wchar.h" 2 3 4

#define __need___va_list 
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stdarg.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stdarg.h" 3 4
#undef __need___va_list
# 39 "/usr/include/wchar.h" 2 3 4
# 51 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/bits/wchar.h" 1 3 4
# 20 "/usr/include/bits/wchar.h" 3 4
#define _BITS_WCHAR_H 1
# 34 "/usr/include/bits/wchar.h" 3 4
#define __WCHAR_MAX __WCHAR_MAX__







#define __WCHAR_MIN __WCHAR_MIN__
# 52 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/bits/types/wint_t.h" 1 3 4

#define __wint_t_defined 1







#define _WINT_T 1
# 20 "/usr/include/bits/types/wint_t.h" 3 4
typedef unsigned int wint_t;
# 53 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/bits/types/mbstate_t.h" 1 3 4

#define __mbstate_t_defined 1



typedef __mbstate_t mbstate_t;
# 54 "/usr/include/wchar.h" 2 3 4






# 1 "/usr/include/bits/types/locale_t.h" 1 3 4
# 20 "/usr/include/bits/types/locale_t.h" 3 4
#define _BITS_TYPES_LOCALE_T_H 1

# 1 "/usr/include/bits/types/__locale_t.h" 1 3 4
# 20 "/usr/include/bits/types/__locale_t.h" 3 4
#define _BITS_TYPES___LOCALE_T_H 1






struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 61 "/usr/include/wchar.h" 2 3 4




#define __CORRECT_ISO_CPP_WCHAR_H_PROTO 




#define WCHAR_MIN __WCHAR_MIN
#define WCHAR_MAX __WCHAR_MAX



#define WEOF (0xffffffffu)
# 90 "/usr/include/wchar.h" 3 4
extern "C" {



struct tm;



extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern size_t wcslcpy (wchar_t *__restrict __dest,
         const wchar_t *__restrict __src, size_t __n)
  noexcept (true) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__write_only__, 1, 3)));



extern size_t wcslcat (wchar_t *__restrict __dest,
         const wchar_t *__restrict __src, size_t __n)
  noexcept (true) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__read_write__, 1, 3)));



extern wchar_t *wcscat (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) noexcept (true);


extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   size_t __n) noexcept (true);



extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
    locale_t __loc) noexcept (true);

extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
     size_t __n, locale_t __loc) noexcept (true);




extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) noexcept (true);



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         const wchar_t *__restrict __s2, size_t __n) noexcept (true);







extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
        locale_t __loc) noexcept (true);




extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, locale_t __loc) noexcept (true);


extern wchar_t *wcsdup (const wchar_t *__s) noexcept (true)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (__builtin_free, 1)));




extern "C++" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)
     noexcept (true) __asm ("wcschr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
     noexcept (true) __asm ("wcschr") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)
     noexcept (true) __asm ("wcsrchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
     noexcept (true) __asm ("wcsrchr") __attribute__ ((__pure__));
# 206 "/usr/include/wchar.h" 3 4
extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
     noexcept (true) __attribute__ ((__pure__));




extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
     noexcept (true) __attribute__ ((__pure__));


extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
     noexcept (true) __attribute__ ((__pure__));


extern "C++" wchar_t *wcspbrk (wchar_t *__wcs, const wchar_t *__accept)
     noexcept (true) __asm ("wcspbrk") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcspbrk (const wchar_t *__wcs,
         const wchar_t *__accept)
     noexcept (true) __asm ("wcspbrk") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsstr (wchar_t *__haystack, const wchar_t *__needle)
     noexcept (true) __asm ("wcsstr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsstr (const wchar_t *__haystack,
        const wchar_t *__needle)
     noexcept (true) __asm ("wcsstr") __attribute__ ((__pure__));






extern wchar_t *wcstok (wchar_t *__restrict __s,
   const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) noexcept (true);


extern size_t wcslen (const wchar_t *__s) noexcept (true) __attribute__ ((__pure__));




extern "C++" wchar_t *wcswcs (wchar_t *__haystack, const wchar_t *__needle)
     noexcept (true) __asm ("wcswcs") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcswcs (const wchar_t *__haystack,
        const wchar_t *__needle)
     noexcept (true) __asm ("wcswcs") __attribute__ ((__pure__));
# 265 "/usr/include/wchar.h" 3 4
extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
     noexcept (true) __attribute__ ((__pure__));





extern "C++" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)
     noexcept (true) __asm ("wmemchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wmemchr (const wchar_t *__s, wchar_t __c,
         size_t __n)
     noexcept (true) __asm ("wmemchr") __attribute__ ((__pure__));






extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n) noexcept (true);



extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
     noexcept (true);


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) noexcept (true);




extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     const wchar_t *__restrict __s2, size_t __n)
     noexcept (true);





extern wint_t btowc (int __c) noexcept (true);



extern int wctob (wint_t __c) noexcept (true);



extern int mbsinit (const mbstate_t *__ps) noexcept (true) __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         const char *__restrict __s, size_t __n,
         mbstate_t *__restrict __p) noexcept (true);


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) noexcept (true);


extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) noexcept (true);
extern size_t mbrlen (const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) noexcept (true);
# 362 "/usr/include/wchar.h" 3 4
extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) noexcept (true);



extern size_t wcsrtombs (char *__restrict __dst,
    const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) noexcept (true);





extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) noexcept (true);



extern size_t wcsnrtombs (char *__restrict __dst,
     const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) noexcept (true);






extern int wcwidth (wchar_t __c) noexcept (true);



extern int wcswidth (const wchar_t *__s, size_t __n) noexcept (true);





extern double wcstod (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) noexcept (true);



extern float wcstof (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) noexcept (true);
extern long double wcstold (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) noexcept (true);
# 422 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) noexcept (true);



extern _Float64 wcstof64 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) noexcept (true);



extern _Float128 wcstof128 (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) noexcept (true);



extern _Float32x wcstof32x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) noexcept (true);



extern _Float64x wcstof64x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) noexcept (true);
# 455 "/usr/include/wchar.h" 3 4
extern long int wcstol (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) noexcept (true);



extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     noexcept (true);




__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     noexcept (true);



__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) noexcept (true);





__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     noexcept (true);



__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) noexcept (true);






extern long int wcstol (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_wcstol")

                                   ;
extern unsigned long int wcstoul (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_wcstoul")


                                     ;
__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_wcstoll")


                                        ;
__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_wcstoull")


                                           ;

__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_wcstoll")

                                         ;
__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_wcstoull")


                                           ;
# 561 "/usr/include/wchar.h" 3 4
extern long int wcstol_l (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     locale_t __loc) noexcept (true);

extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, locale_t __loc) noexcept (true);

__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, locale_t __loc) noexcept (true);

__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, locale_t __loc)
     noexcept (true);





extern long int wcstol_l (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_wcstol_l")


                      ;
extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_wcstoul_l")



                         ;
__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_wcstoll_l")



                            ;
__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_wcstoull_l")



                               ;
# 630 "/usr/include/wchar.h" 3 4
extern double wcstod_l (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, locale_t __loc)
     noexcept (true);

extern float wcstof_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, locale_t __loc)
     noexcept (true);

extern long double wcstold_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) noexcept (true);
# 649 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) noexcept (true);



extern _Float64 wcstof64_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) noexcept (true);



extern _Float128 wcstof128_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) noexcept (true);



extern _Float32x wcstof32x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) noexcept (true);



extern _Float64x wcstof64x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) noexcept (true);
# 689 "/usr/include/wchar.h" 3 4
extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) noexcept (true);



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     noexcept (true);
# 718 "/usr/include/wchar.h" 3 4
extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) noexcept (true)
  __attribute__ ((__malloc__)) __attribute__ ((__malloc__ (fclose, 1)));





extern int fwide (__FILE *__fp, int __mode) noexcept (true);






extern int fwprintf (__FILE *__restrict __stream,
       const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       const wchar_t *__restrict __format, ...)
     noexcept (true) ;





extern int vfwprintf (__FILE *__restrict __s,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     noexcept (true) ;






extern int fwscanf (__FILE *__restrict __stream,
      const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (const wchar_t *__restrict __s,
      const wchar_t *__restrict __format, ...)
     noexcept (true) ;
# 795 "/usr/include/wchar.h" 3 4
extern int fwscanf (__FILE *__restrict __stream, const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc23_fwscanf")


                                                          ;
extern int wscanf (const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc23_wscanf")

                                                          ;
extern int swscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, ...) noexcept (true) __asm__ ("" "__isoc23_swscanf")


                                                          ;
# 851 "/usr/include/wchar.h" 3 4
extern int vfwscanf (__FILE *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (const wchar_t *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     noexcept (true) ;
# 875 "/usr/include/wchar.h" 3 4
extern int vfwscanf (__FILE *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc23_vfwscanf")


                                                          ;
extern int vwscanf (const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc23_vwscanf")

                                                          ;
extern int vswscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) noexcept (true) __asm__ ("" "__isoc23_vswscanf")


                                                          ;
# 935 "/usr/include/wchar.h" 3 4
extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);
# 990 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 1016 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 1026 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);






extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   const wchar_t *__restrict __format,
   const struct tm *__restrict __tp) noexcept (true);




extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     const wchar_t *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) noexcept (true);





# 1 "/usr/include/bits/wchar2-decl.h" 1 3 4
# 20 "/usr/include/bits/wchar2-decl.h" 3 4
#define _BITS_WCHAR2_DECL_H 1






extern wchar_t *__wmemcpy_chk (wchar_t *__restrict __s1,
          const wchar_t *__restrict __s2, size_t __n,
          size_t __ns1) noexcept (true);
extern wchar_t *__wmemcpy_alias (wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n) noexcept (true) __asm__ ("" "wmemcpy")


            ;
extern wchar_t *__wmemcpy_chk_warn (wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n, size_t __ns1) noexcept (true) __asm__ ("" "__wmemcpy_chk")



     __attribute__((__warning__ ("wmemcpy called with length bigger than size of destination " "buffer")))
            ;

extern wchar_t *__wmemmove_chk (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, size_t __ns1) noexcept (true);
extern wchar_t *__wmemmove_alias (wchar_t *__s1, const wchar_t *__s2, size_t __n) noexcept (true) __asm__ ("" "wmemmove")

                               ;
extern wchar_t *__wmemmove_chk_warn (wchar_t *__s1, const wchar_t *__s2, size_t __n, size_t __ns1) noexcept (true) __asm__ ("" "__wmemmove_chk")


     __attribute__((__warning__ ("wmemmove called with length bigger than size of destination " "buffer")))
            ;




extern wchar_t *__wmempcpy_chk (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n,
    size_t __ns1) noexcept (true);
extern wchar_t *__wmempcpy_alias (wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n) noexcept (true) __asm__ ("" "wmempcpy")


                           ;
extern wchar_t *__wmempcpy_chk_warn (wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n, size_t __ns1) noexcept (true) __asm__ ("" "__wmempcpy_chk")



     __attribute__((__warning__ ("wmempcpy called with length bigger than size of destination " "buffer")))
            ;




extern wchar_t *__wmemset_chk (wchar_t *__s, wchar_t __c, size_t __n,
          size_t __ns) noexcept (true);
extern wchar_t *__wmemset_alias (wchar_t *__s, wchar_t __c, size_t __n) noexcept (true) __asm__ ("" "wmemset")
                              ;
extern wchar_t *__wmemset_chk_warn (wchar_t *__s, wchar_t __c, size_t __n, size_t __ns) noexcept (true) __asm__ ("" "__wmemset_chk")


     __attribute__((__warning__ ("wmemset called with length bigger than size of destination " "buffer")))
            ;

extern wchar_t *__wcscpy_chk (wchar_t *__restrict __dest,
         const wchar_t *__restrict __src,
         size_t __n) noexcept (true);
extern wchar_t *__wcscpy_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src) noexcept (true) __asm__ ("" "wcscpy")

                                              ;

extern wchar_t *__wcpcpy_chk (wchar_t *__restrict __dest,
         const wchar_t *__restrict __src,
         size_t __destlen) noexcept (true);
extern wchar_t *__wcpcpy_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src) noexcept (true) __asm__ ("" "wcpcpy")

                                              ;

extern wchar_t *__wcsncpy_chk (wchar_t *__restrict __dest,
          const wchar_t *__restrict __src, size_t __n,
          size_t __destlen) noexcept (true);
extern wchar_t *__wcsncpy_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n) noexcept (true) __asm__ ("" "wcsncpy")


                          ;
extern wchar_t *__wcsncpy_chk_warn (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n, size_t __destlen) noexcept (true) __asm__ ("" "__wcsncpy_chk")



     __attribute__((__warning__ ("wcsncpy called with length bigger than size of destination " "buffer")))
            ;

extern wchar_t *__wcpncpy_chk (wchar_t *__restrict __dest,
          const wchar_t *__restrict __src, size_t __n,
          size_t __destlen) noexcept (true);

extern wchar_t *__wcpncpy_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n) noexcept (true) __asm__ ("" "wcpncpy")


                          ;
extern wchar_t *__wcpncpy_chk_warn (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n, size_t __destlen) noexcept (true) __asm__ ("" "__wcpncpy_chk")



     __attribute__((__warning__ ("wcpncpy called with length bigger than size of destination " "buffer")))
            ;

extern wchar_t *__wcscat_chk (wchar_t *__restrict __dest,
         const wchar_t *__restrict __src,
         size_t __destlen) noexcept (true);
extern wchar_t *__wcscat_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src) noexcept (true) __asm__ ("" "wcscat")

                                              ;

extern wchar_t *__wcsncat_chk (wchar_t *__restrict __dest,
          const wchar_t *__restrict __src,
          size_t __n, size_t __destlen) noexcept (true);
extern wchar_t *__wcsncat_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n) noexcept (true) __asm__ ("" "wcsncat")


                          ;

extern int __swprintf_chk (wchar_t *__restrict __s, size_t __n,
      int __flag, size_t __s_len,
      const wchar_t *__restrict __format, ...)
     noexcept (true) ;
extern int __swprintf_alias (wchar_t *__restrict __s, size_t __n, const wchar_t *__restrict __fmt, ...) noexcept (true) __asm__ ("" "swprintf")


             ;

extern int __vswprintf_chk (wchar_t *__restrict __s, size_t __n,
       int __flag, size_t __s_len,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     noexcept (true) ;
extern int __vswprintf_alias (wchar_t *__restrict __s, size_t __n, const wchar_t *__restrict __fmt, __gnuc_va_list __ap) noexcept (true) __asm__ ("" "vswprintf")


                                     ;




extern int __fwprintf_chk (__FILE *__restrict __stream, int __flag,
      const wchar_t *__restrict __format, ...);
extern int __wprintf_chk (int __flag, const wchar_t *__restrict __format,
     ...);
extern int __vfwprintf_chk (__FILE *__restrict __stream, int __flag,
       const wchar_t *__restrict __format,
       __gnuc_va_list __ap);
extern int __vwprintf_chk (int __flag, const wchar_t *__restrict __format,
      __gnuc_va_list __ap);



extern wchar_t *__fgetws_chk (wchar_t *__restrict __s, size_t __size, int __n,
         __FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern wchar_t *__fgetws_alias (wchar_t *__restrict __s, int __n, __FILE *__restrict __stream) __asm__ ("" "fgetws")

                                              __attribute__ ((__warn_unused_result__));
extern wchar_t *__fgetws_chk_warn (wchar_t *__restrict __s, size_t __size, int __n, __FILE *__restrict __stream) __asm__ ("" "__fgetws_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgetws called with bigger size than length " "of destination buffer")))
                                 ;



extern wchar_t *__fgetws_unlocked_chk (wchar_t *__restrict __s, size_t __size,
           int __n, __FILE *__restrict __stream)
       __attribute__ ((__warn_unused_result__));
extern wchar_t *__fgetws_unlocked_alias (wchar_t *__restrict __s, int __n, __FILE *__restrict __stream) __asm__ ("" "fgetws_unlocked")


  __attribute__ ((__warn_unused_result__));
extern wchar_t *__fgetws_unlocked_chk_warn (wchar_t *__restrict __s, size_t __size, int __n, __FILE *__restrict __stream) __asm__ ("" "__fgetws_unlocked_chk")



     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgetws_unlocked called with bigger size than length " "of destination buffer")))
                                 ;



extern size_t __wcrtomb_chk (char *__restrict __s, wchar_t __wchar,
        mbstate_t *__restrict __p,
        size_t __buflen) noexcept (true) __attribute__ ((__warn_unused_result__));
extern size_t __wcrtomb_alias (char *__restrict __s, wchar_t __wchar, mbstate_t *__restrict __ps) noexcept (true) __asm__ ("" "wcrtomb")

                                                __attribute__ ((__warn_unused_result__));

extern size_t __mbsrtowcs_chk (wchar_t *__restrict __dst,
          const char **__restrict __src,
          size_t __len, mbstate_t *__restrict __ps,
          size_t __dstlen) noexcept (true);
extern size_t __mbsrtowcs_alias (wchar_t *__restrict __dst, const char **__restrict __src, size_t __len, mbstate_t *__restrict __ps) noexcept (true) __asm__ ("" "mbsrtowcs")



                   ;
extern size_t __mbsrtowcs_chk_warn (wchar_t *__restrict __dst, const char **__restrict __src, size_t __len, mbstate_t *__restrict __ps, size_t __dstlen) noexcept (true) __asm__ ("" "__mbsrtowcs_chk")




     __attribute__((__warning__ ("mbsrtowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;

extern size_t __wcsrtombs_chk (char *__restrict __dst,
          const wchar_t **__restrict __src,
          size_t __len, mbstate_t *__restrict __ps,
          size_t __dstlen) noexcept (true);
extern size_t __wcsrtombs_alias (char *__restrict __dst, const wchar_t **__restrict __src, size_t __len, mbstate_t *__restrict __ps) noexcept (true) __asm__ ("" "wcsrtombs")



                   ;
extern size_t __wcsrtombs_chk_warn (char *__restrict __dst, const wchar_t **__restrict __src, size_t __len, mbstate_t *__restrict __ps, size_t __dstlen) noexcept (true) __asm__ ("" "__wcsrtombs_chk")




    __attribute__((__warning__ ("wcsrtombs called with dst buffer smaller than len")));



extern size_t __mbsnrtowcs_chk (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __nmc,
    size_t __len, mbstate_t *__restrict __ps,
    size_t __dstlen) noexcept (true);
extern size_t __mbsnrtowcs_alias (wchar_t *__restrict __dst, const char **__restrict __src, size_t __nmc, size_t __len, mbstate_t *__restrict __ps) noexcept (true) __asm__ ("" "mbsnrtowcs")



                    ;
extern size_t __mbsnrtowcs_chk_warn (wchar_t *__restrict __dst, const char **__restrict __src, size_t __nmc, size_t __len, mbstate_t *__restrict __ps, size_t __dstlen) noexcept (true) __asm__ ("" "__mbsnrtowcs_chk")




     __attribute__((__warning__ ("mbsnrtowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;

extern size_t __wcsnrtombs_chk (char *__restrict __dst,
    const wchar_t **__restrict __src,
    size_t __nwc, size_t __len,
    mbstate_t *__restrict __ps, size_t __dstlen)
       noexcept (true);
extern size_t __wcsnrtombs_alias (char *__restrict __dst, const wchar_t **__restrict __src, size_t __nwc, size_t __len, mbstate_t *__restrict __ps) noexcept (true) __asm__ ("" "wcsnrtombs")



                                                  ;
extern size_t __wcsnrtombs_chk_warn (char *__restrict __dst, const wchar_t **__restrict __src, size_t __nwc, size_t __len, mbstate_t *__restrict __ps, size_t __dstlen) noexcept (true) __asm__ ("" "__wcsnrtombs_chk")





     __attribute__((__warning__ ("wcsnrtombs called with dst buffer smaller than len")));




extern size_t __wcslcpy_chk (wchar_t *__dest, const wchar_t *__src, size_t __n,
        size_t __destlen) noexcept (true);
extern size_t __wcslcpy_alias (wchar_t *__dest, const wchar_t *__src, size_t __n) noexcept (true) __asm__ ("" "wcslcpy")

                               ;

extern size_t __wcslcat_chk (wchar_t *__dest, const wchar_t *__src, size_t __n,
        size_t __destlen) noexcept (true);
extern size_t __wcslcat_alias (wchar_t *__dest, const wchar_t *__src, size_t __n) noexcept (true) __asm__ ("" "wcslcat")

                               ;
# 1060 "/usr/include/wchar.h" 2 3 4
# 1070 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/bits/wchar2.h" 1 3 4
# 23 "/usr/include/bits/wchar2.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wmemcpy (wchar_t * __restrict __s1, const wchar_t *__restrict __s2, size_t __n) noexcept (true)

    


{
  return (((__builtin_constant_p (__builtin_object_size (__s1, 0)) && (__builtin_object_size (__s1, 0)) == (long unsigned int) -1) || (((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= ((__builtin_object_size (__s1, 0))) / ((sizeof (wchar_t))))) && (((long unsigned int) (__n)) <= ((__builtin_object_size (__s1, 0))) / ((sizeof (wchar_t)))))) ? __wmemcpy_alias (__s1, __s2, __n) : ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))) && !(((long unsigned int) (__n)) <= (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))) ? __wmemcpy_chk_warn (__s1, __s2, __n, (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t))) : __wmemcpy_chk (__s1, __s2, __n, (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))))

                       ;
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wmemmove (wchar_t * __s1, const wchar_t *__s2, size_t __n) noexcept (true)

    


{
  return (((__builtin_constant_p (__builtin_object_size (__s1, 0)) && (__builtin_object_size (__s1, 0)) == (long unsigned int) -1) || (((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= ((__builtin_object_size (__s1, 0))) / ((sizeof (wchar_t))))) && (((long unsigned int) (__n)) <= ((__builtin_object_size (__s1, 0))) / ((sizeof (wchar_t)))))) ? __wmemmove_alias (__s1, __s2, __n) : ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))) && !(((long unsigned int) (__n)) <= (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))) ? __wmemmove_chk_warn (__s1, __s2, __n, (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t))) : __wmemmove_chk (__s1, __s2, __n, (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))))

                       ;
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wmempcpy (wchar_t * __restrict __s1, const wchar_t *__restrict __s2, size_t __n) noexcept (true)

    


{
  return (((__builtin_constant_p (__builtin_object_size (__s1, 0)) && (__builtin_object_size (__s1, 0)) == (long unsigned int) -1) || (((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= ((__builtin_object_size (__s1, 0))) / ((sizeof (wchar_t))))) && (((long unsigned int) (__n)) <= ((__builtin_object_size (__s1, 0))) / ((sizeof (wchar_t)))))) ? __wmempcpy_alias (__s1, __s2, __n) : ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))) && !(((long unsigned int) (__n)) <= (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))) ? __wmempcpy_chk_warn (__s1, __s2, __n, (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t))) : __wmempcpy_chk (__s1, __s2, __n, (__builtin_object_size (__s1, 0)) / (sizeof (wchar_t)))))

                       ;
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wmemset (wchar_t * __s, wchar_t __c, size_t __n) noexcept (true)

    


{
  return (((__builtin_constant_p (__builtin_object_size (__s, 0)) && (__builtin_object_size (__s, 0)) == (long unsigned int) -1) || (((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= ((__builtin_object_size (__s, 0))) / ((sizeof (wchar_t))))) && (((long unsigned int) (__n)) <= ((__builtin_object_size (__s, 0))) / ((sizeof (wchar_t)))))) ? __wmemset_alias (__s, __c, __n) : ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__builtin_object_size (__s, 0)) / (sizeof (wchar_t)))) && !(((long unsigned int) (__n)) <= (__builtin_object_size (__s, 0)) / (sizeof (wchar_t)))) ? __wmemset_chk_warn (__s, __c, __n, (__builtin_object_size (__s, 0)) / (sizeof (wchar_t))) : __wmemset_chk (__s, __c, __n, (__builtin_object_size (__s, 0)) / (sizeof (wchar_t)))))

                     ;
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wcscpy (wchar_t * __restrict __dest, const wchar_t *__restrict __src) noexcept (true)

{
  size_t __sz = __builtin_object_size (__dest, 2 > 1);
  if (__sz != (size_t) -1)
    return __wcscpy_chk (__dest, __src, __sz / sizeof (wchar_t));
  return __wcscpy_alias (__dest, __src);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wcpcpy (wchar_t * __restrict __dest, const wchar_t *__restrict __src) noexcept (true)

{
  size_t __sz = __builtin_object_size (__dest, 2 > 1);
  if (__sz != (size_t) -1)
    return __wcpcpy_chk (__dest, __src, __sz / sizeof (wchar_t));
  return __wcpcpy_alias (__dest, __src);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wcsncpy (wchar_t * __restrict __dest, const wchar_t *__restrict __src, size_t __n) noexcept (true)

    


{
  return (((__builtin_constant_p (__builtin_object_size (__dest, 2 > 1)) && (__builtin_object_size (__dest, 2 > 1)) == (long unsigned int) -1) || (((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= ((__builtin_object_size (__dest, 2 > 1))) / ((sizeof (wchar_t))))) && (((long unsigned int) (__n)) <= ((__builtin_object_size (__dest, 2 > 1))) / ((sizeof (wchar_t)))))) ? __wcsncpy_alias (__dest, __src, __n) : ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__builtin_object_size (__dest, 2 > 1)) / (sizeof (wchar_t)))) && !(((long unsigned int) (__n)) <= (__builtin_object_size (__dest, 2 > 1)) / (sizeof (wchar_t)))) ? __wcsncpy_chk_warn (__dest, __src, __n, (__builtin_object_size (__dest, 2 > 1)) / (sizeof (wchar_t))) : __wcsncpy_chk (__dest, __src, __n, (__builtin_object_size (__dest, 2 > 1)) / (sizeof (wchar_t)))))

                          ;
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wcpncpy (wchar_t * __restrict __dest, const wchar_t *__restrict __src, size_t __n) noexcept (true)

    


{
  return (((__builtin_constant_p (__builtin_object_size (__dest, 2 > 1)) && (__builtin_object_size (__dest, 2 > 1)) == (long unsigned int) -1) || (((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= ((__builtin_object_size (__dest, 2 > 1))) / ((sizeof (wchar_t))))) && (((long unsigned int) (__n)) <= ((__builtin_object_size (__dest, 2 > 1))) / ((sizeof (wchar_t)))))) ? __wcpncpy_alias (__dest, __src, __n) : ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__builtin_object_size (__dest, 2 > 1)) / (sizeof (wchar_t)))) && !(((long unsigned int) (__n)) <= (__builtin_object_size (__dest, 2 > 1)) / (sizeof (wchar_t)))) ? __wcpncpy_chk_warn (__dest, __src, __n, (__builtin_object_size (__dest, 2 > 1)) / (sizeof (wchar_t))) : __wcpncpy_chk (__dest, __src, __n, (__builtin_object_size (__dest, 2 > 1)) / (sizeof (wchar_t)))))

                          ;
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wcscat (wchar_t * __restrict __dest, const wchar_t *__restrict __src) noexcept (true)

{
  size_t __sz = __builtin_object_size (__dest, 2 > 1);
  if (__sz != (size_t) -1)
    return __wcscat_chk (__dest, __src, __sz / sizeof (wchar_t));
  return __wcscat_alias (__dest, __src);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wcsncat (wchar_t * __restrict __dest, const wchar_t *__restrict __src, size_t __n) noexcept (true)

{
  size_t __sz = __builtin_object_size (__dest, 2 > 1);
  if (__sz != (size_t) -1)
    return __wcsncat_chk (__dest, __src, __n, __sz / sizeof (wchar_t));
  return __wcsncat_alias (__dest, __src, __n);
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) wcslcpy (wchar_t * __restrict __dest, const wchar_t *__restrict __src, size_t __n) noexcept (true)

    


{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1
      && (!__builtin_constant_p (__n
     > __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t))
   || __n > __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t)))
    return __wcslcpy_chk (__dest, __src, __n,
     __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t));
  return __wcslcpy_alias (__dest, __src, __n);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) wcslcat (wchar_t * __restrict __dest, const wchar_t *__restrict __src, size_t __n) noexcept (true)

{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1
      && (!__builtin_constant_p (__n > __builtin_object_size (__dest, 2 > 1)
     / sizeof (wchar_t))
   || __n > __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t)))
    return __wcslcat_chk (__dest, __src, __n,
     __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t));
  return __wcslcat_alias (__dest, __src, __n);
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) swprintf (wchar_t *__restrict __s, size_t __n, const wchar_t *__restrict __fmt, ...) noexcept (true)

{
  size_t __sz = __builtin_object_size (__s, 2 > 1);
  if (__sz != (size_t) -1 || 2 > 1)
    return __swprintf_chk (__s, __n, 2 - 1,
      __sz / sizeof (wchar_t), __fmt, __builtin_va_arg_pack ());
  return __swprintf_alias (__s, __n, __fmt, __builtin_va_arg_pack ());
}
# 205 "/usr/include/bits/wchar2.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vswprintf (wchar_t *__restrict __s, size_t __n, const wchar_t *__restrict __fmt, __gnuc_va_list __ap) noexcept (true)

{
  size_t __sz = __builtin_object_size (__s, 2 > 1);
  if (__sz != (size_t) -1 || 2 > 1)
    return __vswprintf_chk (__s, __n, 2 - 1,
       __sz / sizeof (wchar_t), __fmt, __ap);
  return __vswprintf_alias (__s, __n, __fmt, __ap);
}





extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
wprintf (const wchar_t *__restrict __fmt, ...)
{
  return __wprintf_chk (2 - 1, __fmt, __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
fwprintf (__FILE *__restrict __stream, const wchar_t *__restrict __fmt, ...)
{
  return __fwprintf_chk (__stream, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}







extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vwprintf (const wchar_t *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vwprintf_chk (2 - 1, __fmt, __ap);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vfwprintf (__FILE *__restrict __stream,
    const wchar_t *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfwprintf_chk (__stream, 2 - 1, __fmt, __ap);
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) wchar_t *
fgetws (wchar_t * __restrict __s, int __n,
 __FILE *__restrict __stream)
    


{
  size_t __sz = __builtin_object_size (__s, 2 > 1);
  if (((__builtin_constant_p (__sz) && (__sz) == (long unsigned int) -1) || (((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= ((__sz)) / ((sizeof (wchar_t))))) && (((long unsigned int) (__n)) <= ((__sz)) / ((sizeof (wchar_t)))))))
    return __fgetws_alias (__s, __n, __stream);

  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__sz) / (sizeof (wchar_t)))) && !(((long unsigned int) (__n)) <= (__sz) / (sizeof (wchar_t)))))
    return __fgetws_chk_warn (__s, __sz / sizeof (wchar_t), __n, __stream);

  return __fgetws_chk (__s, __sz / sizeof (wchar_t), __n, __stream);
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) wchar_t *
fgetws_unlocked (wchar_t * __restrict __s,
   int __n, __FILE *__restrict __stream)
    


{
  size_t __sz = __builtin_object_size (__s, 2 > 1);
  if (((__builtin_constant_p (__sz) && (__sz) == (long unsigned int) -1) || (((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= ((__sz)) / ((sizeof (wchar_t))))) && (((long unsigned int) (__n)) <= ((__sz)) / ((sizeof (wchar_t)))))))
    return __fgetws_unlocked_alias (__s, __n, __stream);

  if ((((__typeof (__n)) 0 < (__typeof (__n)) -1 || (__builtin_constant_p (__n) && (__n) > 0)) && __builtin_constant_p ((((long unsigned int) (__n)) <= (__sz) / (sizeof (wchar_t)))) && !(((long unsigned int) (__n)) <= (__sz) / (sizeof (wchar_t)))))
    return __fgetws_unlocked_chk_warn (__s, __sz / sizeof (wchar_t), __n,
           __stream);

  return __fgetws_unlocked_chk (__s, __sz / sizeof (wchar_t), __n, __stream);
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
__attribute__ ((__leaf__)) wcrtomb (char * __restrict __s, wchar_t __wchar, mbstate_t *__restrict __ps) noexcept (true)

{



#define __WCHAR_MB_LEN_MAX 16



  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1
      && 16 > __builtin_object_size (__s, 2 > 1))
    return __wcrtomb_chk (__s, __wchar, __ps, __builtin_object_size (__s, 2 > 1));
  return __wcrtomb_alias (__s, __wchar, __ps);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) mbsrtowcs (wchar_t * __restrict __dst, const char **__restrict __src, size_t __len, mbstate_t *__restrict __ps) noexcept (true)


    


{
  return (((__builtin_constant_p (__builtin_object_size (__dst, 2 > 1)) && (__builtin_object_size (__dst, 2 > 1)) == (long unsigned int) -1) || (((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= ((__builtin_object_size (__dst, 2 > 1))) / ((sizeof (wchar_t))))) && (((long unsigned int) (__len)) <= ((__builtin_object_size (__dst, 2 > 1))) / ((sizeof (wchar_t)))))) ? __mbsrtowcs_alias (__dst, __src, __len, __ps) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))) ? __mbsrtowcs_chk_warn (__dst, __src, __len, __ps, (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t))) : __mbsrtowcs_chk (__dst, __src, __len, __ps, (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))))

                                 ;
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) wcsrtombs (char * __restrict __dst, const wchar_t **__restrict __src, size_t __len, mbstate_t *__restrict __ps) noexcept (true)


    


{
  return (((__builtin_constant_p (__builtin_object_size (__dst, 2 > 1)) && (__builtin_object_size (__dst, 2 > 1)) == (long unsigned int) -1) || (((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= ((__builtin_object_size (__dst, 2 > 1))) / ((sizeof (char))))) && (((long unsigned int) (__len)) <= ((__builtin_object_size (__dst, 2 > 1))) / ((sizeof (char)))))) ? __wcsrtombs_alias (__dst, __src, __len, __ps) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (char)))) ? __wcsrtombs_chk_warn (__dst, __src, __len, __ps, __builtin_object_size (__dst, 2 > 1)) : __wcsrtombs_chk (__dst, __src, __len, __ps, __builtin_object_size (__dst, 2 > 1))))

                               ;
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) mbsnrtowcs (wchar_t * __restrict __dst, const char **__restrict __src, size_t __nmc, size_t __len, mbstate_t *__restrict __ps) noexcept (true)


    


{
  return (((__builtin_constant_p (__builtin_object_size (__dst, 2 > 1)) && (__builtin_object_size (__dst, 2 > 1)) == (long unsigned int) -1) || (((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= ((__builtin_object_size (__dst, 2 > 1))) / ((sizeof (wchar_t))))) && (((long unsigned int) (__len)) <= ((__builtin_object_size (__dst, 2 > 1))) / ((sizeof (wchar_t)))))) ? __mbsnrtowcs_alias (__dst, __src, __nmc, __len, __ps) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))) ? __mbsnrtowcs_chk_warn (__dst, __src, __nmc, __len, __ps, (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t))) : __mbsnrtowcs_chk (__dst, __src, __nmc, __len, __ps, (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))))

                                        ;
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) wcsnrtombs (char * __restrict __dst, const wchar_t **__restrict __src, size_t __nwc, size_t __len, mbstate_t *__restrict __ps) noexcept (true)


    


{
  return (((__builtin_constant_p (__builtin_object_size (__dst, 2 > 1)) && (__builtin_object_size (__dst, 2 > 1)) == (long unsigned int) -1) || (((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= ((__builtin_object_size (__dst, 2 > 1))) / ((sizeof (char))))) && (((long unsigned int) (__len)) <= ((__builtin_object_size (__dst, 2 > 1))) / ((sizeof (char)))))) ? __wcsnrtombs_alias (__dst, __src, __nwc, __len, __ps) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (char)))) ? __wcsnrtombs_chk_warn (__dst, __src, __nwc, __len, __ps, __builtin_object_size (__dst, 2 > 1)) : __wcsnrtombs_chk (__dst, __src, __nwc, __len, __ps, __builtin_object_size (__dst, 2 > 1))))

                                      ;
}
# 1071 "/usr/include/wchar.h" 2 3 4


}
# 50 "/usr/include/c++/15.1.1/cwchar" 2 3
# 64 "/usr/include/c++/15.1.1/cwchar" 3
namespace std
{
  using ::mbstate_t;
}


#undef btowc
#undef fgetwc
#undef fgetws
#undef fputwc
#undef fputws
#undef fwide
#undef fwprintf
#undef fwscanf
#undef getwc
#undef getwchar
#undef mbrlen
#undef mbrtowc
#undef mbsinit
#undef mbsrtowcs
#undef putwc
#undef putwchar
#undef swprintf
#undef swscanf
#undef ungetwc
#undef vfwprintf

#undef vfwscanf

#undef vswprintf

#undef vswscanf

#undef vwprintf

#undef vwscanf

#undef wcrtomb
#undef wcscat
#undef wcschr
#undef wcscmp
#undef wcscoll
#undef wcscpy
#undef wcscspn
#undef wcsftime
#undef wcslen
#undef wcsncat
#undef wcsncmp
#undef wcsncpy
#undef wcspbrk
#undef wcsrchr
#undef wcsrtombs
#undef wcsspn
#undef wcsstr
#undef wcstod

#undef wcstof

#undef wcstok
#undef wcstol
#undef wcstoul
#undef wcsxfrm
#undef wctob
#undef wmemchr
#undef wmemcmp
#undef wmemcpy
#undef wmemmove
#undef wmemset
#undef wprintf
#undef wscanf



extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;
# 236 "/usr/include/c++/15.1.1/cwchar" 3

}
}



#undef wcstold
#undef wcstoll
#undef wcstoull

namespace __gnu_cxx
{





  using ::wcstold;
# 262 "/usr/include/c++/15.1.1/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 282 "/usr/include/c++/15.1.1/cwchar" 3
namespace std
{

  using std::wcstof;


  using std::vfwscanf;


  using std::vswscanf;


  using std::vwscanf;



  using std::wcstold;
  using std::wcstoll;
  using std::wcstoull;

}
# 43 "/usr/include/c++/15.1.1/bits/postypes.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 55 "/usr/include/c++/15.1.1/bits/postypes.h" 3
 
# 55 "/usr/include/c++/15.1.1/bits/postypes.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
# 66 "/usr/include/c++/15.1.1/bits/postypes.h" 3
  typedef long int streamoff;



#pragma GCC diagnostic pop


  typedef ptrdiff_t streamsize;
# 86 "/usr/include/c++/15.1.1/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 108 "/usr/include/c++/15.1.1/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      fpos(const fpos&) = default;
      fpos& operator=(const fpos&) = default;
      ~fpos() = default;



      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;
# 220 "/usr/include/c++/15.1.1/bits/postypes.h" 3
  typedef fpos<mbstate_t> u16streampos;

  typedef fpos<mbstate_t> u32streampos;



}
# 45 "/usr/include/c++/15.1.1/bits/char_traits.h" 2 3
# 66 "/usr/include/c++/15.1.1/bits/char_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


 
# 70 "/usr/include/c++/15.1.1/bits/char_traits.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstringop-overflow"
#pragma GCC diagnostic ignored "-Wstringop-overread"
#pragma GCC diagnostic ignored "-Warray-bounds"
# 85 "/usr/include/c++/15.1.1/bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;

      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;

    };
# 112 "/usr/include/c++/15.1.1/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;

      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;





      static constexpr void
      assign(char_type& __c1, const char_type& __c2)
      {





 __c1 = __c2;
      }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static constexpr int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static constexpr std::size_t
      length(const char_type* __s);

      static constexpr const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }


      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }

    };

  template<typename _CharT>
    constexpr int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    constexpr std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    constexpr const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
   
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      if (__n == 0)
 return __s1;
# 248 "/usr/include/c++/15.1.1/bits/char_traits.h" 3
      __builtin_memmove(__s1, __s2, __n * sizeof(char_type));
      return __s1;
    }

  template<typename _CharT>
   
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      if (__n == 0)
 return __s1;
# 268 "/usr/include/c++/15.1.1/bits/char_traits.h" 3
      __builtin_memcpy(__s1, __s2, __n * sizeof(char_type));
      return __s1;
    }

  template<typename _CharT>
   
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {
# 287 "/usr/include/c++/15.1.1/bits/char_traits.h" 3
      if constexpr (sizeof(_CharT) == 1 && __is_trivial(_CharT))
 {
   if (__n)
     {
       unsigned char __c;
       __builtin_memcpy(&__c, __builtin_addressof(__a), 1);
       __builtin_memset(__s, __c, __n);
     }
 }
      else
 {
   for (std::size_t __i = 0; __i < __n; ++__i)
     __s[__i] = __a;
 }
      return __s;
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{

# 324 "/usr/include/c++/15.1.1/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;

      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;





      static constexpr void
      assign(char_type& __c1, const char_type& __c2) noexcept
      {





 __c1 = __c2;
      }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      {

 return (static_cast<unsigned char>(__c1)
  < static_cast<unsigned char>(__c2));
      }

      static constexpr int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return 0;

 if (std::__is_constant_evaluated())
   {
     for (size_t __i = 0; __i < __n; ++__i)
       if (lt(__s1[__i], __s2[__i]))
  return -1;
       else if (lt(__s2[__i], __s1[__i]))
  return 1;
     return 0;
   }

 return __builtin_memcmp(__s1, __s2, __n);
      }

      static constexpr size_t
      length(const char_type* __s)
      {

 if (std::__is_constant_evaluated())
   return __gnu_cxx::char_traits<char_type>::length(__s);

 return __builtin_strlen(__s);
      }

      static constexpr const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 if (__n == 0)
   return 0;

 if (std::__is_constant_evaluated())
   return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);

 return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;




 return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return static_cast<char_type>(__c); }



      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }


      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return (__c == eof()) ? 0 : __c; }

  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;

      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;





      static constexpr void
      assign(char_type& __c1, const char_type& __c2) noexcept
      {





 __c1 = __c2;
      }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static constexpr int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return 0;

 if (std::__is_constant_evaluated())
   return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);

 return wmemcmp(__s1, __s2, __n);
      }

      static constexpr size_t
      length(const char_type* __s)
      {

 if (std::__is_constant_evaluated())
   return __gnu_cxx::char_traits<char_type>::length(__s);

 return wcslen(__s);
      }

      static constexpr const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 if (__n == 0)
   return 0;

 if (std::__is_constant_evaluated())
   return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);

 return wmemchr(__s, __a, __n);
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return wmemmove(__s1, __s2, __n);
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return wmemcpy(__s1, __s2, __n);
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;




 return wmemset(__s, __a, __n);
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }


      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>((0xffffffffu)); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }

  };
# 731 "/usr/include/c++/15.1.1/bits/char_traits.h" 3

}



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<>
    struct char_traits<char16_t>
    {
      typedef char16_t char_type;

      typedef short unsigned int int_type;




      typedef streamoff off_type;
      typedef u16streampos pos_type;
      typedef mbstate_t state_type;





      static constexpr void
      assign(char_type& __c1, const char_type& __c2) noexcept
      {





 __c1 = __c2;
      }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static constexpr int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static constexpr size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static constexpr const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }


      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return __c == eof() ? int_type(0xfffd) : int_type(__c); }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }





    };

  template<>
    struct char_traits<char32_t>
    {
      typedef char32_t char_type;

      typedef unsigned int int_type;




      typedef streamoff off_type;
      typedef u32streampos pos_type;
      typedef mbstate_t state_type;





      static constexpr void
      assign(char_type& __c1, const char_type& __c2) noexcept
      {





 __c1 = __c2;
      }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static constexpr int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static constexpr size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static constexpr const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;




 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }


      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }

    };
# 1009 "/usr/include/c++/15.1.1/bits/char_traits.h" 3
#pragma GCC diagnostic pop


}
# 45 "/usr/include/c++/15.1.1/string" 2 3


# 1 "/usr/include/c++/15.1.1/bits/localefwd.h" 1 3
# 35 "/usr/include/c++/15.1.1/bits/localefwd.h" 3
#define _LOCALE_FWD_H 1






# 1 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++locale.h" 1 3
# 37 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++locale.h" 3
#define _GLIBCXX_CXX_LOCALE_H 1

       
# 40 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++locale.h" 3

# 1 "/usr/include/c++/15.1.1/clocale" 1 3
# 40 "/usr/include/c++/15.1.1/clocale" 3
#define _GLIBCXX_CLOCALE 1






# 1 "/usr/include/locale.h" 1 3 4
# 23 "/usr/include/locale.h" 3 4
#define _LOCALE_H 1



#define __need_NULL 
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 1 3 4
# 173 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 252 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_size_t
# 364 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_wchar_t
# 414 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef NULL

#define NULL __null
# 425 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_NULL




#undef offsetof
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 29 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/bits/locale.h" 1 3 4
# 24 "/usr/include/bits/locale.h" 3 4
#define _BITS_LOCALE_H 1

#define __LC_CTYPE 0
#define __LC_NUMERIC 1
#define __LC_TIME 2
#define __LC_COLLATE 3
#define __LC_MONETARY 4
#define __LC_MESSAGES 5
#define __LC_ALL 6
#define __LC_PAPER 7
#define __LC_NAME 8
#define __LC_ADDRESS 9
#define __LC_TELEPHONE 10
#define __LC_MEASUREMENT 11
#define __LC_IDENTIFICATION 12
# 30 "/usr/include/locale.h" 2 3 4

extern "C" {



#define LC_CTYPE __LC_CTYPE
#define LC_NUMERIC __LC_NUMERIC
#define LC_TIME __LC_TIME
#define LC_COLLATE __LC_COLLATE
#define LC_MONETARY __LC_MONETARY
#define LC_MESSAGES __LC_MESSAGES
#define LC_ALL __LC_ALL
#define LC_PAPER __LC_PAPER
#define LC_NAME __LC_NAME
#define LC_ADDRESS __LC_ADDRESS
#define LC_TELEPHONE __LC_TELEPHONE
#define LC_MEASUREMENT __LC_MEASUREMENT
#define LC_IDENTIFICATION __LC_IDENTIFICATION



struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 118 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) noexcept (true);


extern struct lconv *localeconv (void) noexcept (true);
# 141 "/usr/include/locale.h" 3 4
extern locale_t newlocale (int __category_mask, const char *__locale,
      locale_t __base) noexcept (true);





#define LC_CTYPE_MASK (1 << __LC_CTYPE)
#define LC_NUMERIC_MASK (1 << __LC_NUMERIC)
#define LC_TIME_MASK (1 << __LC_TIME)
#define LC_COLLATE_MASK (1 << __LC_COLLATE)
#define LC_MONETARY_MASK (1 << __LC_MONETARY)
#define LC_MESSAGES_MASK (1 << __LC_MESSAGES)
#define LC_PAPER_MASK (1 << __LC_PAPER)
#define LC_NAME_MASK (1 << __LC_NAME)
#define LC_ADDRESS_MASK (1 << __LC_ADDRESS)
#define LC_TELEPHONE_MASK (1 << __LC_TELEPHONE)
#define LC_MEASUREMENT_MASK (1 << __LC_MEASUREMENT)
#define LC_IDENTIFICATION_MASK (1 << __LC_IDENTIFICATION)
#define LC_ALL_MASK (LC_CTYPE_MASK | LC_NUMERIC_MASK | LC_TIME_MASK | LC_COLLATE_MASK | LC_MONETARY_MASK | LC_MESSAGES_MASK | LC_PAPER_MASK | LC_NAME_MASK | LC_ADDRESS_MASK | LC_TELEPHONE_MASK | LC_MEASUREMENT_MASK | LC_IDENTIFICATION_MASK )
# 176 "/usr/include/locale.h" 3 4
extern locale_t duplocale (locale_t __dataset) noexcept (true);



extern void freelocale (locale_t __dataset) noexcept (true);






extern locale_t uselocale (locale_t __dataset) noexcept (true);



#define LC_GLOBAL_LOCALE ((locale_t) -1L)



}
# 48 "/usr/include/c++/15.1.1/clocale" 2 3


#undef setlocale
#undef localeconv

namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 42 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++locale.h" 2 3

#define _GLIBCXX_C_LOCALE_GNU 1

#define _GLIBCXX_NUM_CATEGORIES 6


namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  extern "C" __typeof(uselocale) __uselocale;


}


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __locale_t __c_locale;
# 73 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++locale.h" 3
  inline int
  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),
     char* __out,
     const int __size __attribute__ ((__unused__)),
     const char* __fmt, ...)
  {

    __c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 93 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++locale.h" 3
    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);


    __gnu_cxx::__uselocale(__old);







    return __ret;
  }







}
# 43 "/usr/include/c++/15.1.1/bits/localefwd.h" 2 3
# 1 "/usr/include/c++/15.1.1/iosfwd" 1 3
# 34 "/usr/include/c++/15.1.1/iosfwd" 3
#define _GLIBCXX_IOSFWD 1
# 46 "/usr/include/c++/15.1.1/iosfwd" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 78 "/usr/include/c++/15.1.1/iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

}

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;
# 257 "/usr/include/c++/15.1.1/iosfwd" 3

}
# 44 "/usr/include/c++/15.1.1/bits/localefwd.h" 2 3
# 1 "/usr/include/c++/15.1.1/cctype" 1 3
# 40 "/usr/include/c++/15.1.1/cctype" 3
#define _GLIBCXX_CCTYPE 1






# 1 "/usr/include/ctype.h" 1 3 4
# 23 "/usr/include/ctype.h" 3 4
#define _CTYPE_H 1




extern "C" {
# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 20 "/usr/include/bits/endian.h" 3 4
#define _BITS_ENDIAN_H 1
# 30 "/usr/include/bits/endian.h" 3 4
#define __LITTLE_ENDIAN 1234
#define __BIG_ENDIAN 4321
#define __PDP_ENDIAN 3412


# 1 "/usr/include/bits/endianness.h" 1 3 4

#define _BITS_ENDIANNESS_H 1






#define __BYTE_ORDER __LITTLE_ENDIAN
# 36 "/usr/include/bits/endian.h" 2 3 4




#define __FLOAT_WORD_ORDER __BYTE_ORDER



#define __LONG_LONG_PAIR(HI,LO) LO, HI
# 40 "/usr/include/ctype.h" 2 3 4



#define _ISbit(bit) ((bit) < 8 ? ((1 << (bit)) << 8) : ((1 << (bit)) >> 8))


enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     noexcept (true) __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     noexcept (true) __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     noexcept (true) __attribute__ ((__const__));
# 99 "/usr/include/ctype.h" 3 4
#define __isascii(c) (((c) & ~0x7f) == 0)
#define __toascii(c) ((c) & 0x7f)

#define __exctype(name) extern int name (int) __THROW





extern int isalnum (int) noexcept (true);
extern int isalpha (int) noexcept (true);
extern int iscntrl (int) noexcept (true);
extern int isdigit (int) noexcept (true);
extern int islower (int) noexcept (true);
extern int isgraph (int) noexcept (true);
extern int isprint (int) noexcept (true);
extern int ispunct (int) noexcept (true);
extern int isspace (int) noexcept (true);
extern int isupper (int) noexcept (true);
extern int isxdigit (int) noexcept (true);



extern int tolower (int __c) noexcept (true);


extern int toupper (int __c) noexcept (true);




extern int isblank (int) noexcept (true);




extern int isctype (int __c, int __mask) noexcept (true);






extern int isascii (int __c) noexcept (true);



extern int toascii (int __c) noexcept (true);



extern int _toupper (int) noexcept (true);
extern int _tolower (int) noexcept (true);



#define __tobody(c,f,a,args) (__extension__ ({ int __res; if (sizeof (c) > 1) { if (__builtin_constant_p (c)) { int __c = (c); __res = __c < -128 || __c > 255 ? __c : (a)[__c]; } else __res = f args; } else __res = (a)[(int) (c)]; __res; }))
# 241 "/usr/include/ctype.h" 3 4
#define __isctype_l(c,type,locale) ((locale)->__ctype_b[(int) (c)] & (unsigned short int) type)


#define __exctype_l(name) extern int name (int, locale_t) __THROW






extern int isalnum_l (int, locale_t) noexcept (true);
extern int isalpha_l (int, locale_t) noexcept (true);
extern int iscntrl_l (int, locale_t) noexcept (true);
extern int isdigit_l (int, locale_t) noexcept (true);
extern int islower_l (int, locale_t) noexcept (true);
extern int isgraph_l (int, locale_t) noexcept (true);
extern int isprint_l (int, locale_t) noexcept (true);
extern int ispunct_l (int, locale_t) noexcept (true);
extern int isspace_l (int, locale_t) noexcept (true);
extern int isupper_l (int, locale_t) noexcept (true);
extern int isxdigit_l (int, locale_t) noexcept (true);

extern int isblank_l (int, locale_t) noexcept (true);



extern int __tolower_l (int __c, locale_t __l) noexcept (true);
extern int tolower_l (int __c, locale_t __l) noexcept (true);


extern int __toupper_l (int __c, locale_t __l) noexcept (true);
extern int toupper_l (int __c, locale_t __l) noexcept (true);
# 327 "/usr/include/ctype.h" 3 4
}
# 48 "/usr/include/c++/15.1.1/cctype" 2 3


#undef isalnum
#undef isalpha
#undef iscntrl
#undef isdigit
#undef isgraph
#undef islower
#undef isprint
#undef ispunct
#undef isspace
#undef isupper
#undef isxdigit
#undef tolower
#undef toupper

namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}





#undef isblank

namespace std
{
  using ::isblank;
}
# 45 "/usr/include/c++/15.1.1/bits/localefwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 57 "/usr/include/c++/15.1.1/bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);


  template<typename _CharT>
    bool
    isblank(_CharT, const locale&);


  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  struct ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;


  template<> class codecvt<char16_t, char, mbstate_t>;
  template<> class codecvt<char32_t, char, mbstate_t>;





  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

namespace __cxx11 {
  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;
}

namespace __cxx11 {

  template<typename _CharT>
    class collate;
  template<typename _CharT>
    class collate_byname;
}


  class time_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
}
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;
}
namespace __cxx11 {
  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;
}


  struct messages_base;
namespace __cxx11 {
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;
}


}
# 48 "/usr/include/c++/15.1.1/string" 2 3
# 1 "/usr/include/c++/15.1.1/bits/ostream_insert.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/ostream_insert.h" 3
#define _OSTREAM_INSERT_H 1






# 1 "/usr/include/c++/15.1.1/bits/cxxabi_forced.h" 1 3
# 32 "/usr/include/c++/15.1.1/bits/cxxabi_forced.h" 3
#define _CXXABI_FORCED_H 1





#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 39 "/usr/include/c++/15.1.1/bits/ostream_insert.h" 2 3


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"

namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   try
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);






}

#pragma GCC diagnostic pop
# 49 "/usr/include/c++/15.1.1/string" 2 3







# 1 "/usr/include/c++/15.1.1/bits/basic_string.h" 1 3
# 35 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
#define _BASIC_STRING_H 1
# 48 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements



#define __glibcxx_uncaught_exceptions 201411L





#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 110 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_shared_ptr_arrays 201611L





#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t



#define __glibcxx_enable_shared_from_this 201603L





#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine



#define __glibcxx_exchange_function 201304L





#undef __glibcxx_want_exchange_function



#define __glibcxx_integer_sequence 201304L





#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final



#define __glibcxx_make_reverse_iterator 201402L





#undef __glibcxx_want_make_reverse_iterator



#define __glibcxx_null_iterators 201304L





#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases



#define __glibcxx_transparent_operators 201510L





#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type



#define __glibcxx_robust_nonmodifying_seq_ops 201304L





#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 285 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_to_chars 201611L





#undef __glibcxx_want_to_chars



#define __glibcxx_chrono_udls 201304L





#undef __glibcxx_want_chrono_udls



#define __glibcxx_complex_udls 201309L





#undef __glibcxx_want_complex_udls



#define __glibcxx_generic_associative_lookup 201304L





#undef __glibcxx_want_generic_associative_lookup



#define __glibcxx_make_unique 201304L





#undef __glibcxx_want_make_unique



#define __glibcxx_quoted_string_io 201304L





#undef __glibcxx_want_quoted_string_io



#define __glibcxx_shared_timed_mutex 201402L





#undef __glibcxx_want_shared_timed_mutex



#define __glibcxx_string_udls 201304L





#undef __glibcxx_want_string_udls



#define __glibcxx_addressof_constexpr 201603L





#undef __glibcxx_want_addressof_constexpr



#define __glibcxx_any 201606L





#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply



#define __glibcxx_as_const 201510L





#undef __glibcxx_want_as_const



#define __glibcxx_atomic_is_always_lock_free 201603L





#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size



#define __glibcxx_invoke 201411L





#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple



#define __glibcxx_not_fn 201603L





#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 545 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_variant 202102L





#undef __glibcxx_want_variant



#define __glibcxx_lcm 201606L





#undef __glibcxx_want_lcm



#define __glibcxx_gcd 201606L





#undef __glibcxx_want_gcd



#define __glibcxx_gcd_lcm 201606L





#undef __glibcxx_want_gcd_lcm
# 590 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_raw_memory_algorithms 201606L





#undef __glibcxx_want_raw_memory_algorithms
# 605 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_array_constexpr 201803L





#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access



#define __glibcxx_clamp 201603L





#undef __glibcxx_want_clamp



#define __glibcxx_sample 201603L





#undef __glibcxx_want_sample



#define __glibcxx_boyer_moore_searcher 201603L





#undef __glibcxx_want_boyer_moore_searcher
# 660 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_chrono 201611L





#undef __glibcxx_want_chrono



#define __glibcxx_execution 201902L





#undef __glibcxx_want_execution



#define __glibcxx_filesystem 201703L





#undef __glibcxx_want_filesystem



#define __glibcxx_hypot 201603L





#undef __glibcxx_want_hypot



#define __glibcxx_map_try_emplace 201411L





#undef __glibcxx_want_map_try_emplace



#define __glibcxx_math_special_functions 201603L





#undef __glibcxx_want_math_special_functions



#define __glibcxx_memory_resource 201603L
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource



#define __glibcxx_node_extract 201606L





#undef __glibcxx_want_node_extract



#define __glibcxx_parallel_algorithm 201603L





#undef __glibcxx_want_parallel_algorithm



#define __glibcxx_scoped_lock 201703L





#undef __glibcxx_want_scoped_lock



#define __glibcxx_shared_mutex 201505L





#undef __glibcxx_want_shared_mutex



#define __glibcxx_shared_ptr_weak_type 201606L





#undef __glibcxx_want_shared_ptr_weak_type
# 790 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_string_view 201803L





#undef __glibcxx_want_string_view



#define __glibcxx_unordered_map_try_emplace 201411L





#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 950 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_optional 201606L





#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1025 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_char_traits 201611L





#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1390 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_string 201611L





#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 49 "/usr/include/c++/15.1.1/bits/basic_string.h" 2 3


# 1 "/usr/include/c++/15.1.1/string_view" 1 3
# 34 "/usr/include/c++/15.1.1/string_view" 3
#define _GLIBCXX_STRING_VIEW 1





#define __glibcxx_want_constexpr_char_traits 
#define __glibcxx_want_constexpr_string_view 
#define __glibcxx_want_freestanding_string_view 
#define __glibcxx_want_string_view 
#define __glibcxx_want_starts_ends_with 
#define __glibcxx_want_string_contains 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements



#define __glibcxx_uncaught_exceptions 201411L





#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 110 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_shared_ptr_arrays 201611L





#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t



#define __glibcxx_enable_shared_from_this 201603L





#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine



#define __glibcxx_exchange_function 201304L





#undef __glibcxx_want_exchange_function



#define __glibcxx_integer_sequence 201304L





#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final



#define __glibcxx_make_reverse_iterator 201402L





#undef __glibcxx_want_make_reverse_iterator



#define __glibcxx_null_iterators 201304L





#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases



#define __glibcxx_transparent_operators 201510L





#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type



#define __glibcxx_robust_nonmodifying_seq_ops 201304L





#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 285 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_to_chars 201611L





#undef __glibcxx_want_to_chars



#define __glibcxx_chrono_udls 201304L





#undef __glibcxx_want_chrono_udls



#define __glibcxx_complex_udls 201309L





#undef __glibcxx_want_complex_udls



#define __glibcxx_generic_associative_lookup 201304L





#undef __glibcxx_want_generic_associative_lookup



#define __glibcxx_make_unique 201304L





#undef __glibcxx_want_make_unique



#define __glibcxx_quoted_string_io 201304L





#undef __glibcxx_want_quoted_string_io



#define __glibcxx_shared_timed_mutex 201402L





#undef __glibcxx_want_shared_timed_mutex



#define __glibcxx_string_udls 201304L





#undef __glibcxx_want_string_udls



#define __glibcxx_addressof_constexpr 201603L





#undef __glibcxx_want_addressof_constexpr



#define __glibcxx_any 201606L





#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply



#define __glibcxx_as_const 201510L





#undef __glibcxx_want_as_const



#define __glibcxx_atomic_is_always_lock_free 201603L





#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size



#define __glibcxx_invoke 201411L





#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple



#define __glibcxx_not_fn 201603L





#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 545 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_variant 202102L





#undef __glibcxx_want_variant



#define __glibcxx_lcm 201606L





#undef __glibcxx_want_lcm



#define __glibcxx_gcd 201606L





#undef __glibcxx_want_gcd



#define __glibcxx_gcd_lcm 201606L





#undef __glibcxx_want_gcd_lcm
# 590 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_raw_memory_algorithms 201606L





#undef __glibcxx_want_raw_memory_algorithms
# 605 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_array_constexpr 201803L





#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access



#define __glibcxx_clamp 201603L





#undef __glibcxx_want_clamp



#define __glibcxx_sample 201603L





#undef __glibcxx_want_sample



#define __glibcxx_boyer_moore_searcher 201603L





#undef __glibcxx_want_boyer_moore_searcher
# 660 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_chrono 201611L





#undef __glibcxx_want_chrono



#define __glibcxx_execution 201902L





#undef __glibcxx_want_execution



#define __glibcxx_filesystem 201703L





#undef __glibcxx_want_filesystem



#define __glibcxx_hypot 201603L





#undef __glibcxx_want_hypot



#define __glibcxx_map_try_emplace 201411L





#undef __glibcxx_want_map_try_emplace



#define __glibcxx_math_special_functions 201603L





#undef __glibcxx_want_math_special_functions



#define __glibcxx_memory_resource 201603L
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource



#define __glibcxx_node_extract 201606L





#undef __glibcxx_want_node_extract



#define __glibcxx_parallel_algorithm 201603L





#undef __glibcxx_want_parallel_algorithm



#define __glibcxx_scoped_lock 201703L





#undef __glibcxx_want_scoped_lock



#define __glibcxx_shared_mutex 201505L





#undef __glibcxx_want_shared_mutex



#define __glibcxx_shared_ptr_weak_type 201606L





#undef __glibcxx_want_shared_ptr_weak_type
# 790 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_string_view 201803L

#define __cpp_lib_string_view 201803L



#undef __glibcxx_want_string_view



#define __glibcxx_unordered_map_try_emplace 201411L





#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 950 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_optional 201606L





#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1025 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_char_traits 201611L

#define __cpp_lib_constexpr_char_traits 201611L



#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1390 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_string 201611L





#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 47 "/usr/include/c++/15.1.1/string_view" 2 3
# 66 "/usr/include/c++/15.1.1/string_view" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  constexpr size_t
  __sv_check(size_t __size, size_t __pos, const char* __s)
  {
    if (__pos > __size)
      __throw_out_of_range_fmt(("%s: __pos (which is %zu) > __size " "(which is %zu)")
                        , __s, __pos, __size);
    return __pos;
  }



  constexpr size_t
  __sv_limit(size_t __size, size_t __pos, size_t __off) noexcept
  {
   const bool __testoff = __off < __size - __pos;
   return __testoff ? __off : __size - __pos;
  }
# 107 "/usr/include/c++/15.1.1/string_view" 3
  template<typename _CharT, typename _Traits = std::char_traits<_CharT>>
    class basic_string_view
    {
      static_assert(!is_array_v<_CharT>);
      static_assert(is_trivially_copyable_v<_CharT>
   && is_trivially_default_constructible_v<_CharT>
   && is_standard_layout_v<_CharT>);
      static_assert(is_same_v<_CharT, typename _Traits::char_type>);

    public:


      using traits_type = _Traits;
      using value_type = _CharT;
      using pointer = value_type*;
      using const_pointer = const value_type*;
      using reference = value_type&;
      using const_reference = const value_type&;
      using const_iterator = const value_type*;
      using iterator = const_iterator;
      using const_reverse_iterator = std::reverse_iterator<const_iterator>;
      using reverse_iterator = const_reverse_iterator;
      using size_type = size_t;
      using difference_type = ptrdiff_t;
      static constexpr size_type npos = size_type(-1);



      constexpr
      basic_string_view() noexcept
      : _M_len{0}, _M_str{nullptr}
      { }

      constexpr basic_string_view(const basic_string_view&) noexcept = default;

      [[__gnu__::__nonnull__]]
      constexpr
      basic_string_view(const _CharT* __str) noexcept
      : _M_len{traits_type::length(__str)},
 _M_str{__str}
      { }

      constexpr
      basic_string_view(const _CharT* __str, size_type __len) noexcept
      : _M_len{__len}, _M_str{__str}
      { }
# 184 "/usr/include/c++/15.1.1/string_view" 3
      constexpr basic_string_view&
      operator=(const basic_string_view&) noexcept = default;



      [[nodiscard]]
      constexpr const_iterator
      begin() const noexcept
      { return this->_M_str; }

      [[nodiscard]]
      constexpr const_iterator
      end() const noexcept
      { return this->_M_str + this->_M_len; }

      [[nodiscard]]
      constexpr const_iterator
      cbegin() const noexcept
      { return this->_M_str; }

      [[nodiscard]]
      constexpr const_iterator
      cend() const noexcept
      { return this->_M_str + this->_M_len; }

      [[nodiscard]]
      constexpr const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(this->end()); }

      [[nodiscard]]
      constexpr const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(this->begin()); }

      [[nodiscard]]
      constexpr const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(this->end()); }

      [[nodiscard]]
      constexpr const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(this->begin()); }



      [[nodiscard]]
      constexpr size_type
      size() const noexcept
      { return this->_M_len; }

      [[nodiscard]]
      constexpr size_type
      length() const noexcept
      { return _M_len; }

      [[nodiscard]]
      constexpr size_type
      max_size() const noexcept
      {
 return (npos - sizeof(size_type) - sizeof(void*))
  / sizeof(value_type) / 4;
      }

      [[nodiscard]]
      constexpr bool
      empty() const noexcept
      { return this->_M_len == 0; }



      [[nodiscard]]
      constexpr const_reference
      operator[](size_type __pos) const noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__pos < this->_M_len)) std::__glibcxx_assert_fail(); } while (false);
 return *(this->_M_str + __pos);
      }

      [[nodiscard]]
      constexpr const_reference
      at(size_type __pos) const
      {
 if (__pos >= _M_len)
   __throw_out_of_range_fmt(("basic_string_view::at: __pos " "(which is %zu) >= this->size() " "(which is %zu)")

                            , __pos, this->size());
 return *(this->_M_str + __pos);
      }

      [[nodiscard]]
      constexpr const_reference
      front() const noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(this->_M_len > 0)) std::__glibcxx_assert_fail(); } while (false);
 return *this->_M_str;
      }

      [[nodiscard]]
      constexpr const_reference
      back() const noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(this->_M_len > 0)) std::__glibcxx_assert_fail(); } while (false);
 return *(this->_M_str + this->_M_len - 1);
      }

      [[nodiscard]]
      constexpr const_pointer
      data() const noexcept
      { return this->_M_str; }



      constexpr void
      remove_prefix(size_type __n) noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(this->_M_len >= __n)) std::__glibcxx_assert_fail(); } while (false);
 this->_M_str += __n;
 this->_M_len -= __n;
      }

      constexpr void
      remove_suffix(size_type __n) noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(this->_M_len >= __n)) std::__glibcxx_assert_fail(); } while (false);
 this->_M_len -= __n;
      }

      constexpr void
      swap(basic_string_view& __sv) noexcept
      {
 auto __tmp = *this;
 *this = __sv;
 __sv = __tmp;
      }



     
      size_type
      copy(_CharT* __str, size_type __n, size_type __pos = 0) const
      {
 ;
 __pos = std::__sv_check(size(), __pos, "basic_string_view::copy");
 const size_type __rlen = std::min<size_t>(__n, _M_len - __pos);


 traits_type::copy(__str, data() + __pos, __rlen);
 return __rlen;
      }

      [[nodiscard]]
      constexpr basic_string_view
      substr(size_type __pos = 0, size_type __n = npos) const noexcept(false)
      {
 __pos = std::__sv_check(size(), __pos, "basic_string_view::substr");
 const size_type __rlen = std::min<size_t>(__n, _M_len - __pos);
 return basic_string_view{_M_str + __pos, __rlen};
      }

      [[nodiscard]]
      constexpr int
      compare(basic_string_view __str) const noexcept
      {
 const size_type __rlen = std::min(this->_M_len, __str._M_len);
 int __ret = traits_type::compare(this->_M_str, __str._M_str, __rlen);
 if (__ret == 0)
   __ret = _S_compare(this->_M_len, __str._M_len);
 return __ret;
      }

      [[nodiscard]]
      constexpr int
      compare(size_type __pos1, size_type __n1, basic_string_view __str) const
      { return this->substr(__pos1, __n1).compare(__str); }

      [[nodiscard]]
      constexpr int
      compare(size_type __pos1, size_type __n1,
       basic_string_view __str, size_type __pos2, size_type __n2) const
      {
 return this->substr(__pos1, __n1).compare(__str.substr(__pos2, __n2));
      }

      [[nodiscard, __gnu__::__nonnull__]]
      constexpr int
      compare(const _CharT* __str) const noexcept
      { return this->compare(basic_string_view{__str}); }

      [[nodiscard, __gnu__::__nonnull__]]
      constexpr int
      compare(size_type __pos1, size_type __n1, const _CharT* __str) const
      { return this->substr(__pos1, __n1).compare(basic_string_view{__str}); }

      [[nodiscard]]
      constexpr int
      compare(size_type __pos1, size_type __n1,
       const _CharT* __str, size_type __n2) const noexcept(false)
      {
 return this->substr(__pos1, __n1)
     .compare(basic_string_view(__str, __n2));
      }
# 452 "/usr/include/c++/15.1.1/string_view" 3
      [[nodiscard]]
      constexpr size_type
      find(basic_string_view __str, size_type __pos = 0) const noexcept
      { return this->find(__str._M_str, __pos, __str._M_len); }

      [[nodiscard]]
      constexpr size_type
      find(_CharT __c, size_type __pos = 0) const noexcept;

      [[nodiscard]]
      constexpr size_type
      find(const _CharT* __str, size_type __pos, size_type __n) const noexcept;

      [[nodiscard, __gnu__::__nonnull__]]
      constexpr size_type
      find(const _CharT* __str, size_type __pos = 0) const noexcept
      { return this->find(__str, __pos, traits_type::length(__str)); }

      [[nodiscard]]
      constexpr size_type
      rfind(basic_string_view __str, size_type __pos = npos) const noexcept
      { return this->rfind(__str._M_str, __pos, __str._M_len); }

      [[nodiscard]]
      constexpr size_type
      rfind(_CharT __c, size_type __pos = npos) const noexcept;

      [[nodiscard]]
      constexpr size_type
      rfind(const _CharT* __str, size_type __pos, size_type __n) const noexcept;

      [[nodiscard, __gnu__::__nonnull__]]
      constexpr size_type
      rfind(const _CharT* __str, size_type __pos = npos) const noexcept
      { return this->rfind(__str, __pos, traits_type::length(__str)); }

      [[nodiscard]]
      constexpr size_type
      find_first_of(basic_string_view __str, size_type __pos = 0) const noexcept
      { return this->find_first_of(__str._M_str, __pos, __str._M_len); }

      [[nodiscard]]
      constexpr size_type
      find_first_of(_CharT __c, size_type __pos = 0) const noexcept
      { return this->find(__c, __pos); }

      [[nodiscard]]
      constexpr size_type
      find_first_of(const _CharT* __str, size_type __pos,
      size_type __n) const noexcept;

      [[nodiscard, __gnu__::__nonnull__]]
      constexpr size_type
      find_first_of(const _CharT* __str, size_type __pos = 0) const noexcept
      { return this->find_first_of(__str, __pos, traits_type::length(__str)); }

      [[nodiscard]]
      constexpr size_type
      find_last_of(basic_string_view __str,
     size_type __pos = npos) const noexcept
      { return this->find_last_of(__str._M_str, __pos, __str._M_len); }

      [[nodiscard]]
      constexpr size_type
      find_last_of(_CharT __c, size_type __pos=npos) const noexcept
      { return this->rfind(__c, __pos); }

      [[nodiscard]]
      constexpr size_type
      find_last_of(const _CharT* __str, size_type __pos,
     size_type __n) const noexcept;

      [[nodiscard, __gnu__::__nonnull__]]
      constexpr size_type
      find_last_of(const _CharT* __str, size_type __pos = npos) const noexcept
      { return this->find_last_of(__str, __pos, traits_type::length(__str)); }

      [[nodiscard]]
      constexpr size_type
      find_first_not_of(basic_string_view __str,
   size_type __pos = 0) const noexcept
      { return this->find_first_not_of(__str._M_str, __pos, __str._M_len); }

      [[nodiscard]]
      constexpr size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const noexcept;

      [[nodiscard]]
      constexpr size_type
      find_first_not_of(const _CharT* __str,
   size_type __pos, size_type __n) const noexcept;

      [[nodiscard, __gnu__::__nonnull__]]
      constexpr size_type
      find_first_not_of(const _CharT* __str, size_type __pos = 0) const noexcept
      {
 return this->find_first_not_of(__str, __pos,
           traits_type::length(__str));
      }

      [[nodiscard]]
      constexpr size_type
      find_last_not_of(basic_string_view __str,
         size_type __pos = npos) const noexcept
      { return this->find_last_not_of(__str._M_str, __pos, __str._M_len); }

      [[nodiscard]]
      constexpr size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const noexcept;

      [[nodiscard]]
      constexpr size_type
      find_last_not_of(const _CharT* __str,
         size_type __pos, size_type __n) const noexcept;

      [[nodiscard, __gnu__::__nonnull__]]
      constexpr size_type
      find_last_not_of(const _CharT* __str,
         size_type __pos = npos) const noexcept
      {
 return this->find_last_not_of(__str, __pos,
          traits_type::length(__str));
      }

    private:

      static constexpr int
      _S_compare(size_type __n1, size_type __n2) noexcept
      {
 using __limits = __gnu_cxx::__int_traits<int>;
 const difference_type __diff = __n1 - __n2;
 if (__diff > __limits::__max)
   return __limits::__max;
 if (__diff < __limits::__min)
   return __limits::__min;
 return static_cast<int>(__diff);
      }

      size_t _M_len;
      const _CharT* _M_str;
    };
# 630 "/usr/include/c++/15.1.1/string_view" 3
  template<typename _CharT, typename _Traits>
    [[nodiscard]]
    constexpr bool
    operator==(basic_string_view<_CharT, _Traits> __x,
        __type_identity_t<basic_string_view<_CharT, _Traits>> __y)
    noexcept
    { return __x.size() == __y.size() && __x.compare(__y) == 0; }

  template<typename _CharT, typename _Traits>
    [[nodiscard]]
    constexpr bool
    operator==(basic_string_view<_CharT, _Traits> __x,
        basic_string_view<_CharT, _Traits> __y) noexcept
    { return __x.size() == __y.size() && __x.compare(__y) == 0; }

  template<typename _CharT, typename _Traits>
    [[nodiscard]]
    constexpr bool
    operator==(__type_identity_t<basic_string_view<_CharT, _Traits>> __x,
               basic_string_view<_CharT, _Traits> __y) noexcept
    { return __x.size() == __y.size() && __x.compare(__y) == 0; }

  template<typename _CharT, typename _Traits>
    [[nodiscard]]
    constexpr bool
    operator!=(basic_string_view<_CharT, _Traits> __x,
               basic_string_view<_CharT, _Traits> __y) noexcept
    { return !(__x == __y); }

  template<typename _CharT, typename _Traits>
    [[nodiscard]]
    constexpr bool
    operator!=(basic_string_view<_CharT, _Traits> __x,
               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)
    noexcept
    { return !(__x == __y); }

  template<typename _CharT, typename _Traits>
    [[nodiscard]]
    constexpr bool
    operator!=(__type_identity_t<basic_string_view<_CharT, _Traits>> __x,
               basic_string_view<_CharT, _Traits> __y) noexcept
    { return !(__x == __y); }

  template<typename _CharT, typename _Traits>
    [[nodiscard]]
    constexpr bool
    operator< (basic_string_view<_CharT, _Traits> __x,
               basic_string_view<_CharT, _Traits> __y) noexcept
    { return __x.compare(__y) < 0; }

  template<typename _CharT, typename _Traits>
    [[nodiscard]]
    constexpr bool
    operator< (basic_string_view<_CharT, _Traits> __x,
               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)
    noexcept
    { return __x.compare(__y) < 0; }

  template<typename _CharT, typename _Traits>
    [[nodiscard]]
    constexpr bool
    operator< (__type_identity_t<basic_string_view<_CharT, _Traits>> __x,
               basic_string_view<_CharT, _Traits> __y) noexcept
    { return __x.compare(__y) < 0; }

  template<typename _CharT, typename _Traits>
    [[nodiscard]]
    constexpr bool
    operator> (basic_string_view<_CharT, _Traits> __x,
               basic_string_view<_CharT, _Traits> __y) noexcept
    { return __x.compare(__y) > 0; }

  template<typename _CharT, typename _Traits>
    [[nodiscard]]
    constexpr bool
    operator> (basic_string_view<_CharT, _Traits> __x,
               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)
    noexcept
    { return __x.compare(__y) > 0; }

  template<typename _CharT, typename _Traits>
    [[nodiscard]]
    constexpr bool
    operator> (__type_identity_t<basic_string_view<_CharT, _Traits>> __x,
               basic_string_view<_CharT, _Traits> __y) noexcept
    { return __x.compare(__y) > 0; }

  template<typename _CharT, typename _Traits>
    [[nodiscard]]
    constexpr bool
    operator<=(basic_string_view<_CharT, _Traits> __x,
               basic_string_view<_CharT, _Traits> __y) noexcept
    { return __x.compare(__y) <= 0; }

  template<typename _CharT, typename _Traits>
    [[nodiscard]]
    constexpr bool
    operator<=(basic_string_view<_CharT, _Traits> __x,
               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)
    noexcept
    { return __x.compare(__y) <= 0; }

  template<typename _CharT, typename _Traits>
    [[nodiscard]]
    constexpr bool
    operator<=(__type_identity_t<basic_string_view<_CharT, _Traits>> __x,
               basic_string_view<_CharT, _Traits> __y) noexcept
    { return __x.compare(__y) <= 0; }

  template<typename _CharT, typename _Traits>
    [[nodiscard]]
    constexpr bool
    operator>=(basic_string_view<_CharT, _Traits> __x,
               basic_string_view<_CharT, _Traits> __y) noexcept
    { return __x.compare(__y) >= 0; }

  template<typename _CharT, typename _Traits>
    [[nodiscard]]
    constexpr bool
    operator>=(basic_string_view<_CharT, _Traits> __x,
               __type_identity_t<basic_string_view<_CharT, _Traits>> __y)
    noexcept
    { return __x.compare(__y) >= 0; }

  template<typename _CharT, typename _Traits>
    [[nodiscard]]
    constexpr bool
    operator>=(__type_identity_t<basic_string_view<_CharT, _Traits>> __x,
               basic_string_view<_CharT, _Traits> __y) noexcept
    { return __x.compare(__y) >= 0; }




  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        basic_string_view<_CharT,_Traits> __str)
    { return __ostream_insert(__os, __str.data(), __str.size()); }




  using string_view = basic_string_view<char>;
  using wstring_view = basic_string_view<wchar_t>;



  using u16string_view = basic_string_view<char16_t>;
  using u32string_view = basic_string_view<char32_t>;



  template<typename _Tp>
    struct hash;

  template<>
    struct hash<string_view>
    : public __hash_base<size_t, string_view>
    {
      [[nodiscard]]
      size_t
      operator()(const string_view& __str) const noexcept
      { return std::_Hash_impl::hash(__str.data(), __str.length()); }
    };

  template<>
    struct __is_fast_hash<hash<string_view>> : std::false_type
    { };

  template<>
    struct hash<wstring_view>
    : public __hash_base<size_t, wstring_view>
    {
      [[nodiscard]]
      size_t
      operator()(const wstring_view& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(wchar_t)); }
    };

  template<>
    struct __is_fast_hash<hash<wstring_view>> : std::false_type
    { };
# 832 "/usr/include/c++/15.1.1/string_view" 3
  template<>
    struct hash<u16string_view>
    : public __hash_base<size_t, u16string_view>
    {
      [[nodiscard]]
      size_t
      operator()(const u16string_view& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char16_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u16string_view>> : std::false_type
    { };

  template<>
    struct hash<u32string_view>
    : public __hash_base<size_t, u32string_view>
    {
      [[nodiscard]]
      size_t
      operator()(const u32string_view& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char32_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u32string_view>> : std::false_type
    { };

  inline namespace literals
  {
  inline namespace string_view_literals
  {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wliteral-suffix"
    inline constexpr basic_string_view<char>
    operator""sv(const char* __str, size_t __len) noexcept
    { return basic_string_view<char>{__str, __len}; }

    inline constexpr basic_string_view<wchar_t>
    operator""sv(const wchar_t* __str, size_t __len) noexcept
    { return basic_string_view<wchar_t>{__str, __len}; }







    inline constexpr basic_string_view<char16_t>
    operator""sv(const char16_t* __str, size_t __len) noexcept
    { return basic_string_view<char16_t>{__str, __len}; }

    inline constexpr basic_string_view<char32_t>
    operator""sv(const char32_t* __str, size_t __len) noexcept
    { return basic_string_view<char32_t>{__str, __len}; }

#pragma GCC diagnostic pop
  }
  }
# 908 "/usr/include/c++/15.1.1/string_view" 3

}

# 1 "/usr/include/c++/15.1.1/bits/string_view.tcc" 1 3
# 35 "/usr/include/c++/15.1.1/bits/string_view.tcc" 3
#define _GLIBCXX_STRING_VIEW_TCC 1







namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    constexpr typename basic_string_view<_CharT, _Traits>::size_type
    basic_string_view<_CharT, _Traits>::
    find(const _CharT* __str, size_type __pos, size_type __n) const noexcept
    {
      ;

      if (__n == 0)
 return __pos <= _M_len ? __pos : npos;
      if (__pos >= _M_len)
 return npos;

      const _CharT __elem0 = __str[0];
      const _CharT* __first = _M_str + __pos;
      const _CharT* const __last = _M_str + _M_len;
      size_type __len = _M_len - __pos;

      while (__len >= __n)
 {

   __first = traits_type::find(__first, __len - __n + 1, __elem0);
   if (!__first)
     return npos;



   if (traits_type::compare(__first, __str, __n) == 0)
     return __first - _M_str;
   __len = __last - ++__first;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits>
    constexpr typename basic_string_view<_CharT, _Traits>::size_type
    basic_string_view<_CharT, _Traits>::
    find(_CharT __c, size_type __pos) const noexcept
    {
      size_type __ret = npos;
      if (__pos < this->_M_len)
 {
   const size_type __n = this->_M_len - __pos;
   const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
   if (__p)
     __ret = __p - this->_M_str;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    constexpr typename basic_string_view<_CharT, _Traits>::size_type
    basic_string_view<_CharT, _Traits>::
    rfind(const _CharT* __str, size_type __pos, size_type __n) const noexcept
    {
      ;

      if (__n <= this->_M_len)
 {
   __pos = std::min(size_type(this->_M_len - __n), __pos);
   do
     {
       if (traits_type::compare(this->_M_str + __pos, __str, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits>
    constexpr typename basic_string_view<_CharT, _Traits>::size_type
    basic_string_view<_CharT, _Traits>::
    rfind(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->_M_len;
      if (__size > 0)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(this->_M_str[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits>
    constexpr typename basic_string_view<_CharT, _Traits>::size_type
    basic_string_view<_CharT, _Traits>::
    find_first_of(const _CharT* __str, size_type __pos,
    size_type __n) const noexcept
    {
      ;
      for (; __n && __pos < this->_M_len; ++__pos)
 {
   const _CharT* __p = traits_type::find(__str, __n,
      this->_M_str[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits>
    constexpr typename basic_string_view<_CharT, _Traits>::size_type
    basic_string_view<_CharT, _Traits>::
    find_last_of(const _CharT* __str, size_type __pos,
   size_type __n) const noexcept
    {
      ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__str, __n, this->_M_str[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits>
    constexpr typename basic_string_view<_CharT, _Traits>::size_type
    basic_string_view<_CharT, _Traits>::
    find_first_not_of(const _CharT* __str, size_type __pos,
        size_type __n) const noexcept
    {
      ;
      for (; __pos < this->_M_len; ++__pos)
 if (!traits_type::find(__str, __n, this->_M_str[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits>
    constexpr typename basic_string_view<_CharT, _Traits>::size_type
    basic_string_view<_CharT, _Traits>::
    find_first_not_of(_CharT __c, size_type __pos) const noexcept
    {
      for (; __pos < this->_M_len; ++__pos)
 if (!traits_type::eq(this->_M_str[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits>
    constexpr typename basic_string_view<_CharT, _Traits>::size_type
    basic_string_view<_CharT, _Traits>::
    find_last_not_of(const _CharT* __str, size_type __pos,
       size_type __n) const noexcept
    {
      ;
      size_type __size = this->_M_len;
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__str, __n, this->_M_str[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits>
    constexpr typename basic_string_view<_CharT, _Traits>::size_type
    basic_string_view<_CharT, _Traits>::
    find_last_not_of(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->_M_len;
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(this->_M_str[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }


}
# 912 "/usr/include/c++/15.1.1/string_view" 2 3
# 52 "/usr/include/c++/15.1.1/bits/basic_string.h" 2 3
# 68 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

namespace __cxx11 {
# 93 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
# 104 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_CharT>::other _Char_alloc_type;


      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Char_alloc_type allocator_type;
      typedef typename _Alloc_traits::size_type size_type;
      typedef typename _Alloc_traits::difference_type difference_type;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
       const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;


      static const size_type npos = static_cast<size_type>(-1);

    protected:




      typedef const_iterator __const_iterator;


    private:
      static pointer
      _S_allocate(_Char_alloc_type& __a, size_type __n)
      {
 pointer __p = _Alloc_traits::allocate(__a, __n);
# 152 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
 return __p;
      }



      typedef basic_string_view<_CharT, _Traits> __sv_type;

      template<typename _Tp, typename _Res>
 using _If_sv = enable_if_t<
   __and_<is_convertible<const _Tp&, __sv_type>,
   __not_<is_convertible<const _Tp*, const basic_string*>>,
   __not_<is_convertible<const _Tp&, const _CharT*>>>::value,
   _Res>;


     
      static __sv_type
      _S_to_string_view(__sv_type __svt) noexcept
      { return __svt; }





      struct __sv_wrapper
      {
 explicit
 __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }

 __sv_type _M_sv;
      };







     
      explicit
      basic_string(__sv_wrapper __svw, const _Alloc& __a)
      : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }



      struct _Alloc_hider : allocator_type
      {





 _Alloc_hider(pointer __dat, const _Alloc& __a)
 : allocator_type(__a), _M_p(__dat) { }


 _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 : allocator_type(std::move(__a)), _M_p(__dat) { }


 pointer _M_p;
      };

      _Alloc_hider _M_dataplus;
      size_type _M_string_length;

      enum { _S_local_capacity = 15 / sizeof(_CharT) };

      union
      {
 _CharT _M_local_buf[_S_local_capacity + 1];
 size_type _M_allocated_capacity;
      };

     
      void
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

     
      void
      _M_length(size_type __length)
      { _M_string_length = __length; }

     
      pointer
      _M_data() const
      { return _M_dataplus._M_p; }

     
      pointer
      _M_local_data()
      {

 return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);



      }

     
      const_pointer
      _M_local_data() const
      {

 return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);



      }

     
      void
      _M_capacity(size_type __capacity)
      { _M_allocated_capacity = __capacity; }

     
      void
      _M_set_length(size_type __n)
      {
 _M_length(__n);
 traits_type::assign(_M_data()[__n], _CharT());
      }

     
      bool
      _M_is_local() const
      {
 if (_M_data() == _M_local_data())
   {
     if (_M_string_length > _S_local_capacity)
       __builtin_unreachable();
     return true;
   }
 return false;
      }


     
      pointer
      _M_create(size_type&, size_type);

     
      void
      _M_dispose()
      {
 if (!_M_is_local())
   _M_destroy(_M_allocated_capacity);
      }

     
      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
# 332 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename _InIterator>

        void
        _M_construct(_InIterator __beg, _InIterator __end,
       std::input_iterator_tag);



      template<typename _FwdIterator>

        void
        _M_construct(_FwdIterator __beg, _FwdIterator __end,
       std::forward_iterator_tag);

     
      void
      _M_construct(size_type __req, _CharT __c);



      template<bool _Terminated>

 void
 _M_construct(const _CharT *__c, size_type __n);

     
      allocator_type&
      _M_get_allocator()
      { return _M_dataplus; }

     
      const allocator_type&
      _M_get_allocator() const
      { return _M_dataplus; }


      __attribute__((__always_inline__))
      constexpr
      void
      _M_init_local_buf() noexcept
      {





      }

      __attribute__((__always_inline__))
      constexpr
      pointer
      _M_use_local_data() noexcept
      {



 return _M_local_data();
      }

    private:
# 407 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range_fmt(("%s: __pos (which is %zu) > " "this->size() (which is %zu)")
                                         ,
       __s, __pos, this->size());
 return __pos;
      }

     
      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }



     
      size_type
      _M_limit(size_type __pos, size_type __off) const noexcept
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const noexcept
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



     
      static void
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

     
      static void
      _S_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

     
      static void
      _S_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"


      template<class _Iterator>

        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {

   using _IterBase = decltype(std::__niter_base(__k1));
   if constexpr (__or_<is_same<_IterBase, _CharT*>,
         is_same<_IterBase, const _CharT*>>::value)
     _S_copy(__p, std::__niter_base(__k1), __k2 - __k1);
# 502 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
   else

   for (; __k1 != __k2; ++__k1, (void)++__p)
     traits_type::assign(*__p, static_cast<_CharT>(*__k1));
 }
#pragma GCC diagnostic pop
# 549 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      static int
      _S_compare(size_type __n1, size_type __n2) noexcept
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

     
      void
      _M_assign(const basic_string&);

     
      void
      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
  size_type __len2);

     
      void
      _M_erase(size_type __pos, size_type __n);

    public:







     
      basic_string()
      noexcept(is_nothrow_default_constructible<_Alloc>::value)



      : _M_dataplus(_M_local_data())
      {
 _M_init_local_buf();
 _M_set_length(0);
      }




     
      explicit
      basic_string(const _Alloc& __a) noexcept
      : _M_dataplus(_M_local_data(), __a)
      {
 _M_init_local_buf();
 _M_set_length(0);
      }





     
      basic_string(const basic_string& __str)
      : _M_dataplus(_M_local_data(),
      _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
      {
 _M_construct<true>(__str._M_data(), __str.length());
      }
# 628 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string(const basic_string& __str, size_type __pos,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, npos),
       std::forward_iterator_tag());
      }







     
      basic_string(const basic_string& __str, size_type __pos,
     size_type __n)
      : _M_dataplus(_M_local_data())
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n),
       std::forward_iterator_tag());
      }
# 663 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start
   = __str._M_data() + __str._M_check(__pos, "string::string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n),
       std::forward_iterator_tag());
      }
# 683 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      {

 if (__s == 0 && __n > 0)
   std::__throw_logic_error(("basic_string: " "construction from null is not valid")
                                                 );
 _M_construct(__s, __s + __n, std::forward_iterator_tag());
      }
# 703 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename = _RequireAllocator<_Alloc>>

     
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      {

 if (__s == 0)
   std::__throw_logic_error(("basic_string: " "construction from null is not valid")
                                                 );
 const _CharT* __end = __s + traits_type::length(__s);
 _M_construct(__s, __end, forward_iterator_tag());
      }
# 726 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename = _RequireAllocator<_Alloc>>

     
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__n, __c); }
# 741 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string(basic_string&& __str) noexcept
      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
      {
 if (__str._M_is_local())
   {
     _M_init_local_buf();
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         __str.length() + 1);
   }
 else
   {
     _M_data(__str._M_data());
     _M_capacity(__str._M_allocated_capacity);
   }




 _M_length(__str.length());
 __str._M_data(__str._M_use_local_data());
 __str._M_set_length(0);
      }
# 797 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__l.begin(), __l.end(), std::forward_iterator_tag()); }

     
      basic_string(const basic_string& __str, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__str.begin(), __str.end(), std::forward_iterator_tag()); }

     
      basic_string(basic_string&& __str, const _Alloc& __a)
      noexcept(_Alloc_traits::_S_always_equal())
      : _M_dataplus(_M_local_data(), __a)
      {
 if (__str._M_is_local())
   {
     _M_init_local_buf();
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         __str.length() + 1);
     _M_length(__str.length());
     __str._M_set_length(0);
   }
 else if (_Alloc_traits::_S_always_equal()
     || __str.get_allocator() == __a)
   {
     _M_data(__str._M_data());
     _M_length(__str.length());
     _M_capacity(__str._M_allocated_capacity);
     __str._M_data(__str._M_use_local_data());
     __str._M_set_length(0);
   }
 else
   _M_construct(__str.begin(), __str.end(), std::forward_iterator_tag());
      }
# 846 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>




        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc())
 : _M_dataplus(_M_local_data(), __a), _M_string_length(0)
 {

   _M_construct(__beg, __end, std::__iterator_category(__beg));




 }
# 872 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename _Tp,
        typename = enable_if_t<is_convertible_v<const _Tp&, __sv_type>>>

 basic_string(const _Tp& __t, size_type __pos, size_type __n,
       const _Alloc& __a = _Alloc())
 : basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }






      template<typename _Tp, typename = _If_sv<_Tp, void>>

 explicit
 basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())
 : basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }





     
      ~basic_string()
      { _M_dispose(); }





     
      basic_string&
      operator=(const basic_string& __str)
      {
 return this->assign(__str);
      }





     
      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 925 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 943 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      operator=(basic_string&& __str)
      noexcept(_Alloc_traits::_S_nothrow_move())
      {
 const bool __equal_allocs = _Alloc_traits::_S_always_equal()
   || _M_get_allocator() == __str._M_get_allocator();
 if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
     && !__equal_allocs)
   {

     _M_destroy(_M_allocated_capacity);
     _M_data(_M_local_data());
     _M_set_length(0);
   }

 std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());

 if (__str._M_is_local())
   {



     if (__builtin_expect(std::__addressof(__str) != this, true))
       {
  if (__str.size())
    this->_S_copy(_M_data(), __str._M_data(), __str.size());
  _M_set_length(__str.size());
       }
   }
 else if (_Alloc_traits::_S_propagate_on_move_assign() || __equal_allocs)
   {

     pointer __data = nullptr;
     size_type __capacity;
     if (!_M_is_local())
       {
  if (__equal_allocs)
    {

      __data = _M_data();
      __capacity = _M_allocated_capacity;
    }
  else
    _M_destroy(_M_allocated_capacity);
       }

     _M_data(__str._M_data());
     _M_length(__str.length());
     _M_capacity(__str._M_allocated_capacity);
     if (__data)
       {
  __str._M_data(__data);
  __str._M_capacity(__capacity);
       }
     else
       __str._M_data(__str._M_use_local_data());
   }
 else
   _M_assign(__str);
 __str.clear();
 return *this;
      }





     
      basic_string&
      operator=(initializer_list<_CharT> __l)
      {
 this->assign(__l.begin(), __l.size());
 return *this;
      }







     template<typename _Tp>
      
       _If_sv<_Tp, basic_string&>
       operator=(const _Tp& __svt)
       { return this->assign(__svt); }





     
      operator __sv_type() const noexcept
      { return __sv_type(data(), size()); }







      [[__nodiscard__]]
      iterator
      begin() noexcept
      { return iterator(_M_data()); }





      [[__nodiscard__]]
      const_iterator
      begin() const noexcept
      { return const_iterator(_M_data()); }





      [[__nodiscard__]]
      iterator
      end() noexcept
      { return iterator(_M_data() + this->size()); }





      [[__nodiscard__]]
      const_iterator
      end() const noexcept
      { return const_iterator(_M_data() + this->size()); }






      [[__nodiscard__]]
      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(this->end()); }






      [[__nodiscard__]]
      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      [[__nodiscard__]]
      reverse_iterator
      rend() noexcept
      { return reverse_iterator(this->begin()); }






      [[__nodiscard__]]
      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(this->begin()); }






      [[__nodiscard__]]
      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_data()); }





      [[__nodiscard__]]
      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_data() + this->size()); }






      [[__nodiscard__]]
      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      [[__nodiscard__]]
      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(this->begin()); }


    public:



      [[__nodiscard__]]
      size_type
      size() const noexcept
      {
 size_type __sz = _M_string_length;
 if (__sz > max_size ())
   __builtin_unreachable ();
 return __sz;
      }



      [[__nodiscard__]]
      size_type
      length() const noexcept
      { return size(); }


      [[__nodiscard__]]
      size_type
      max_size() const noexcept
      {
 const size_t __diffmax
   = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_CharT);
 const size_t __allocmax = _Alloc_traits::max_size(_M_get_allocator());
 return (std::min)(__diffmax, __allocmax) - 1;
      }
# 1199 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      void
      resize(size_type __n, _CharT __c);
# 1213 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

     
      void
      shrink_to_fit() noexcept
      { reserve(); }
#pragma GCC diagnostic pop
# 1266 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename _Operation>
 void
 __resize_and_overwrite(size_type __n, _Operation __op);






      [[__nodiscard__]]
      size_type
      capacity() const noexcept
      {
 size_t __sz = _M_is_local() ? size_type(_S_local_capacity)
         : _M_allocated_capacity;
 if (__sz < _S_local_capacity || __sz > max_size ())
   __builtin_unreachable ();
 return __sz;
      }
# 1303 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      void
      reserve(size_type __res_arg);







     
      void
      reserve();




     
      void
      clear() noexcept
      { _M_set_length(0); }





      [[__nodiscard__]]
      bool
      empty() const noexcept
      { return _M_string_length == 0; }
# 1345 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      const_reference
      operator[] (size_type __pos) const noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__pos <= size())) std::__glibcxx_assert_fail(); } while (false);
 return _M_data()[__pos];
      }
# 1363 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      reference
      operator[](size_type __pos)
      {


 do { if (std::__is_constant_evaluated() && !bool(__pos <= size())) std::__glibcxx_assert_fail(); } while (false);

 ;
 return _M_data()[__pos];
      }
# 1385 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
 return _M_data()[__n];
      }
# 1407 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
 return _M_data()[__n];
      }






      [[__nodiscard__]]
      reference
      front() noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!empty())) std::__glibcxx_assert_fail(); } while (false);
 return operator[](0);
      }





      [[__nodiscard__]]
      const_reference
      front() const noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!empty())) std::__glibcxx_assert_fail(); } while (false);
 return operator[](0);
      }





      [[__nodiscard__]]
      reference
      back() noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!empty())) std::__glibcxx_assert_fail(); } while (false);
 return operator[](this->size() - 1);
      }





      [[__nodiscard__]]
      const_reference
      back() const noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!empty())) std::__glibcxx_assert_fail(); } while (false);
 return operator[](this->size() - 1);
      }
# 1475 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






     
      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






     
      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }







     
      basic_string&
      operator+=(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1521 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename _Tp>

 _If_sv<_Tp, basic_string&>
 operator+=(const _Tp& __svt)
 { return this->append(__svt); }







     
      basic_string&
      append(const basic_string& __str)
      { return this->append(__str._M_data(), __str.size()); }
# 1551 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n = npos)
      { return this->append(__str._M_data()
       + __str._M_check(__pos, "basic_string::append"),
       __str._M_limit(__pos, __n)); }







     
      basic_string&
      append(const _CharT* __s, size_type __n)
      {
 ;
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }






     
      basic_string&
      append(const _CharT* __s)
      {
 ;
 const size_type __n = traits_type::length(__s);
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }
# 1596 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      append(size_type __n, _CharT __c)
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
# 1659 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      append(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1674 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>




        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(end(), end(), __first, __last); }







      template<typename _Tp>

        _If_sv<_Tp, basic_string&>
        append(const _Tp& __svt)
        {
          __sv_type __sv = __svt;
          return this->append(__sv.data(), __sv.size());
        }
# 1706 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename _Tp>

        _If_sv<_Tp, basic_string&>
 append(const _Tp& __svt, size_type __pos, size_type __n = npos)
 {
   __sv_type __sv = __svt;
   return _M_append(__sv.data()
       + std::__sv_check(__sv.size(), __pos, "basic_string::append"),
       std::__sv_limit(__sv.size(), __pos, __n));
 }






     
      void
      push_back(_CharT __c)
      {
 const size_type __size = this->size();
 if (__size + 1 > this->capacity())
   this->_M_mutate(__size, size_type(0), 0, size_type(1));
 traits_type::assign(this->_M_data()[__size], __c);
 this->_M_set_length(__size + 1);
      }






     
      basic_string&
      assign(const basic_string& __str)
      {

 if (_Alloc_traits::_S_propagate_on_copy_assign())
   {
     if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
  && _M_get_allocator() != __str._M_get_allocator())
       {


  if (__str.size() <= _S_local_capacity)
    {
      _M_destroy(_M_allocated_capacity);
      _M_data(_M_use_local_data());
      _M_set_length(0);
    }
  else
    {
      const auto __len = __str.size();
      auto __alloc = __str._M_get_allocator();

      auto __ptr = _S_allocate(__alloc, __len + 1);
      _M_destroy(_M_allocated_capacity);
      _M_data(__ptr);
      _M_capacity(__len);
      _M_set_length(__len);
    }
       }
     std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
   }

 this->_M_assign(__str);
 return *this;
      }
# 1784 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      assign(basic_string&& __str)
      noexcept(_Alloc_traits::_S_nothrow_move())
      {


 return *this = std::move(__str);
      }
# 1808 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n = npos)
      { return _M_replace(size_type(0), this->size(), __str._M_data()
     + __str._M_check(__pos, "basic_string::assign"),
     __str._M_limit(__pos, __n)); }
# 1825 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      assign(const _CharT* __s, size_type __n)
      {
 ;
 return _M_replace(size_type(0), this->size(), __s, __n);
      }
# 1842 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      assign(const _CharT* __s)
      {
 ;
 return _M_replace(size_type(0), this->size(), __s,
     traits_type::length(__s));
      }
# 1860 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1874 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>

 basic_string&
 assign(_InputIterator __first, _InputIterator __last)
 {
   using _IterTraits = iterator_traits<_InputIterator>;
   if constexpr (is_pointer<decltype(std::__niter_base(__first))>::value
     && is_same<typename _IterTraits::value_type,
         _CharT>::value)
     {
       ;
       return _M_replace(size_type(0), size(),
    std::__niter_base(__first), __last - __first);
     }
# 1901 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
   else
     return *this = basic_string(__first, __last, get_allocator());
 }
#pragma GCC diagnostic pop
# 1937 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      assign(initializer_list<_CharT> __l)
      {


 const size_type __n = __l.size();
 if (__n > capacity())
   *this = basic_string(__l.begin(), __l.end(), get_allocator());
 else
   {
     if (__n)
       _S_copy(_M_data(), __l.begin(), __n);
     _M_set_length(__n);
   }
 return *this;
      }
# 1962 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename _Tp>

 _If_sv<_Tp, basic_string&>
 assign(const _Tp& __svt)
 {
   __sv_type __sv = __svt;
   return this->assign(__sv.data(), __sv.size());
 }
# 1978 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename _Tp>

 _If_sv<_Tp, basic_string&>
 assign(const _Tp& __svt, size_type __pos, size_type __n = npos)
 {
   __sv_type __sv = __svt;
   return _M_replace(size_type(0), this->size(),
       __sv.data()
       + std::__sv_check(__sv.size(), __pos, "basic_string::assign"),
       std::__sv_limit(__sv.size(), __pos, __n));
 }
# 2007 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      iterator
      insert(const_iterator __p, size_type __n, _CharT __c)
      {
 ;
 const size_type __pos = __p - begin();
 this->replace(__p, __p, __n, __c);
 return iterator(this->_M_data() + __pos);
      }
# 2050 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>

 iterator
        insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
        {
   ;
   const size_type __pos = __p - begin();
   this->replace(__p, __p, __beg, __end);
   return iterator(this->_M_data() + __pos);
 }
# 2118 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      iterator
      insert(const_iterator __p, initializer_list<_CharT> __l)
      { return this->insert(__p, __l.begin(), __l.end()); }
# 2146 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->replace(__pos1, size_type(0),
        __str._M_data(), __str.size()); }
# 2170 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n = npos)
      { return this->replace(__pos1, size_type(0), __str._M_data()
        + __str._M_check(__pos2, "basic_string::insert"),
        __str._M_limit(__pos2, __n)); }
# 2194 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n)
      { return this->replace(__pos, size_type(0), __s, __n); }
# 2214 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
 ;
 return this->replace(__pos, size_type(0), __s,
        traits_type::length(__s));
      }
# 2239 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 2258 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      iterator
      insert(__const_iterator __p, _CharT __c)
      {
 ;
 const size_type __pos = __p - begin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 return iterator(_M_data() + __pos);
      }
# 2275 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename _Tp>

 _If_sv<_Tp, basic_string&>
 insert(size_type __pos, const _Tp& __svt)
 {
   __sv_type __sv = __svt;
   return this->insert(__pos, __sv.data(), __sv.size());
 }
# 2292 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename _Tp>

 _If_sv<_Tp, basic_string&>
 insert(size_type __pos1, const _Tp& __svt,
        size_type __pos2, size_type __n = npos)
 {
   __sv_type __sv = __svt;
   return this->replace(__pos1, size_type(0),
       __sv.data()
       + std::__sv_check(__sv.size(), __pos2, "basic_string::insert"),
       std::__sv_limit(__sv.size(), __pos2, __n));
 }
# 2321 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_check(__pos, "basic_string::erase");
 if (__n == npos)
   this->_M_set_length(__pos);
 else if (__n != 0)
   this->_M_erase(__pos, _M_limit(__pos, __n));
 return *this;
      }
# 2341 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      iterator
      erase(__const_iterator __position)
      {

                           ;
 const size_type __pos = __position - begin();
 this->_M_erase(__pos, size_type(1));
 return iterator(_M_data() + __pos);
      }
# 2361 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      iterator
      erase(__const_iterator __first, __const_iterator __last)
      {

                        ;
        const size_type __pos = __first - begin();
 if (__last == end())
   this->_M_set_length(__pos);
 else
   this->_M_erase(__pos, __last - __first);
 return iterator(this->_M_data() + __pos);
      }







     
      void
      pop_back() noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!empty())) std::__glibcxx_assert_fail(); } while (false);
 _M_erase(size() - 1, 1);
      }
# 2407 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 2430 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2 = npos)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 2456 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2)
      {
 ;
 return _M_replace(_M_check(__pos, "basic_string::replace"),
     _M_limit(__pos, __n1), __s, __n2);
      }
# 2482 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
 ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 2507 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 2526 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 2547 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __s, size_type __n)
      {

                      ;
 return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
      }
# 2570 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
      {
 ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 2592 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
       _CharT __c)
      {

                      ;
 return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
      }
# 2618 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>

        basic_string&
        replace(const_iterator __i1, const_iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {
  
                        ;
   ;
   return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
        std::__false_type());
 }
# 2651 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       _CharT* __k1, _CharT* __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

     
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

     
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       iterator __k1, iterator __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

     
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 2738 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      basic_string& replace(const_iterator __i1, const_iterator __i2,
       initializer_list<_CharT> __l)
      { return this->replace(__i1, __i2, __l.begin(), __l.size()); }
# 2752 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename _Tp>

 _If_sv<_Tp, basic_string&>
 replace(size_type __pos, size_type __n, const _Tp& __svt)
 {
   __sv_type __sv = __svt;
   return this->replace(__pos, __n, __sv.data(), __sv.size());
 }
# 2770 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename _Tp>

 _If_sv<_Tp, basic_string&>
 replace(size_type __pos1, size_type __n1, const _Tp& __svt,
  size_type __pos2, size_type __n2 = npos)
 {
   __sv_type __sv = __svt;
   return this->replace(__pos1, __n1,
       __sv.data()
       + std::__sv_check(__sv.size(), __pos2, "basic_string::replace"),
       std::__sv_limit(__sv.size(), __pos2, __n2));
 }
# 2792 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename _Tp>

 _If_sv<_Tp, basic_string&>
 replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)
 {
   __sv_type __sv = __svt;
   return this->replace(__i1 - begin(), __i2 - __i1, __sv);
 }


    private:
      template<class _Integer>

 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _Integer __n, _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>

 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _InputIterator __k1, _InputIterator __k2,
       __false_type);

     
      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      __attribute__((__noinline__, __noclone__, __cold__)) void
      _M_replace_cold(pointer __p, size_type __len1, const _CharT* __s,
        const size_type __len2, const size_type __how_much);

     
      basic_string&
      _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
   const size_type __len2);

     
      basic_string&
      _M_append(const _CharT* __s, size_type __n);

    public:
# 2849 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 2860 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
     
      void
      swap(basic_string& __s) noexcept;
# 2871 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      const _CharT*
      c_str() const noexcept
      { return _M_data(); }
# 2884 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      const _CharT*
      data() const noexcept
      { return _M_data(); }
# 2896 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      _CharT*
      data() noexcept
      { return _M_data(); }





      [[__nodiscard__]]
      allocator_type
      get_allocator() const noexcept
      { return _M_get_allocator(); }
# 2922 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2937 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find(__str.data(), __pos, __str.size()); }
# 2950 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename _Tp>
 [[__nodiscard__]]
 _If_sv<_Tp, size_type>
 find(const _Tp& __svt, size_type __pos = 0) const
 noexcept(is_same<_Tp, __sv_type>::value)
 {
   __sv_type __sv = __svt;
   return this->find(__sv.data(), __pos, __sv.size());
 }
# 2971 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find(const _CharT* __s, size_type __pos = 0) const noexcept
      {
 ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 2989 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find(_CharT __c, size_type __pos = 0) const noexcept;
# 3003 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 3016 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename _Tp>
 [[__nodiscard__]]
 _If_sv<_Tp, size_type>
 rfind(const _Tp& __svt, size_type __pos = npos) const
 noexcept(is_same<_Tp, __sv_type>::value)
 {
   __sv_type __sv = __svt;
   return this->rfind(__sv.data(), __pos, __sv.size());
 }
# 3039 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 3054 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 3072 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      rfind(_CharT __c, size_type __pos = npos) const noexcept;
# 3087 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 3101 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename _Tp>
 [[__nodiscard__]]
 _If_sv<_Tp, size_type>
 find_first_of(const _Tp& __svt, size_type __pos = 0) const
 noexcept(is_same<_Tp, __sv_type>::value)
 {
   __sv_type __sv = __svt;
   return this->find_first_of(__sv.data(), __pos, __sv.size());
 }
# 3124 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 3139 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      noexcept
      {
 ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 3160 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const noexcept
      { return this->find(__c, __pos); }
# 3176 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 3190 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename _Tp>
 [[__nodiscard__]]
 _If_sv<_Tp, size_type>
 find_last_of(const _Tp& __svt, size_type __pos = npos) const
 noexcept(is_same<_Tp, __sv_type>::value)
 {
   __sv_type __sv = __svt;
   return this->find_last_of(__sv.data(), __pos, __sv.size());
 }
# 3213 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 3228 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      noexcept
      {
 ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 3249 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const noexcept
      { return this->rfind(__c, __pos); }
# 3264 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 3278 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename _Tp>
 [[__nodiscard__]]
 _If_sv<_Tp, size_type>
 find_first_not_of(const _Tp& __svt, size_type __pos = 0) const
 noexcept(is_same<_Tp, __sv_type>::value)
 {
   __sv_type __sv = __svt;
   return this->find_first_not_of(__sv.data(), __pos, __sv.size());
 }
# 3301 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const noexcept;
# 3316 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      noexcept
      {
 ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 3335 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const
      noexcept;
# 3351 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 3365 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename _Tp>
 [[__nodiscard__]]
 _If_sv<_Tp, size_type>
 find_last_not_of(const _Tp& __svt, size_type __pos = npos) const
 noexcept(is_same<_Tp, __sv_type>::value)
 {
   __sv_type __sv = __svt;
   return this->find_last_not_of(__sv.data(), __pos, __sv.size());
 }
# 3388 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const noexcept;
# 3403 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      noexcept
      {
 ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 3422 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const
      noexcept;
# 3439 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 3459 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }







      template<typename _Tp>
 [[__nodiscard__]]
 _If_sv<_Tp, int>
 compare(const _Tp& __svt) const
 noexcept(is_same<_Tp, __sv_type>::value)
 {
   __sv_type __sv = __svt;
   const size_type __size = this->size();
   const size_type __osize = __sv.size();
   const size_type __len = std::min(__size, __osize);

   int __r = traits_type::compare(_M_data(), __sv.data(), __len);
   if (!__r)
     __r = _S_compare(__size, __osize);
   return __r;
 }
# 3504 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename _Tp>
 [[__nodiscard__]]
 _If_sv<_Tp, int>
 compare(size_type __pos, size_type __n, const _Tp& __svt) const
 noexcept(is_same<_Tp, __sv_type>::value)
 {
   __sv_type __sv = __svt;
   return __sv_type(*this).substr(__pos, __n).compare(__sv);
 }
# 3524 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename _Tp>
 [[__nodiscard__]]
 _If_sv<_Tp, int>
 compare(size_type __pos1, size_type __n1, const _Tp& __svt,
  size_type __pos2, size_type __n2 = npos) const
 noexcept(is_same<_Tp, __sv_type>::value)
 {
   __sv_type __sv = __svt;
   return __sv_type(*this)
     .substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));
 }
# 3556 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const
      {
 _M_check(__pos, "basic_string::compare");
 __n = _M_limit(__pos, __n);
 const size_type __osize = __str.size();
 const size_type __len = std::min(__n, __osize);
 int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
 if (!__r)
   __r = _S_compare(__n, __osize);
 return __r;
      }
# 3593 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2 = npos) const
      {
 _M_check(__pos1, "basic_string::compare");
 __str._M_check(__pos2, "basic_string::compare");
 __n1 = _M_limit(__pos1, __n1);
 __n2 = __str._M_limit(__pos2, __n2);
 const size_type __len = std::min(__n1, __n2);
 int __r = traits_type::compare(_M_data() + __pos1,
           __str.data() + __pos2, __len);
 if (!__r)
   __r = _S_compare(__n1, __n2);
 return __r;
      }
# 3624 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      int
      compare(const _CharT* __s) const noexcept
      {
 ;
 const size_type __size = this->size();
 const size_type __osize = traits_type::length(__s);
 const size_type __len = std::min(__size, __osize);
 int __r = traits_type::compare(_M_data(), __s, __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 3659 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const
      {
 ;
 _M_check(__pos, "basic_string::compare");
 __n1 = _M_limit(__pos, __n1);
 const size_type __osize = traits_type::length(__s);
 const size_type __len = std::min(__n1, __osize);
 int __r = traits_type::compare(_M_data() + __pos, __s, __len);
 if (!__r)
   __r = _S_compare(__n1, __osize);
 return __r;
      }
# 3698 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      [[__nodiscard__]]
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const
      {
 ;
 _M_check(__pos, "basic_string::compare");
 __n1 = _M_limit(__pos, __n1);
 const size_type __len = std::min(__n1, __n2);
 int __r = traits_type::compare(_M_data() + __pos, __s, __len);
 if (!__r)
   __r = _S_compare(__n1, __n2);
 return __r;
      }
# 3763 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
      template<typename, typename, typename> friend class basic_stringbuf;
    };
}

}


namespace std __attribute__ ((__visibility__ ("default")))
{



namespace __cxx11 {
  template<typename _InputIterator, typename _CharT
      = typename iterator_traits<_InputIterator>::value_type,
    typename _Allocator = allocator<_CharT>,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireAllocator<_Allocator>>
    basic_string(_InputIterator, _InputIterator, _Allocator = _Allocator())
      -> basic_string<_CharT, char_traits<_CharT>, _Allocator>;



  template<typename _CharT, typename _Traits,
    typename _Allocator = allocator<_CharT>,
    typename = _RequireAllocator<_Allocator>>
    basic_string(basic_string_view<_CharT, _Traits>, const _Allocator& = _Allocator())
      -> basic_string<_CharT, _Traits, _Allocator>;

  template<typename _CharT, typename _Traits,
    typename _Allocator = allocator<_CharT>,
    typename = _RequireAllocator<_Allocator>>
    basic_string(basic_string_view<_CharT, _Traits>,
   typename basic_string<_CharT, _Traits, _Allocator>::size_type,
   typename basic_string<_CharT, _Traits, _Allocator>::size_type,
   const _Allocator& = _Allocator())
      -> basic_string<_CharT, _Traits, _Allocator>;
# 3809 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
}


  template<typename _Str>
   
    inline _Str
    __str_concat(typename _Str::value_type const* __lhs,
   typename _Str::size_type __lhs_len,
   typename _Str::value_type const* __rhs,
   typename _Str::size_type __rhs_len,
   typename _Str::allocator_type const& __a)
    {
      typedef typename _Str::allocator_type allocator_type;
      typedef __gnu_cxx::__alloc_traits<allocator_type> _Alloc_traits;
      _Str __str(_Alloc_traits::_S_select_on_copy(__a));
      __str.reserve(__lhs_len + __rhs_len);
      __str.append(__lhs, __lhs_len);
      __str.append(__rhs, __rhs_len);
      return __str;
    }
# 3837 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> _Str;
      return std::__str_concat<_Str>(__lhs.c_str(), __lhs.size(),
         __rhs.c_str(), __rhs.size(),
         __lhs.get_allocator());
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs)
    {
      ;
      typedef basic_string<_CharT, _Traits, _Alloc> _Str;
      return std::__str_concat<_Str>(__lhs, _Traits::length(__lhs),
         __rhs.c_str(), __rhs.size(),
         __rhs.get_allocator());
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> _Str;
      return std::__str_concat<_Str>(__builtin_addressof(__lhs), 1,
         __rhs.c_str(), __rhs.size(),
         __rhs.get_allocator());
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    {
      ;
      typedef basic_string<_CharT, _Traits, _Alloc> _Str;
      return std::__str_concat<_Str>(__lhs.c_str(), __lhs.size(),
         __rhs, _Traits::length(__rhs),
         __lhs.get_allocator());
    }






  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> _Str;
      return std::__str_concat<_Str>(__lhs.c_str(), __lhs.size(),
         __builtin_addressof(__rhs), 1,
         __lhs.get_allocator());
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    {

      using _Alloc_traits = allocator_traits<_Alloc>;
      bool __use_rhs = false;
      if constexpr (typename _Alloc_traits::is_always_equal{})
 __use_rhs = true;
      else if (__lhs.get_allocator() == __rhs.get_allocator())
 __use_rhs = true;
      if (__use_rhs)

 {
   const auto __size = __lhs.size() + __rhs.size();
   if (__size > __lhs.capacity() && __size <= __rhs.capacity())
     return std::move(__rhs.insert(0, __lhs));
 }
      return std::move(__lhs.append(__rhs));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]] [[__nodiscard__]]
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       _CharT __rhs)
    { return std::move(__lhs.append(1, __rhs)); }
# 4042 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    {
      return __lhs.size() == __rhs.size()
        && !_Traits::compare(__lhs.data(), __rhs.data(), __lhs.size());
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    {
      return __lhs.size() == _Traits::length(__rhs)
        && !_Traits::compare(__lhs.data(), __rhs, __lhs.size());
    }
# 4106 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs == __lhs; }
# 4120 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__rhs == __lhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 4161 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 4202 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 4243 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 4284 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 4326 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
   
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept(noexcept(__lhs.swap(__rhs)))
    { __lhs.swap(__rhs); }
# 4347 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 4365 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 4388 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 4405 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str, __is.widen('\n')); }



  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    { return std::getline(__is, __str, __delim); }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str); }


  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}



# 1 "/usr/include/c++/15.1.1/ext/string_conversions.h" 1 3
# 30 "/usr/include/c++/15.1.1/ext/string_conversions.h" 3
#define _STRING_CONVERSIONS_H 1
# 45 "/usr/include/c++/15.1.1/ext/string_conversions.h" 3
# 1 "/usr/include/c++/15.1.1/cstdlib" 1 3
# 40 "/usr/include/c++/15.1.1/cstdlib" 3
#define _GLIBCXX_CSTDLIB 1
# 80 "/usr/include/c++/15.1.1/cstdlib" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#define _GLIBCXX_INCLUDE_NEXT_C_HEADERS 
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
#define __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION 
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 31 "/usr/include/bits/libc-header-start.h" 3 4
#undef __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION





#undef __GLIBC_USE_LIB_EXT2


#define __GLIBC_USE_LIB_EXT2 1
# 67 "/usr/include/bits/libc-header-start.h" 3 4
#undef __GLIBC_USE_IEC_60559_BFP_EXT

#define __GLIBC_USE_IEC_60559_BFP_EXT 1



#undef __GLIBC_USE_IEC_60559_BFP_EXT_C23

#define __GLIBC_USE_IEC_60559_BFP_EXT_C23 1



#undef __GLIBC_USE_IEC_60559_EXT

#define __GLIBC_USE_IEC_60559_EXT 1
# 90 "/usr/include/bits/libc-header-start.h" 3 4
#undef __GLIBC_USE_IEC_60559_FUNCS_EXT

#define __GLIBC_USE_IEC_60559_FUNCS_EXT 1



#undef __GLIBC_USE_IEC_60559_FUNCS_EXT_C23

#define __GLIBC_USE_IEC_60559_FUNCS_EXT_C23 1






#undef __GLIBC_USE_IEC_60559_TYPES_EXT

#define __GLIBC_USE_IEC_60559_TYPES_EXT 1
# 27 "/usr/include/stdlib.h" 2 3 4


#define __need_size_t 
#define __need_wchar_t 
#define __need_NULL 
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 1 3 4
# 173 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 252 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_size_t
# 364 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_wchar_t
# 414 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef NULL

#define NULL __null
# 425 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_NULL




#undef offsetof
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 33 "/usr/include/stdlib.h" 2 3 4

extern "C" {

#define _STDLIB_H 1



# 1 "/usr/include/bits/waitflags.h" 1 3 4
# 25 "/usr/include/bits/waitflags.h" 3 4
#define WNOHANG 1
#define WUNTRACED 2



#define WSTOPPED 2
#define WEXITED 4
#define WCONTINUED 8
#define WNOWAIT 0x01000000


#define __WNOTHREAD 0x20000000

#define __WALL 0x40000000
#define __WCLONE 0x80000000
# 41 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/bits/waitstatus.h" 1 3 4
# 28 "/usr/include/bits/waitstatus.h" 3 4
#define __WEXITSTATUS(status) (((status) & 0xff00) >> 8)


#define __WTERMSIG(status) ((status) & 0x7f)


#define __WSTOPSIG(status) __WEXITSTATUS(status)


#define __WIFEXITED(status) (__WTERMSIG(status) == 0)


#define __WIFSIGNALED(status) (((signed char) (((status) & 0x7f) + 1) >> 1) > 0)



#define __WIFSTOPPED(status) (((status) & 0xff) == 0x7f)




#define __WIFCONTINUED(status) ((status) == __W_CONTINUED)



#define __WCOREDUMP(status) ((status) & __WCOREFLAG)


#define __W_EXITCODE(ret,sig) ((ret) << 8 | (sig))
#define __W_STOPCODE(sig) ((sig) << 8 | 0x7f)
#define __W_CONTINUED 0xffff
#define __WCOREFLAG 0x80
# 42 "/usr/include/stdlib.h" 2 3 4


#define WEXITSTATUS(status) __WEXITSTATUS (status)
#define WTERMSIG(status) __WTERMSIG (status)
#define WSTOPSIG(status) __WSTOPSIG (status)
#define WIFEXITED(status) __WIFEXITED (status)
#define WIFSIGNALED(status) __WIFSIGNALED (status)
#define WIFSTOPPED(status) __WIFSTOPPED (status)

#define WIFCONTINUED(status) __WIFCONTINUED (status)







typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;
#define __ldiv_t_defined 1




__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
#define __lldiv_t_defined 1




#define RAND_MAX 2147483647




#define EXIT_FAILURE 1
#define EXIT_SUCCESS 0



#define MB_CUR_MAX (__ctype_get_mb_cur_max ())
extern size_t __ctype_get_mb_cur_max (void) noexcept (true) __attribute__ ((__warn_unused_result__));



extern double atof (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern int atoi (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern long int atol (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



__extension__ extern long long int atoll (const char *__nptr)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) noexcept (true) __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 141 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 177 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));






extern long int strtol (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtol")


     __attribute__ ((__nonnull__ (1)));
extern unsigned long int strtoul (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoul")



     __attribute__ ((__nonnull__ (1)));

__extension__
extern long long int strtoq (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoll")


     __attribute__ ((__nonnull__ (1)));
__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoull")



     __attribute__ ((__nonnull__ (1)));

__extension__
extern long long int strtoll (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoll")


     __attribute__ ((__nonnull__ (1)));
__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoull")



     __attribute__ ((__nonnull__ (1)));
# 278 "/usr/include/stdlib.h" 3 4
extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 298 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 340 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 4)));





extern long int strtol_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_strtol_l")



     __attribute__ ((__nonnull__ (1, 4)));
extern unsigned long int strtoul_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_strtoul_l")




     __attribute__ ((__nonnull__ (1, 4)));
__extension__
extern long long int strtoll_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_strtoll_l")




     __attribute__ ((__nonnull__ (1, 4)));
__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr, char **__restrict __endptr, int __base, locale_t __loc) noexcept (true) __asm__ ("" "__isoc23_strtoull_l")




     __attribute__ ((__nonnull__ (1, 4)));
# 415 "/usr/include/stdlib.h" 3 4
extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 436 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 505 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) noexcept (true) __attribute__ ((__warn_unused_result__));


extern long int a64l (const char *__s)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




# 1 "/usr/include/sys/types.h" 1 3 4
# 23 "/usr/include/sys/types.h" 3 4
#define _SYS_TYPES_H 1



extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;
#define __u_char_defined 

typedef __loff_t loff_t;




typedef __ino_t ino_t;



#define __ino_t_defined 


typedef __ino64_t ino64_t;
#define __ino64_t_defined 



typedef __dev_t dev_t;
#define __dev_t_defined 



typedef __gid_t gid_t;
#define __gid_t_defined 



typedef __mode_t mode_t;
#define __mode_t_defined 



typedef __nlink_t nlink_t;
#define __nlink_t_defined 



typedef __uid_t uid_t;
#define __uid_t_defined 
# 97 "/usr/include/sys/types.h" 3 4
typedef __pid_t pid_t;
#define __pid_t_defined 




typedef __id_t id_t;
#define __id_t_defined 
# 114 "/usr/include/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;
#define __daddr_t_defined 




typedef __key_t key_t;
#define __key_t_defined 



# 1 "/usr/include/bits/types/clock_t.h" 1 3 4

#define __clock_t_defined 1




typedef __clock_t clock_t;
# 127 "/usr/include/sys/types.h" 2 3 4

# 1 "/usr/include/bits/types/clockid_t.h" 1 3 4

#define __clockid_t_defined 1




typedef __clockid_t clockid_t;
# 129 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/bits/types/time_t.h" 1 3 4

#define __time_t_defined 1







typedef __time_t time_t;
# 130 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/bits/types/timer_t.h" 1 3 4

#define __timer_t_defined 1




typedef __timer_t timer_t;
# 131 "/usr/include/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;
#define __useconds_t_defined 


typedef __suseconds_t suseconds_t;
#define __suseconds_t_defined 



#define __need_size_t 
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 1 3 4
# 173 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 252 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_size_t
# 364 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_wchar_t
# 414 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef NULL

#define NULL __null
# 425 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_NULL




#undef offsetof
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 145 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/bits/stdint-intn.h" 1 3 4
# 20 "/usr/include/bits/stdint-intn.h" 3 4
#define _BITS_STDINT_INTN_H 1



typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));






#define __BIT_TYPES_DEFINED__ 1




# 1 "/usr/include/endian.h" 1 3 4
# 19 "/usr/include/endian.h" 3 4
#define _ENDIAN_H 1







#define LITTLE_ENDIAN __LITTLE_ENDIAN
#define BIG_ENDIAN __BIG_ENDIAN
#define PDP_ENDIAN __PDP_ENDIAN
#define BYTE_ORDER __BYTE_ORDER




# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 24 "/usr/include/bits/byteswap.h" 3 4
#define _BITS_BYTESWAP_H 1





#define __bswap_constant_16(x) ((__uint16_t) ((((x) >> 8) & 0xff) | (((x) & 0xff) << 8)))


static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}


#define __bswap_constant_32(x) ((((x) & 0xff000000u) >> 24) | (((x) & 0x00ff0000u) >> 8) | (((x) & 0x0000ff00u) << 8) | (((x) & 0x000000ffu) << 24))



static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}


#define __bswap_constant_64(x) ((((x) & 0xff00000000000000ull) >> 56) | (((x) & 0x00ff000000000000ull) >> 40) | (((x) & 0x0000ff0000000000ull) >> 24) | (((x) & 0x000000ff00000000ull) >> 8) | (((x) & 0x00000000ff000000ull) << 8) | (((x) & 0x0000000000ff0000ull) << 24) | (((x) & 0x000000000000ff00ull) << 40) | (((x) & 0x00000000000000ffull) << 56))
# 69 "/usr/include/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/bits/uintn-identity.h" 1 3 4
# 24 "/usr/include/bits/uintn-identity.h" 3 4
#define _BITS_UINTN_IDENTITY_H 1







static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4


#define htobe16(x) __bswap_16 (x)
#define htole16(x) __uint16_identity (x)
#define be16toh(x) __bswap_16 (x)
#define le16toh(x) __uint16_identity (x)

#define htobe32(x) __bswap_32 (x)
#define htole32(x) __uint32_identity (x)
#define be32toh(x) __bswap_32 (x)
#define le32toh(x) __uint32_identity (x)

#define htobe64(x) __bswap_64 (x)
#define htole64(x) __uint64_identity (x)
#define be64toh(x) __bswap_64 (x)
#define le64toh(x) __uint64_identity (x)
# 177 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/select.h" 1 3 4
# 22 "/usr/include/sys/select.h" 3 4
#define _SYS_SELECT_H 1







# 1 "/usr/include/bits/select.h" 1 3 4
# 25 "/usr/include/bits/select.h" 3 4
#define __FD_ZERO(s) do { unsigned int __i; fd_set *__arr = (s); for (__i = 0; __i < sizeof (fd_set) / sizeof (__fd_mask); ++__i) __FDS_BITS (__arr)[__i] = 0; } while (0)






#define __FD_SET(d,s) ((void) (__FDS_BITS (s)[__FD_ELT(d)] |= __FD_MASK(d)))

#define __FD_CLR(d,s) ((void) (__FDS_BITS (s)[__FD_ELT(d)] &= ~__FD_MASK(d)))

#define __FD_ISSET(d,s) ((__FDS_BITS (s)[__FD_ELT (d)] & __FD_MASK (d)) != 0)
# 31 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/types/sigset_t.h" 1 3 4

#define __sigset_t_defined 1

# 1 "/usr/include/bits/types/__sigset_t.h" 1 3 4

#define ____sigset_t_defined 

#define _SIGSET_NWORDS (1024 / (8 * sizeof (unsigned long int)))
typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/sys/select.h" 2 3 4



# 1 "/usr/include/bits/types/struct_timeval.h" 1 3 4

#define __timeval_defined 1





struct timeval
{




  __time_t tv_sec;
  __suseconds_t tv_usec;

};
# 38 "/usr/include/sys/select.h" 2 3 4

# 1 "/usr/include/bits/types/struct_timespec.h" 1 3 4


#define _STRUCT_TIMESPEC 1







struct timespec
{



  __time_t tv_sec;




  __syscall_slong_t tv_nsec;
# 31 "/usr/include/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/sys/select.h" 2 3 4
# 49 "/usr/include/sys/select.h" 3 4
typedef long int __fd_mask;


#undef __NFDBITS

#define __NFDBITS (8 * (int) sizeof (__fd_mask))
#define __FD_ELT(d) ((d) / __NFDBITS)
#define __FD_MASK(d) ((__fd_mask) (1UL << ((d) % __NFDBITS)))


typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];
#define __FDS_BITS(set) ((set)->fds_bits)




  } fd_set;


#define FD_SETSIZE __FD_SETSIZE



typedef __fd_mask fd_mask;


#define NFDBITS __NFDBITS




#define FD_SET(fd,fdsetp) __FD_SET (fd, fdsetp)
#define FD_CLR(fd,fdsetp) __FD_CLR (fd, fdsetp)
#define FD_ISSET(fd,fdsetp) __FD_ISSET (fd, fdsetp)
#define FD_ZERO(fdsetp) __FD_ZERO (fdsetp)


extern "C" {
# 102 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 127 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 150 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select2.h" 1 3 4
# 23 "/usr/include/bits/select2.h" 3 4
# 1 "/usr/include/bits/select-decl.h" 1 3 4
# 20 "/usr/include/bits/select-decl.h" 3 4
#define _BITS_SELECT_DECL_H 1






extern long int __fdelt_chk (long int __d);
extern long int __fdelt_warn (long int __d)
  __attribute__((__warning__ ("bit outside of fd_set selected")));
# 24 "/usr/include/bits/select2.h" 2 3 4

#undef __FD_ELT
#define __FD_ELT(d) __extension__ ({ long int __d = (d); (__builtin_constant_p (__d) ? (0 <= __d && __d < __FD_SETSIZE ? (__d / __NFDBITS) : __fdelt_warn (__d)) : __fdelt_chk (__d)); })
# 151 "/usr/include/sys/select.h" 2 3 4


}
# 180 "/usr/include/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;
#define __blksize_t_defined 





typedef __blkcnt_t blkcnt_t;
#define __blkcnt_t_defined 


typedef __fsblkcnt_t fsblkcnt_t;
#define __fsblkcnt_t_defined 


typedef __fsfilcnt_t fsfilcnt_t;
#define __fsfilcnt_t_defined 
# 219 "/usr/include/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 20 "/usr/include/bits/pthreadtypes.h" 3 4
#define _BITS_PTHREADTYPES_COMMON_H 1


# 1 "/usr/include/bits/thread-shared-types.h" 1 3 4
# 20 "/usr/include/bits/thread-shared-types.h" 3 4
#define _THREAD_SHARED_TYPES_H 1
# 44 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/pthreadtypes-arch.h" 1 3 4
# 19 "/usr/include/bits/pthreadtypes-arch.h" 3 4
#define _BITS_PTHREADTYPES_ARCH_H 1

# 1 "/usr/include/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64






#define __WORDSIZE_TIME64_COMPAT32 1



#define __SYSCALL_WORDSIZE 64
# 22 "/usr/include/bits/pthreadtypes-arch.h" 2 3 4



#define __SIZEOF_PTHREAD_MUTEX_T 40
#define __SIZEOF_PTHREAD_ATTR_T 56
#define __SIZEOF_PTHREAD_RWLOCK_T 56
#define __SIZEOF_PTHREAD_BARRIER_T 32
# 41 "/usr/include/bits/pthreadtypes-arch.h" 3 4
#define __SIZEOF_PTHREAD_MUTEXATTR_T 4
#define __SIZEOF_PTHREAD_COND_T 48
#define __SIZEOF_PTHREAD_CONDATTR_T 4
#define __SIZEOF_PTHREAD_RWLOCKATTR_T 8
#define __SIZEOF_PTHREAD_BARRIERATTR_T 4

#define __LOCK_ALIGNMENT 
#define __ONCE_ALIGNMENT 
# 45 "/usr/include/bits/thread-shared-types.h" 2 3 4

# 1 "/usr/include/bits/atomic_wide_counter.h" 1 3 4
# 20 "/usr/include/bits/atomic_wide_counter.h" 3 4
#define _BITS_ATOMIC_WIDE_COUNTER_H 




typedef union
{
  __extension__ unsigned long long int __value64;
  struct
  {
    unsigned int __low;
    unsigned int __high;
  } __value32;
} __atomic_wide_counter;
# 47 "/usr/include/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 76 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/struct_mutex.h" 1 3 4
# 20 "/usr/include/bits/struct_mutex.h" 3 4
#define _THREAD_MUTEX_INTERNAL_H 1

struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
#define __PTHREAD_MUTEX_HAVE_PREV 1
# 53 "/usr/include/bits/struct_mutex.h" 3 4
};


#define __PTHREAD_MUTEX_INITIALIZER(__kind) 0, 0, 0, 0, __kind, 0, 0, { NULL, NULL }
# 77 "/usr/include/bits/thread-shared-types.h" 2 3 4
# 89 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/struct_rwlock.h" 1 3 4
# 21 "/usr/include/bits/struct_rwlock.h" 3 4
#define _RWLOCK_INTERNAL_H 

struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];
#define __PTHREAD_RWLOCK_ELISION_EXTRA 0, { 0, 0, 0, 0, 0, 0, 0 }

  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/bits/struct_rwlock.h" 3 4
};


#define __PTHREAD_RWLOCK_INITIALIZER(__flags) 0, 0, 0, 0, 0, 0, 0, 0, __PTHREAD_RWLOCK_ELISION_EXTRA, 0, __flags
# 90 "/usr/include/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __atomic_wide_counter __wseq;
  __atomic_wide_counter __g1_start;
  unsigned int __g_size[2] ;
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
  unsigned int __unused_initialized_1;
  unsigned int __unused_initialized_2;
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct
{
  int __data ;
} __once_flag;

#define __ONCE_FLAG_INIT { 0 }
# 24 "/usr/include/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;
#define __have_pthread_attr_t 1



typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/sys/types.h" 2 3 4


}
# 515 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) noexcept (true);


extern void srandom (unsigned int __seed) noexcept (true);





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) noexcept (true) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) noexcept (true) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     noexcept (true) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) noexcept (true);

extern void srand (unsigned int __seed) noexcept (true);



extern int rand_r (unsigned int *__seed) noexcept (true);







extern double drand48 (void) noexcept (true);
extern double erand48 (unsigned short int __xsubi[3]) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) noexcept (true);
extern long int nrand48 (unsigned short int __xsubi[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) noexcept (true);
extern long int jrand48 (unsigned short int __xsubi[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) noexcept (true);
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     noexcept (true) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) noexcept (true) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     noexcept (true) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern __uint32_t arc4random (void)
     noexcept (true) __attribute__ ((__warn_unused_result__));


extern void arc4random_buf (void *__buf, size_t __size)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern __uint32_t arc4random_uniform (__uint32_t __upper_bound)
     noexcept (true) __attribute__ ((__warn_unused_result__));




extern void *malloc (size_t __size) noexcept (true) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) __attribute__ ((__warn_unused_result__));

extern void *calloc (size_t __nmemb, size_t __size)
     noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) __attribute__ ((__warn_unused_result__));






extern void *realloc (void *__ptr, size_t __size)
     noexcept (true) __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));


extern void free (void *__ptr) noexcept (true);







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     noexcept (true) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)))
    __attribute__ ((__malloc__ (__builtin_free, 1)));


extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     noexcept (true) __attribute__ ((__malloc__ (reallocarray, 1)));



# 1 "/usr/include/alloca.h" 1 3 4
# 19 "/usr/include/alloca.h" 3 4
#define _ALLOCA_H 1



#define __need_size_t 
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 1 3 4
# 173 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 252 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_size_t
# 364 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_wchar_t
# 414 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef NULL

#define NULL __null
# 425 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_NULL




#undef offsetof
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {


#undef alloca


extern void *alloca (size_t __size) noexcept (true);


#define alloca(size) __builtin_alloca (size)


}
# 707 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) noexcept (true) __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) __attribute__ ((__warn_unused_result__));




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




extern void *aligned_alloc (size_t __alignment, size_t __size)
     noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__alloc_align__ (1)))
     __attribute__ ((__alloc_size__ (2))) __attribute__ ((__warn_unused_result__));



extern void abort (void) noexcept (true) __attribute__ ((__noreturn__)) __attribute__ ((__cold__));



extern int atexit (void (*__func) (void)) noexcept (true) __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     noexcept (true) __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 749 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     noexcept (true) __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) noexcept (true) __attribute__ ((__noreturn__));





extern void quick_exit (int __status) noexcept (true) __attribute__ ((__noreturn__));





extern void _Exit (int __status) noexcept (true) __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




extern char *secure_getenv (const char *__name)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));






extern int putenv (char *__string) noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     noexcept (true) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) noexcept (true);
# 814 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) noexcept (true) __attribute__ ((__nonnull__ (1)));
# 827 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 837 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 849 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 859 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 870 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 881 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 891 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 901 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 913 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 923 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) __attribute__ ((__warn_unused_result__));





extern char *canonicalize_file_name (const char *__name)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__malloc__))
     __attribute__ ((__malloc__ (__builtin_free, 1))) __attribute__ ((__warn_unused_result__));
# 940 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) noexcept (true) __attribute__ ((__warn_unused_result__));





#define __COMPAR_FN_T 
typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) __attribute__ ((__warn_unused_result__));







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) noexcept (true) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern long int labs (long int __x) noexcept (true) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));


__extension__ extern long long int llabs (long long int __x)
     noexcept (true) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));






extern div_t div (int __numer, int __denom)
     noexcept (true) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern ldiv_t ldiv (long int __numer, long int __denom)
     noexcept (true) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     noexcept (true) __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
# 1012 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) noexcept (true) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) noexcept (true) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *gcvt (double __value, int __ndigit, char *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) noexcept (true);


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) noexcept (true);


extern int wctomb (char *__s, wchar_t __wchar) noexcept (true);



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) noexcept (true)
    __attribute__ ((__access__ (__read_only__, 2)));

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     noexcept (true)
  __attribute__ ((__access__ (__write_only__, 1, 3)))
  __attribute__ ((__access__ (__read_only__, 2)));






extern int rpmatch (const char *__response) noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 1099 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__warn_unused_result__));







extern int posix_openpt (int __oflag) __attribute__ ((__warn_unused_result__));







extern int grantpt (int __fd) noexcept (true);



extern int unlockpt (int __fd) noexcept (true);




extern char *ptsname (int __fd) noexcept (true) __attribute__ ((__warn_unused_result__));






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     noexcept (true) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 2, 3)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 1155 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/stdlib-float.h" 1 3 4
# 1156 "/usr/include/stdlib.h" 2 3 4



# 1 "/usr/include/bits/stdlib.h" 1 3 4
# 23 "/usr/include/bits/stdlib.h" 3 4
extern char *__realpath_chk (const char *__restrict __name,
        char *__restrict __resolved,
        size_t __resolvedlen) noexcept (true) __attribute__ ((__warn_unused_result__));
extern char *__realpath_alias (const char *__restrict __name, char *__restrict __resolved) noexcept (true) __asm__ ("" "realpath")

                                                 __attribute__ ((__warn_unused_result__));
extern char *__realpath_chk_warn (const char *__restrict __name, char *__restrict __resolved, size_t __resolvedlen) noexcept (true) __asm__ ("" "__realpath_chk")


                                                __attribute__ ((__warn_unused_result__))
     __attribute__((__warning__ ("second argument of realpath must be either NULL or at " "least PATH_MAX bytes long buffer")))
                                      ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__leaf__)) realpath (const char *__restrict __name, char * __restrict __resolved) noexcept (true)







{
  size_t __sz = __builtin_object_size (__resolved, 2 > 1);

  if (__sz == (size_t) -1)
    return __realpath_alias (__name, __resolved);





  return __realpath_chk (__name, __resolved, __sz);
}


extern int __ptsname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) noexcept (true) __attribute__ ((__nonnull__ (2)))
    __attribute__ ((__access__ (__write_only__, 2, 3)));
extern int __ptsname_r_alias (int __fd, char *__buf, size_t __buflen) noexcept (true) __asm__ ("" "ptsname_r")

     __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern int __ptsname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) noexcept (true) __asm__ ("" "__ptsname_r_chk")


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ptsname_r called with buflen bigger than " "size of buf")))
                   ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) ptsname_r (int __fd, char * __buf, size_t __buflen) noexcept (true)


    


{
  return (((__builtin_constant_p (__builtin_object_size (__buf, 2 > 1)) && (__builtin_object_size (__buf, 2 > 1)) == (long unsigned int) -1) || (((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= ((__builtin_object_size (__buf, 2 > 1))) / ((sizeof (char))))) && (((long unsigned int) (__buflen)) <= ((__builtin_object_size (__buf, 2 > 1))) / ((sizeof (char)))))) ? __ptsname_r_alias (__fd, __buf, __buflen) : ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __ptsname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1)) : __ptsname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1))))

                           ;
}


extern int __wctomb_chk (char *__s, wchar_t __wchar, size_t __buflen)
  noexcept (true) __attribute__ ((__warn_unused_result__));
extern int __wctomb_alias (char *__s, wchar_t __wchar) noexcept (true) __asm__ ("" "wctomb")
              __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) int
__attribute__ ((__leaf__)) wctomb (char * __s, wchar_t __wchar) noexcept (true)
{



#define __STDLIB_MB_LEN_MAX 16



  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1
      && 16 > __builtin_object_size (__s, 2 > 1))
    return __wctomb_chk (__s, __wchar, __builtin_object_size (__s, 2 > 1));
  return __wctomb_alias (__s, __wchar);
}


extern size_t __mbstowcs_chk (wchar_t *__restrict __dst,
         const char *__restrict __src,
         size_t __len, size_t __dstlen) noexcept (true)
    __attribute__ ((__access__ (__write_only__, 1, 3))) __attribute__ ((__access__ (__read_only__, 2)));
extern size_t __mbstowcs_nulldst (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) noexcept (true) __asm__ ("" "mbstowcs")



    __attribute__ ((__access__ (__read_only__, 2)));
extern size_t __mbstowcs_alias (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) noexcept (true) __asm__ ("" "mbstowcs")



    __attribute__ ((__access__ (__write_only__, 1, 3))) __attribute__ ((__access__ (__read_only__, 2)));
extern size_t __mbstowcs_chk_warn (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len, size_t __dstlen) noexcept (true) __asm__ ("" "__mbstowcs_chk")



     __attribute__((__warning__ ("mbstowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) mbstowcs (wchar_t * __restrict __dst, const char *__restrict __src, size_t __len) noexcept (true)


    


{
  if (__builtin_constant_p (__dst == __null) && __dst == __null)
    return __mbstowcs_nulldst (__dst, __src, __len);
  else
    return (((__builtin_constant_p (__builtin_object_size (__dst, 2 > 1)) && (__builtin_object_size (__dst, 2 > 1)) == (long unsigned int) -1) || (((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= ((__builtin_object_size (__dst, 2 > 1))) / ((sizeof (wchar_t))))) && (((long unsigned int) (__len)) <= ((__builtin_object_size (__dst, 2 > 1))) / ((sizeof (wchar_t)))))) ? __mbstowcs_alias (__dst, __src, __len) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))) ? __mbstowcs_chk_warn (__dst, __src, __len, (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t))) : __mbstowcs_chk (__dst, __src, __len, (__builtin_object_size (__dst, 2 > 1)) / (sizeof (wchar_t)))))
                                                      ;
}

extern size_t __wcstombs_chk (char *__restrict __dst,
         const wchar_t *__restrict __src,
         size_t __len, size_t __dstlen) noexcept (true)
  __attribute__ ((__access__ (__write_only__, 1, 3))) __attribute__ ((__access__ (__read_only__, 2)));
extern size_t __wcstombs_alias (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) noexcept (true) __asm__ ("" "wcstombs")



  __attribute__ ((__access__ (__write_only__, 1, 3))) __attribute__ ((__access__ (__read_only__, 2)));
extern size_t __wcstombs_chk_warn (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len, size_t __dstlen) noexcept (true) __asm__ ("" "__wcstombs_chk")



     __attribute__((__warning__ ("wcstombs called with dst buffer smaller than len")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) wcstombs (char * __restrict __dst, const wchar_t *__restrict __src, size_t __len) noexcept (true)


{
  return (((__builtin_constant_p (__builtin_object_size (__dst, 2 > 1)) && (__builtin_object_size (__dst, 2 > 1)) == (long unsigned int) -1) || (((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= ((__builtin_object_size (__dst, 2 > 1))) / ((sizeof (char))))) && (((long unsigned int) (__len)) <= ((__builtin_object_size (__dst, 2 > 1))) / ((sizeof (char)))))) ? __wcstombs_alias (__dst, __src, __len) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__dst, 2 > 1)) / (sizeof (char)))) ? __wcstombs_chk_warn (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1)) : __wcstombs_chk (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1))))

                         ;
}
# 1160 "/usr/include/stdlib.h" 2 3 4







}
# 84 "/usr/include/c++/15.1.1/cstdlib" 2 3
#undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
 
# 85 "/usr/include/c++/15.1.1/cstdlib" 3
#pragma GCC diagnostic pop

# 1 "/usr/include/c++/15.1.1/bits/std_abs.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/std_abs.h" 3
#define _GLIBCXX_BITS_STD_ABS_H 







#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#pragma GCC diagnostic ignored "-Wlong-long"

#define _GLIBCXX_INCLUDE_NEXT_C_HEADERS 




#undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS

#undef abs

extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 76 "/usr/include/c++/15.1.1/bits/std_abs.h" 3
  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  __extension__ inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 141 "/usr/include/c++/15.1.1/bits/std_abs.h" 3
  __extension__ inline constexpr
  __float128
  abs(__float128 __x)
  {



    return __builtin_fabsf128(__x);




  }



}
}

#pragma GCC diagnostic pop
# 88 "/usr/include/c++/15.1.1/cstdlib" 2 3


#undef abort

#undef aligned_alloc

#undef atexit


#undef at_quick_exit


#undef atof
#undef atoi
#undef atol
#undef bsearch
#undef calloc
#undef div
#undef exit
#undef free
#undef getenv
#undef labs
#undef ldiv
#undef malloc
#undef mblen
#undef mbstowcs
#undef mbtowc
#undef qsort


#undef quick_exit


#undef rand
#undef realloc
#undef srand
#undef strtod
#undef strtol
#undef strtoul
#undef system
#undef wcstombs
#undef wctomb

extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;

  using ::aligned_alloc;

  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) noexcept { return ldiv(__i, __j); }




}



#undef _Exit
#undef llabs
#undef lldiv
#undef atoll
#undef strtoll
#undef strtoull
#undef strtof
#undef strtold

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
#pragma GCC diagnostic pop
# 240 "/usr/include/c++/15.1.1/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}
# 284 "/usr/include/c++/15.1.1/cstdlib" 3
}
# 46 "/usr/include/c++/15.1.1/ext/string_conversions.h" 2 3

# 1 "/usr/include/c++/15.1.1/cstdio" 1 3
# 40 "/usr/include/c++/15.1.1/cstdio" 3
#define _GLIBCXX_CSTDIO 1
# 54 "/usr/include/c++/15.1.1/cstdio" 3
#undef clearerr
#undef fclose
#undef feof
#undef ferror
#undef fflush
#undef fgetc
#undef fgetpos
#undef fgets
#undef fopen
#undef fprintf
#undef fputc
#undef fputs
#undef fread
#undef freopen
#undef fscanf
#undef fseek
#undef fsetpos
#undef ftell
#undef fwrite
#undef getc
#undef getchar



#undef perror
#undef printf
#undef putc
#undef putchar
#undef puts
#undef remove
#undef rename
#undef rewind
#undef scanf
#undef setbuf
#undef setvbuf
#undef sprintf
#undef sscanf
#undef tmpfile
#undef tmpnam
#undef ungetc
#undef vfprintf
#undef vprintf
#undef vsprintf

namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;




  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;

  using ::tmpnam;

  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}



#undef snprintf
#undef vfscanf
#undef vscanf
#undef vsnprintf
#undef vsscanf

namespace __gnu_cxx
{
# 177 "/usr/include/c++/15.1.1/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 48 "/usr/include/c++/15.1.1/ext/string_conversions.h" 2 3
# 1 "/usr/include/c++/15.1.1/cerrno" 1 3
# 40 "/usr/include/c++/15.1.1/cerrno" 3
#define _GLIBCXX_CERRNO 1






# 1 "/usr/include/errno.h" 1 3 4
# 23 "/usr/include/errno.h" 3 4
#define _ERRNO_H 1




# 1 "/usr/include/bits/errno.h" 1 3 4
# 20 "/usr/include/bits/errno.h" 3 4
#define _BITS_ERRNO_H 1





# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4


#define _ASM_GENERIC_ERRNO_H 

# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4


#define _ASM_GENERIC_ERRNO_BASE_H 

#define EPERM 1
#define ENOENT 2
#define ESRCH 3
#define EINTR 4
#define EIO 5
#define ENXIO 6
#define E2BIG 7
#define ENOEXEC 8
#define EBADF 9
#define ECHILD 10
#define EAGAIN 11
#define ENOMEM 12
#define EACCES 13
#define EFAULT 14
#define ENOTBLK 15
#define EBUSY 16
#define EEXIST 17
#define EXDEV 18
#define ENODEV 19
#define ENOTDIR 20
#define EISDIR 21
#define EINVAL 22
#define ENFILE 23
#define EMFILE 24
#define ENOTTY 25
#define ETXTBSY 26
#define EFBIG 27
#define ENOSPC 28
#define ESPIPE 29
#define EROFS 30
#define EMLINK 31
#define EPIPE 32
#define EDOM 33
#define ERANGE 34
# 6 "/usr/include/asm-generic/errno.h" 2 3 4

#define EDEADLK 35
#define ENAMETOOLONG 36
#define ENOLCK 37
# 18 "/usr/include/asm-generic/errno.h" 3 4
#define ENOSYS 38

#define ENOTEMPTY 39
#define ELOOP 40
#define EWOULDBLOCK EAGAIN
#define ENOMSG 42
#define EIDRM 43
#define ECHRNG 44
#define EL2NSYNC 45
#define EL3HLT 46
#define EL3RST 47
#define ELNRNG 48
#define EUNATCH 49
#define ENOCSI 50
#define EL2HLT 51
#define EBADE 52
#define EBADR 53
#define EXFULL 54
#define ENOANO 55
#define EBADRQC 56
#define EBADSLT 57

#define EDEADLOCK EDEADLK

#define EBFONT 59
#define ENOSTR 60
#define ENODATA 61
#define ETIME 62
#define ENOSR 63
#define ENONET 64
#define ENOPKG 65
#define EREMOTE 66
#define ENOLINK 67
#define EADV 68
#define ESRMNT 69
#define ECOMM 70
#define EPROTO 71
#define EMULTIHOP 72
#define EDOTDOT 73
#define EBADMSG 74
#define EOVERFLOW 75
#define ENOTUNIQ 76
#define EBADFD 77
#define EREMCHG 78
#define ELIBACC 79
#define ELIBBAD 80
#define ELIBSCN 81
#define ELIBMAX 82
#define ELIBEXEC 83
#define EILSEQ 84
#define ERESTART 85
#define ESTRPIPE 86
#define EUSERS 87
#define ENOTSOCK 88
#define EDESTADDRREQ 89
#define EMSGSIZE 90
#define EPROTOTYPE 91
#define ENOPROTOOPT 92
#define EPROTONOSUPPORT 93
#define ESOCKTNOSUPPORT 94
#define EOPNOTSUPP 95
#define EPFNOSUPPORT 96
#define EAFNOSUPPORT 97
#define EADDRINUSE 98
#define EADDRNOTAVAIL 99
#define ENETDOWN 100
#define ENETUNREACH 101
#define ENETRESET 102
#define ECONNABORTED 103
#define ECONNRESET 104
#define ENOBUFS 105
#define EISCONN 106
#define ENOTCONN 107
#define ESHUTDOWN 108
#define ETOOMANYREFS 109
#define ETIMEDOUT 110
#define ECONNREFUSED 111
#define EHOSTDOWN 112
#define EHOSTUNREACH 113
#define EALREADY 114
#define EINPROGRESS 115
#define ESTALE 116
#define EUCLEAN 117
#define ENOTNAM 118
#define ENAVAIL 119
#define EISNAM 120
#define EREMOTEIO 121
#define EDQUOT 122

#define ENOMEDIUM 123
#define EMEDIUMTYPE 124
#define ECANCELED 125
#define ENOKEY 126
#define EKEYEXPIRED 127
#define EKEYREVOKED 128
#define EKEYREJECTED 129


#define EOWNERDEAD 130
#define ENOTRECOVERABLE 131

#define ERFKILL 132

#define EHWPOISON 133
# 2 "/usr/include/asm/errno.h" 2 3 4
# 2 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/bits/errno.h" 2 3 4



#define ENOTSUP EOPNOTSUPP
# 29 "/usr/include/errno.h" 2 3 4





extern "C" {


extern int *__errno_location (void) noexcept (true) __attribute__ ((__const__));
#define errno (*__errno_location ())






extern char *program_invocation_name;
extern char *program_invocation_short_name;

# 1 "/usr/include/bits/types/error_t.h" 1 3 4
# 20 "/usr/include/bits/types/error_t.h" 3 4
#define __error_t_defined 1

typedef int error_t;
# 49 "/usr/include/errno.h" 2 3 4



}
# 48 "/usr/include/c++/15.1.1/cerrno" 2 3
# 49 "/usr/include/c++/15.1.1/ext/string_conversions.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<typename _TRet, typename _Ret = _TRet, typename _CharT,
    typename... _Base>
    _Ret
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
    const char* __name, const _CharT* __str, std::size_t* __idx,
    _Base... __base)
    {
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
 _Save_errno() : _M_errno((*__errno_location ())) { (*__errno_location ()) = 0; }
 ~_Save_errno() { if ((*__errno_location ()) == 0) (*__errno_location ()) = _M_errno; }
 int _M_errno;
      } const __save_errno;

      struct _Range_chk {
   static bool
   _S_chk(_TRet, std::false_type) { return false; }

   static bool
   _S_chk(_TRet __val, std::true_type)
   {
     return __val < _TRet(__numeric_traits<int>::__min)
       || __val > _TRet(__numeric_traits<int>::__max);
   }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);

      if (__endptr == __str)
 std::__throw_invalid_argument(__name);
      else if ((*__errno_location ()) == 34
   || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 std::__throw_out_of_range(__name);
      else
 __ret = __tmp;

      if (__idx)
 *__idx = __endptr - __str;

      return __ret;
    }


  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
     __builtin_va_list), std::size_t __n,
   const _CharT* __fmt, ...)
    {


      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
         * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);

      const int __len = __convf(__s, __n, __fmt, __args);

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
    }


}
# 4445 "/usr/include/c++/15.1.1/bits/basic_string.h" 2 3
# 1 "/usr/include/c++/15.1.1/bits/charconv.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/charconv.h" 3
#define _GLIBCXX_CHARCONV_H 1
# 42 "/usr/include/c++/15.1.1/bits/charconv.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

namespace __detail
{


  template<typename _Tp>
    constexpr bool __integer_to_chars_is_unsigned
      = ! __gnu_cxx::__int_traits<_Tp>::__is_signed;



  template<typename _Tp>
    constexpr unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
    {

      static_assert(__integer_to_chars_is_unsigned<_Tp>, "implementation bug");


      unsigned __n = 1;
      const unsigned __b2 = __base * __base;
      const unsigned __b3 = __b2 * __base;
      const unsigned long __b4 = __b3 * __base;
      for (;;)
 {
   if (__value < (unsigned)__base) return __n;
   if (__value < __b2) return __n + 1;
   if (__value < __b3) return __n + 2;
   if (__value < __b4) return __n + 3;
   __value /= __b4;
   __n += 4;
 }
    }




  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
    {

      static_assert(__integer_to_chars_is_unsigned<_Tp>, "implementation bug");


      constexpr char __digits[201] =
 "0001020304050607080910111213141516171819"
 "2021222324252627282930313233343536373839"
 "4041424344454647484950515253545556575859"
 "6061626364656667686970717273747576777879"
 "8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
      while (__val >= 100)
 {
   auto const __num = (__val % 100) * 2;
   __val /= 100;
   __first[__pos] = __digits[__num + 1];
   __first[__pos - 1] = __digits[__num];
   __pos -= 2;
 }
      if (__val >= 10)
 {
   auto const __num = __val * 2;
   __first[1] = __digits[__num + 1];
   __first[0] = __digits[__num];
 }
      else
 __first[0] = '0' + __val;
    }

}

}
# 4446 "/usr/include/c++/15.1.1/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

namespace __cxx11 {


  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
        __idx, __base); }


  inline long long
  stoll(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(),
        __idx, __base); }
# 4488 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
  inline double
  stod(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }



  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }
# 4516 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
  inline long double
  stold(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); }
# 4528 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
  [[__nodiscard__]]
  inline string
  to_string(int __val)

  noexcept

  {
    const bool __neg = __val < 0;
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
    const auto __len = __detail::__to_chars_len(__uval);
    string __str;
    __str.__resize_and_overwrite(__neg + __len, [=](char* __p, size_t __n) {
      __p[0] = '-';
      __detail::__to_chars_10_impl(__p + (int)__neg, __len, __uval);
      return __n;
    });
    return __str;
  }

  [[__nodiscard__]]
  inline string
  to_string(unsigned __val)

  noexcept

  {
    const auto __len = __detail::__to_chars_len(__val);
    string __str;
    __str.__resize_and_overwrite(__len, [__val](char* __p, size_t __n) {
      __detail::__to_chars_10_impl(__p, __n, __val);
      return __n;
    });
    return __str;
  }

  [[__nodiscard__]]
  inline string
  to_string(long __val)



  {
    const bool __neg = __val < 0;
    const unsigned long __uval = __neg ? (unsigned long)~__val + 1ul : __val;
    const auto __len = __detail::__to_chars_len(__uval);
    string __str;
    __str.__resize_and_overwrite(__neg + __len, [=](char* __p, size_t __n) {
      __p[0] = '-';
      __detail::__to_chars_10_impl(__p + (int)__neg, __len, __uval);
      return __n;
    });
    return __str;
  }

  [[__nodiscard__]]
  inline string
  to_string(unsigned long __val)



  {
    const auto __len = __detail::__to_chars_len(__val);
    string __str;
    __str.__resize_and_overwrite(__len, [__val](char* __p, size_t __n) {
      __detail::__to_chars_10_impl(__p, __n, __val);
      return __n;
    });
    return __str;
  }

  [[__nodiscard__]]
  inline string
  to_string(long long __val)
  {
    const bool __neg = __val < 0;
    const unsigned long long __uval
      = __neg ? (unsigned long long)~__val + 1ull : __val;
    const auto __len = __detail::__to_chars_len(__uval);
    string __str;
    __str.__resize_and_overwrite(__neg + __len, [=](char* __p, size_t __n) {
      __p[0] = '-';
      __detail::__to_chars_10_impl(__p + (int)__neg, __len, __uval);
      return __n;
    });
    return __str;
  }

  [[__nodiscard__]]
  inline string
  to_string(unsigned long long __val)
  {
    const auto __len = __detail::__to_chars_len(__val);
    string __str;
    __str.__resize_and_overwrite(__len, [__val](char* __p, size_t __n) {
      __detail::__to_chars_10_impl(__p, __n, __val);
      return __n;
    });
    return __str;
  }
# 4687 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsuggest-attribute=format"


  [[__nodiscard__]]
  inline string
  to_string(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  [[__nodiscard__]]
  inline string
  to_string(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  [[__nodiscard__]]
  inline string
  to_string(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%Lf", __val);
  }
#pragma GCC diagnostic pop



  inline int
  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::wcstol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); }



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
 
  inline void
  __to_wstring_numeric(const char* __s, int __len, wchar_t* __wout)
  {


    if constexpr (wchar_t('0') == L'0' && wchar_t('-') == L'-'
      && wchar_t('.') == L'.' && wchar_t('e') == L'e')
      {
 for (int __i = 0; __i < __len; ++__i)
   __wout[__i] = (wchar_t) __s[__i];
      }
    else
      {
 wchar_t __wc[256];
 for (int __i = '0'; __i <= '9'; ++__i)
   __wc[__i] = L'0' + __i;
 __wc['.'] = L'.';
 __wc['+'] = L'+';
 __wc['-'] = L'-';
 __wc['a'] = L'a';
 __wc['b'] = L'b';
 __wc['c'] = L'c';
 __wc['d'] = L'd';
 __wc['e'] = L'e';
 __wc['f'] = L'f';
 __wc['i'] = L'i';
 __wc['n'] = L'n';
 __wc['p'] = L'p';
 __wc['x'] = L'x';
 __wc['A'] = L'A';
 __wc['B'] = L'B';
 __wc['C'] = L'C';
 __wc['D'] = L'D';
 __wc['E'] = L'E';
 __wc['F'] = L'F';
 __wc['I'] = L'I';
 __wc['N'] = L'N';
 __wc['P'] = L'P';
 __wc['X'] = L'X';

 for (int __i = 0; __i < __len; ++__i)
   __wout[__i] = __wc[(int)__s[__i]];
      }
  }




  inline wstring

  __to_wstring_numeric(string_view __s)



  {
    if constexpr (wchar_t('0') == L'0' && wchar_t('-') == L'-'
      && wchar_t('.') == L'.' && wchar_t('e') == L'e')
      return wstring(__s.data(), __s.data() + __s.size());
    else
      {
 wstring __ws;
 auto __f = __s.data();
 __ws.__resize_and_overwrite(__s.size(),
        [__f] (wchar_t* __to, int __n) {
          std::__to_wstring_numeric(__f, __n, __to);
          return __n;
        });
 return __ws;
      }
  }
#pragma GCC diagnostic pop

  [[__nodiscard__]]
  inline wstring
  to_wstring(int __val)
  { return std::__to_wstring_numeric(std::to_string(__val)); }

  [[__nodiscard__]]
  inline wstring
  to_wstring(unsigned __val)
  { return std::__to_wstring_numeric(std::to_string(__val)); }

  [[__nodiscard__]]
  inline wstring
  to_wstring(long __val)
  { return std::__to_wstring_numeric(std::to_string(__val)); }

  [[__nodiscard__]]
  inline wstring
  to_wstring(unsigned long __val)
  { return std::__to_wstring_numeric(std::to_string(__val)); }

  [[__nodiscard__]]
  inline wstring
  to_wstring(long long __val)
  { return std::__to_wstring_numeric(std::to_string(__val)); }

  [[__nodiscard__]]
  inline wstring
  to_wstring(unsigned long long __val)
  { return std::__to_wstring_numeric(std::to_string(__val)); }


  [[__nodiscard__]]
  inline wstring
  to_wstring(float __val)
  { return std::__to_wstring_numeric(std::to_string(__val)); }

  [[__nodiscard__]]
  inline wstring
  to_wstring(double __val)
  { return std::__to_wstring_numeric(std::to_string(__val)); }

  [[__nodiscard__]]
  inline wstring
  to_wstring(long double __val)
  { return std::__to_wstring_numeric(std::to_string(__val)); }



}

}







namespace std __attribute__ ((__visibility__ ("default")))
{





  template<typename _CharT, typename _Alloc,
    typename _StrT = basic_string<_CharT, char_traits<_CharT>, _Alloc>>
    struct __str_hash_base
    : public __hash_base<size_t, _StrT>
    {
      [[__nodiscard__]]
      size_t
      operator()(const _StrT& __s) const noexcept
      { return _Hash_impl::hash(__s.data(), __s.length() * sizeof(_CharT)); }
    };



  template<typename _Alloc>
    struct hash<basic_string<char, char_traits<char>, _Alloc>>
    : public __str_hash_base<char, _Alloc>
    { };


  template<typename _Alloc>
    struct hash<basic_string<wchar_t, char_traits<wchar_t>, _Alloc>>
    : public __str_hash_base<wchar_t, _Alloc>
    { };

  template<typename _Alloc>
    struct __is_fast_hash<hash<basic_string<wchar_t, char_traits<wchar_t>,
         _Alloc>>>
    : std::false_type
    { };
# 4944 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
  template<typename _Alloc>
    struct hash<basic_string<char16_t, char_traits<char16_t>, _Alloc>>
    : public __str_hash_base<char16_t, _Alloc>
    { };


  template<typename _Alloc>
    struct hash<basic_string<char32_t, char_traits<char32_t>, _Alloc>>
    : public __str_hash_base<char32_t, _Alloc>
    { };



  template<> struct __is_fast_hash<hash<string>> : std::false_type { };
  template<> struct __is_fast_hash<hash<wstring>> : std::false_type { };
  template<> struct __is_fast_hash<hash<u16string>> : std::false_type { };
  template<> struct __is_fast_hash<hash<u32string>> : std::false_type { };
# 4973 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
  inline namespace literals
  {
  inline namespace string_literals
  {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wliteral-suffix"




#define _GLIBCXX_STRING_CONSTEXPR 


    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char>
    operator""s(const char* __str, size_t __len)
    { return basic_string<char>{__str, __len}; }

    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<wchar_t>
    operator""s(const wchar_t* __str, size_t __len)
    { return basic_string<wchar_t>{__str, __len}; }
# 5003 "/usr/include/c++/15.1.1/bits/basic_string.h" 3
    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char16_t>
    operator""s(const char16_t* __str, size_t __len)
    { return basic_string<char16_t>{__str, __len}; }

    __attribute ((__abi_tag__ ("cxx11")))
    inline basic_string<char32_t>
    operator""s(const char32_t* __str, size_t __len)
    { return basic_string<char32_t>{__str, __len}; }

#undef _GLIBCXX_STRING_CONSTEXPR
#pragma GCC diagnostic pop
  }
  }



  namespace __detail::__variant
  {
    template<typename> struct _Never_valueless_alt;



    template<typename _Tp, typename _Traits, typename _Alloc>
      struct _Never_valueless_alt<std::basic_string<_Tp, _Traits, _Alloc>>
      : __and_<
 is_nothrow_move_constructible<std::basic_string<_Tp, _Traits, _Alloc>>,
 is_nothrow_move_assignable<std::basic_string<_Tp, _Traits, _Alloc>>
 >::type
      { };
  }



}
# 57 "/usr/include/c++/15.1.1/string" 2 3
# 1 "/usr/include/c++/15.1.1/bits/basic_string.tcc" 1 3
# 40 "/usr/include/c++/15.1.1/bits/basic_string.tcc" 3
#define _BASIC_STRING_TCC 1





#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"



namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s) noexcept
    {
      if (this == std::__addressof(__s))
 return;

      _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());

      if (_M_is_local())
 if (__s._M_is_local())
   {
     if (length() && __s.length())
       {
  _CharT __tmp_data[_S_local_capacity + 1];
  traits_type::copy(__tmp_data, __s._M_local_buf,
      __s.length() + 1);
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      length() + 1);
  traits_type::copy(_M_local_buf, __tmp_data,
      __s.length() + 1);
       }
     else if (__s.length())
       {
  _M_init_local_buf();
  traits_type::copy(_M_local_buf, __s._M_local_buf,
      __s.length() + 1);
  _M_length(__s.length());
  __s._M_set_length(0);
  return;
       }
     else if (length())
       {
  __s._M_init_local_buf();
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      length() + 1);
  __s._M_length(length());
  _M_set_length(0);
  return;
       }
   }
 else
   {
     const size_type __tmp_capacity = __s._M_allocated_capacity;
     __s._M_init_local_buf();
     traits_type::copy(__s._M_local_buf, _M_local_buf,
         length() + 1);
     _M_data(__s._M_data());
     __s._M_data(__s._M_local_buf);
     _M_capacity(__tmp_capacity);
   }
      else
 {
   const size_type __tmp_capacity = _M_allocated_capacity;
   if (__s._M_is_local())
     {
       _M_init_local_buf();
       traits_type::copy(_M_local_buf, __s._M_local_buf,
    __s.length() + 1);
       __s._M_data(_M_data());
       _M_data(_M_local_buf);
     }
   else
     {
       pointer __tmp_ptr = _M_data();
       _M_data(__s._M_data());
       __s._M_data(__tmp_ptr);
       _M_capacity(__s._M_allocated_capacity);
     }
   __s._M_capacity(__tmp_capacity);
 }

      const size_type __tmp_length = length();
      _M_length(__s.length());
      __s._M_length(__tmp_length);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::pointer
    basic_string<_CharT, _Traits, _Alloc>::
    _M_create(size_type& __capacity, size_type __old_capacity)
    {


      if (__capacity > max_size())
 std::__throw_length_error(("basic_string::_M_create"));




      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 {
   __capacity = 2 * __old_capacity;

   if (__capacity > max_size())
     __capacity = max_size();
 }



      return _S_allocate(_M_get_allocator(), __capacity + 1);
    }





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
     
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::input_iterator_tag)
      {
 size_type __len = 0;
 size_type __capacity = size_type(_S_local_capacity);

 _M_init_local_buf();

 while (__beg != __end && __len < __capacity)
   {
     _M_local_buf[__len++] = *__beg;
     ++__beg;
   }

 struct _Guard
 {
  
   explicit _Guard(basic_string* __s) : _M_guarded(__s) { }

  
   ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }

   basic_string* _M_guarded;
 } __guard(this);

 while (__beg != __end)
   {
     if (__len == __capacity)
       {

  __capacity = __len + 1;
  pointer __another = _M_create(__capacity, __len);
  this->_S_copy(__another, _M_data(), __len);
  _M_dispose();
  _M_data(__another);
  _M_capacity(__capacity);
       }
     traits_type::assign(_M_data()[__len++],
    static_cast<_CharT>(*__beg));
     ++__beg;
   }

 __guard._M_guarded = 0;

 _M_set_length(__len);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
     
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::forward_iterator_tag)
      {
 size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

 if (__dnew > size_type(_S_local_capacity))
   {
     _M_data(_M_create(__dnew, size_type(0)));
     _M_capacity(__dnew);
   }
 else
   _M_init_local_buf();


 struct _Guard
 {
  
   explicit _Guard(basic_string* __s) : _M_guarded(__s) { }

  
   ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }

   basic_string* _M_guarded;
 } __guard(this);

 this->_S_copy_chars(_M_data(), __beg, __end);

 __guard._M_guarded = 0;

 _M_set_length(__dnew);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_construct(size_type __n, _CharT __c)
    {
      if (__n > size_type(_S_local_capacity))
 {
   _M_data(_M_create(__n, size_type(0)));
   _M_capacity(__n);
 }
      else
 _M_init_local_buf();

      if (__n)
 this->_S_assign(_M_data(), __n, __c);

      _M_set_length(__n);
    }



  template<typename _CharT, typename _Traits, typename _Alloc>
    template<bool _Terminated>
   
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_construct(const _CharT* __str, size_type __n)
    {
      if (__n > size_type(_S_local_capacity))
 {
   _M_data(_M_create(__n, size_type(0)));
   _M_capacity(__n);
 }
      else
 _M_init_local_buf();

      if (__n || _Terminated)
 this->_S_copy(_M_data(), __str, __n + _Terminated);

      _M_length(__n);
      if (!_Terminated)
 traits_type::assign(_M_data()[__n], _CharT());
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_assign(const basic_string& __str)
    {
      if (this != std::__addressof(__str))
 {
   const size_type __rsize = __str.length();
   const size_type __capacity = capacity();

   if (__rsize > __capacity)
     {
       size_type __new_capacity = __rsize;
       pointer __tmp = _M_create(__new_capacity, __capacity);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__new_capacity);
     }

   if (__rsize)
     this->_S_copy(_M_data(), __str._M_data(), __rsize);

   _M_set_length(__rsize);
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {
      const size_type __capacity = capacity();




      if (__res <= __capacity)
 return;

      pointer __tmp = _M_create(__res, __capacity);
      this->_S_copy(__tmp, _M_data(), length() + 1);
      _M_dispose();
      _M_data(__tmp);
      _M_capacity(__res);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
       size_type __len2)
    {
      const size_type __how_much = length() - __pos - __len1;

      size_type __new_capacity = length() + __len2 - __len1;
      pointer __r = _M_create(__new_capacity, capacity());

      if (__pos)
 this->_S_copy(__r, _M_data(), __pos);
      if (__s && __len2)
 this->_S_copy(__r + __pos, __s, __len2);
      if (__how_much)
 this->_S_copy(__r + __pos + __len2,
        _M_data() + __pos + __len1, __how_much);

      _M_dispose();
      _M_data(__r);
      _M_capacity(__new_capacity);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_erase(size_type __pos, size_type __n)
    {
      const size_type __how_much = length() - __pos - __n;

      if (__how_much && __n)
 this->_S_move(_M_data() + __pos, _M_data() + __pos + __n, __how_much);

      _M_set_length(length() - __n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve()
    {
      if (_M_is_local())
 return;

      const size_type __length = length();
      const size_type __capacity = _M_allocated_capacity;

      if (__length <= size_type(_S_local_capacity))
 {
   _M_init_local_buf();
   this->_S_copy(_M_local_buf, _M_data(), __length + 1);
   _M_destroy(__capacity);
   _M_data(_M_local_data());
 }

      else if (__length < __capacity)
 try
   {
     pointer __tmp = _S_allocate(_M_get_allocator(), __length + 1);
     this->_S_copy(__tmp, _M_data(), __length + 1);
     _M_dispose();
     _M_data(__tmp);
     _M_capacity(__length);
   }
 catch (const __cxxabiv1::__forced_unwind&)
   { throw; }
 catch (...)
   { }

    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->_M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_append(const _CharT* __s, size_type __n)
    {
      const size_type __len = __n + this->size();

      if (__len <= this->capacity())
 {
   if (__n)
     this->_S_copy(this->_M_data() + this->size(), __s, __n);
 }
      else
 this->_M_mutate(this->size(), size_type(0), __s, __n);

      this->_M_set_length(__len);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
     
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
     _InputIterator __k1, _InputIterator __k2,
     std::__false_type)
      {


 const basic_string __s(__k1, __k2, this->get_allocator());
 const size_type __n1 = __i2 - __i1;
 return _M_replace(__i1 - begin(), __n1, __s._M_data(),
     __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __n2 - __n1;

      if (__new_size <= this->capacity())
 {
   pointer __p = this->_M_data() + __pos1;

   const size_type __how_much = __old_size - __pos1 - __n1;
   if (__how_much && __n1 != __n2)
     this->_S_move(__p + __n2, __p + __n1, __how_much);
 }
      else
 this->_M_mutate(__pos1, __n1, 0, __n2);

      if (__n2)
 this->_S_assign(this->_M_data() + __pos1, __n2, __c);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    __attribute__((__noinline__, __noclone__, __cold__)) void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_cold(pointer __p, size_type __len1, const _CharT* __s,
      const size_type __len2, const size_type __how_much)
    {

      if (__len2 && __len2 <= __len1)
 this->_S_move(__p, __s, __len2);
      if (__how_much && __len1 != __len2)
 this->_S_move(__p + __len2, __p + __len1, __how_much);
      if (__len2 > __len1)
 {
   if (__s + __len2 <= __p + __len1)
     this->_S_move(__p, __s, __len2);
   else if (__s >= __p + __len1)
     {


       const size_type __poff = (__s - __p) + (__len2 - __len1);
       this->_S_copy(__p, __p + __poff, __len2);
     }
   else
     {
       const size_type __nleft = (__p + __len1) - __s;
       this->_S_move(__p, __s, __nleft);
       this->_S_copy(__p + __nleft, __p + __len2, __len2 - __nleft);
     }
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
        const size_type __len2)
    {
      _M_check_length(__len1, __len2, "basic_string::_M_replace");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;

      if (__new_size <= this->capacity())
 {
   pointer __p = this->_M_data() + __pos;

   const size_type __how_much = __old_size - __pos - __len1;
# 568 "/usr/include/c++/15.1.1/bits/basic_string.tcc" 3
   if (__builtin_expect(_M_disjunct(__s), true))
     {
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2)
  this->_S_copy(__p, __s, __len2);
     }
   else
     _M_replace_cold(__p, __len1, __s, __len2, __how_much);
 }
      else
 this->_M_mutate(__pos, __len1, __s, __len2);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
      ;
      if (__n)
 _S_copy(__s, _M_data() + __pos, __n);

      return __n;
    }
# 611 "/usr/include/c++/15.1.1/bits/basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
  template<typename _Operation>
    void
    basic_string<_CharT, _Traits, _Alloc>::



    __resize_and_overwrite(const size_type __n, _Operation __op)

    {
      reserve(__n);
      _CharT* const __p = _M_data();




      struct _Terminator {
 ~_Terminator() { _M_this->_M_set_length(_M_r); }
 basic_string* _M_this;
 size_type _M_r;
      };
      _Terminator __term{this, 0};
      auto __r = std::move(__op)(__p + 0, __n + 0);



      static_assert(__gnu_cxx::__is_integer_nonstrict<decltype(__r)>::__value,
      "resize_and_overwrite operation must return an integer");

      ;
      __term._M_r = size_type(__r);
      if (__term._M_r > __n)
 __builtin_unreachable();
    }







#define _GLIBCXX_STRING_CONSTEXPR 

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      const size_type __size = this->size();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;
      if (__pos >= __size)
 return npos;

      const _CharT __elem0 = __s[0];
      const _CharT* const __data = data();
      const _CharT* __first = __data + __pos;
      const _CharT* const __last = __data + __size;
      size_type __len = __size - __pos;

      while (__len >= __n)
 {

   __first = traits_type::find(__first, __len - __n + 1, __elem0);
   if (!__first)
     return npos;



   if (traits_type::compare(__first, __s, __n) == 0)
     return __first - __data;
   __len = __last - ++__first;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const noexcept
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const noexcept
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
   
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

#undef _GLIBCXX_STRING_CONSTEXPR


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (__extracted < __n && _Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   try
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }
# 1008 "/usr/include/c++/15.1.1/bits/basic_string.tcc" 3
  extern template class basic_string<char>;
# 1021 "/usr/include/c++/15.1.1/bits/basic_string.tcc" 3
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);



  extern template class basic_string<wchar_t>;
# 1047 "/usr/include/c++/15.1.1/bits/basic_string.tcc" 3
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}

#pragma GCC diagnostic pop
# 58 "/usr/include/c++/15.1.1/string" 2 3

#define __glibcxx_want_algorithm_default_value_type 
#define __glibcxx_want_allocator_traits_is_always_equal 
#define __glibcxx_want_constexpr_char_traits 
#define __glibcxx_want_constexpr_string 
#define __glibcxx_want_containers_ranges 
#define __glibcxx_want_erase_if 
#define __glibcxx_want_nonmember_container_access 
#define __glibcxx_want_string_resize_and_overwrite 
#define __glibcxx_want_string_udls 
#define __glibcxx_want_to_string 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements



#define __glibcxx_uncaught_exceptions 201411L





#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 110 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_shared_ptr_arrays 201611L





#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t



#define __glibcxx_enable_shared_from_this 201603L





#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine



#define __glibcxx_exchange_function 201304L





#undef __glibcxx_want_exchange_function



#define __glibcxx_integer_sequence 201304L





#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final



#define __glibcxx_make_reverse_iterator 201402L





#undef __glibcxx_want_make_reverse_iterator



#define __glibcxx_null_iterators 201304L





#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases



#define __glibcxx_transparent_operators 201510L





#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type



#define __glibcxx_robust_nonmodifying_seq_ops 201304L





#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 285 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_to_chars 201611L





#undef __glibcxx_want_to_chars



#define __glibcxx_chrono_udls 201304L





#undef __glibcxx_want_chrono_udls



#define __glibcxx_complex_udls 201309L





#undef __glibcxx_want_complex_udls



#define __glibcxx_generic_associative_lookup 201304L





#undef __glibcxx_want_generic_associative_lookup



#define __glibcxx_make_unique 201304L





#undef __glibcxx_want_make_unique



#define __glibcxx_quoted_string_io 201304L





#undef __glibcxx_want_quoted_string_io



#define __glibcxx_shared_timed_mutex 201402L





#undef __glibcxx_want_shared_timed_mutex



#define __glibcxx_string_udls 201304L

#define __cpp_lib_string_udls 201304L



#undef __glibcxx_want_string_udls



#define __glibcxx_addressof_constexpr 201603L





#undef __glibcxx_want_addressof_constexpr



#define __glibcxx_any 201606L





#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply



#define __glibcxx_as_const 201510L





#undef __glibcxx_want_as_const



#define __glibcxx_atomic_is_always_lock_free 201603L





#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size



#define __glibcxx_invoke 201411L





#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple



#define __glibcxx_not_fn 201603L





#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 545 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_variant 202102L





#undef __glibcxx_want_variant



#define __glibcxx_lcm 201606L





#undef __glibcxx_want_lcm



#define __glibcxx_gcd 201606L





#undef __glibcxx_want_gcd



#define __glibcxx_gcd_lcm 201606L





#undef __glibcxx_want_gcd_lcm
# 590 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_raw_memory_algorithms 201606L





#undef __glibcxx_want_raw_memory_algorithms
# 605 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_array_constexpr 201803L





#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access



#define __glibcxx_clamp 201603L





#undef __glibcxx_want_clamp



#define __glibcxx_sample 201603L





#undef __glibcxx_want_sample



#define __glibcxx_boyer_moore_searcher 201603L





#undef __glibcxx_want_boyer_moore_searcher
# 660 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_chrono 201611L





#undef __glibcxx_want_chrono



#define __glibcxx_execution 201902L





#undef __glibcxx_want_execution



#define __glibcxx_filesystem 201703L





#undef __glibcxx_want_filesystem



#define __glibcxx_hypot 201603L





#undef __glibcxx_want_hypot



#define __glibcxx_map_try_emplace 201411L





#undef __glibcxx_want_map_try_emplace



#define __glibcxx_math_special_functions 201603L





#undef __glibcxx_want_math_special_functions



#define __glibcxx_memory_resource 201603L
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource



#define __glibcxx_node_extract 201606L





#undef __glibcxx_want_node_extract



#define __glibcxx_parallel_algorithm 201603L





#undef __glibcxx_want_parallel_algorithm



#define __glibcxx_scoped_lock 201703L





#undef __glibcxx_want_scoped_lock



#define __glibcxx_shared_mutex 201505L





#undef __glibcxx_want_shared_mutex



#define __glibcxx_shared_ptr_weak_type 201606L





#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view



#define __glibcxx_unordered_map_try_emplace 201411L





#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 950 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_optional 201606L





#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1390 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_constexpr_string 201611L

#define __cpp_lib_constexpr_string 201611L



#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 70 "/usr/include/c++/15.1.1/string" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{

  namespace pmr {
    template<typename _CharT, typename _Traits = char_traits<_CharT>>
      using basic_string = std::basic_string<_CharT, _Traits,
          polymorphic_allocator<_CharT>>;
    using string = basic_string<char>;



    using u16string = basic_string<char16_t>;
    using u32string = basic_string<char32_t>;
    using wstring = basic_string<wchar_t>;
  }

}
# 55 "/usr/include/c++/15.1.1/bitset" 2 3
# 63 "/usr/include/c++/15.1.1/bitset" 3
#define __glibcxx_want_constexpr_bitset 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements



#define __glibcxx_uncaught_exceptions 201411L





#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 110 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_shared_ptr_arrays 201611L





#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t



#define __glibcxx_enable_shared_from_this 201603L





#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine



#define __glibcxx_exchange_function 201304L





#undef __glibcxx_want_exchange_function



#define __glibcxx_integer_sequence 201304L





#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final



#define __glibcxx_make_reverse_iterator 201402L





#undef __glibcxx_want_make_reverse_iterator



#define __glibcxx_null_iterators 201304L





#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases



#define __glibcxx_transparent_operators 201510L





#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type



#define __glibcxx_robust_nonmodifying_seq_ops 201304L





#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 285 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_to_chars 201611L





#undef __glibcxx_want_to_chars



#define __glibcxx_chrono_udls 201304L





#undef __glibcxx_want_chrono_udls



#define __glibcxx_complex_udls 201309L





#undef __glibcxx_want_complex_udls



#define __glibcxx_generic_associative_lookup 201304L





#undef __glibcxx_want_generic_associative_lookup



#define __glibcxx_make_unique 201304L





#undef __glibcxx_want_make_unique



#define __glibcxx_quoted_string_io 201304L





#undef __glibcxx_want_quoted_string_io



#define __glibcxx_shared_timed_mutex 201402L





#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls



#define __glibcxx_addressof_constexpr 201603L





#undef __glibcxx_want_addressof_constexpr



#define __glibcxx_any 201606L





#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply



#define __glibcxx_as_const 201510L





#undef __glibcxx_want_as_const



#define __glibcxx_atomic_is_always_lock_free 201603L





#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size



#define __glibcxx_invoke 201411L





#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple



#define __glibcxx_not_fn 201603L





#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 545 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_variant 202102L





#undef __glibcxx_want_variant



#define __glibcxx_lcm 201606L





#undef __glibcxx_want_lcm



#define __glibcxx_gcd 201606L





#undef __glibcxx_want_gcd



#define __glibcxx_gcd_lcm 201606L





#undef __glibcxx_want_gcd_lcm
# 590 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_raw_memory_algorithms 201606L





#undef __glibcxx_want_raw_memory_algorithms
# 605 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_array_constexpr 201803L





#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access



#define __glibcxx_clamp 201603L





#undef __glibcxx_want_clamp



#define __glibcxx_sample 201603L





#undef __glibcxx_want_sample



#define __glibcxx_boyer_moore_searcher 201603L





#undef __glibcxx_want_boyer_moore_searcher
# 660 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_chrono 201611L





#undef __glibcxx_want_chrono



#define __glibcxx_execution 201902L





#undef __glibcxx_want_execution



#define __glibcxx_filesystem 201703L





#undef __glibcxx_want_filesystem



#define __glibcxx_hypot 201603L





#undef __glibcxx_want_hypot



#define __glibcxx_map_try_emplace 201411L





#undef __glibcxx_want_map_try_emplace



#define __glibcxx_math_special_functions 201603L





#undef __glibcxx_want_math_special_functions



#define __glibcxx_memory_resource 201603L
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource



#define __glibcxx_node_extract 201606L





#undef __glibcxx_want_node_extract



#define __glibcxx_parallel_algorithm 201603L





#undef __glibcxx_want_parallel_algorithm



#define __glibcxx_scoped_lock 201703L





#undef __glibcxx_want_scoped_lock



#define __glibcxx_shared_mutex 201505L





#undef __glibcxx_want_shared_mutex



#define __glibcxx_shared_ptr_weak_type 201606L





#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view



#define __glibcxx_unordered_map_try_emplace 201411L





#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 950 "/usr/include/c++/15.1.1/bits/version.h" 3
#define __glibcxx_optional 201606L





#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 65 "/usr/include/c++/15.1.1/bitset" 2 3

#define _GLIBCXX_BITSET_BITS_PER_WORD (__CHAR_BIT__ * __SIZEOF_LONG__)
#define _GLIBCXX_BITSET_WORDS(__n) ((__n) / _GLIBCXX_BITSET_BITS_PER_WORD + ((__n) % _GLIBCXX_BITSET_BITS_PER_WORD == 0 ? 0 : 1))



#define _GLIBCXX_BITSET_BITS_PER_ULL (__CHAR_BIT__ * __SIZEOF_LONG_LONG__)

namespace std __attribute__ ((__visibility__ ("default")))
{








  template<size_t _Nw>
    struct _Base_bitset
    {
      typedef unsigned long _WordT;


      _WordT _M_w[_Nw];

      constexpr _Base_bitset() noexcept
      : _M_w() { }


      constexpr _Base_bitset(unsigned long long __val) noexcept
      : _M_w{ _WordT(__val)



       } { }






      static constexpr size_t
      _S_whichword(size_t __pos) noexcept
      { return __pos / (8 * 8); }

      static constexpr size_t
      _S_whichbyte(size_t __pos) noexcept
      { return (__pos % (8 * 8)) / 8; }

      static constexpr size_t
      _S_whichbit(size_t __pos) noexcept
      { return __pos % (8 * 8); }

      static constexpr _WordT
      _S_maskbit(size_t __pos) noexcept
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }

      constexpr _WordT&
      _M_getword(size_t __pos) noexcept
      { return _M_w[_S_whichword(__pos)]; }

      constexpr _WordT
      _M_getword(size_t __pos) const noexcept
      { return _M_w[_S_whichword(__pos)]; }


      constexpr const _WordT*
      _M_getdata() const noexcept
      { return _M_w; }


      _WordT&
      _M_hiword() noexcept
      { return _M_w[_Nw - 1]; }

      constexpr _WordT
      _M_hiword() const noexcept
      { return _M_w[_Nw - 1]; }

      void
      _M_do_and(const _Base_bitset<_Nw>& __x) noexcept
      {
 for (size_t __i = 0; __i < _Nw; __i++)
   _M_w[__i] &= __x._M_w[__i];
      }

      constexpr void
      _M_do_or(const _Base_bitset<_Nw>& __x) noexcept
      {
 for (size_t __i = 0; __i < _Nw; __i++)
   _M_w[__i] |= __x._M_w[__i];
      }

      constexpr void
      _M_do_xor(const _Base_bitset<_Nw>& __x) noexcept
      {
 for (size_t __i = 0; __i < _Nw; __i++)
   _M_w[__i] ^= __x._M_w[__i];
      }

      constexpr void
      _M_do_left_shift(size_t __shift) noexcept;

      constexpr void
      _M_do_right_shift(size_t __shift) noexcept;

      constexpr void
      _M_do_flip() noexcept
      {
 for (size_t __i = 0; __i < _Nw; __i++)
   _M_w[__i] = ~_M_w[__i];
      }

      constexpr void
      _M_do_set() noexcept
      {

 if (__builtin_is_constant_evaluated())
   {
     for (_WordT& __w : _M_w)
       __w = ~static_cast<_WordT>(0);;
     return;
   }

 __builtin_memset(_M_w, 0xFF, _Nw * sizeof(_WordT));
      }

      constexpr void
      _M_do_reset() noexcept
      {

 if (__builtin_is_constant_evaluated())
   {
     for (_WordT& __w : _M_w)
       __w = 0;
     return;
   }

 __builtin_memset(_M_w, 0, _Nw * sizeof(_WordT));
      }

      constexpr bool
      _M_is_equal(const _Base_bitset<_Nw>& __x) const noexcept
      {

 if (__builtin_is_constant_evaluated())
   {
     for (size_t __i = 0; __i < _Nw; ++__i)
       if (_M_w[__i] != __x._M_w[__i])
  return false;
     return true;
   }

 return !__builtin_memcmp(_M_w, __x._M_w, _Nw * sizeof(_WordT));
      }

      template<size_t _Nb>
        constexpr bool
        _M_are_all() const noexcept
        {
   for (size_t __i = 0; __i < _Nw - 1; __i++)
     if (_M_w[__i] != ~static_cast<_WordT>(0))
       return false;
   return _M_hiword() == (~static_cast<_WordT>(0)
     >> (_Nw * (8 * 8)
         - _Nb));
 }

      constexpr bool
      _M_is_any() const noexcept
      {
 for (size_t __i = 0; __i < _Nw; __i++)
   if (_M_w[__i] != static_cast<_WordT>(0))
     return true;
 return false;
      }

      constexpr size_t
      _M_do_count() const noexcept
      {
 size_t __result = 0;
 for (size_t __i = 0; __i < _Nw; __i++)
   __result += __builtin_popcountl(_M_w[__i]);
 return __result;
      }

      constexpr unsigned long
      _M_do_to_ulong() const;


      constexpr unsigned long long
      _M_do_to_ullong() const;



      constexpr size_t
      _M_do_find_first(size_t) const noexcept;


      constexpr size_t
      _M_do_find_next(size_t, size_t) const noexcept;
    };


  template<size_t _Nw>
    constexpr void
    _Base_bitset<_Nw>::_M_do_left_shift(size_t __shift) noexcept
    {
      if (__builtin_expect(__shift != 0, 1))
 {
   const size_t __wshift = __shift / (8 * 8);
   const size_t __offset = __shift % (8 * 8);

   if (__offset == 0)
     for (size_t __n = _Nw - 1; __n >= __wshift; --__n)
       _M_w[__n] = _M_w[__n - __wshift];
   else
     {
       const size_t __sub_offset = ((8 * 8)
        - __offset);
       for (size_t __n = _Nw - 1; __n > __wshift; --__n)
  _M_w[__n] = ((_M_w[__n - __wshift] << __offset)
        | (_M_w[__n - __wshift - 1] >> __sub_offset));
       _M_w[__wshift] = _M_w[0] << __offset;
     }

   std::fill(_M_w + 0, _M_w + __wshift, static_cast<_WordT>(0));
 }
    }

  template<size_t _Nw>
    constexpr void
    _Base_bitset<_Nw>::_M_do_right_shift(size_t __shift) noexcept
    {
      if (__builtin_expect(__shift != 0, 1))
 {
   const size_t __wshift = __shift / (8 * 8);
   const size_t __offset = __shift % (8 * 8);
   const size_t __limit = _Nw - __wshift - 1;

   if (__offset == 0)
     for (size_t __n = 0; __n <= __limit; ++__n)
       _M_w[__n] = _M_w[__n + __wshift];
   else
     {
       const size_t __sub_offset = ((8 * 8)
        - __offset);
       for (size_t __n = 0; __n < __limit; ++__n)
  _M_w[__n] = ((_M_w[__n + __wshift] >> __offset)
        | (_M_w[__n + __wshift + 1] << __sub_offset));
       _M_w[__limit] = _M_w[_Nw-1] >> __offset;
     }

   std::fill(_M_w + __limit + 1, _M_w + _Nw, static_cast<_WordT>(0));
 }
    }

  template<size_t _Nw>
    constexpr unsigned long
    _Base_bitset<_Nw>::_M_do_to_ulong() const
    {
      for (size_t __i = 1; __i < _Nw; ++__i)
 if (_M_w[__i])
   __throw_overflow_error(("_Base_bitset::_M_do_to_ulong"));
      return _M_w[0];
    }


  template<size_t _Nw>
    constexpr unsigned long long
    _Base_bitset<_Nw>::_M_do_to_ullong() const
    {

      return _M_do_to_ulong();
# 348 "/usr/include/c++/15.1.1/bitset" 3
    }


  template<size_t _Nw>
    constexpr size_t
    _Base_bitset<_Nw>::
    _M_do_find_first(size_t __not_found) const noexcept
    {
      for (size_t __i = 0; __i < _Nw; __i++)
 {
   _WordT __thisword = _M_w[__i];
   if (__thisword != static_cast<_WordT>(0))
     return (__i * (8 * 8)
      + __builtin_ctzl(__thisword));
 }

      return __not_found;
    }

  template<size_t _Nw>
    constexpr size_t
    _Base_bitset<_Nw>::
    _M_do_find_next(size_t __prev, size_t __not_found) const noexcept
    {

      ++__prev;


      if (__prev >= _Nw * (8 * 8))
 return __not_found;


      size_t __i = _S_whichword(__prev);
      _WordT __thisword = _M_w[__i];


      __thisword &= (~static_cast<_WordT>(0)) << _S_whichbit(__prev);

      if (__thisword != static_cast<_WordT>(0))
 return (__i * (8 * 8)
  + __builtin_ctzl(__thisword));


      __i++;
      for (; __i < _Nw; __i++)
 {
   __thisword = _M_w[__i];
   if (__thisword != static_cast<_WordT>(0))
     return (__i * (8 * 8)
      + __builtin_ctzl(__thisword));
 }

      return __not_found;
    }






  template<>
    struct _Base_bitset<1>
    {
      typedef unsigned long _WordT;
      _WordT _M_w;

      constexpr _Base_bitset() noexcept
      : _M_w(0)
      { }


      constexpr _Base_bitset(unsigned long long __val) noexcept



      : _M_w(__val)
      { }

      static constexpr size_t
      _S_whichword(size_t __pos) noexcept
      { return __pos / (8 * 8); }

      static constexpr size_t
      _S_whichbyte(size_t __pos) noexcept
      { return (__pos % (8 * 8)) / 8; }

      static constexpr size_t
      _S_whichbit(size_t __pos) noexcept
      { return __pos % (8 * 8); }

      static constexpr _WordT
      _S_maskbit(size_t __pos) noexcept
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }

      constexpr _WordT&
      _M_getword(size_t) noexcept
      { return _M_w; }

      constexpr _WordT
      _M_getword(size_t) const noexcept
      { return _M_w; }


      constexpr const _WordT*
      _M_getdata() const noexcept
      { return &_M_w; }


      constexpr _WordT&
      _M_hiword() noexcept
      { return _M_w; }

      constexpr _WordT
      _M_hiword() const noexcept
      { return _M_w; }

      constexpr void
      _M_do_and(const _Base_bitset<1>& __x) noexcept
      { _M_w &= __x._M_w; }

      constexpr void
      _M_do_or(const _Base_bitset<1>& __x) noexcept
      { _M_w |= __x._M_w; }

      constexpr void
      _M_do_xor(const _Base_bitset<1>& __x) noexcept
      { _M_w ^= __x._M_w; }

      constexpr void
      _M_do_left_shift(size_t __shift) noexcept
      { _M_w <<= __shift; }

      constexpr void
      _M_do_right_shift(size_t __shift) noexcept
      { _M_w >>= __shift; }

      constexpr void
      _M_do_flip() noexcept
      { _M_w = ~_M_w; }

      constexpr void
      _M_do_set() noexcept
      { _M_w = ~static_cast<_WordT>(0); }

      constexpr void
      _M_do_reset() noexcept
      { _M_w = 0; }

      constexpr bool
      _M_is_equal(const _Base_bitset<1>& __x) const noexcept
      { return _M_w == __x._M_w; }

      template<size_t _Nb>
        constexpr bool
        _M_are_all() const noexcept
        { return _M_w == (~static_cast<_WordT>(0)
     >> ((8 * 8) - _Nb)); }

      constexpr bool
      _M_is_any() const noexcept
      { return _M_w != 0; }

      constexpr size_t
      _M_do_count() const noexcept
      { return __builtin_popcountl(_M_w); }

      constexpr unsigned long
      _M_do_to_ulong() const noexcept
      { return _M_w; }


      constexpr unsigned long long
      _M_do_to_ullong() const noexcept
      { return _M_w; }


      constexpr size_t
      _M_do_find_first(size_t __not_found) const noexcept
      {
        if (_M_w != 0)
          return __builtin_ctzl(_M_w);
        else
          return __not_found;
      }


      constexpr size_t
      _M_do_find_next(size_t __prev, size_t __not_found) const
 noexcept
      {
 ++__prev;
 if (__prev >= ((size_t) (8 * 8)))
   return __not_found;

 _WordT __x = _M_w >> __prev;
 if (__x != 0)
   return __builtin_ctzl(__x) + __prev;
 else
   return __not_found;
      }
    };






  template<>
    struct _Base_bitset<0>
    {
      typedef unsigned long _WordT;

      constexpr _Base_bitset() noexcept
      { }


      constexpr _Base_bitset(unsigned long long) noexcept



      { }

      static constexpr size_t
      _S_whichword(size_t __pos) noexcept
      { return __pos / (8 * 8); }

      static constexpr size_t
      _S_whichbyte(size_t __pos) noexcept
      { return (__pos % (8 * 8)) / 8; }

      static constexpr size_t
      _S_whichbit(size_t __pos) noexcept
      { return __pos % (8 * 8); }

      static constexpr _WordT
      _S_maskbit(size_t __pos) noexcept
      { return (static_cast<_WordT>(1)) << _S_whichbit(__pos); }







      __attribute__((__noreturn__))
      _WordT&
      _M_getword(size_t) noexcept
      { __throw_out_of_range(("_Base_bitset::_M_getword")); }

      constexpr _WordT
      _M_getword(size_t) const noexcept
      { return 0; }

      constexpr _WordT
      _M_hiword() const noexcept
      { return 0; }

      constexpr void
      _M_do_and(const _Base_bitset<0>&) noexcept
      { }

      constexpr void
      _M_do_or(const _Base_bitset<0>&) noexcept
      { }

      constexpr void
      _M_do_xor(const _Base_bitset<0>&) noexcept
      { }

      constexpr void
      _M_do_left_shift(size_t) noexcept
      { }

      constexpr void
      _M_do_right_shift(size_t) noexcept
      { }

      constexpr void
      _M_do_flip() noexcept
      { }

      constexpr void
      _M_do_set() noexcept
      { }

      constexpr void
      _M_do_reset() noexcept
      { }




      constexpr bool
      _M_is_equal(const _Base_bitset<0>&) const noexcept
      { return true; }

      template<size_t _Nb>
        constexpr bool
        _M_are_all() const noexcept
        { return true; }

      constexpr bool
      _M_is_any() const noexcept
      { return false; }

      constexpr size_t
      _M_do_count() const noexcept
      { return 0; }

      constexpr unsigned long
      _M_do_to_ulong() const noexcept
      { return 0; }


      constexpr unsigned long long
      _M_do_to_ullong() const noexcept
      { return 0; }




      constexpr size_t
      _M_do_find_first(size_t) const noexcept
      { return 0; }

      constexpr size_t
      _M_do_find_next(size_t, size_t) const noexcept
      { return 0; }
    };



  template<size_t _Extrabits>
    struct _Sanitize
    {
      typedef unsigned long _WordT;

      static constexpr void
      _S_do_sanitize(_WordT& __val) noexcept
      { __val &= ~((~static_cast<_WordT>(0)) << _Extrabits); }
    };

  template<>
    struct _Sanitize<0>
    {
      typedef unsigned long _WordT;

      static constexpr void
      _S_do_sanitize(_WordT) noexcept { }
    };


  template<size_t _Nb, bool = (_Nb < (8 * 8))>
    struct _Sanitize_val
    {
      static constexpr unsigned long long
      _S_do_sanitize_val(unsigned long long __val)
      { return __val; }
    };

  template<size_t _Nb>
    struct _Sanitize_val<_Nb, true>
    {
      static constexpr unsigned long long
      _S_do_sanitize_val(unsigned long long __val)
      { return __val & ~((~static_cast<unsigned long long>(0)) << _Nb); }
    };

  namespace __bitset
  {

    template<typename _CharT>
      using __string = std::basic_string<_CharT>;
# 745 "/usr/include/c++/15.1.1/bitset" 3
  }
# 811 "/usr/include/c++/15.1.1/bitset" 3
  template<size_t _Nb>
    class bitset
    : private _Base_bitset<((_Nb) / (8 * 8) + ((_Nb) % (8 * 8) == 0 ? 0 : 1))>
    {
    private:
      typedef _Base_bitset<((_Nb) / (8 * 8) + ((_Nb) % (8 * 8) == 0 ? 0 : 1))> _Base;
      typedef unsigned long _WordT;


      template<class _CharT, class _Traits, class _Alloc>
     
      void
      _M_check_initial_position(const std::basic_string<_CharT, _Traits, _Alloc>& __s,
    size_t __position) const
      {
 if (__position > __s.size())
   __throw_out_of_range_fmt(("bitset::bitset: __position " "(which is %zu) > __s.size() " "(which is %zu)")

                            ,
       __position, __s.size());
      }


     
      void _M_check(size_t __position, const char *__s) const
      {
 if (__position >= _Nb)
   __throw_out_of_range_fmt(("%s: __position (which is %zu) " ">= _Nb (which is %zu)")
                                   ,
       __s, __position, _Nb);
      }

     
      void
      _M_do_sanitize() noexcept
      {
 typedef _Sanitize<_Nb % (8 * 8)> __sanitize_type;
 __sanitize_type::_S_do_sanitize(this->_M_hiword());
      }


      friend struct std::hash<bitset>;


    public:
# 868 "/usr/include/c++/15.1.1/bitset" 3
      class reference
      {
 friend class bitset;

 _WordT* _M_wp;
 size_t _M_bpos;


 reference(bitset& __b, size_t __pos) noexcept
 {
   _M_wp = &__b._M_getword(__pos);
   _M_bpos = _Base::_S_whichbit(__pos);
 }

      public:

 reference(const reference&) = default;





 ~reference() noexcept
 { }



 reference&
 operator=(bool __x) noexcept
 {
   if (__x)
     *_M_wp |= _Base::_S_maskbit(_M_bpos);
   else
     *_M_wp &= ~_Base::_S_maskbit(_M_bpos);
   return *this;
 }



 reference&
 operator=(const reference& __j) noexcept
 {
   if ((*(__j._M_wp) & _Base::_S_maskbit(__j._M_bpos)))
     *_M_wp |= _Base::_S_maskbit(_M_bpos);
   else
     *_M_wp &= ~_Base::_S_maskbit(_M_bpos);
   return *this;
 }



 bool
 operator~() const noexcept
 { return (*(_M_wp) & _Base::_S_maskbit(_M_bpos)) == 0; }



 operator bool() const noexcept
 { return (*(_M_wp) & _Base::_S_maskbit(_M_bpos)) != 0; }



 reference&
 flip() noexcept
 {
   *_M_wp ^= _Base::_S_maskbit(_M_bpos);
   return *this;
 }
      };
      friend class reference;



      constexpr bitset() noexcept
      { }



      constexpr bitset(unsigned long long __val) noexcept
      : _Base(_Sanitize_val<_Nb>::_S_do_sanitize_val(__val)) { }
# 964 "/usr/include/c++/15.1.1/bitset" 3
      template<class _CharT, class _Traits, class _Alloc>

 explicit
 bitset(const std::basic_string<_CharT, _Traits, _Alloc>& __s,
        size_t __position = 0)
 : _Base()
 {
   _M_check_initial_position(__s, __position);
   _M_copy_from_string(__s, __position,
         std::basic_string<_CharT, _Traits, _Alloc>::npos,
         _CharT('0'), _CharT('1'));
 }
# 987 "/usr/include/c++/15.1.1/bitset" 3
      template<class _CharT, class _Traits, class _Alloc>

 bitset(const std::basic_string<_CharT, _Traits, _Alloc>& __s,
        size_t __position, size_t __n)
 : _Base()
 {
   _M_check_initial_position(__s, __position);
   _M_copy_from_string(__s, __position, __n, _CharT('0'), _CharT('1'));
 }



      template<class _CharT, class _Traits, class _Alloc>

 bitset(const std::basic_string<_CharT, _Traits, _Alloc>& __s,
        size_t __position, size_t __n,
        _CharT __zero, _CharT __one = _CharT('1'))
 : _Base()
 {
   _M_check_initial_position(__s, __position);
   _M_copy_from_string(__s, __position, __n, __zero, __one);
 }
# 1021 "/usr/include/c++/15.1.1/bitset" 3
      template<typename _CharT>
 [[__gnu__::__nonnull__]]

        explicit
 bitset(const _CharT* __str,
        typename __bitset::__string<_CharT>::size_type __n
   = __bitset::__string<_CharT>::npos,
        _CharT __zero = _CharT('0'), _CharT __one = _CharT('1'))
        : _Base()
        {

   if (!__str)
     __throw_logic_error(("bitset::bitset(const _CharT*, ...)"));

   using _Traits = typename __bitset::__string<_CharT>::traits_type;

   if (__n == __bitset::__string<_CharT>::npos)
     __n = _Traits::length(__str);
   _M_copy_from_ptr<_CharT, _Traits>(__str, __n, 0, __n, __zero, __one);
 }
# 1051 "/usr/include/c++/15.1.1/bitset" 3
     
      bitset<_Nb>&
      operator&=(const bitset<_Nb>& __rhs) noexcept
      {
 this->_M_do_and(__rhs);
 return *this;
      }

     
      bitset<_Nb>&
      operator|=(const bitset<_Nb>& __rhs) noexcept
      {
 this->_M_do_or(__rhs);
 return *this;
      }

     
      bitset<_Nb>&
      operator^=(const bitset<_Nb>& __rhs) noexcept
      {
 this->_M_do_xor(__rhs);
 return *this;
      }
# 1083 "/usr/include/c++/15.1.1/bitset" 3
     
      bitset<_Nb>&
      operator<<=(size_t __position) noexcept
      {
 if (__builtin_expect(__position < _Nb, 1))
   {
     this->_M_do_left_shift(__position);
     this->_M_do_sanitize();
   }
 else
   this->_M_do_reset();
 return *this;
      }

     
      bitset<_Nb>&
      operator>>=(size_t __position) noexcept
      {
 if (__builtin_expect(__position < _Nb, 1))
   this->_M_do_right_shift(__position);
 else
   this->_M_do_reset();
 return *this;
      }
# 1115 "/usr/include/c++/15.1.1/bitset" 3
     
      bitset<_Nb>&
      _Unchecked_set(size_t __pos) noexcept
      {
 this->_M_getword(__pos) |= _Base::_S_maskbit(__pos);
 return *this;
      }

     
      bitset<_Nb>&
      _Unchecked_set(size_t __pos, int __val) noexcept
      {
 if (__val)
   this->_M_getword(__pos) |= _Base::_S_maskbit(__pos);
 else
   this->_M_getword(__pos) &= ~_Base::_S_maskbit(__pos);
 return *this;
      }

     
      bitset<_Nb>&
      _Unchecked_reset(size_t __pos) noexcept
      {
 this->_M_getword(__pos) &= ~_Base::_S_maskbit(__pos);
 return *this;
      }

     
      bitset<_Nb>&
      _Unchecked_flip(size_t __pos) noexcept
      {
 this->_M_getword(__pos) ^= _Base::_S_maskbit(__pos);
 return *this;
      }

      constexpr bool
      _Unchecked_test(size_t __pos) const noexcept
      { return ((this->_M_getword(__pos) & _Base::_S_maskbit(__pos))
  != static_cast<_WordT>(0)); }






     
      bitset<_Nb>&
      set() noexcept
      {
 this->_M_do_set();
 this->_M_do_sanitize();
 return *this;
      }







     
      bitset<_Nb>&
      set(size_t __position, bool __val = true)
      {
 this->_M_check(__position, ("bitset::set"));
 return _Unchecked_set(__position, __val);
      }




     
      bitset<_Nb>&
      reset() noexcept
      {
 this->_M_do_reset();
 return *this;
      }
# 1201 "/usr/include/c++/15.1.1/bitset" 3
     
      bitset<_Nb>&
      reset(size_t __position)
      {
 this->_M_check(__position, ("bitset::reset"));
 return _Unchecked_reset(__position);
      }




     
      bitset<_Nb>&
      flip() noexcept
      {
 this->_M_do_flip();
 this->_M_do_sanitize();
 return *this;
      }






     
      bitset<_Nb>&
      flip(size_t __position)
      {
 this->_M_check(__position, ("bitset::flip"));
 return _Unchecked_flip(__position);
      }


     
      bitset<_Nb>
      operator~() const noexcept
      { return bitset<_Nb>(*this).flip(); }
# 1255 "/usr/include/c++/15.1.1/bitset" 3
     
      reference
      operator[](size_t __position)
      { return reference(*this, __position); }

      constexpr bool
      operator[](size_t __position) const
      { return _Unchecked_test(__position); }
# 1271 "/usr/include/c++/15.1.1/bitset" 3
     
      unsigned long
      to_ulong() const
      { return this->_M_do_to_ulong(); }


     
      unsigned long long
      to_ullong() const
      { return this->_M_do_to_ullong(); }
# 1292 "/usr/include/c++/15.1.1/bitset" 3
      template<class _CharT, class _Traits, class _Alloc>

 std::basic_string<_CharT, _Traits, _Alloc>
 to_string() const
 {
   std::basic_string<_CharT, _Traits, _Alloc> __result;
   _M_copy_to_string(__result, _CharT('0'), _CharT('1'));
   return __result;
 }



      template<class _CharT, class _Traits, class _Alloc>

 std::basic_string<_CharT, _Traits, _Alloc>
 to_string(_CharT __zero, _CharT __one = _CharT('1')) const
 {
   std::basic_string<_CharT, _Traits, _Alloc> __result;
   _M_copy_to_string(__result, __zero, __one);
   return __result;
 }



      template<class _CharT, class _Traits>

 std::basic_string<_CharT, _Traits, std::allocator<_CharT> >
 to_string() const
 { return to_string<_CharT, _Traits, std::allocator<_CharT> >(); }



      template<class _CharT, class _Traits>

 std::basic_string<_CharT, _Traits, std::allocator<_CharT> >
 to_string(_CharT __zero, _CharT __one = _CharT('1')) const
 { return to_string<_CharT, _Traits,
                    std::allocator<_CharT> >(__zero, __one); }

      template<class _CharT>

 std::basic_string<_CharT, std::char_traits<_CharT>,
                   std::allocator<_CharT> >
 to_string() const
 {
   return to_string<_CharT, std::char_traits<_CharT>,
                    std::allocator<_CharT> >();
 }

      template<class _CharT>

 std::basic_string<_CharT, std::char_traits<_CharT>,
                   std::allocator<_CharT> >
 to_string(_CharT __zero, _CharT __one = _CharT('1')) const
 {
   return to_string<_CharT, std::char_traits<_CharT>,
                    std::allocator<_CharT> >(__zero, __one);
 }

     
      std::basic_string<char, std::char_traits<char>, std::allocator<char> >
      to_string() const
      {
 return to_string<char, std::char_traits<char>,
                  std::allocator<char> >();
      }

     
      std::basic_string<char, std::char_traits<char>, std::allocator<char> >
      to_string(char __zero, char __one = '1') const
      {
 return to_string<char, std::char_traits<char>,
                  std::allocator<char> >(__zero, __one);
      }



     
      size_t
      count() const noexcept
      { return this->_M_do_count(); }


      constexpr size_t
      size() const noexcept
      { return _Nb; }



     
      bool
      operator==(const bitset<_Nb>& __rhs) const noexcept
      { return this->_M_is_equal(__rhs); }


     
      bool
      operator!=(const bitset<_Nb>& __rhs) const noexcept
      { return !this->_M_is_equal(__rhs); }
# 1400 "/usr/include/c++/15.1.1/bitset" 3
     
      bool
      test(size_t __position) const
      {
 this->_M_check(__position, ("bitset::test"));
 return _Unchecked_test(__position);
      }







     
      bool
      all() const noexcept
      { return this->template _M_are_all<_Nb>(); }





     
      bool
      any() const noexcept
      { return this->_M_is_any(); }





     
      bool
      none() const noexcept
      { return !this->_M_is_any(); }



     
      bitset<_Nb>
      operator<<(size_t __position) const noexcept
      { return bitset<_Nb>(*this) <<= __position; }

     
      bitset<_Nb>
      operator>>(size_t __position) const noexcept
      { return bitset<_Nb>(*this) >>= __position; }
# 1456 "/usr/include/c++/15.1.1/bitset" 3
     
      size_t
      _Find_first() const noexcept
      { return this->_M_do_find_first(_Nb); }
# 1468 "/usr/include/c++/15.1.1/bitset" 3
     
      size_t
      _Find_next(size_t __prev) const noexcept
      { return this->_M_do_find_next(__prev, _Nb); }

    private:

      template<class _CharT, class _Traits>

        void
        _M_copy_from_ptr(const _CharT*, size_t, size_t, size_t,
    _CharT, _CharT);


      template<class _CharT, class _Traits, class _Alloc>

 void
 _M_copy_from_string(const std::basic_string<_CharT,
       _Traits, _Alloc>& __s, size_t __pos, size_t __n,
       _CharT __zero, _CharT __one)
 { _M_copy_from_ptr<_CharT, _Traits>(__s.data(), __s.size(), __pos, __n,
         __zero, __one); }

      template<class _CharT, class _Traits, class _Alloc>

 void
        _M_copy_to_string(std::basic_string<_CharT, _Traits, _Alloc>&,
     _CharT, _CharT) const;

      template<class _CharT, class _Traits, size_t _Nb2>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&, bitset<_Nb2>&);

      template <class _CharT, class _Traits, size_t _Nb2>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&, const bitset<_Nb2>&);

    };


  template<size_t _Nb>
    template<class _CharT, class _Traits>
     
      void
      bitset<_Nb>::
      _M_copy_from_ptr(const _CharT* __s, size_t __len,
         size_t __pos, size_t __n, _CharT __zero, _CharT __one)
      {
 reset();
 const size_t __nbits = std::min(_Nb, std::min(__n, size_t(__len - __pos)));
 for (size_t __i = __nbits; __i > 0; --__i)
   {
     const _CharT __c = __s[__pos + __nbits - __i];
     if (_Traits::eq(__c, __zero))
       ;
     else if (_Traits::eq(__c, __one))
       _Unchecked_set(__i - 1);
     else
       __throw_invalid_argument(("bitset::_M_copy_from_ptr"));
   }
      }


  template<size_t _Nb>
    template<class _CharT, class _Traits, class _Alloc>
     
      void
      bitset<_Nb>::
      _M_copy_to_string(std::basic_string<_CharT, _Traits, _Alloc>& __s,
   _CharT __zero, _CharT __one) const
      {
 __s.assign(_Nb, __zero);
 size_t __n = this->_Find_first();
 while (__n < _Nb)
   {
     __s[_Nb - __n - 1] = __one;
     __n = _Find_next(__n);
   }
      }
# 1559 "/usr/include/c++/15.1.1/bitset" 3
  template<size_t _Nb>
   
    inline bitset<_Nb>
    operator&(const bitset<_Nb>& __x, const bitset<_Nb>& __y) noexcept
    {
      bitset<_Nb> __result(__x);
      __result &= __y;
      return __result;
    }

  template<size_t _Nb>
   
    inline bitset<_Nb>
    operator|(const bitset<_Nb>& __x, const bitset<_Nb>& __y) noexcept
    {
      bitset<_Nb> __result(__x);
      __result |= __y;
      return __result;
    }

  template <size_t _Nb>
   
    inline bitset<_Nb>
    operator^(const bitset<_Nb>& __x, const bitset<_Nb>& __y) noexcept
    {
      bitset<_Nb> __result(__x);
      __result ^= __y;
      return __result;
    }
# 1600 "/usr/include/c++/15.1.1/bitset" 3
  template<class _CharT, class _Traits, size_t _Nb>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is, bitset<_Nb>& __x)
    {
      typedef typename _Traits::char_type char_type;
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      struct _Buffer
      {
 static constexpr bool _S_use_alloca() { return _Nb <= 256; }

 explicit _Buffer(_CharT* __p) : _M_ptr(__p) { }

 ~_Buffer()
 {
   if constexpr (!_S_use_alloca())
     delete[] _M_ptr;
 }

 _CharT* const _M_ptr;
      };
      _CharT* __ptr;
      if constexpr (_Buffer::_S_use_alloca())
 __ptr = (_CharT*)__builtin_alloca(_Nb);
      else
 __ptr = new _CharT[_Nb];
      const _Buffer __buf(__ptr);



      const char_type __zero = __is.widen('0');
      const char_type __one = __is.widen('1');

      typename __ios_base::iostate __state = __ios_base::goodbit;
      typename __istream_type::sentry __sentry(__is);
      if (__sentry)
 {
   try
     {
       for (size_t __i = _Nb; __i > 0; --__i)
  {
    static typename _Traits::int_type __eof = _Traits::eof();

    typename _Traits::int_type __c1 = __is.rdbuf()->sbumpc();
    if (_Traits::eq_int_type(__c1, __eof))
      {
        __state |= __ios_base::eofbit;
        break;
      }
    else
      {
        const char_type __c2 = _Traits::to_char_type(__c1);
        if (_Traits::eq(__c2, __zero))
   *__ptr++ = __zero;
        else if (_Traits::eq(__c2, __one))
   *__ptr++ = __one;
        else if (_Traits::
          eq_int_type(__is.rdbuf()->sputbackc(__c2),
        __eof))
   {
     __state |= __ios_base::failbit;
     break;
   }
      }
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __is._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     { __is._M_setstate(__ios_base::badbit); }
 }

      if constexpr (_Nb)
      {
 if (size_t __len = __ptr - __buf._M_ptr)
   __x.template _M_copy_from_ptr<_CharT, _Traits>(__buf._M_ptr, __len,
        0, __len,
        __zero, __one);
 else
   __state |= __ios_base::failbit;
      }
      if (__state)
 __is.setstate(__state);
      return __is;
    }

  template <class _CharT, class _Traits, size_t _Nb>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const bitset<_Nb>& __x)
    {
      std::basic_string<_CharT, _Traits> __tmp;



      const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__os.getloc());
      __x._M_copy_to_string(__tmp, __ct.widen('0'), __ct.widen('1'));
      return __os << __tmp;
    }




}

#undef _GLIBCXX_BITSET_WORDS
#undef _GLIBCXX_BITSET_BITS_PER_WORD
#undef _GLIBCXX_BITSET_BITS_PER_ULL



namespace std __attribute__ ((__visibility__ ("default")))
{




  template<size_t _Nb>
    struct hash<std::bitset<_Nb>>
    : public __hash_base<size_t, std::bitset<_Nb>>
    {
      size_t
      operator()(const std::bitset<_Nb>& __b) const noexcept
      {
 const size_t __clength = (_Nb + 8 - 1) / 8;
 return std::_Hash_impl::hash(__b._M_getdata(), __clength);
      }
    };

  template<>
    struct hash<std::bitset<0>>
    : public __hash_base<size_t, std::bitset<0>>
    {
      size_t
      operator()(const std::bitset<0>&) const noexcept
      { return 0; }
    };


}
# 27 "emc/rs274ngc/modal_state.hh" 2



# 29 "emc/rs274ngc/modal_state.hh"
extern "C" {
# 1 "emc/motion/state_tag.h" 1
# 27 "emc/motion/state_tag.h"
#define STATE_TAG_H 







typedef enum {
    GM_FLAG_UNITS,
    GM_FLAG_DISTANCE_MODE,
    GM_FLAG_TOOL_OFFSETS_ON,
    GM_FLAG_RETRACT_OLDZ,
    GM_FLAG_BLEND,
    GM_FLAG_EXACT_STOP,
    GM_FLAG_FEED_INVERSE_TIME,
    GM_FLAG_FEED_UPM,
    GM_FLAG_CSS_MODE,
    GM_FLAG_IJK_ABS,
    GM_FLAG_DIAMETER_MODE,
    GM_FLAG_G92_IS_APPLIED,
    GM_FLAG_SPINDLE_ON,
    GM_FLAG_SPINDLE_CW,
    GM_FLAG_MIST,
    GM_FLAG_FLOOD,
    GM_FLAG_FEED_OVERRIDE,
    GM_FLAG_SPEED_OVERRIDE,
    GM_FLAG_ADAPTIVE_FEED,
    GM_FLAG_FEED_HOLD,
    GM_FLAG_RESTORABLE,
    GM_FLAG_IN_REMAP,
    GM_FLAG_IN_SUB,
    GM_FLAG_EXTERNAL_FILE,
    GM_FLAG_MAX_FLAGS
} StateFlag;
# 78 "emc/motion/state_tag.h"
typedef enum {
    GM_FIELD_LINE_NUMBER,
    GM_FIELD_G_MODE_0,
    GM_FIELD_CUTTER_COMP,
    GM_FIELD_MOTION_MODE,
    GM_FIELD_PLANE,
    GM_FIELD_M_MODES_4,
    GM_FIELD_ORIGIN,
    GM_FIELD_TOOLCHANGE,
    GM_FIELD_MAX_FIELDS
} StateField;






typedef enum {
    GM_FIELD_FLOAT_LINE_NUMBER,
    GM_FIELD_FLOAT_FEED,
    GM_FIELD_FLOAT_SPEED,
    GM_FIELD_FLOAT_PATH_TOLERANCE,
    GM_FIELD_FLOAT_NAIVE_CAM_TOLERANCE,
    GM_FIELD_FLOAT_MAX_FIELDS
} StateFieldFloat;
# 114 "emc/motion/state_tag.h"
struct state_tag_t {



    float fields_float[GM_FIELD_FLOAT_MAX_FIELDS];




    int fields[GM_FIELD_MAX_FIELDS];





    unsigned long int packed_flags;
};
# 31 "emc/rs274ngc/modal_state.hh" 2
}
# 46 "emc/rs274ngc/modal_state.hh"
struct StateTag : public state_tag_t {
    StateTag();
    StateTag(state_tag_t const &basetag);
    std::bitset<64> flags;
    int is_valid(void) const;
    state_tag_t get_state_tag() const;
};
# 24 "./emc/nml_intf/canon.hh" 2
# 45 "./emc/nml_intf/canon.hh"
enum CanonBool {
    OFF,
    ON
};

struct CONTROL_POINT {
    double X,
    Y,
    W;
};

struct PLANE_POINT
{
    double X,
    Y;
};


enum CANON_PLANE
{
    CANON_PLANE_XY = 1,
    CANON_PLANE_YZ,
    CANON_PLANE_XZ,
    CANON_PLANE_UV,
    CANON_PLANE_VW,
    CANON_PLANE_UW,
};

enum CANON_UNITS
{
    CANON_UNITS_INCHES = 1,
    CANON_UNITS_MM,
    CANON_UNITS_CM,
};

enum CANON_MOTION_MODE
{
    CANON_EXACT_STOP = 1,
    CANON_EXACT_PATH,
    CANON_CONTINUOUS,
};

enum CANON_SPEED_FEED_MODE {
    CANON_SYNCHED = 1,
    CANON_INDEPENDENT,
};

enum CANON_DIRECTION {
    CANON_STOPPED = 1,
    CANON_CLOCKWISE,
    CANON_COUNTERCLOCKWISE,
};

enum CANON_FEED_REFERENCE {
    CANON_WORKPIECE = 1,
    CANON_XYZ,
};

enum CANON_SIDE
{
    CANON_SIDE_RIGHT = 1,
    CANON_SIDE_LEFT,
    CANON_SIDE_OFF,
};

enum CANON_AXIS
{
    CANON_AXIS_X = 1,
    CANON_AXIS_Y,
    CANON_AXIS_Z,
    CANON_AXIS_A,
    CANON_AXIS_B,
    CANON_AXIS_C,
    CANON_AXIS_U,
    CANON_AXIS_V,
    CANON_AXIS_W,
};

struct CANON_VECTOR {
    CANON_VECTOR() {
    } CANON_VECTOR(double _x, double _y, double _z) {
 x = _x;
 y = _y;
 z = _z;
    }
    double x, y, z;
};

typedef struct {
    int feed_mode;
    int synched;
    double speed;
    int dir;
    double css_maximum;
    double css_factor;
} CanonSpindle_t;

typedef struct CanonConfig_t {
    CanonConfig_t() : rotary_unlock_for_traverse(-1) {}

    double xy_rotation;
    int rotary_unlock_for_traverse;

    CANON_POSITION g5xOffset;
    CANON_POSITION g92Offset;
# 159 "./emc/nml_intf/canon.hh"
    CANON_POSITION endPoint;
    CANON_UNITS lengthUnits;
    CANON_PLANE activePlane;

    EmcPose toolOffset;


    CANON_MOTION_MODE motionMode;




   double motionTolerance;
   double naivecamTolerance;
   int feed_mode;
   int spindle_num;
   CanonSpindle_t spindle[8];







    double linearFeedRate;
    double angularFeedRate;

    bool optional_program_stop;

    bool block_delete;




    int cartesian_move;
    int angular_move;
} CanonConfig_t;




extern void INIT_CANON();



extern void SET_G5X_OFFSET(int origin,
                           double x, double y, double z,
                           double a, double b, double c,
                           double u, double v, double w);

extern void SET_G92_OFFSET(double x, double y, double z,
                           double a, double b, double c,
                           double u, double v, double w);

extern void SET_XY_ROTATION(double t);






extern void CANON_UPDATE_END_POINT(double x, double y, double z,
       double a, double b, double c,
       double u, double v, double w);



extern void USE_LENGTH_UNITS(CANON_UNITS u);




extern void SELECT_PLANE(CANON_PLANE pl);







extern void SET_TRAVERSE_RATE(double rate);





extern void STRAIGHT_TRAVERSE(int lineno,
                              double x, double y, double z,
                              double a, double b, double c,
                              double u, double v, double w);
# 269 "./emc/nml_intf/canon.hh"
extern void SET_FEED_RATE(double rate);
# 311 "./emc/nml_intf/canon.hh"
extern void SET_FEED_REFERENCE(CANON_FEED_REFERENCE reference);
# 364 "./emc/nml_intf/canon.hh"
extern void SET_FEED_MODE(int spindle, int mode);






extern void SET_MOTION_CONTROL_MODE(CANON_MOTION_MODE mode, double tolerance);

extern void SET_NAIVECAM_TOLERANCE(double tolerance);
# 385 "./emc/nml_intf/canon.hh"
extern void SET_CUTTER_RADIUS_COMPENSATION(double radius);



extern void START_CUTTER_RADIUS_COMPENSATION(int direction);




extern void STOP_CUTTER_RADIUS_COMPENSATION();





extern void START_SPEED_FEED_SYNCH(int spindle, double feed_per_revolution, bool velocity_mode);
extern void STOP_SPEED_FEED_SYNCH();




extern void ARC_FEED(int lineno,
                     double first_end, double second_end,
       double first_axis, double second_axis, int rotation,
       double axis_end_point,
                     double a, double b, double c,
                     double u, double v, double w);
# 464 "./emc/nml_intf/canon.hh"
extern void STRAIGHT_FEED(int lineno,
                          double x, double y, double z,
                          double a, double b, double c,
                          double u, double v, double w);



extern std::vector<unsigned int> knot_vector_creator(unsigned int n, unsigned int k);
extern double Nmix(unsigned int i, unsigned int k, double u,
                    std::vector<unsigned int> knot_vector);
extern double Rden(double u, unsigned int k,
                  std::vector<CONTROL_POINT> nurbs_control_points,
                  std::vector<unsigned int> knot_vector);
extern PLANE_POINT nurbs_point(double u, unsigned int k,
                  std::vector<CONTROL_POINT> nurbs_control_points,
                  std::vector<unsigned int> knot_vector);
extern PLANE_POINT nurbs_tangent(double u, unsigned int k,
                  std::vector<CONTROL_POINT> nurbs_control_points,
                  std::vector<unsigned int> knot_vector);
extern double alpha_finder(double dx, double dy);



extern void NURBS_FEED(int lineno, std::vector<CONTROL_POINT> nurbs_control_points, unsigned int k);
# 496 "./emc/nml_intf/canon.hh"
extern void RIGID_TAP(int lineno,
                      double x, double y, double z, double scale);





extern void STRAIGHT_PROBE(int lineno,
                           double x, double y, double z,
                           double a, double b, double c,
                           double u, double v, double w, unsigned char probe_type);






extern void STOP();



extern void DWELL(double seconds);





extern void SET_SPINDLE_MODE(int spindle, double mode);
extern void SPINDLE_RETRACT_TRAVERSE();



extern void START_SPINDLE_CLOCKWISE(int spindle, int wait_for_atspeed = 1);




extern void START_SPINDLE_COUNTERCLOCKWISE(int spindle, int wait_for_atspeed = 1);




extern void SET_SPINDLE_SPEED(int spindle, double r);






extern void STOP_SPINDLE_TURNING(int spindle);




extern void SPINDLE_RETRACT();
extern void ORIENT_SPINDLE(int spindle, double orientation, int mode);
extern void WAIT_SPINDLE_ORIENT_COMPLETE(int spindle, double timeout);
extern void LOCK_SPINDLE_Z();
extern void USE_SPINDLE_FORCE();
extern void USE_NO_SPINDLE_FORCE();


extern void SET_TOOL_TABLE_ENTRY(int pocket, int toolno, EmcPose offset, double diameter,
                                 double frontangle, double backangle, int orientation);
extern void USE_TOOL_LENGTH_OFFSET(EmcPose offset);

extern void CHANGE_TOOL(int slot);
# 595 "./emc/nml_intf/canon.hh"
extern void SELECT_TOOL(int tool);

extern void CHANGE_TOOL_NUMBER(int number);
extern void RELOAD_TOOLDATA(void);
# 607 "./emc/nml_intf/canon.hh"
extern void START_CHANGE(void);






extern void CLAMP_AXIS(CANON_AXIS axis);
# 623 "./emc/nml_intf/canon.hh"
extern void COMMENT(const char *s);







extern void DISABLE_ADAPTIVE_FEED();
extern void ENABLE_ADAPTIVE_FEED();


extern void DISABLE_FEED_OVERRIDE();
extern void ENABLE_FEED_OVERRIDE();


extern void DISABLE_SPEED_OVERRIDE(int spindle);
extern void ENABLE_SPEED_OVERRIDE(int spindle);


extern void DISABLE_FEED_HOLD();
extern void ENABLE_FEED_HOLD();


extern void FLOOD_OFF();

extern void FLOOD_ON();


extern void MESSAGE(char *s);

extern void LOG(char *s);
extern void LOGOPEN(char *s);
extern void LOGAPPEND(char *s);
extern void LOGCLOSE();

extern void MIST_OFF();


extern void MIST_ON();


extern void PALLET_SHUTTLE();
# 675 "./emc/nml_intf/canon.hh"
extern void TURN_PROBE_OFF();
extern void TURN_PROBE_ON();

extern void UNCLAMP_AXIS(CANON_AXIS axis);






extern void NURB_KNOT_VECTOR();
extern void NURB_CONTROL_POINT(int i, double x, double y, double z,
          double w);
extern void NURB_FEED(double sStart, double sEnd);



extern void SET_BLOCK_DELETE(bool enabled);




extern bool GET_BLOCK_DELETE(void);




extern void OPTIONAL_PROGRAM_STOP();
# 711 "./emc/nml_intf/canon.hh"
extern void SET_OPTIONAL_PROGRAM_STOP(bool state);




extern bool GET_OPTIONAL_PROGRAM_STOP();


extern void PROGRAM_END();



extern void PROGRAM_STOP();
# 732 "./emc/nml_intf/canon.hh"
extern void SET_MOTION_OUTPUT_BIT(int index);
extern void CLEAR_MOTION_OUTPUT_BIT(int index);
extern void SET_AUX_OUTPUT_BIT(int index);
extern void CLEAR_AUX_OUTPUT_BIT(int index);

extern void SET_MOTION_OUTPUT_VALUE(int index, double value);
extern void SET_AUX_OUTPUT_VALUE(int index, double value);



#define DIGITAL_INPUT 1
#define ANALOG_INPUT 0

#define WAIT_MODE_IMMEDIATE 0
#define WAIT_MODE_RISE 1
#define WAIT_MODE_FALL 2
#define WAIT_MODE_HIGH 3
#define WAIT_MODE_LOW 4

extern int WAIT(int index,
  int input_type,
         int wait_type,
  double timeout);





extern int UNLOCK_ROTARY(int line_no, int joint_num);


extern int LOCK_ROTARY(int line_no, int joint_num);
# 782 "./emc/nml_intf/canon.hh"
extern double GET_EXTERNAL_FEED_RATE();


extern int GET_EXTERNAL_FLOOD();







CANON_UNITS GET_EXTERNAL_LENGTH_UNIT_TYPE();

extern double GET_EXTERNAL_LENGTH_UNITS();
extern double GET_EXTERNAL_ANGLE_UNITS();


extern int GET_EXTERNAL_MIST();


extern CANON_MOTION_MODE GET_EXTERNAL_MOTION_CONTROL_MODE();


extern double GET_EXTERNAL_MOTION_CONTROL_TOLERANCE();


extern double GET_EXTERNAL_MOTION_CONTROL_NAIVECAM_TOLERANCE();
# 835 "./emc/nml_intf/canon.hh"
extern void GET_EXTERNAL_PARAMETER_FILE_NAME(char *filename, int max_size);

extern void SET_PARAMETER_FILE_NAME(const char *name);


extern CANON_PLANE GET_EXTERNAL_PLANE();


extern double GET_EXTERNAL_POSITION_A();


extern double GET_EXTERNAL_POSITION_B();


extern double GET_EXTERNAL_POSITION_C();


extern double GET_EXTERNAL_POSITION_X();


extern double GET_EXTERNAL_POSITION_Y();


extern double GET_EXTERNAL_POSITION_Z();


extern double GET_EXTERNAL_POSITION_U();


extern double GET_EXTERNAL_POSITION_V();


extern double GET_EXTERNAL_POSITION_W();




extern double GET_EXTERNAL_PROBE_POSITION_A();
extern double GET_EXTERNAL_PROBE_POSITION_B();
extern double GET_EXTERNAL_PROBE_POSITION_C();
extern double GET_EXTERNAL_PROBE_POSITION_X();
extern double GET_EXTERNAL_PROBE_POSITION_Y();
extern double GET_EXTERNAL_PROBE_POSITION_Z();
extern double GET_EXTERNAL_PROBE_POSITION_U();
extern double GET_EXTERNAL_PROBE_POSITION_V();
extern double GET_EXTERNAL_PROBE_POSITION_W();


extern double GET_EXTERNAL_PROBE_VALUE();


extern int GET_EXTERNAL_PROBE_TRIPPED_VALUE();



extern int GET_EXTERNAL_QUEUE_EMPTY();


extern double GET_EXTERNAL_SPEED(int spindle);


extern CANON_DIRECTION GET_EXTERNAL_SPINDLE(int spindle);


extern double GET_EXTERNAL_TOOL_LENGTH_XOFFSET();
extern double GET_EXTERNAL_TOOL_LENGTH_YOFFSET();
extern double GET_EXTERNAL_TOOL_LENGTH_ZOFFSET();
extern double GET_EXTERNAL_TOOL_LENGTH_AOFFSET();
extern double GET_EXTERNAL_TOOL_LENGTH_BOFFSET();
extern double GET_EXTERNAL_TOOL_LENGTH_COFFSET();
extern double GET_EXTERNAL_TOOL_LENGTH_UOFFSET();
extern double GET_EXTERNAL_TOOL_LENGTH_VOFFSET();
extern double GET_EXTERNAL_TOOL_LENGTH_WOFFSET();




extern int GET_EXTERNAL_TOOL_SLOT();




extern int GET_EXTERNAL_SELECTED_TOOL_SLOT();



extern CANON_TOOL_TABLE GET_EXTERNAL_TOOL_TABLE(int pocket);


extern int GET_EXTERNAL_TC_FAULT();


int GET_EXTERNAL_TC_REASON();


extern double GET_EXTERNAL_TRAVERSE_RATE();



extern int GET_EXTERNAL_FEED_OVERRIDE_ENABLE();
extern int GET_EXTERNAL_SPINDLE_OVERRIDE_ENABLE(int spindle);
extern int GET_EXTERNAL_ADAPTIVE_FEED_ENABLE();
extern int GET_EXTERNAL_FEED_HOLD_ENABLE();




extern int GET_EXTERNAL_DIGITAL_INPUT(int index, int def);


extern double GET_EXTERNAL_ANALOG_INPUT(int index, double def);



extern int GET_EXTERNAL_AXIS_MASK();


#define PARAMETER_FILE_NAME_LENGTH 100

#define USER_DEFINED_FUNCTION_NUM 100
typedef void (*USER_DEFINED_FUNCTION_TYPE) (int num, double arg1,
         double arg2);
extern USER_DEFINED_FUNCTION_TYPE
    USER_DEFINED_FUNCTION[100];
extern int USER_DEFINED_FUNCTION_ADD(USER_DEFINED_FUNCTION_TYPE func,
         int num);



extern void FINISH(void);



extern void ON_RESET(void);


extern void CANON_ERROR(const char *fmt, ...) __attribute__((format(printf,1,2)));



extern void PLUGIN_CALL(int len, const char *call);


extern void IO_PLUGIN_CALL(int len, const char *call);
extern int GET_EXTERNAL_OFFSET_APPLIED();
extern EmcPose GET_EXTERNAL_OFFSETS();
extern void UPDATE_TAG(StateTag tag);
# 10 "emc/sterp/sterp.cc" 2
# 1 "./emc/nml_intf/interp_return.hh" 1
# 20 "./emc/nml_intf/interp_return.hh"
#define INTERP_RETURN_H 

enum InterpReturn {
    INTERP_OK = 0,
    INTERP_EXIT = 1,
    INTERP_EXECUTE_FINISH = 2,
    INTERP_ENDFILE = 3,
    INTERP_FILE_NOT_OPEN = 4,
    INTERP_ERROR = 5,
};
# 38 "./emc/nml_intf/interp_return.hh"
static const InterpReturn INTERP_MIN_ERROR = INTERP_ENDFILE;
# 11 "emc/sterp/sterp.cc" 2
# 1 "./emc/rs274ngc/interp_base.hh" 1
# 20 "./emc/rs274ngc/interp_base.hh"
#define INTERP_BASE_HH 

# 1 "/usr/include/c++/15.1.1/stdlib.h" 1 3
# 34 "/usr/include/c++/15.1.1/stdlib.h" 3
#define _GLIBCXX_STDLIB_H 1




# 38 "/usr/include/c++/15.1.1/stdlib.h" 3
using std::abort;
using std::atexit;
using std::exit;


  using std::at_quick_exit;


  using std::quick_exit;


  using std::_Exit;




using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 23 "./emc/rs274ngc/interp_base.hh" 2
# 1 "/usr/include/boost/noncopyable.hpp" 1 3 4
# 10 "/usr/include/boost/noncopyable.hpp" 3 4
#define BOOST_NONCOPYABLE_HPP 




# 1 "/usr/include/boost/core/noncopyable.hpp" 1 3 4
# 10 "/usr/include/boost/core/noncopyable.hpp" 3 4
#define BOOST_CORE_NONCOPYABLE_HPP 

# 1 "/usr/include/boost/config.hpp" 1 3 4
# 18 "/usr/include/boost/config.hpp" 3 4
#define BOOST_CONFIG_HPP 



#define BOOST_USER_CONFIG <boost/config/user.hpp>







# 1 "/usr/include/boost/config/user.hpp" 1 3 4
# 31 "/usr/include/boost/config.hpp" 2 3 4




# 1 "/usr/include/boost/config/detail/select_compiler_config.hpp" 1 3 4
# 60 "/usr/include/boost/config/detail/select_compiler_config.hpp" 3 4
#define BOOST_COMPILER_CONFIG "boost/config/compiler/gcc.hpp"
# 36 "/usr/include/boost/config.hpp" 2 3 4



# 1 "/usr/include/boost/config/compiler/gcc.hpp" 1 3 4
# 19 "/usr/include/boost/config/compiler/gcc.hpp" 3 4
#define BOOST_GCC_VERSION (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)

#define BOOST_GCC BOOST_GCC_VERSION



#define BOOST_GCC_CXX11 
# 51 "/usr/include/boost/config/compiler/gcc.hpp" 3 4
#define BOOST_HAS_PRAGMA_ONCE 
# 86 "/usr/include/boost/config/compiler/gcc.hpp" 3 4
#define BOOST_HAS_LONG_LONG 





#define BOOST_HAS_NRVO 


#define BOOST_LIKELY(x) __builtin_expect(x, 1)
#define BOOST_UNLIKELY(x) __builtin_expect(x, 0)
# 110 "/usr/include/boost/config/compiler/gcc.hpp" 3 4
#define BOOST_SYMBOL_EXPORT __attribute__((__visibility__("default")))
#define BOOST_SYMBOL_IMPORT 

#define BOOST_SYMBOL_VISIBLE __attribute__((__visibility__("default")))
# 153 "/usr/include/boost/config/compiler/gcc.hpp" 3 4
#define BOOST_HAS_INT128 
# 170 "/usr/include/boost/config/compiler/gcc.hpp" 3 4
#define BOOST_HAS_FLOAT128 
# 179 "/usr/include/boost/config/compiler/gcc.hpp" 3 4
#define BOOST_HAS_DECLTYPE 
#define BOOST_HAS_RVALUE_REFS 
#define BOOST_HAS_STATIC_ASSERT 
#define BOOST_HAS_VARIADIC_TMPL 
# 327 "/usr/include/boost/config/compiler/gcc.hpp" 3 4
#define BOOST_FALLTHROUGH __attribute__((fallthrough))
# 341 "/usr/include/boost/config/compiler/gcc.hpp" 3 4
#define BOOST_ATTRIBUTE_UNUSED __attribute__((__unused__))



#define BOOST_MAY_ALIAS __attribute__((__may_alias__))



#define BOOST_UNREACHABLE_RETURN(x) __builtin_unreachable();




#define BOOST_DEPRECATED(msg) __attribute__((deprecated(msg)))





#define BOOST_COMPILER "GNU C++ version " __VERSION__
# 40 "/usr/include/boost/config.hpp" 2 3 4




# 1 "/usr/include/boost/config/detail/select_stdlib_config.hpp" 1 3 4
# 24 "/usr/include/boost/config/detail/select_stdlib_config.hpp" 3 4
# 1 "/usr/include/c++/15.1.1/version" 1 3 4
# 31 "/usr/include/c++/15.1.1/version" 3 4
#define _GLIBCXX_VERSION_INCLUDED 





#define __glibcxx_want_all 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3 4
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_incomplete_container_elements



#define __glibcxx_uncaught_exceptions 201411L

#define __cpp_lib_uncaught_exceptions 201411L



#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_result_of_sfinae
# 110 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#define __glibcxx_shared_ptr_arrays 201611L

#define __cpp_lib_shared_ptr_arrays 201611L



#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_void_t



#define __glibcxx_enable_shared_from_this 201603L

#define __cpp_lib_enable_shared_from_this 201603L



#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L

#define __STDCPP_MATH_SPEC_FUNCS__ 201003L



#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_coroutine



#define __glibcxx_exchange_function 201304L

#define __cpp_lib_exchange_function 201304L



#undef __glibcxx_want_exchange_function



#define __glibcxx_integer_sequence 201304L

#define __cpp_lib_integer_sequence 201304L



#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_is_final



#define __glibcxx_make_reverse_iterator 201402L

#define __cpp_lib_make_reverse_iterator 201402L



#undef __glibcxx_want_make_reverse_iterator



#define __glibcxx_null_iterators 201304L

#define __cpp_lib_null_iterators 201304L



#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_transformation_trait_aliases



#define __glibcxx_transparent_operators 201510L

#define __cpp_lib_transparent_operators 201510L



#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_tuples_by_type



#define __glibcxx_robust_nonmodifying_seq_ops 201304L

#define __cpp_lib_robust_nonmodifying_seq_ops 201304L



#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 285 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#define __glibcxx_to_chars 201611L

#define __cpp_lib_to_chars 201611L



#undef __glibcxx_want_to_chars



#define __glibcxx_chrono_udls 201304L

#define __cpp_lib_chrono_udls 201304L



#undef __glibcxx_want_chrono_udls



#define __glibcxx_complex_udls 201309L

#define __cpp_lib_complex_udls 201309L



#undef __glibcxx_want_complex_udls



#define __glibcxx_generic_associative_lookup 201304L

#define __cpp_lib_generic_associative_lookup 201304L



#undef __glibcxx_want_generic_associative_lookup



#define __glibcxx_make_unique 201304L

#define __cpp_lib_make_unique 201304L



#undef __glibcxx_want_make_unique



#define __glibcxx_quoted_string_io 201304L

#define __cpp_lib_quoted_string_io 201304L



#undef __glibcxx_want_quoted_string_io



#define __glibcxx_shared_timed_mutex 201402L

#define __cpp_lib_shared_timed_mutex 201402L



#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_string_udls



#define __glibcxx_addressof_constexpr 201603L

#define __cpp_lib_addressof_constexpr 201603L



#undef __glibcxx_want_addressof_constexpr



#define __glibcxx_any 201606L

#define __cpp_lib_any 201606L



#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_apply



#define __glibcxx_as_const 201510L

#define __cpp_lib_as_const 201510L



#undef __glibcxx_want_as_const



#define __glibcxx_atomic_is_always_lock_free 201603L

#define __cpp_lib_atomic_is_always_lock_free 201603L



#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_hardware_interference_size



#define __glibcxx_invoke 201411L

#define __cpp_lib_invoke 201411L



#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_make_from_tuple



#define __glibcxx_not_fn 201603L

#define __cpp_lib_not_fn 201603L



#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_type_trait_variable_templates
# 545 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#define __glibcxx_variant 202102L

#define __cpp_lib_variant 202102L



#undef __glibcxx_want_variant



#define __glibcxx_lcm 201606L

#define __cpp_lib_lcm 201606L



#undef __glibcxx_want_lcm



#define __glibcxx_gcd 201606L

#define __cpp_lib_gcd 201606L



#undef __glibcxx_want_gcd



#define __glibcxx_gcd_lcm 201606L

#define __cpp_lib_gcd_lcm 201606L



#undef __glibcxx_want_gcd_lcm
# 590 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#define __glibcxx_raw_memory_algorithms 201606L

#define __cpp_lib_raw_memory_algorithms 201606L



#undef __glibcxx_want_raw_memory_algorithms
# 605 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#define __glibcxx_array_constexpr 201803L

#define __cpp_lib_array_constexpr 201803L



#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_nonmember_container_access



#define __glibcxx_clamp 201603L

#define __cpp_lib_clamp 201603L



#undef __glibcxx_want_clamp



#define __glibcxx_sample 201603L

#define __cpp_lib_sample 201603L



#undef __glibcxx_want_sample



#define __glibcxx_boyer_moore_searcher 201603L

#define __cpp_lib_boyer_moore_searcher 201603L



#undef __glibcxx_want_boyer_moore_searcher
# 660 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#define __glibcxx_chrono 201611L

#define __cpp_lib_chrono 201611L



#undef __glibcxx_want_chrono



#define __glibcxx_execution 201902L

#define __cpp_lib_execution 201902L



#undef __glibcxx_want_execution



#define __glibcxx_filesystem 201703L

#define __cpp_lib_filesystem 201703L



#undef __glibcxx_want_filesystem



#define __glibcxx_hypot 201603L

#define __cpp_lib_hypot 201603L



#undef __glibcxx_want_hypot



#define __glibcxx_map_try_emplace 201411L

#define __cpp_lib_map_try_emplace 201411L



#undef __glibcxx_want_map_try_emplace



#define __glibcxx_math_special_functions 201603L

#define __cpp_lib_math_special_functions 201603L



#undef __glibcxx_want_math_special_functions



#define __glibcxx_memory_resource 201603L

#define __cpp_lib_memory_resource 201603L
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_memory_resource



#define __glibcxx_node_extract 201606L

#define __cpp_lib_node_extract 201606L



#undef __glibcxx_want_node_extract



#define __glibcxx_parallel_algorithm 201603L

#define __cpp_lib_parallel_algorithm 201603L



#undef __glibcxx_want_parallel_algorithm



#define __glibcxx_scoped_lock 201703L

#define __cpp_lib_scoped_lock 201703L



#undef __glibcxx_want_scoped_lock



#define __glibcxx_shared_mutex 201505L

#define __cpp_lib_shared_mutex 201505L



#undef __glibcxx_want_shared_mutex



#define __glibcxx_shared_ptr_weak_type 201606L

#define __cpp_lib_shared_ptr_weak_type 201606L



#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_string_view



#define __glibcxx_unordered_map_try_emplace 201411L

#define __cpp_lib_unordered_map_try_emplace 201411L



#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_concepts
# 950 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#define __glibcxx_optional 201606L

#define __cpp_lib_optional 201606L



#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3 4
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 39 "/usr/include/c++/15.1.1/version" 2 3 4
# 25 "/usr/include/boost/config/detail/select_stdlib_config.hpp" 2 3 4
# 70 "/usr/include/boost/config/detail/select_stdlib_config.hpp" 3 4
#define BOOST_STDLIB_CONFIG "boost/config/stdlib/libstdcpp3.hpp"
# 45 "/usr/include/boost/config.hpp" 2 3 4



# 1 "/usr/include/boost/config/stdlib/libstdcpp3.hpp" 1 3 4
# 12 "/usr/include/boost/config/stdlib/libstdcpp3.hpp" 3 4
#define BOOST_GNU_STDLIB 1


#define BOOST_STDLIB "GNU libstdc++ version " BOOST_STRINGIZE(__GLIBCXX__)
# 46 "/usr/include/boost/config/stdlib/libstdcpp3.hpp" 3 4
#define BOOST_HAS_THREADS 
# 78 "/usr/include/boost/config/stdlib/libstdcpp3.hpp" 3 4
# 1 "/usr/include/unistd.h" 1 3 4
# 23 "/usr/include/unistd.h" 3 4
#define _UNISTD_H 1



extern "C" {






#define _POSIX_VERSION 200809L
# 53 "/usr/include/unistd.h" 3 4
#define __POSIX2_THIS_VERSION 200809L
# 67 "/usr/include/unistd.h" 3 4
#define _POSIX2_VERSION __POSIX2_THIS_VERSION


#define _POSIX2_C_VERSION __POSIX2_THIS_VERSION



#define _POSIX2_C_BIND __POSIX2_THIS_VERSION



#define _POSIX2_C_DEV __POSIX2_THIS_VERSION



#define _POSIX2_SW_DEV __POSIX2_THIS_VERSION



#define _POSIX2_LOCALEDEF __POSIX2_THIS_VERSION



#define _XOPEN_VERSION 700
# 100 "/usr/include/unistd.h" 3 4
#define _XOPEN_XCU_VERSION 4


#define _XOPEN_XPG2 1
#define _XOPEN_XPG3 1
#define _XOPEN_XPG4 1


#define _XOPEN_UNIX 1



#define _XOPEN_ENH_I18N 1


#define _XOPEN_LEGACY 1
# 202 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/bits/posix_opt.h" 1 3 4
# 20 "/usr/include/bits/posix_opt.h" 3 4
#define _BITS_POSIX_OPT_H 1


#define _POSIX_JOB_CONTROL 1


#define _POSIX_SAVED_IDS 1





#define _POSIX_PRIORITY_SCHEDULING 200809L


#define _POSIX_SYNCHRONIZED_IO 200809L


#define _POSIX_FSYNC 200809L


#define _POSIX_MAPPED_FILES 200809L


#define _POSIX_MEMLOCK 200809L


#define _POSIX_MEMLOCK_RANGE 200809L


#define _POSIX_MEMORY_PROTECTION 200809L


#define _POSIX_CHOWN_RESTRICTED 0



#define _POSIX_VDISABLE '\0'


#define _POSIX_NO_TRUNC 1


#define _XOPEN_REALTIME 1


#define _XOPEN_REALTIME_THREADS 1


#define _XOPEN_SHM 1


#define _POSIX_THREADS 200809L


#define _POSIX_REENTRANT_FUNCTIONS 1
#define _POSIX_THREAD_SAFE_FUNCTIONS 200809L


#define _POSIX_THREAD_PRIORITY_SCHEDULING 200809L


#define _POSIX_THREAD_ATTR_STACKSIZE 200809L


#define _POSIX_THREAD_ATTR_STACKADDR 200809L


#define _POSIX_THREAD_PRIO_INHERIT 200809L



#define _POSIX_THREAD_PRIO_PROTECT 200809L



#define _POSIX_THREAD_ROBUST_PRIO_INHERIT 200809L


#define _POSIX_THREAD_ROBUST_PRIO_PROTECT -1



#define _POSIX_SEMAPHORES 200809L


#define _POSIX_REALTIME_SIGNALS 200809L


#define _POSIX_ASYNCHRONOUS_IO 200809L
#define _POSIX_ASYNC_IO 1

#define _LFS_ASYNCHRONOUS_IO 1

#define _POSIX_PRIORITIZED_IO 200809L


#define _LFS64_ASYNCHRONOUS_IO 1


#define _LFS_LARGEFILE 1
#define _LFS64_LARGEFILE 1
#define _LFS64_STDIO 1


#define _POSIX_SHARED_MEMORY_OBJECTS 200809L


#define _POSIX_CPUTIME 0


#define _POSIX_THREAD_CPUTIME 0


#define _POSIX_REGEXP 1


#define _POSIX_READER_WRITER_LOCKS 200809L


#define _POSIX_SHELL 1


#define _POSIX_TIMEOUTS 200809L


#define _POSIX_SPIN_LOCKS 200809L


#define _POSIX_SPAWN 200809L


#define _POSIX_TIMERS 200809L


#define _POSIX_BARRIERS 200809L


#define _POSIX_MESSAGE_PASSING 200809L


#define _POSIX_THREAD_PROCESS_SHARED 200809L


#define _POSIX_MONOTONIC_CLOCK 0


#define _POSIX_CLOCK_SELECTION 200809L


#define _POSIX_ADVISORY_INFO 200809L


#define _POSIX_IPV6 200809L


#define _POSIX_RAW_SOCKETS 200809L


#define _POSIX2_CHAR_TERM 200809L


#define _POSIX_SPORADIC_SERVER -1
#define _POSIX_THREAD_SPORADIC_SERVER -1


#define _POSIX_TRACE -1
#define _POSIX_TRACE_EVENT_FILTER -1
#define _POSIX_TRACE_INHERIT -1
#define _POSIX_TRACE_LOG -1


#define _POSIX_TYPED_MEMORY_OBJECTS -1
# 203 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/bits/environments.h" 1 3 4
# 22 "/usr/include/bits/environments.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64






#define __WORDSIZE_TIME64_COMPAT32 1



#define __SYSCALL_WORDSIZE 64
# 23 "/usr/include/bits/environments.h" 2 3 4
# 56 "/usr/include/bits/environments.h" 3 4
#define _POSIX_V7_LPBIG_OFFBIG -1
#define _POSIX_V6_LPBIG_OFFBIG -1
#define _XBS5_LPBIG_OFFBIG -1


#define _POSIX_V7_LP64_OFF64 1
#define _POSIX_V6_LP64_OFF64 1
#define _XBS5_LP64_OFF64 1
# 95 "/usr/include/bits/environments.h" 3 4
#define __ILP32_OFF32_CFLAGS "-m32"
#define __ILP32_OFF32_LDFLAGS "-m32"




#define __ILP32_OFFBIG_CFLAGS "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"
#define __ILP32_OFFBIG_LDFLAGS "-m32"

#define __LP64_OFF64_CFLAGS "-m64"
#define __LP64_OFF64_LDFLAGS "-m64"
# 207 "/usr/include/unistd.h" 2 3 4



#define STDIN_FILENO 0
#define STDOUT_FILENO 1
#define STDERR_FILENO 2
# 224 "/usr/include/unistd.h" 3 4
#define __need_size_t 
#define __need_NULL 
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 1 3 4
# 173 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 252 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_size_t
# 364 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_wchar_t
# 414 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef NULL

#define NULL __null
# 425 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_NULL




#undef offsetof
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 227 "/usr/include/unistd.h" 2 3 4
# 267 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;
#define __intptr_t_defined 





typedef __socklen_t socklen_t;
#define __socklen_t_defined 





#define R_OK 4
#define W_OK 2
#define X_OK 1
#define F_OK 0


extern int access (const char *__name, int __type) noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int execveat (int __fd, const char *__path, char *const __argv[],
                     char *const __envp[], int __flags)
    noexcept (true) __attribute__ ((__nonnull__ (2, 3)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     noexcept (true) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));
# 327 "/usr/include/unistd.h" 3 4
#define L_SET SEEK_SET
#define L_INCR SEEK_CUR
#define L_XTND SEEK_END
# 339 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) noexcept (true);
# 350 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     noexcept (true);






extern int close (int __fd);




extern void closefrom (int __lowfd) noexcept (true);







extern ssize_t read (int __fd, void *__buf, size_t __nbytes) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__write_only__, 2, 3)));





extern ssize_t write (int __fd, const void *__buf, size_t __n) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__read_only__, 2, 3)));
# 389 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__write_only__, 2, 3)));






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__read_only__, 2, 3)));
# 422 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__write_only__, 2, 3)));


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__read_only__, 2, 3)));







extern int pipe (int __pipedes[2]) noexcept (true) __attribute__ ((__warn_unused_result__));




extern int pipe2 (int __pipedes[2], int __flags) noexcept (true) __attribute__ ((__warn_unused_result__));
# 452 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) noexcept (true);
# 464 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     noexcept (true);






extern int usleep (__useconds_t __useconds);
# 489 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) noexcept (true) __attribute__ ((__warn_unused_result__));




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     noexcept (true) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));



extern int chdir (const char *__path) noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int fchdir (int __fd) noexcept (true) __attribute__ ((__warn_unused_result__));
# 531 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) noexcept (true) __attribute__ ((__warn_unused_result__));





extern char *get_current_dir_name (void) noexcept (true);







extern char *getwd (char *__buf)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__write_only__, 1)));




extern int dup (int __fd) noexcept (true) __attribute__ ((__warn_unused_result__));


extern int dup2 (int __fd, int __fd2) noexcept (true);




extern int dup3 (int __fd, int __fd2, int __flags) noexcept (true);



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     noexcept (true) __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) noexcept (true) __attribute__ ((__warn_unused_result__));




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/bits/confname.h" 1 3 4
# 24 "/usr/include/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,
#define _PC_LINK_MAX _PC_LINK_MAX
    _PC_MAX_CANON,
#define _PC_MAX_CANON _PC_MAX_CANON
    _PC_MAX_INPUT,
#define _PC_MAX_INPUT _PC_MAX_INPUT
    _PC_NAME_MAX,
#define _PC_NAME_MAX _PC_NAME_MAX
    _PC_PATH_MAX,
#define _PC_PATH_MAX _PC_PATH_MAX
    _PC_PIPE_BUF,
#define _PC_PIPE_BUF _PC_PIPE_BUF
    _PC_CHOWN_RESTRICTED,
#define _PC_CHOWN_RESTRICTED _PC_CHOWN_RESTRICTED
    _PC_NO_TRUNC,
#define _PC_NO_TRUNC _PC_NO_TRUNC
    _PC_VDISABLE,
#define _PC_VDISABLE _PC_VDISABLE
    _PC_SYNC_IO,
#define _PC_SYNC_IO _PC_SYNC_IO
    _PC_ASYNC_IO,
#define _PC_ASYNC_IO _PC_ASYNC_IO
    _PC_PRIO_IO,
#define _PC_PRIO_IO _PC_PRIO_IO
    _PC_SOCK_MAXBUF,
#define _PC_SOCK_MAXBUF _PC_SOCK_MAXBUF
    _PC_FILESIZEBITS,
#define _PC_FILESIZEBITS _PC_FILESIZEBITS
    _PC_REC_INCR_XFER_SIZE,
#define _PC_REC_INCR_XFER_SIZE _PC_REC_INCR_XFER_SIZE
    _PC_REC_MAX_XFER_SIZE,
#define _PC_REC_MAX_XFER_SIZE _PC_REC_MAX_XFER_SIZE
    _PC_REC_MIN_XFER_SIZE,
#define _PC_REC_MIN_XFER_SIZE _PC_REC_MIN_XFER_SIZE
    _PC_REC_XFER_ALIGN,
#define _PC_REC_XFER_ALIGN _PC_REC_XFER_ALIGN
    _PC_ALLOC_SIZE_MIN,
#define _PC_ALLOC_SIZE_MIN _PC_ALLOC_SIZE_MIN
    _PC_SYMLINK_MAX,
#define _PC_SYMLINK_MAX _PC_SYMLINK_MAX
    _PC_2_SYMLINKS
#define _PC_2_SYMLINKS _PC_2_SYMLINKS
  };


enum
  {
    _SC_ARG_MAX,
#define _SC_ARG_MAX _SC_ARG_MAX
    _SC_CHILD_MAX,
#define _SC_CHILD_MAX _SC_CHILD_MAX
    _SC_CLK_TCK,
#define _SC_CLK_TCK _SC_CLK_TCK
    _SC_NGROUPS_MAX,
#define _SC_NGROUPS_MAX _SC_NGROUPS_MAX
    _SC_OPEN_MAX,
#define _SC_OPEN_MAX _SC_OPEN_MAX
    _SC_STREAM_MAX,
#define _SC_STREAM_MAX _SC_STREAM_MAX
    _SC_TZNAME_MAX,
#define _SC_TZNAME_MAX _SC_TZNAME_MAX
    _SC_JOB_CONTROL,
#define _SC_JOB_CONTROL _SC_JOB_CONTROL
    _SC_SAVED_IDS,
#define _SC_SAVED_IDS _SC_SAVED_IDS
    _SC_REALTIME_SIGNALS,
#define _SC_REALTIME_SIGNALS _SC_REALTIME_SIGNALS
    _SC_PRIORITY_SCHEDULING,
#define _SC_PRIORITY_SCHEDULING _SC_PRIORITY_SCHEDULING
    _SC_TIMERS,
#define _SC_TIMERS _SC_TIMERS
    _SC_ASYNCHRONOUS_IO,
#define _SC_ASYNCHRONOUS_IO _SC_ASYNCHRONOUS_IO
    _SC_PRIORITIZED_IO,
#define _SC_PRIORITIZED_IO _SC_PRIORITIZED_IO
    _SC_SYNCHRONIZED_IO,
#define _SC_SYNCHRONIZED_IO _SC_SYNCHRONIZED_IO
    _SC_FSYNC,
#define _SC_FSYNC _SC_FSYNC
    _SC_MAPPED_FILES,
#define _SC_MAPPED_FILES _SC_MAPPED_FILES
    _SC_MEMLOCK,
#define _SC_MEMLOCK _SC_MEMLOCK
    _SC_MEMLOCK_RANGE,
#define _SC_MEMLOCK_RANGE _SC_MEMLOCK_RANGE
    _SC_MEMORY_PROTECTION,
#define _SC_MEMORY_PROTECTION _SC_MEMORY_PROTECTION
    _SC_MESSAGE_PASSING,
#define _SC_MESSAGE_PASSING _SC_MESSAGE_PASSING
    _SC_SEMAPHORES,
#define _SC_SEMAPHORES _SC_SEMAPHORES
    _SC_SHARED_MEMORY_OBJECTS,
#define _SC_SHARED_MEMORY_OBJECTS _SC_SHARED_MEMORY_OBJECTS
    _SC_AIO_LISTIO_MAX,
#define _SC_AIO_LISTIO_MAX _SC_AIO_LISTIO_MAX
    _SC_AIO_MAX,
#define _SC_AIO_MAX _SC_AIO_MAX
    _SC_AIO_PRIO_DELTA_MAX,
#define _SC_AIO_PRIO_DELTA_MAX _SC_AIO_PRIO_DELTA_MAX
    _SC_DELAYTIMER_MAX,
#define _SC_DELAYTIMER_MAX _SC_DELAYTIMER_MAX
    _SC_MQ_OPEN_MAX,
#define _SC_MQ_OPEN_MAX _SC_MQ_OPEN_MAX
    _SC_MQ_PRIO_MAX,
#define _SC_MQ_PRIO_MAX _SC_MQ_PRIO_MAX
    _SC_VERSION,
#define _SC_VERSION _SC_VERSION
    _SC_PAGESIZE,
#define _SC_PAGESIZE _SC_PAGESIZE
#define _SC_PAGE_SIZE _SC_PAGESIZE
    _SC_RTSIG_MAX,
#define _SC_RTSIG_MAX _SC_RTSIG_MAX
    _SC_SEM_NSEMS_MAX,
#define _SC_SEM_NSEMS_MAX _SC_SEM_NSEMS_MAX
    _SC_SEM_VALUE_MAX,
#define _SC_SEM_VALUE_MAX _SC_SEM_VALUE_MAX
    _SC_SIGQUEUE_MAX,
#define _SC_SIGQUEUE_MAX _SC_SIGQUEUE_MAX
    _SC_TIMER_MAX,
#define _SC_TIMER_MAX _SC_TIMER_MAX



    _SC_BC_BASE_MAX,
#define _SC_BC_BASE_MAX _SC_BC_BASE_MAX
    _SC_BC_DIM_MAX,
#define _SC_BC_DIM_MAX _SC_BC_DIM_MAX
    _SC_BC_SCALE_MAX,
#define _SC_BC_SCALE_MAX _SC_BC_SCALE_MAX
    _SC_BC_STRING_MAX,
#define _SC_BC_STRING_MAX _SC_BC_STRING_MAX
    _SC_COLL_WEIGHTS_MAX,
#define _SC_COLL_WEIGHTS_MAX _SC_COLL_WEIGHTS_MAX
    _SC_EQUIV_CLASS_MAX,
#define _SC_EQUIV_CLASS_MAX _SC_EQUIV_CLASS_MAX
    _SC_EXPR_NEST_MAX,
#define _SC_EXPR_NEST_MAX _SC_EXPR_NEST_MAX
    _SC_LINE_MAX,
#define _SC_LINE_MAX _SC_LINE_MAX
    _SC_RE_DUP_MAX,
#define _SC_RE_DUP_MAX _SC_RE_DUP_MAX
    _SC_CHARCLASS_NAME_MAX,
#define _SC_CHARCLASS_NAME_MAX _SC_CHARCLASS_NAME_MAX

    _SC_2_VERSION,
#define _SC_2_VERSION _SC_2_VERSION
    _SC_2_C_BIND,
#define _SC_2_C_BIND _SC_2_C_BIND
    _SC_2_C_DEV,
#define _SC_2_C_DEV _SC_2_C_DEV
    _SC_2_FORT_DEV,
#define _SC_2_FORT_DEV _SC_2_FORT_DEV
    _SC_2_FORT_RUN,
#define _SC_2_FORT_RUN _SC_2_FORT_RUN
    _SC_2_SW_DEV,
#define _SC_2_SW_DEV _SC_2_SW_DEV
    _SC_2_LOCALEDEF,
#define _SC_2_LOCALEDEF _SC_2_LOCALEDEF

    _SC_PII,
#define _SC_PII _SC_PII
    _SC_PII_XTI,
#define _SC_PII_XTI _SC_PII_XTI
    _SC_PII_SOCKET,
#define _SC_PII_SOCKET _SC_PII_SOCKET
    _SC_PII_INTERNET,
#define _SC_PII_INTERNET _SC_PII_INTERNET
    _SC_PII_OSI,
#define _SC_PII_OSI _SC_PII_OSI
    _SC_POLL,
#define _SC_POLL _SC_POLL
    _SC_SELECT,
#define _SC_SELECT _SC_SELECT
    _SC_UIO_MAXIOV,
#define _SC_UIO_MAXIOV _SC_UIO_MAXIOV
    _SC_IOV_MAX = _SC_UIO_MAXIOV,
#define _SC_IOV_MAX _SC_IOV_MAX
    _SC_PII_INTERNET_STREAM,
#define _SC_PII_INTERNET_STREAM _SC_PII_INTERNET_STREAM
    _SC_PII_INTERNET_DGRAM,
#define _SC_PII_INTERNET_DGRAM _SC_PII_INTERNET_DGRAM
    _SC_PII_OSI_COTS,
#define _SC_PII_OSI_COTS _SC_PII_OSI_COTS
    _SC_PII_OSI_CLTS,
#define _SC_PII_OSI_CLTS _SC_PII_OSI_CLTS
    _SC_PII_OSI_M,
#define _SC_PII_OSI_M _SC_PII_OSI_M
    _SC_T_IOV_MAX,
#define _SC_T_IOV_MAX _SC_T_IOV_MAX


    _SC_THREADS,
#define _SC_THREADS _SC_THREADS
    _SC_THREAD_SAFE_FUNCTIONS,
#define _SC_THREAD_SAFE_FUNCTIONS _SC_THREAD_SAFE_FUNCTIONS
    _SC_GETGR_R_SIZE_MAX,
#define _SC_GETGR_R_SIZE_MAX _SC_GETGR_R_SIZE_MAX
    _SC_GETPW_R_SIZE_MAX,
#define _SC_GETPW_R_SIZE_MAX _SC_GETPW_R_SIZE_MAX
    _SC_LOGIN_NAME_MAX,
#define _SC_LOGIN_NAME_MAX _SC_LOGIN_NAME_MAX
    _SC_TTY_NAME_MAX,
#define _SC_TTY_NAME_MAX _SC_TTY_NAME_MAX
    _SC_THREAD_DESTRUCTOR_ITERATIONS,
#define _SC_THREAD_DESTRUCTOR_ITERATIONS _SC_THREAD_DESTRUCTOR_ITERATIONS
    _SC_THREAD_KEYS_MAX,
#define _SC_THREAD_KEYS_MAX _SC_THREAD_KEYS_MAX
    _SC_THREAD_STACK_MIN,
#define _SC_THREAD_STACK_MIN _SC_THREAD_STACK_MIN
    _SC_THREAD_THREADS_MAX,
#define _SC_THREAD_THREADS_MAX _SC_THREAD_THREADS_MAX
    _SC_THREAD_ATTR_STACKADDR,
#define _SC_THREAD_ATTR_STACKADDR _SC_THREAD_ATTR_STACKADDR
    _SC_THREAD_ATTR_STACKSIZE,
#define _SC_THREAD_ATTR_STACKSIZE _SC_THREAD_ATTR_STACKSIZE
    _SC_THREAD_PRIORITY_SCHEDULING,
#define _SC_THREAD_PRIORITY_SCHEDULING _SC_THREAD_PRIORITY_SCHEDULING
    _SC_THREAD_PRIO_INHERIT,
#define _SC_THREAD_PRIO_INHERIT _SC_THREAD_PRIO_INHERIT
    _SC_THREAD_PRIO_PROTECT,
#define _SC_THREAD_PRIO_PROTECT _SC_THREAD_PRIO_PROTECT
    _SC_THREAD_PROCESS_SHARED,
#define _SC_THREAD_PROCESS_SHARED _SC_THREAD_PROCESS_SHARED

    _SC_NPROCESSORS_CONF,
#define _SC_NPROCESSORS_CONF _SC_NPROCESSORS_CONF
    _SC_NPROCESSORS_ONLN,
#define _SC_NPROCESSORS_ONLN _SC_NPROCESSORS_ONLN
    _SC_PHYS_PAGES,
#define _SC_PHYS_PAGES _SC_PHYS_PAGES
    _SC_AVPHYS_PAGES,
#define _SC_AVPHYS_PAGES _SC_AVPHYS_PAGES
    _SC_ATEXIT_MAX,
#define _SC_ATEXIT_MAX _SC_ATEXIT_MAX
    _SC_PASS_MAX,
#define _SC_PASS_MAX _SC_PASS_MAX

    _SC_XOPEN_VERSION,
#define _SC_XOPEN_VERSION _SC_XOPEN_VERSION
    _SC_XOPEN_XCU_VERSION,
#define _SC_XOPEN_XCU_VERSION _SC_XOPEN_XCU_VERSION
    _SC_XOPEN_UNIX,
#define _SC_XOPEN_UNIX _SC_XOPEN_UNIX
    _SC_XOPEN_CRYPT,
#define _SC_XOPEN_CRYPT _SC_XOPEN_CRYPT
    _SC_XOPEN_ENH_I18N,
#define _SC_XOPEN_ENH_I18N _SC_XOPEN_ENH_I18N
    _SC_XOPEN_SHM,
#define _SC_XOPEN_SHM _SC_XOPEN_SHM

    _SC_2_CHAR_TERM,
#define _SC_2_CHAR_TERM _SC_2_CHAR_TERM
    _SC_2_C_VERSION,
#define _SC_2_C_VERSION _SC_2_C_VERSION
    _SC_2_UPE,
#define _SC_2_UPE _SC_2_UPE

    _SC_XOPEN_XPG2,
#define _SC_XOPEN_XPG2 _SC_XOPEN_XPG2
    _SC_XOPEN_XPG3,
#define _SC_XOPEN_XPG3 _SC_XOPEN_XPG3
    _SC_XOPEN_XPG4,
#define _SC_XOPEN_XPG4 _SC_XOPEN_XPG4

    _SC_CHAR_BIT,
#define _SC_CHAR_BIT _SC_CHAR_BIT
    _SC_CHAR_MAX,
#define _SC_CHAR_MAX _SC_CHAR_MAX
    _SC_CHAR_MIN,
#define _SC_CHAR_MIN _SC_CHAR_MIN
    _SC_INT_MAX,
#define _SC_INT_MAX _SC_INT_MAX
    _SC_INT_MIN,
#define _SC_INT_MIN _SC_INT_MIN
    _SC_LONG_BIT,
#define _SC_LONG_BIT _SC_LONG_BIT
    _SC_WORD_BIT,
#define _SC_WORD_BIT _SC_WORD_BIT
    _SC_MB_LEN_MAX,
#define _SC_MB_LEN_MAX _SC_MB_LEN_MAX
    _SC_NZERO,
#define _SC_NZERO _SC_NZERO
    _SC_SSIZE_MAX,
#define _SC_SSIZE_MAX _SC_SSIZE_MAX
    _SC_SCHAR_MAX,
#define _SC_SCHAR_MAX _SC_SCHAR_MAX
    _SC_SCHAR_MIN,
#define _SC_SCHAR_MIN _SC_SCHAR_MIN
    _SC_SHRT_MAX,
#define _SC_SHRT_MAX _SC_SHRT_MAX
    _SC_SHRT_MIN,
#define _SC_SHRT_MIN _SC_SHRT_MIN
    _SC_UCHAR_MAX,
#define _SC_UCHAR_MAX _SC_UCHAR_MAX
    _SC_UINT_MAX,
#define _SC_UINT_MAX _SC_UINT_MAX
    _SC_ULONG_MAX,
#define _SC_ULONG_MAX _SC_ULONG_MAX
    _SC_USHRT_MAX,
#define _SC_USHRT_MAX _SC_USHRT_MAX

    _SC_NL_ARGMAX,
#define _SC_NL_ARGMAX _SC_NL_ARGMAX
    _SC_NL_LANGMAX,
#define _SC_NL_LANGMAX _SC_NL_LANGMAX
    _SC_NL_MSGMAX,
#define _SC_NL_MSGMAX _SC_NL_MSGMAX
    _SC_NL_NMAX,
#define _SC_NL_NMAX _SC_NL_NMAX
    _SC_NL_SETMAX,
#define _SC_NL_SETMAX _SC_NL_SETMAX
    _SC_NL_TEXTMAX,
#define _SC_NL_TEXTMAX _SC_NL_TEXTMAX

    _SC_XBS5_ILP32_OFF32,
#define _SC_XBS5_ILP32_OFF32 _SC_XBS5_ILP32_OFF32
    _SC_XBS5_ILP32_OFFBIG,
#define _SC_XBS5_ILP32_OFFBIG _SC_XBS5_ILP32_OFFBIG
    _SC_XBS5_LP64_OFF64,
#define _SC_XBS5_LP64_OFF64 _SC_XBS5_LP64_OFF64
    _SC_XBS5_LPBIG_OFFBIG,
#define _SC_XBS5_LPBIG_OFFBIG _SC_XBS5_LPBIG_OFFBIG

    _SC_XOPEN_LEGACY,
#define _SC_XOPEN_LEGACY _SC_XOPEN_LEGACY
    _SC_XOPEN_REALTIME,
#define _SC_XOPEN_REALTIME _SC_XOPEN_REALTIME
    _SC_XOPEN_REALTIME_THREADS,
#define _SC_XOPEN_REALTIME_THREADS _SC_XOPEN_REALTIME_THREADS

    _SC_ADVISORY_INFO,
#define _SC_ADVISORY_INFO _SC_ADVISORY_INFO
    _SC_BARRIERS,
#define _SC_BARRIERS _SC_BARRIERS
    _SC_BASE,
#define _SC_BASE _SC_BASE
    _SC_C_LANG_SUPPORT,
#define _SC_C_LANG_SUPPORT _SC_C_LANG_SUPPORT
    _SC_C_LANG_SUPPORT_R,
#define _SC_C_LANG_SUPPORT_R _SC_C_LANG_SUPPORT_R
    _SC_CLOCK_SELECTION,
#define _SC_CLOCK_SELECTION _SC_CLOCK_SELECTION
    _SC_CPUTIME,
#define _SC_CPUTIME _SC_CPUTIME
    _SC_THREAD_CPUTIME,
#define _SC_THREAD_CPUTIME _SC_THREAD_CPUTIME
    _SC_DEVICE_IO,
#define _SC_DEVICE_IO _SC_DEVICE_IO
    _SC_DEVICE_SPECIFIC,
#define _SC_DEVICE_SPECIFIC _SC_DEVICE_SPECIFIC
    _SC_DEVICE_SPECIFIC_R,
#define _SC_DEVICE_SPECIFIC_R _SC_DEVICE_SPECIFIC_R
    _SC_FD_MGMT,
#define _SC_FD_MGMT _SC_FD_MGMT
    _SC_FIFO,
#define _SC_FIFO _SC_FIFO
    _SC_PIPE,
#define _SC_PIPE _SC_PIPE
    _SC_FILE_ATTRIBUTES,
#define _SC_FILE_ATTRIBUTES _SC_FILE_ATTRIBUTES
    _SC_FILE_LOCKING,
#define _SC_FILE_LOCKING _SC_FILE_LOCKING
    _SC_FILE_SYSTEM,
#define _SC_FILE_SYSTEM _SC_FILE_SYSTEM
    _SC_MONOTONIC_CLOCK,
#define _SC_MONOTONIC_CLOCK _SC_MONOTONIC_CLOCK
    _SC_MULTI_PROCESS,
#define _SC_MULTI_PROCESS _SC_MULTI_PROCESS
    _SC_SINGLE_PROCESS,
#define _SC_SINGLE_PROCESS _SC_SINGLE_PROCESS
    _SC_NETWORKING,
#define _SC_NETWORKING _SC_NETWORKING
    _SC_READER_WRITER_LOCKS,
#define _SC_READER_WRITER_LOCKS _SC_READER_WRITER_LOCKS
    _SC_SPIN_LOCKS,
#define _SC_SPIN_LOCKS _SC_SPIN_LOCKS
    _SC_REGEXP,
#define _SC_REGEXP _SC_REGEXP
    _SC_REGEX_VERSION,
#define _SC_REGEX_VERSION _SC_REGEX_VERSION
    _SC_SHELL,
#define _SC_SHELL _SC_SHELL
    _SC_SIGNALS,
#define _SC_SIGNALS _SC_SIGNALS
    _SC_SPAWN,
#define _SC_SPAWN _SC_SPAWN
    _SC_SPORADIC_SERVER,
#define _SC_SPORADIC_SERVER _SC_SPORADIC_SERVER
    _SC_THREAD_SPORADIC_SERVER,
#define _SC_THREAD_SPORADIC_SERVER _SC_THREAD_SPORADIC_SERVER
    _SC_SYSTEM_DATABASE,
#define _SC_SYSTEM_DATABASE _SC_SYSTEM_DATABASE
    _SC_SYSTEM_DATABASE_R,
#define _SC_SYSTEM_DATABASE_R _SC_SYSTEM_DATABASE_R
    _SC_TIMEOUTS,
#define _SC_TIMEOUTS _SC_TIMEOUTS
    _SC_TYPED_MEMORY_OBJECTS,
#define _SC_TYPED_MEMORY_OBJECTS _SC_TYPED_MEMORY_OBJECTS
    _SC_USER_GROUPS,
#define _SC_USER_GROUPS _SC_USER_GROUPS
    _SC_USER_GROUPS_R,
#define _SC_USER_GROUPS_R _SC_USER_GROUPS_R
    _SC_2_PBS,
#define _SC_2_PBS _SC_2_PBS
    _SC_2_PBS_ACCOUNTING,
#define _SC_2_PBS_ACCOUNTING _SC_2_PBS_ACCOUNTING
    _SC_2_PBS_LOCATE,
#define _SC_2_PBS_LOCATE _SC_2_PBS_LOCATE
    _SC_2_PBS_MESSAGE,
#define _SC_2_PBS_MESSAGE _SC_2_PBS_MESSAGE
    _SC_2_PBS_TRACK,
#define _SC_2_PBS_TRACK _SC_2_PBS_TRACK
    _SC_SYMLOOP_MAX,
#define _SC_SYMLOOP_MAX _SC_SYMLOOP_MAX
    _SC_STREAMS,
#define _SC_STREAMS _SC_STREAMS
    _SC_2_PBS_CHECKPOINT,
#define _SC_2_PBS_CHECKPOINT _SC_2_PBS_CHECKPOINT

    _SC_V6_ILP32_OFF32,
#define _SC_V6_ILP32_OFF32 _SC_V6_ILP32_OFF32
    _SC_V6_ILP32_OFFBIG,
#define _SC_V6_ILP32_OFFBIG _SC_V6_ILP32_OFFBIG
    _SC_V6_LP64_OFF64,
#define _SC_V6_LP64_OFF64 _SC_V6_LP64_OFF64
    _SC_V6_LPBIG_OFFBIG,
#define _SC_V6_LPBIG_OFFBIG _SC_V6_LPBIG_OFFBIG

    _SC_HOST_NAME_MAX,
#define _SC_HOST_NAME_MAX _SC_HOST_NAME_MAX
    _SC_TRACE,
#define _SC_TRACE _SC_TRACE
    _SC_TRACE_EVENT_FILTER,
#define _SC_TRACE_EVENT_FILTER _SC_TRACE_EVENT_FILTER
    _SC_TRACE_INHERIT,
#define _SC_TRACE_INHERIT _SC_TRACE_INHERIT
    _SC_TRACE_LOG,
#define _SC_TRACE_LOG _SC_TRACE_LOG

    _SC_LEVEL1_ICACHE_SIZE,
#define _SC_LEVEL1_ICACHE_SIZE _SC_LEVEL1_ICACHE_SIZE
    _SC_LEVEL1_ICACHE_ASSOC,
#define _SC_LEVEL1_ICACHE_ASSOC _SC_LEVEL1_ICACHE_ASSOC
    _SC_LEVEL1_ICACHE_LINESIZE,
#define _SC_LEVEL1_ICACHE_LINESIZE _SC_LEVEL1_ICACHE_LINESIZE
    _SC_LEVEL1_DCACHE_SIZE,
#define _SC_LEVEL1_DCACHE_SIZE _SC_LEVEL1_DCACHE_SIZE
    _SC_LEVEL1_DCACHE_ASSOC,
#define _SC_LEVEL1_DCACHE_ASSOC _SC_LEVEL1_DCACHE_ASSOC
    _SC_LEVEL1_DCACHE_LINESIZE,
#define _SC_LEVEL1_DCACHE_LINESIZE _SC_LEVEL1_DCACHE_LINESIZE
    _SC_LEVEL2_CACHE_SIZE,
#define _SC_LEVEL2_CACHE_SIZE _SC_LEVEL2_CACHE_SIZE
    _SC_LEVEL2_CACHE_ASSOC,
#define _SC_LEVEL2_CACHE_ASSOC _SC_LEVEL2_CACHE_ASSOC
    _SC_LEVEL2_CACHE_LINESIZE,
#define _SC_LEVEL2_CACHE_LINESIZE _SC_LEVEL2_CACHE_LINESIZE
    _SC_LEVEL3_CACHE_SIZE,
#define _SC_LEVEL3_CACHE_SIZE _SC_LEVEL3_CACHE_SIZE
    _SC_LEVEL3_CACHE_ASSOC,
#define _SC_LEVEL3_CACHE_ASSOC _SC_LEVEL3_CACHE_ASSOC
    _SC_LEVEL3_CACHE_LINESIZE,
#define _SC_LEVEL3_CACHE_LINESIZE _SC_LEVEL3_CACHE_LINESIZE
    _SC_LEVEL4_CACHE_SIZE,
#define _SC_LEVEL4_CACHE_SIZE _SC_LEVEL4_CACHE_SIZE
    _SC_LEVEL4_CACHE_ASSOC,
#define _SC_LEVEL4_CACHE_ASSOC _SC_LEVEL4_CACHE_ASSOC
    _SC_LEVEL4_CACHE_LINESIZE,
#define _SC_LEVEL4_CACHE_LINESIZE _SC_LEVEL4_CACHE_LINESIZE


    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,
#define _SC_IPV6 _SC_IPV6
    _SC_RAW_SOCKETS,
#define _SC_RAW_SOCKETS _SC_RAW_SOCKETS

    _SC_V7_ILP32_OFF32,
#define _SC_V7_ILP32_OFF32 _SC_V7_ILP32_OFF32
    _SC_V7_ILP32_OFFBIG,
#define _SC_V7_ILP32_OFFBIG _SC_V7_ILP32_OFFBIG
    _SC_V7_LP64_OFF64,
#define _SC_V7_LP64_OFF64 _SC_V7_LP64_OFF64
    _SC_V7_LPBIG_OFFBIG,
#define _SC_V7_LPBIG_OFFBIG _SC_V7_LPBIG_OFFBIG

    _SC_SS_REPL_MAX,
#define _SC_SS_REPL_MAX _SC_SS_REPL_MAX

    _SC_TRACE_EVENT_NAME_MAX,
#define _SC_TRACE_EVENT_NAME_MAX _SC_TRACE_EVENT_NAME_MAX
    _SC_TRACE_NAME_MAX,
#define _SC_TRACE_NAME_MAX _SC_TRACE_NAME_MAX
    _SC_TRACE_SYS_MAX,
#define _SC_TRACE_SYS_MAX _SC_TRACE_SYS_MAX
    _SC_TRACE_USER_EVENT_MAX,
#define _SC_TRACE_USER_EVENT_MAX _SC_TRACE_USER_EVENT_MAX

    _SC_XOPEN_STREAMS,
#define _SC_XOPEN_STREAMS _SC_XOPEN_STREAMS

    _SC_THREAD_ROBUST_PRIO_INHERIT,
#define _SC_THREAD_ROBUST_PRIO_INHERIT _SC_THREAD_ROBUST_PRIO_INHERIT
    _SC_THREAD_ROBUST_PRIO_PROTECT,
#define _SC_THREAD_ROBUST_PRIO_PROTECT _SC_THREAD_ROBUST_PRIO_PROTECT

    _SC_MINSIGSTKSZ,
#define _SC_MINSIGSTKSZ _SC_MINSIGSTKSZ

    _SC_SIGSTKSZ
#define _SC_SIGSTKSZ _SC_SIGSTKSZ
  };


enum
  {
    _CS_PATH,
#define _CS_PATH _CS_PATH

    _CS_V6_WIDTH_RESTRICTED_ENVS,
#define _CS_V6_WIDTH_RESTRICTED_ENVS _CS_V6_WIDTH_RESTRICTED_ENVS
#define _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS _CS_V6_WIDTH_RESTRICTED_ENVS

    _CS_GNU_LIBC_VERSION,
#define _CS_GNU_LIBC_VERSION _CS_GNU_LIBC_VERSION
    _CS_GNU_LIBPTHREAD_VERSION,
#define _CS_GNU_LIBPTHREAD_VERSION _CS_GNU_LIBPTHREAD_VERSION

    _CS_V5_WIDTH_RESTRICTED_ENVS,
#define _CS_V5_WIDTH_RESTRICTED_ENVS _CS_V5_WIDTH_RESTRICTED_ENVS
#define _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS _CS_V5_WIDTH_RESTRICTED_ENVS

    _CS_V7_WIDTH_RESTRICTED_ENVS,
#define _CS_V7_WIDTH_RESTRICTED_ENVS _CS_V7_WIDTH_RESTRICTED_ENVS
#define _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS _CS_V7_WIDTH_RESTRICTED_ENVS

    _CS_LFS_CFLAGS = 1000,
#define _CS_LFS_CFLAGS _CS_LFS_CFLAGS
    _CS_LFS_LDFLAGS,
#define _CS_LFS_LDFLAGS _CS_LFS_LDFLAGS
    _CS_LFS_LIBS,
#define _CS_LFS_LIBS _CS_LFS_LIBS
    _CS_LFS_LINTFLAGS,
#define _CS_LFS_LINTFLAGS _CS_LFS_LINTFLAGS
    _CS_LFS64_CFLAGS,
#define _CS_LFS64_CFLAGS _CS_LFS64_CFLAGS
    _CS_LFS64_LDFLAGS,
#define _CS_LFS64_LDFLAGS _CS_LFS64_LDFLAGS
    _CS_LFS64_LIBS,
#define _CS_LFS64_LIBS _CS_LFS64_LIBS
    _CS_LFS64_LINTFLAGS,
#define _CS_LFS64_LINTFLAGS _CS_LFS64_LINTFLAGS

    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,
#define _CS_XBS5_ILP32_OFF32_CFLAGS _CS_XBS5_ILP32_OFF32_CFLAGS
    _CS_XBS5_ILP32_OFF32_LDFLAGS,
#define _CS_XBS5_ILP32_OFF32_LDFLAGS _CS_XBS5_ILP32_OFF32_LDFLAGS
    _CS_XBS5_ILP32_OFF32_LIBS,
#define _CS_XBS5_ILP32_OFF32_LIBS _CS_XBS5_ILP32_OFF32_LIBS
    _CS_XBS5_ILP32_OFF32_LINTFLAGS,
#define _CS_XBS5_ILP32_OFF32_LINTFLAGS _CS_XBS5_ILP32_OFF32_LINTFLAGS
    _CS_XBS5_ILP32_OFFBIG_CFLAGS,
#define _CS_XBS5_ILP32_OFFBIG_CFLAGS _CS_XBS5_ILP32_OFFBIG_CFLAGS
    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,
#define _CS_XBS5_ILP32_OFFBIG_LDFLAGS _CS_XBS5_ILP32_OFFBIG_LDFLAGS
    _CS_XBS5_ILP32_OFFBIG_LIBS,
#define _CS_XBS5_ILP32_OFFBIG_LIBS _CS_XBS5_ILP32_OFFBIG_LIBS
    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,
#define _CS_XBS5_ILP32_OFFBIG_LINTFLAGS _CS_XBS5_ILP32_OFFBIG_LINTFLAGS
    _CS_XBS5_LP64_OFF64_CFLAGS,
#define _CS_XBS5_LP64_OFF64_CFLAGS _CS_XBS5_LP64_OFF64_CFLAGS
    _CS_XBS5_LP64_OFF64_LDFLAGS,
#define _CS_XBS5_LP64_OFF64_LDFLAGS _CS_XBS5_LP64_OFF64_LDFLAGS
    _CS_XBS5_LP64_OFF64_LIBS,
#define _CS_XBS5_LP64_OFF64_LIBS _CS_XBS5_LP64_OFF64_LIBS
    _CS_XBS5_LP64_OFF64_LINTFLAGS,
#define _CS_XBS5_LP64_OFF64_LINTFLAGS _CS_XBS5_LP64_OFF64_LINTFLAGS
    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,
#define _CS_XBS5_LPBIG_OFFBIG_CFLAGS _CS_XBS5_LPBIG_OFFBIG_CFLAGS
    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,
#define _CS_XBS5_LPBIG_OFFBIG_LDFLAGS _CS_XBS5_LPBIG_OFFBIG_LDFLAGS
    _CS_XBS5_LPBIG_OFFBIG_LIBS,
#define _CS_XBS5_LPBIG_OFFBIG_LIBS _CS_XBS5_LPBIG_OFFBIG_LIBS
    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,
#define _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS

    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,
#define _CS_POSIX_V6_ILP32_OFF32_CFLAGS _CS_POSIX_V6_ILP32_OFF32_CFLAGS
    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,
#define _CS_POSIX_V6_ILP32_OFF32_LDFLAGS _CS_POSIX_V6_ILP32_OFF32_LDFLAGS
    _CS_POSIX_V6_ILP32_OFF32_LIBS,
#define _CS_POSIX_V6_ILP32_OFF32_LIBS _CS_POSIX_V6_ILP32_OFF32_LIBS
    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,
#define _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,
#define _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,
#define _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,
#define _CS_POSIX_V6_ILP32_OFFBIG_LIBS _CS_POSIX_V6_ILP32_OFFBIG_LIBS
    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,
#define _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
    _CS_POSIX_V6_LP64_OFF64_CFLAGS,
#define _CS_POSIX_V6_LP64_OFF64_CFLAGS _CS_POSIX_V6_LP64_OFF64_CFLAGS
    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,
#define _CS_POSIX_V6_LP64_OFF64_LDFLAGS _CS_POSIX_V6_LP64_OFF64_LDFLAGS
    _CS_POSIX_V6_LP64_OFF64_LIBS,
#define _CS_POSIX_V6_LP64_OFF64_LIBS _CS_POSIX_V6_LP64_OFF64_LIBS
    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,
#define _CS_POSIX_V6_LP64_OFF64_LINTFLAGS _CS_POSIX_V6_LP64_OFF64_LINTFLAGS
    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,
#define _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,
#define _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,
#define _CS_POSIX_V6_LPBIG_OFFBIG_LIBS _CS_POSIX_V6_LPBIG_OFFBIG_LIBS
    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,
#define _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS

    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,
#define _CS_POSIX_V7_ILP32_OFF32_CFLAGS _CS_POSIX_V7_ILP32_OFF32_CFLAGS
    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,
#define _CS_POSIX_V7_ILP32_OFF32_LDFLAGS _CS_POSIX_V7_ILP32_OFF32_LDFLAGS
    _CS_POSIX_V7_ILP32_OFF32_LIBS,
#define _CS_POSIX_V7_ILP32_OFF32_LIBS _CS_POSIX_V7_ILP32_OFF32_LIBS
    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,
#define _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,
#define _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,
#define _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,
#define _CS_POSIX_V7_ILP32_OFFBIG_LIBS _CS_POSIX_V7_ILP32_OFFBIG_LIBS
    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,
#define _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
    _CS_POSIX_V7_LP64_OFF64_CFLAGS,
#define _CS_POSIX_V7_LP64_OFF64_CFLAGS _CS_POSIX_V7_LP64_OFF64_CFLAGS
    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,
#define _CS_POSIX_V7_LP64_OFF64_LDFLAGS _CS_POSIX_V7_LP64_OFF64_LDFLAGS
    _CS_POSIX_V7_LP64_OFF64_LIBS,
#define _CS_POSIX_V7_LP64_OFF64_LIBS _CS_POSIX_V7_LP64_OFF64_LIBS
    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,
#define _CS_POSIX_V7_LP64_OFF64_LINTFLAGS _CS_POSIX_V7_LP64_OFF64_LINTFLAGS
    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,
#define _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,
#define _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,
#define _CS_POSIX_V7_LPBIG_OFFBIG_LIBS _CS_POSIX_V7_LPBIG_OFFBIG_LIBS
    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,
#define _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS

    _CS_V6_ENV,
#define _CS_V6_ENV _CS_V6_ENV
    _CS_V7_ENV
#define _CS_V7_ENV _CS_V7_ENV
  };
# 631 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) noexcept (true);


extern long int sysconf (int __name) noexcept (true);



extern size_t confstr (int __name, char *__buf, size_t __len) noexcept (true)
    __attribute__ ((__access__ (__write_only__, 2, 3)));




extern __pid_t getpid (void) noexcept (true);


extern __pid_t getppid (void) noexcept (true);


extern __pid_t getpgrp (void) noexcept (true);


extern __pid_t __getpgid (__pid_t __pid) noexcept (true);

extern __pid_t getpgid (__pid_t __pid) noexcept (true);






extern int setpgid (__pid_t __pid, __pid_t __pgid) noexcept (true);
# 682 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) noexcept (true);






extern __pid_t setsid (void) noexcept (true);



extern __pid_t getsid (__pid_t __pid) noexcept (true);



extern __uid_t getuid (void) noexcept (true);


extern __uid_t geteuid (void) noexcept (true);


extern __gid_t getgid (void) noexcept (true);


extern __gid_t getegid (void) noexcept (true);




extern int getgroups (int __size, __gid_t __list[]) noexcept (true) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__write_only__, 2, 1)));


extern int group_member (__gid_t __gid) noexcept (true);






extern int setuid (__uid_t __uid) noexcept (true) __attribute__ ((__warn_unused_result__));




extern int setreuid (__uid_t __ruid, __uid_t __euid) noexcept (true) __attribute__ ((__warn_unused_result__));




extern int seteuid (__uid_t __uid) noexcept (true) __attribute__ ((__warn_unused_result__));






extern int setgid (__gid_t __gid) noexcept (true) __attribute__ ((__warn_unused_result__));




extern int setregid (__gid_t __rgid, __gid_t __egid) noexcept (true) __attribute__ ((__warn_unused_result__));




extern int setegid (__gid_t __gid) noexcept (true) __attribute__ ((__warn_unused_result__));





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     noexcept (true);



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     noexcept (true);



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     noexcept (true) __attribute__ ((__warn_unused_result__));



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     noexcept (true) __attribute__ ((__warn_unused_result__));






extern __pid_t fork (void) noexcept (true);







extern __pid_t vfork (void) noexcept (true);






extern __pid_t _Fork (void) noexcept (true);





extern char *ttyname (int __fd) noexcept (true);



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     noexcept (true) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__access__ (__write_only__, 2, 3)));



extern int isatty (int __fd) noexcept (true);




extern int ttyslot (void) noexcept (true);




extern int link (const char *__from, const char *__to)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     noexcept (true) __attribute__ ((__nonnull__ (2, 4))) __attribute__ ((__warn_unused_result__));




extern int symlink (const char *__from, const char *__to)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__access__ (__write_only__, 2, 3)));





extern int symlinkat (const char *__from, int __tofd,
        const char *__to) noexcept (true) __attribute__ ((__nonnull__ (1, 3))) __attribute__ ((__warn_unused_result__));


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__access__ (__write_only__, 3, 4)));



extern int unlink (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     noexcept (true) __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) noexcept (true) __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) noexcept (true);


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) noexcept (true);






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));




extern int setlogin (const char *__name) noexcept (true) __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/bits/getopt_posix.h" 1 3 4
# 21 "/usr/include/bits/getopt_posix.h" 3 4
#define _GETOPT_POSIX_H 1





# 1 "/usr/include/bits/getopt_core.h" 1 3 4
# 21 "/usr/include/bits/getopt_core.h" 3 4
#define _GETOPT_CORE_H 1






extern "C" {







extern char *optarg;
# 50 "/usr/include/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       noexcept (true) __attribute__ ((__nonnull__ (2, 3)));

}
# 28 "/usr/include/bits/getopt_posix.h" 2 3 4

extern "C" {
# 49 "/usr/include/bits/getopt_posix.h" 3 4
}
# 904 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) noexcept (true) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));






extern int sethostname (const char *__name, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__read_only__, 1, 2)));



extern int sethostid (long int __id) noexcept (true) __attribute__ ((__warn_unused_result__));





extern int getdomainname (char *__name, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__))
     __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int setdomainname (const char *__name, size_t __len)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__read_only__, 1, 2)));




extern int vhangup (void) noexcept (true);


extern int revoke (const char *__file) noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) noexcept (true);



extern char *getusershell (void) noexcept (true);
extern void endusershell (void) noexcept (true);
extern void setusershell (void) noexcept (true);





extern int daemon (int __nochdir, int __noclose) noexcept (true) __attribute__ ((__warn_unused_result__));






extern int chroot (const char *__path) noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) noexcept (true);






extern long int gethostid (void);


extern void sync (void) noexcept (true);





extern int getpagesize (void) noexcept (true) __attribute__ ((__const__));




extern int getdtablesize (void) noexcept (true);
# 1026 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 1038 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 1049 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) noexcept (true) __attribute__ ((__warn_unused_result__));
# 1059 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) noexcept (true) __attribute__ ((__warn_unused_result__));
# 1070 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) noexcept (true) __attribute__ ((__warn_unused_result__));





extern void *sbrk (intptr_t __delta) noexcept (true);
# 1091 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) noexcept (true);
# 1108 "/usr/include/unistd.h" 3 4
#define F_ULOCK 0
#define F_LOCK 1
#define F_TLOCK 2
#define F_TEST 3


extern int lockf (int __fd, int __cmd, __off_t __len) __attribute__ ((__warn_unused_result__));
# 1124 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) __attribute__ ((__warn_unused_result__));
# 1134 "/usr/include/unistd.h" 3 4
#define TEMP_FAILURE_RETRY(expression) (__extension__ ({ long int __result; do __result = (long int) (expression); while (__result == -1L && errno == EINTR); __result; }))







ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);
# 1162 "/usr/include/unistd.h" 3 4
extern char *crypt (const char *__key, const char *__salt)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));







extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) noexcept (true) __attribute__ ((__nonnull__ (1, 2)))
    __attribute__ ((__access__ (__read_only__, 1, 3)))
    __attribute__ ((__access__ (__write_only__, 2, 3)));
# 1201 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) __attribute__ ((__warn_unused_result__))
    __attribute__ ((__access__ (__write_only__, 1, 2)));
# 1211 "/usr/include/unistd.h" 3 4
extern int close_range (unsigned int __fd, unsigned int __max_fd,
   int __flags) noexcept (true);




# 1 "/usr/include/bits/unistd.h" 1 3 4
# 23 "/usr/include/bits/unistd.h" 3 4
# 1 "/usr/include/bits/unistd-decl.h" 1 3 4
# 20 "/usr/include/bits/unistd-decl.h" 3 4
#define _BITS_UNISTD_DECL_H 1





extern ssize_t __read_chk (int __fd, void *__buf, size_t __nbytes,
      size_t __buflen)
     __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __read_alias (int __fd, void *__buf, size_t __nbytes) __asm__ ("" "read")

     __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __read_chk_warn (int __fd, void *__buf, size_t __nbytes, size_t __buflen) __asm__ ("" "__read_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("read called with bigger length than size of " "the destination buffer")))
                                  ;


extern ssize_t __pread_chk (int __fd, void *__buf, size_t __nbytes,
       __off_t __offset, size_t __bufsize)
     __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __pread64_chk (int __fd, void *__buf, size_t __nbytes,
         __off64_t __offset, size_t __bufsize)
     __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __pread_alias (int __fd, void *__buf, size_t __nbytes, __off_t __offset) __asm__ ("" "pread")


     __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __pread64_alias (int __fd, void *__buf, size_t __nbytes, __off64_t __offset) __asm__ ("" "pread64")


     __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __pread_chk_warn (int __fd, void *__buf, size_t __nbytes, __off_t __offset, size_t __bufsize) __asm__ ("" "__pread_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("pread called with bigger length than size of " "the destination buffer")))
                                  ;
extern ssize_t __pread64_chk_warn (int __fd, void *__buf, size_t __nbytes, __off64_t __offset, size_t __bufsize) __asm__ ("" "__pread64_chk")



     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("pread64 called with bigger length than size of " "the destination buffer")))
                                  ;



extern ssize_t __readlink_chk (const char *__restrict __path,
          char *__restrict __buf, size_t __len,
          size_t __buflen)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __readlink_alias (const char *__restrict __path, char *__restrict __buf, size_t __len) noexcept (true) __asm__ ("" "readlink")


     __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));
extern ssize_t __readlink_chk_warn (const char *__restrict __path, char *__restrict __buf, size_t __len, size_t __buflen) noexcept (true) __asm__ ("" "__readlink_chk")



     __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("readlink called with bigger length " "than size of destination buffer")))
                                         ;



extern ssize_t __readlinkat_chk (int __fd, const char *__restrict __path,
     char *__restrict __buf, size_t __len,
     size_t __buflen)
     noexcept (true) __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 3, 4)));
extern ssize_t __readlinkat_alias (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len) noexcept (true) __asm__ ("" "readlinkat")



     __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 3, 4)));
extern ssize_t __readlinkat_chk_warn (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len, size_t __buflen) noexcept (true) __asm__ ("" "__readlinkat_chk")



     __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("readlinkat called with bigger " "length than size of destination " "buffer")))

                ;


extern char *__getcwd_chk (char *__buf, size_t __size, size_t __buflen)
     noexcept (true) __attribute__ ((__warn_unused_result__));
extern char *__getcwd_alias (char *__buf, size_t __size) noexcept (true) __asm__ ("" "getcwd")
                                              __attribute__ ((__warn_unused_result__));
extern char *__getcwd_chk_warn (char *__buf, size_t __size, size_t __buflen) noexcept (true) __asm__ ("" "__getcwd_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getcwd caller with bigger length than size of " "destination buffer")))
                              ;


extern char *__getwd_chk (char *__buf, size_t buflen)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern char *__getwd_warn (char *__buf) noexcept (true) __asm__ ("" "getwd")
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("please use getcwd instead, as getwd " "doesn't specify buffer size")))
                                         ;


extern size_t __confstr_chk (int __name, char *__buf, size_t __len,
        size_t __buflen) noexcept (true)
     __attribute__ ((__access__ (__write_only__, 2, 3)));
extern size_t __confstr_alias (int __name, char *__buf, size_t __len) noexcept (true) __asm__ ("" "confstr")

     __attribute__ ((__access__ (__write_only__, 2, 3)));
extern size_t __confstr_chk_warn (int __name, char *__buf, size_t __len, size_t __buflen) noexcept (true) __asm__ ("" "__confstr_chk")


     __attribute__((__warning__ ("confstr called with bigger length than size of destination " "buffer")))
            ;


extern int __getgroups_chk (int __size, __gid_t __list[], size_t __listlen)
     noexcept (true) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 1)));
extern int __getgroups_alias (int __size, __gid_t __list[]) noexcept (true) __asm__ ("" "getgroups")
                 __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 1)));
extern int __getgroups_chk_warn (int __size, __gid_t __list[], size_t __listlen) noexcept (true) __asm__ ("" "__getgroups_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getgroups called with bigger group count than what " "can fit into destination buffer")))
                                           ;


extern int __ttyname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) noexcept (true) __attribute__ ((__nonnull__ (2)))
     __attribute__ ((__access__ (__write_only__, 2, 3)));
extern int __ttyname_r_alias (int __fd, char *__buf, size_t __buflen) noexcept (true) __asm__ ("" "ttyname_r")

     __attribute__ ((__nonnull__ (2)));
extern int __ttyname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) noexcept (true) __asm__ ("" "__ttyname_r_chk")


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ttyname_r called with bigger buflen than " "size of destination buffer")))
                                  ;



extern int __getlogin_r_chk (char *__buf, size_t __buflen, size_t __nreal)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int __getlogin_r_alias (char *__buf, size_t __buflen) __asm__ ("" "getlogin_r")
                     __attribute__ ((__nonnull__ (1)));
extern int __getlogin_r_chk_warn (char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__getlogin_r_chk")


     __attribute__ ((__nonnull__ (1))) __attribute__((__warning__ ("getlogin_r called with bigger buflen than " "size of destination buffer")))
                                  ;




extern int __gethostname_chk (char *__buf, size_t __buflen, size_t __nreal)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int __gethostname_alias (char *__buf, size_t __buflen) noexcept (true) __asm__ ("" "gethostname")

     __attribute__ ((__nonnull__ (1))) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int __gethostname_chk_warn (char *__buf, size_t __buflen, size_t __nreal) noexcept (true) __asm__ ("" "__gethostname_chk")


     __attribute__ ((__nonnull__ (1))) __attribute__((__warning__ ("gethostname called with bigger buflen than " "size of destination buffer")))
                                  ;




extern int __getdomainname_chk (char *__buf, size_t __buflen, size_t __nreal)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int __getdomainname_alias (char *__buf, size_t __buflen) noexcept (true) __asm__ ("" "getdomainname")

                     __attribute__ ((__nonnull__ (1)))
     __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 1, 2)));
extern int __getdomainname_chk_warn (char *__buf, size_t __buflen, size_t __nreal) noexcept (true) __asm__ ("" "__getdomainname_chk")


     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getdomainname called with bigger " "buflen than size of destination " "buffer")))

                    ;
# 24 "/usr/include/bits/unistd.h" 2 3 4

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
read (int __fd, void * __buf, size_t __nbytes)
    



{
  return (((__builtin_constant_p (__builtin_object_size (__buf, 0)) && (__builtin_object_size (__buf, 0)) == (long unsigned int) -1) || (((__typeof (__nbytes)) 0 < (__typeof (__nbytes)) -1 || (__builtin_constant_p (__nbytes) && (__nbytes) > 0)) && __builtin_constant_p ((((long unsigned int) (__nbytes)) <= ((__builtin_object_size (__buf, 0))) / ((sizeof (char))))) && (((long unsigned int) (__nbytes)) <= ((__builtin_object_size (__buf, 0))) / ((sizeof (char)))))) ? __read_alias (__fd, __buf, __nbytes) : ((((__typeof (__nbytes)) 0 < (__typeof (__nbytes)) -1 || (__builtin_constant_p (__nbytes) && (__nbytes) > 0)) && __builtin_constant_p ((((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) && !(((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) ? __read_chk_warn (__fd, __buf, __nbytes, __builtin_object_size (__buf, 0)) : __read_chk (__fd, __buf, __nbytes, __builtin_object_size (__buf, 0))))

                           ;
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
pread (int __fd, void * __buf,
       size_t __nbytes, __off_t __offset)
    


{
  return (((__builtin_constant_p (__builtin_object_size (__buf, 0)) && (__builtin_object_size (__buf, 0)) == (long unsigned int) -1) || (((__typeof (__nbytes)) 0 < (__typeof (__nbytes)) -1 || (__builtin_constant_p (__nbytes) && (__nbytes) > 0)) && __builtin_constant_p ((((long unsigned int) (__nbytes)) <= ((__builtin_object_size (__buf, 0))) / ((sizeof (char))))) && (((long unsigned int) (__nbytes)) <= ((__builtin_object_size (__buf, 0))) / ((sizeof (char)))))) ? __pread_alias (__fd, __buf, __nbytes, __offset) : ((((__typeof (__nbytes)) 0 < (__typeof (__nbytes)) -1 || (__builtin_constant_p (__nbytes) && (__nbytes) > 0)) && __builtin_constant_p ((((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) && !(((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) ? __pread_chk_warn (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0)) : __pread_chk (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0))))

                                     ;
}
# 65 "/usr/include/bits/unistd.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
pread64 (int __fd, void * __buf,
  size_t __nbytes, __off64_t __offset)
    


{
  return (((__builtin_constant_p (__builtin_object_size (__buf, 0)) && (__builtin_object_size (__buf, 0)) == (long unsigned int) -1) || (((__typeof (__nbytes)) 0 < (__typeof (__nbytes)) -1 || (__builtin_constant_p (__nbytes) && (__nbytes) > 0)) && __builtin_constant_p ((((long unsigned int) (__nbytes)) <= ((__builtin_object_size (__buf, 0))) / ((sizeof (char))))) && (((long unsigned int) (__nbytes)) <= ((__builtin_object_size (__buf, 0))) / ((sizeof (char)))))) ? __pread64_alias (__fd, __buf, __nbytes, __offset) : ((((__typeof (__nbytes)) 0 < (__typeof (__nbytes)) -1 || (__builtin_constant_p (__nbytes) && (__nbytes) > 0)) && __builtin_constant_p ((((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) && !(((long unsigned int) (__nbytes)) <= (__builtin_object_size (__buf, 0)) / (sizeof (char)))) ? __pread64_chk_warn (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0)) : __pread64_chk (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0))))

                                     ;
}




extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) ssize_t
__attribute__ ((__leaf__)) readlink (const char *__restrict __path, char * __restrict __buf, size_t __len) noexcept (true)


    



{
  return (((__builtin_constant_p (__builtin_object_size (__buf, 2 > 1)) && (__builtin_object_size (__buf, 2 > 1)) == (long unsigned int) -1) || (((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= ((__builtin_object_size (__buf, 2 > 1))) / ((sizeof (char))))) && (((long unsigned int) (__len)) <= ((__builtin_object_size (__buf, 2 > 1))) / ((sizeof (char)))))) ? __readlink_alias (__path, __buf, __len) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __readlink_chk_warn (__path, __buf, __len, __builtin_object_size (__buf, 2 > 1)) : __readlink_chk (__path, __buf, __len, __builtin_object_size (__buf, 2 > 1))))

                          ;
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) ssize_t
__attribute__ ((__leaf__)) readlinkat (int __fd, const char *__restrict __path, char * __restrict __buf, size_t __len) noexcept (true)


    


{
  return (((__builtin_constant_p (__builtin_object_size (__buf, 2 > 1)) && (__builtin_object_size (__buf, 2 > 1)) == (long unsigned int) -1) || (((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= ((__builtin_object_size (__buf, 2 > 1))) / ((sizeof (char))))) && (((long unsigned int) (__len)) <= ((__builtin_object_size (__buf, 2 > 1))) / ((sizeof (char)))))) ? __readlinkat_alias (__fd, __path, __buf, __len) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __readlinkat_chk_warn (__fd, __path, __buf, __len, __builtin_object_size (__buf, 2 > 1)) : __readlinkat_chk (__fd, __path, __buf, __len, __builtin_object_size (__buf, 2 > 1))))

                                ;
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__leaf__)) getcwd (char * __buf, size_t __size) noexcept (true)
    


{
  return (((__builtin_constant_p (__builtin_object_size (__buf, 2 > 1)) && (__builtin_object_size (__buf, 2 > 1)) == (long unsigned int) -1) || (((__typeof (__size)) 0 < (__typeof (__size)) -1 || (__builtin_constant_p (__size) && (__size) > 0)) && __builtin_constant_p ((((long unsigned int) (__size)) <= ((__builtin_object_size (__buf, 2 > 1))) / ((sizeof (char))))) && (((long unsigned int) (__size)) <= ((__builtin_object_size (__buf, 2 > 1))) / ((sizeof (char)))))) ? __getcwd_alias (__buf, __size) : ((((__typeof (__size)) 0 < (__typeof (__size)) -1 || (__builtin_constant_p (__size) && (__size) > 0)) && __builtin_constant_p ((((long unsigned int) (__size)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__size)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __getcwd_chk_warn (__buf, __size, __builtin_object_size (__buf, 2 > 1)) : __getcwd_chk (__buf, __size, __builtin_object_size (__buf, 2 > 1))))

                   ;
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (1)))
__attribute__ ((__deprecated__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__leaf__)) getwd (char * __buf) noexcept (true)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    return __getwd_chk (__buf, __builtin_object_size (__buf, 2 > 1));
  return __getwd_warn (__buf);
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) confstr (int __name, char * __buf, size_t __len) noexcept (true)

    


{
  return (((__builtin_constant_p (__builtin_object_size (__buf, 2 > 1)) && (__builtin_object_size (__buf, 2 > 1)) == (long unsigned int) -1) || (((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= ((__builtin_object_size (__buf, 2 > 1))) / ((sizeof (char))))) && (((long unsigned int) (__len)) <= ((__builtin_object_size (__buf, 2 > 1))) / ((sizeof (char)))))) ? __confstr_alias (__name, __buf, __len) : ((((__typeof (__len)) 0 < (__typeof (__len)) -1 || (__builtin_constant_p (__len) && (__len) > 0)) && __builtin_constant_p ((((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__len)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __confstr_chk_warn (__name, __buf, __len, __builtin_object_size (__buf, 2 > 1)) : __confstr_chk (__name, __buf, __len, __builtin_object_size (__buf, 2 > 1))))

                          ;
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) getgroups (int __size, __gid_t * __list) noexcept (true)

    



{
  return (((__builtin_constant_p (__builtin_object_size (__list, 2 > 1)) && (__builtin_object_size (__list, 2 > 1)) == (long unsigned int) -1) || (((__typeof (__size)) 0 < (__typeof (__size)) -1 || (__builtin_constant_p (__size) && (__size) > 0)) && __builtin_constant_p ((((long unsigned int) (__size)) <= ((__builtin_object_size (__list, 2 > 1))) / ((sizeof (__gid_t))))) && (((long unsigned int) (__size)) <= ((__builtin_object_size (__list, 2 > 1))) / ((sizeof (__gid_t)))))) ? __getgroups_alias (__size, __list) : ((((__typeof (__size)) 0 < (__typeof (__size)) -1 || (__builtin_constant_p (__size) && (__size) > 0)) && __builtin_constant_p ((((long unsigned int) (__size)) <= (__builtin_object_size (__list, 2 > 1)) / (sizeof (__gid_t)))) && !(((long unsigned int) (__size)) <= (__builtin_object_size (__list, 2 > 1)) / (sizeof (__gid_t)))) ? __getgroups_chk_warn (__size, __list, __builtin_object_size (__list, 2 > 1)) : __getgroups_chk (__size, __list, __builtin_object_size (__list, 2 > 1))))

                    ;
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) ttyname_r (int __fd, char * __buf, size_t __buflen) noexcept (true)


    


{
  return (((__builtin_constant_p (__builtin_object_size (__buf, 2 > 1)) && (__builtin_object_size (__buf, 2 > 1)) == (long unsigned int) -1) || (((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= ((__builtin_object_size (__buf, 2 > 1))) / ((sizeof (char))))) && (((long unsigned int) (__buflen)) <= ((__builtin_object_size (__buf, 2 > 1))) / ((sizeof (char)))))) ? __ttyname_r_alias (__fd, __buf, __buflen) : ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __ttyname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1)) : __ttyname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1))))

                           ;
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
getlogin_r (char * __buf, size_t __buflen)
    


{
  return (((__builtin_constant_p (__builtin_object_size (__buf, 2 > 1)) && (__builtin_object_size (__buf, 2 > 1)) == (long unsigned int) -1) || (((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= ((__builtin_object_size (__buf, 2 > 1))) / ((sizeof (char))))) && (((long unsigned int) (__buflen)) <= ((__builtin_object_size (__buf, 2 > 1))) / ((sizeof (char)))))) ? __getlogin_r_alias (__buf, __buflen) : ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __getlogin_r_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1)) : __getlogin_r_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1))))

                     ;
}




extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) gethostname (char * __buf, size_t __buflen) noexcept (true)

    


{
  return (((__builtin_constant_p (__builtin_object_size (__buf, 2 > 1)) && (__builtin_object_size (__buf, 2 > 1)) == (long unsigned int) -1) || (((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= ((__builtin_object_size (__buf, 2 > 1))) / ((sizeof (char))))) && (((long unsigned int) (__buflen)) <= ((__builtin_object_size (__buf, 2 > 1))) / ((sizeof (char)))))) ? __gethostname_alias (__buf, __buflen) : ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __gethostname_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1)) : __gethostname_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1))))

                     ;
}




extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) getdomainname (char * __buf, size_t __buflen) noexcept (true)

    


{
  return (((__builtin_constant_p (__builtin_object_size (__buf, 2 > 1)) && (__builtin_object_size (__buf, 2 > 1)) == (long unsigned int) -1) || (((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= ((__builtin_object_size (__buf, 2 > 1))) / ((sizeof (char))))) && (((long unsigned int) (__buflen)) <= ((__builtin_object_size (__buf, 2 > 1))) / ((sizeof (char)))))) ? __getdomainname_alias (__buf, __buflen) : ((((__typeof (__buflen)) 0 < (__typeof (__buflen)) -1 || (__builtin_constant_p (__buflen) && (__buflen) > 0)) && __builtin_constant_p ((((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) && !(((long unsigned int) (__buflen)) <= (__builtin_object_size (__buf, 2 > 1)) / (sizeof (char)))) ? __getdomainname_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1)) : __getdomainname_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1))))

                     ;
}
# 1218 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/bits/unistd_ext.h" 1 3 4
# 34 "/usr/include/bits/unistd_ext.h" 3 4
extern __pid_t gettid (void) noexcept (true);



# 1 "/usr/include/linux/close_range.h" 1 3 4


#define _LINUX_CLOSE_RANGE_H 


#define CLOSE_RANGE_UNSHARE (1U << 1)


#define CLOSE_RANGE_CLOEXEC (1U << 2)
# 39 "/usr/include/bits/unistd_ext.h" 2 3 4
# 1222 "/usr/include/unistd.h" 2 3 4

}
# 79 "/usr/include/boost/config/stdlib/libstdcpp3.hpp" 2 3 4




#define BOOST_STD_EXTENSION_NAMESPACE __gnu_cxx
#define BOOST_HAS_SLIST 
#define BOOST_HAS_HASH 
#define BOOST_SLIST_HEADER <ext/slist>




#define BOOST_HASH_SET_HEADER <backward/hash_set>
#define BOOST_HASH_MAP_HEADER <backward/hash_map>







#undef BOOST_HAS_HASH
#undef BOOST_HAS_SET_HEADER
#undef BOOST_HAS_MAP_HEADER
# 115 "/usr/include/boost/config/stdlib/libstdcpp3.hpp" 3 4
#define BOOST_LIBSTDCXX11 
# 260 "/usr/include/boost/config/stdlib/libstdcpp3.hpp" 3 4
#define BOOST_LIBSTDCXX_VERSION (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)
# 298 "/usr/include/boost/config/stdlib/libstdcpp3.hpp" 3 4
#define BOOST_HAS_TR1_COMPLEX_INVERSE_TRIG 
#define BOOST_HAS_TR1_COMPLEX_OVERLOADS 
# 405 "/usr/include/boost/config/stdlib/libstdcpp3.hpp" 3 4
#define BOOST_NO_CXX98_FUNCTION_BASE 




#define BOOST_NO_CXX20_HDR_COROUTINE 







#define BOOST_NO_CXX20_HDR_COMPARE 


#define BOOST_NO_CXX20_HDR_CONCEPTS 


#define BOOST_NO_CXX20_HDR_SPAN 


#define BOOST_NO_CXX20_HDR_RANGES 
# 49 "/usr/include/boost/config.hpp" 2 3 4




# 1 "/usr/include/boost/config/detail/select_platform_config.hpp" 1 3 4
# 18 "/usr/include/boost/config/detail/select_platform_config.hpp" 3 4
#define BOOST_PLATFORM_CONFIG "boost/config/platform/linux.hpp"
# 54 "/usr/include/boost/config.hpp" 2 3 4



# 1 "/usr/include/boost/config/platform/linux.hpp" 1 3 4
# 11 "/usr/include/boost/config/platform/linux.hpp" 3 4
#define BOOST_PLATFORM "linux"
# 30 "/usr/include/boost/config/platform/linux.hpp" 3 4
#define BOOST_HAS_STDINT_H 
# 55 "/usr/include/boost/config/platform/linux.hpp" 3 4
#define BOOST_HAS_GETTIMEOFDAY 



#define BOOST_HAS_NANOSLEEP 
# 74 "/usr/include/boost/config/platform/linux.hpp" 3 4
#define BOOST_HAS_UNISTD_H 
# 1 "/usr/include/boost/config/detail/posix_features.hpp" 1 3 4
# 22 "/usr/include/boost/config/detail/posix_features.hpp" 3 4
#define BOOST_HAS_NL_TYPES_H 




#define BOOST_HAS_STDINT_H 




#define BOOST_HAS_DIRENT_H 




#define BOOST_HAS_SIGACTION 
# 46 "/usr/include/boost/config/detail/posix_features.hpp" 3 4
#define BOOST_HAS_PTHREADS 






#define BOOST_HAS_NANOSLEEP 







#define BOOST_HAS_CLOCK_GETTIME 
# 70 "/usr/include/boost/config/detail/posix_features.hpp" 3 4
#define BOOST_HAS_SCHED_YIELD 
# 79 "/usr/include/boost/config/detail/posix_features.hpp" 3 4
#define BOOST_HAS_GETTIMEOFDAY 

#define BOOST_HAS_PTHREAD_MUTEXATTR_SETTYPE 


#define BOOST_HAS_LOG1P 


#define BOOST_HAS_EXPM1 
# 76 "/usr/include/boost/config/platform/linux.hpp" 2 3 4

#define BOOST_HAS_PTHREAD_YIELD 
# 58 "/usr/include/boost/config.hpp" 2 3 4



# 1 "/usr/include/boost/config/detail/suffix.hpp" 1 3 4
# 27 "/usr/include/boost/config/detail/suffix.hpp" 3 4
#define BOOST_CONFIG_SUFFIX_HPP 






       
# 35 "/usr/include/boost/config/detail/suffix.hpp" 3
# 128 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_NO_MS_INT64_NUMERIC_LIMITS 
# 137 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_MSVC6_MEMBER_TEMPLATES 
# 211 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_HAS_PARTIAL_STD_ALLOCATOR 
# 323 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_NO_HASH 
# 374 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_PREVENT_MACRO_SUBSTITUTION 


#define BOOST_USING_STD_MIN() using std::min



#define BOOST_USING_STD_MAX() using std::max
# 410 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_STATIC_CONSTANT(type,assignment) static const type assignment
# 438 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_USE_FACET(Type,loc) std::use_facet< Type >(loc)
#define BOOST_HAS_FACET(Type,loc) std::has_facet< Type >(loc)
# 453 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_NESTED_TEMPLATE template
# 483 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_DEDUCED_TYPENAME typename





#define BOOST_CTOR_TYPENAME typename
# 510 "/usr/include/boost/config/detail/suffix.hpp" 3
namespace boost{

   __extension__ typedef long long long_long_type;
   __extension__ typedef unsigned long long ulong_long_type;




}



namespace boost{

   __extension__ typedef __int128 int128_type;
   __extension__ typedef unsigned __int128 uint128_type;




}



namespace boost {

   __extension__ typedef __float128 float128_type;



}






#define BOOST_EXPLICIT_TEMPLATE_TYPE(t) 
#define BOOST_EXPLICIT_TEMPLATE_TYPE_SPEC(t) 
#define BOOST_EXPLICIT_TEMPLATE_NON_TYPE(t,v) 
#define BOOST_EXPLICIT_TEMPLATE_NON_TYPE_SPEC(t,v) 

#define BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE(t) 
#define BOOST_APPEND_EXPLICIT_TEMPLATE_TYPE_SPEC(t) 
#define BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE(t,v) 
#define BOOST_APPEND_EXPLICIT_TEMPLATE_NON_TYPE_SPEC(t,v) 
# 572 "/usr/include/boost/config/detail/suffix.hpp" 3
# 1 "/usr/include/boost/config/helper_macros.hpp" 1 3 4

#define BOOST_CONFIG_HELPER_MACROS_HPP_INCLUDED 
# 22 "/usr/include/boost/config/helper_macros.hpp" 3 4
#define BOOST_STRINGIZE(X) BOOST_DO_STRINGIZE(X)
#define BOOST_DO_STRINGIZE(X) #X
# 33 "/usr/include/boost/config/helper_macros.hpp" 3 4
#define BOOST_JOIN(X,Y) BOOST_DO_JOIN(X, Y)
#define BOOST_DO_JOIN(X,Y) BOOST_DO_JOIN2(X,Y)
#define BOOST_DO_JOIN2(X,Y) X ##Y
# 573 "/usr/include/boost/config/detail/suffix.hpp" 2 3
# 597 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_GPU_ENABLED 
# 610 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_RESTRICT __restrict__
# 634 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_FORCEINLINE inline __attribute__ ((__always_inline__))
# 655 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_NOINLINE __attribute__ ((__noinline__))
# 670 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_NORETURN __attribute__ ((__noreturn__))
# 720 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_OVERRIDE override
# 729 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_ALIGNMENT(x) alignas(x)
# 770 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_DEFAULTED_FUNCTION(fun,body) fun = default;





#define BOOST_DELETED_FUNCTION(fun) fun = delete;
# 1005 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_FINAL final
# 1020 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_NOEXCEPT noexcept
#define BOOST_NOEXCEPT_OR_NOTHROW noexcept
#define BOOST_NOEXCEPT_IF(Predicate) noexcept((Predicate))
#define BOOST_NOEXCEPT_EXPR(Expression) noexcept((Expression))
# 1043 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_CONSTEXPR constexpr
#define BOOST_CONSTEXPR_OR_CONST constexpr




#define BOOST_CXX14_CONSTEXPR constexpr
# 1059 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_INLINE_VARIABLE inline







#define BOOST_IF_CONSTEXPR if constexpr




#define BOOST_INLINE_CONSTEXPR BOOST_INLINE_VARIABLE BOOST_CONSTEXPR_OR_CONST
# 1106 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_ATTRIBUTE_NODISCARD [[nodiscard]]


#define BOOST_ATTRIBUTE_NO_UNIQUE_ADDRESS [[no_unique_address]]
# 1119 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_STATIC_CONSTEXPR static BOOST_CONSTEXPR_OR_CONST


#define BOOST_NULLPTR nullptr
# 1197 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_CXX_VERSION __cplusplus



#define BOOST_NO_CXX20_HDR_BARRIER 
#define BOOST_NO_CXX20_HDR_FORMAT 
#define BOOST_NO_CXX20_HDR_SOURCE_LOCATION 
#define BOOST_NO_CXX20_HDR_BIT 
#define BOOST_NO_CXX20_HDR_LATCH 
#define BOOST_NO_CXX20_HDR_SPAN 
#define BOOST_NO_CXX20_HDR_COMPARE 
#define BOOST_NO_CXX20_HDR_NUMBERS 
#define BOOST_NO_CXX20_HDR_STOP_TOKEN 
#define BOOST_NO_CXX20_HDR_CONCEPTS 
#define BOOST_NO_CXX20_HDR_RANGES 
#define BOOST_NO_CXX20_HDR_SYNCSTREAM 
#define BOOST_NO_CXX20_HDR_COROUTINE 
#define BOOST_NO_CXX20_HDR_SEMAPHORE 
# 1261 "/usr/include/boost/config/detail/suffix.hpp" 3
#define BOOST_NO_CXX23_HDR_EXPECTED 
#define BOOST_NO_CXX23_HDR_FLAT_MAP 
#define BOOST_NO_CXX23_HDR_FLAT_SET 
#define BOOST_NO_CXX23_HDR_GENERATOR 
#define BOOST_NO_CXX23_HDR_MDSPAN 
#define BOOST_NO_CXX23_HDR_PRINT 
#define BOOST_NO_CXX23_HDR_SPANSTREAM 
#define BOOST_NO_CXX23_HDR_STACKTRACE 
#define BOOST_NO_CXX23_HDR_STDFLOAT 
# 1322 "/usr/include/boost/config/detail/suffix.hpp" 3
# 1 "/usr/include/boost/config/detail/cxx_composite.hpp" 1 3 4
# 203 "/usr/include/boost/config/detail/cxx_composite.hpp" 3 4
#define BOOST_NO_CXX20 
# 216 "/usr/include/boost/config/detail/cxx_composite.hpp" 3 4
#define BOOST_NO_CXX23 
# 1323 "/usr/include/boost/config/detail/suffix.hpp" 2 3
# 62 "/usr/include/boost/config.hpp" 2 3 4


       
# 13 "/usr/include/boost/core/noncopyable.hpp" 2 3 4

namespace boost {






namespace noncopyable_
{

#define BOOST_NONCOPYABLE_BASE_TOKEN_DEFINED 
# 34 "/usr/include/boost/core/noncopyable.hpp" 3 4
  struct base_token {};



  class noncopyable: base_token
  {
  protected:

      constexpr noncopyable() = default;
      ~noncopyable() = default;





      noncopyable( const noncopyable& ) = delete;
      noncopyable& operator=( const noncopyable& ) = delete;





  };
}

typedef noncopyable_::noncopyable noncopyable;

}
# 16 "/usr/include/boost/noncopyable.hpp" 2 3 4
# 24 "./emc/rs274ngc/interp_base.hh" 2
# 1 "emc/nml_intf/emcpos.h" 1
# 25 "./emc/rs274ngc/interp_base.hh" 2



#define ACTIVE_G_CODES 17
#define ACTIVE_M_CODES 10
#define ACTIVE_SETTINGS 5


# 32 "./emc/rs274ngc/interp_base.hh"
class InterpBase : boost::noncopyable {
public:
    virtual ~InterpBase();
    virtual char *error_text(int errcode, char *buf, size_t buflen) = 0;
    virtual char *line_text(char *buf, size_t buflen) = 0;
    virtual char *file_name(char *buf, size_t buflen) = 0;
    virtual char *stack_name(int index, char *buf, size_t buflen) = 0;
    virtual size_t line_length() = 0;
    virtual int sequence_number() = 0;
    virtual int ini_load(const char *inifile) = 0;
    virtual int init() = 0;
    virtual int execute() = 0;
    virtual int execute(const char *line) = 0;
    virtual int execute(const char *line, int line_number) = 0;
    virtual int synch() = 0;
    virtual int exit() = 0;
    virtual int open(const char *filename) = 0;
    virtual int read() = 0;
    virtual int read(const char *line) = 0;
    virtual int close() = 0;
    virtual int reset() = 0;
    virtual int line() = 0;
    virtual int call_level() = 0;
    virtual char *command(char *buf, size_t buflen) = 0;
    virtual char *file(char *buf, size_t buflen) = 0;
    virtual int on_abort(int reason, const char *message) = 0;
    virtual void active_g_codes(int active_gcodes[17]) = 0;
    virtual void active_m_codes(int active_mcodes[10]) = 0;
    virtual void active_settings(double active_settings[5]) = 0;
    virtual int active_modes(int g_codes[17],
            int m_codes[10],
            double settings[5],
            StateTag const &tag) = 0;
    virtual int restore_from_tag(StateTag const &tag) = 0;
    virtual void print_state_tag(StateTag const &tag) = 0;
    virtual void set_loglevel(int level) = 0;
    virtual void set_loop_on_main_m99(bool state) = 0;
};

InterpBase *interp_from_shlib(const char *shlib);
extern "C" InterpBase *makeInterp();
# 12 "emc/sterp/sterp.cc" 2

# 1 "/usr/include/c++/15.1.1/algorithm" 1 3
# 56 "/usr/include/c++/15.1.1/algorithm" 3
#define _GLIBCXX_ALGORITHM 1






# 1 "/usr/include/c++/15.1.1/bits/stl_algo.h" 1 3
# 57 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
#define _STL_ALGO_H 1

# 1 "/usr/include/c++/15.1.1/bits/algorithmfwd.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/algorithmfwd.h" 3
#define _GLIBCXX_ALGORITHMFWD_H 1
# 44 "/usr/include/c++/15.1.1/bits/algorithmfwd.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"

namespace std __attribute__ ((__visibility__ ("default")))
{

# 200 "/usr/include/c++/15.1.1/bits/algorithmfwd.h" 3
  template<typename _IIter, typename _Predicate>
   
    bool
    all_of(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Predicate>
   
    bool
    any_of(_IIter, _IIter, _Predicate);


  template<typename _FIter, typename _Tp >
   
    bool
    binary_search(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp ,
    typename _Compare>
   
    bool
    binary_search(_FIter, _FIter, const _Tp&, _Compare);


  template<typename _Tp>
    constexpr
    const _Tp&
    clamp(const _Tp&, const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    constexpr
    const _Tp&
    clamp(const _Tp&, const _Tp&, const _Tp&, _Compare);


  template<typename _IIter, typename _OIter>
   
    _OIter
    copy(_IIter, _IIter, _OIter);

  template<typename _BIter1, typename _BIter2>
   
    _BIter2
    copy_backward(_BIter1, _BIter1, _BIter2);


  template<typename _IIter, typename _OIter, typename _Predicate>
   
    _OIter
    copy_if(_IIter, _IIter, _OIter, _Predicate);

  template<typename _IIter, typename _Size, typename _OIter>
   
    _OIter
    copy_n(_IIter, _Size, _OIter);





  template<typename _FIter, typename _Tp >
   
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp ,
    typename _Compare>
   
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _FIter, typename _Tp >
   
    void
    fill(_FIter, _FIter, const _Tp&);

  template<typename _OIter, typename _Size,
    typename _Tp >
   
    _OIter
    fill_n(_OIter, _Size, const _Tp&);



  template<typename _FIter1, typename _FIter2>
   
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
   
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);





  template<typename _IIter, typename _Predicate>
   
    _IIter
    find_if_not(_IIter, _IIter, _Predicate);






  template<typename _IIter1, typename _IIter2>
   
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
   
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _BIter>
   
    void
    inplace_merge(_BIter, _BIter, _BIter);

  template<typename _BIter, typename _Compare>
   
    void
    inplace_merge(_BIter, _BIter, _BIter, _Compare);


  template<typename _RAIter>
   
    bool
    is_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    bool
    is_heap(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
   
    _RAIter
    is_heap_until(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    _RAIter
    is_heap_until(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _Predicate>
   
    bool
    is_partitioned(_IIter, _IIter, _Predicate);

  template<typename _FIter1, typename _FIter2>
   
    bool
    is_permutation(_FIter1, _FIter1, _FIter2);

  template<typename _FIter1, typename _FIter2,
    typename _BinaryPredicate>
   
    bool
    is_permutation(_FIter1, _FIter1, _FIter2, _BinaryPredicate);

  template<typename _FIter>
   
    bool
    is_sorted(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
   
    bool
    is_sorted(_FIter, _FIter, _Compare);

  template<typename _FIter>
   
    _FIter
    is_sorted_until(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
   
    _FIter
    is_sorted_until(_FIter, _FIter, _Compare);


  template<typename _FIter1, typename _FIter2>
   
    void
    iter_swap(_FIter1, _FIter2);

  template<typename _FIter, typename _Tp >
   
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp ,
    typename _Compare>
   
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _RAIter>
   
    void
    make_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    make_heap(_RAIter, _RAIter, _Compare);

  template<typename _Tp>
    constexpr
    const _Tp&
    max(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    constexpr
    const _Tp&
    max(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    constexpr
    const _Tp&
    min(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    constexpr
    const _Tp&
    min(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    constexpr
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    constexpr
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&, _Compare);

  template<typename _FIter>
    constexpr
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    constexpr
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter, _Compare);

  template<typename _Tp>
    constexpr
    _Tp
    min(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    constexpr
    _Tp
    min(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
    constexpr
    _Tp
    max(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    constexpr
    _Tp
    max(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
    constexpr
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    constexpr
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>, _Compare);




  template<typename _BIter>
   
    bool
    next_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
   
    bool
    next_permutation(_BIter, _BIter, _Compare);


  template<typename _IIter, typename _Predicate>
   
    bool
    none_of(_IIter, _IIter, _Predicate);





  template<typename _IIter, typename _RAIter>
   
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);

  template<typename _IIter, typename _RAIter, typename _Compare>
   
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);




  template<typename _IIter, typename _OIter1,
    typename _OIter2, typename _Predicate>
   
    pair<_OIter1, _OIter2>
    partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate);

  template<typename _FIter, typename _Predicate>
   
    _FIter
    partition_point(_FIter, _FIter, _Predicate);


  template<typename _RAIter>
   
    void
    pop_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    pop_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter>
   
    bool
    prev_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
   
    bool
    prev_permutation(_BIter, _BIter, _Compare);

  template<typename _RAIter>
   
    void
    push_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    push_heap(_RAIter, _RAIter, _Compare);



  template<typename _FIter, typename _Tp >
   
    _FIter
    remove(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Predicate>
   
    _FIter
    remove_if(_FIter, _FIter, _Predicate);

  template<typename _IIter, typename _OIter,
    typename _Tp >
   
    _OIter
    remove_copy(_IIter, _IIter, _OIter, const _Tp&);

  template<typename _IIter, typename _OIter, typename _Predicate>
   
    _OIter
    remove_copy_if(_IIter, _IIter, _OIter, _Predicate);



  template<typename _IIter, typename _OIter, typename _Tp>
   
    _OIter
    replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);

  template<typename _Iter, typename _OIter, typename _Predicate,
    typename _Tp >
   
    _OIter
    replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);



  template<typename _BIter>
   
    void
    reverse(_BIter, _BIter);

  template<typename _BIter, typename _OIter>
   
    _OIter
    reverse_copy(_BIter, _BIter, _OIter);

inline namespace _V2 {

  template<typename _FIter>
   
    _FIter
    rotate(_FIter, _FIter, _FIter);

}

  template<typename _FIter, typename _OIter>
   
    _OIter
    rotate_copy(_FIter, _FIter, _FIter, _OIter);
# 635 "/usr/include/c++/15.1.1/bits/algorithmfwd.h" 3
  template<typename _RAIter, typename _UGenerator>
    void
    shuffle(_RAIter, _RAIter, _UGenerator&&);


  template<typename _RAIter>
   
    void
    sort_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    sort_heap(_RAIter, _RAIter, _Compare);


  template<typename _BIter, typename _Predicate>
   
    _BIter
    stable_partition(_BIter, _BIter, _Predicate);
# 671 "/usr/include/c++/15.1.1/bits/algorithmfwd.h" 3
  template<typename _FIter1, typename _FIter2>
   
    _FIter2
    swap_ranges(_FIter1, _FIter1, _FIter2);



  template<typename _FIter>
   
    _FIter
    unique(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
   
    _FIter
    unique(_FIter, _FIter, _BinaryPredicate);



  template<typename _FIter, typename _Tp >
   
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp ,
    typename _Compare>
   
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&, _Compare);



  template<typename _FIter>
   
    _FIter
    adjacent_find(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
   
    _FIter
    adjacent_find(_FIter, _FIter, _BinaryPredicate);

  template<typename _IIter, typename _Tp >
   
    typename iterator_traits<_IIter>::difference_type
    count(_IIter, _IIter, const _Tp&);

  template<typename _IIter, typename _Predicate>
   
    typename iterator_traits<_IIter>::difference_type
    count_if(_IIter, _IIter, _Predicate);

  template<typename _IIter1, typename _IIter2>
   
    bool
    equal(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
   
    bool
    equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _IIter, typename _Tp >
   
    _IIter
    find(_IIter, _IIter, const _Tp&);

  template<typename _FIter1, typename _FIter2>
   
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
   
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _IIter, typename _Predicate>
   
    _IIter
    find_if(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Funct>
   
    _Funct
    for_each(_IIter, _IIter, _Funct);

  template<typename _FIter, typename _Generator>
   
    void
    generate(_FIter, _FIter, _Generator);

  template<typename _OIter, typename _Size, typename _Generator>
   
    _OIter
    generate_n(_OIter, _Size, _Generator);

  template<typename _IIter1, typename _IIter2>
   
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
   
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _FIter>
    constexpr
    _FIter
    max_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    constexpr
    _FIter
    max_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
   
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
   
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _FIter>
    constexpr
    _FIter
    min_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    constexpr
    _FIter
    min_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2>
   
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
   
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _RAIter>
   
    void
    nth_element(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    nth_element(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _RAIter>
   
    void
    partial_sort(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    partial_sort(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
   
    _BIter
    partition(_BIter, _BIter, _Predicate);


  template<typename _RAIter>
    __attribute__ ((__deprecated__ ("use '" "std::shuffle" "' instead")))
    void
    random_shuffle(_RAIter, _RAIter);

  template<typename _RAIter, typename _Generator>
    __attribute__ ((__deprecated__ ("use '" "std::shuffle" "' instead")))
    void
    random_shuffle(_RAIter, _RAIter,

     _Generator&&);





  template<typename _FIter, typename _Tp >
   
    void
    replace(_FIter, _FIter, const _Tp&, const _Tp&);

  template<typename _FIter, typename _Predicate,
    typename _Tp >
   
    void
    replace_if(_FIter, _FIter, _Predicate, const _Tp&);

  template<typename _FIter1, typename _FIter2>
   
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
   
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _FIter, typename _Size,
    typename _Tp >
   
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&);

  template<typename _FIter, typename _Size,
    typename _Tp ,
    typename _BinaryPredicate>
   
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);

  template<typename _IIter1, typename _IIter2, typename _OIter>
   
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
   
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
   
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
   
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
   
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
   
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2,
        _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
   
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
   
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _RAIter>
   
    void
    sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    sort(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
   
    void
    stable_sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
   
    void
    stable_sort(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _OIter, typename _UnaryOperation>
   
    _OIter
    transform(_IIter, _IIter, _OIter, _UnaryOperation);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _BinaryOperation>
   
    _OIter
    transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);

  template<typename _IIter, typename _OIter>
   
    _OIter
    unique_copy(_IIter, _IIter, _OIter);

  template<typename _IIter, typename _OIter, typename _BinaryPredicate>
   
    _OIter
    unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);



}

#pragma GCC diagnostic pop
# 60 "/usr/include/c++/15.1.1/bits/stl_algo.h" 2 3

# 1 "/usr/include/c++/15.1.1/bits/stl_heap.h" 1 3
# 56 "/usr/include/c++/15.1.1/bits/stl_heap.h" 3
#define _STL_HEAP_H 1






namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
   
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n,
      _Compare& __comp)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__comp(__first + __parent, __first + __child))
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }



  template<typename _RandomAccessIterator, typename _Distance>
   
    inline bool
    __is_heap(_RandomAccessIterator __first, _Distance __n)
    {
      __gnu_cxx::__ops::_Iter_less_iter __comp;
      return std::__is_heap_until(__first, __n, __comp) == __n;
    }

  template<typename _RandomAccessIterator, typename _Compare,
    typename _Distance>
   
    inline bool
    __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)
    {
      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      return std::__is_heap_until(__first, __n, __cmp) == __n;
    }

  template<typename _RandomAccessIterator>
   
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::__is_heap(__first, std::distance(__first, __last)); }

  template<typename _RandomAccessIterator, typename _Compare>
   
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      return std::__is_heap(__first, std::move(__comp),
       std::distance(__first, __last));
    }




  template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
    typename _Compare>
   
    void
    __push_heap(_RandomAccessIterator __first,
  _Distance __holeIndex, _Distance __topIndex, _Tp __value,
  _Compare& __comp)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 {
   *(__first + __holeIndex) = std::move(*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = std::move(__value);
    }
# 159 "/usr/include/c++/15.1.1/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

     
      ;
      ;
      ;

      __gnu_cxx::__ops::_Iter_less_val __comp;
      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value), __comp);
    }
# 195 "/usr/include/c++/15.1.1/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

      ;
      ;
      ;

      __decltype(__gnu_cxx::__ops::__iter_comp_val(std::move(__comp)))
 __cmp(std::move(__comp));
      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value), __cmp);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Tp, typename _Compare>
   
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (__comp(__first + __secondChild,
       __first + (__secondChild - 1)))
     __secondChild--;
   *(__first + __holeIndex) = std::move(*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = std::move(*(__first + (__secondChild - 1)))
                                  ;
   __holeIndex = __secondChild - 1;
 }
      __decltype(__gnu_cxx::__ops::__iter_comp_val(std::move(__comp)))
 __cmp(std::move(__comp));
      std::__push_heap(__first, __holeIndex, __topIndex,
         std::move(__value), __cmp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Compare& __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = std::move(*__result);
      *__result = std::move(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    std::move(__value), __comp);
    }
# 280 "/usr/include/c++/15.1.1/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      do { if (std::__is_constant_evaluated() && !bool(__first != __last)) std::__glibcxx_assert_fail(); } while (false);
      ;
      ;
      ;

      if (__last - __first > 1)
 {
   --__last;
   __gnu_cxx::__ops::_Iter_less_iter __comp;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 314 "/usr/include/c++/15.1.1/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    pop_heap(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {

     

      ;
      ;
      do { if (std::__is_constant_evaluated() && !bool(__first != __last)) std::__glibcxx_assert_fail(); } while (false);
      ;

      if (__last - __first > 1)
 {
   typedef __decltype(__comp) _Cmp;
   __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
   --__last;
   std::__pop_heap(__first, __last, __last, __cmp);
 }
    }

  template<typename _RandomAccessIterator, typename _Compare>
   
    void
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare& __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = std::move(*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, std::move(__value),
        __comp);
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 372 "/usr/include/c++/15.1.1/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;

      __gnu_cxx::__ops::_Iter_less_iter __comp;
      std::__make_heap(__first, __last, __comp);
    }
# 399 "/usr/include/c++/15.1.1/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {

     

      ;
      ;

      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      std::__make_heap(__first, __last, __cmp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
   
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare& __comp)
    {
      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 437 "/usr/include/c++/15.1.1/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;
      ;

      __gnu_cxx::__ops::_Iter_less_iter __comp;
      std::__sort_heap(__first, __last, __comp);
    }
# 465 "/usr/include/c++/15.1.1/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {

     

      ;
      ;
      ;

      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      std::__sort_heap(__first, __last, __cmp);
    }
# 494 "/usr/include/c++/15.1.1/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    [[__nodiscard__]]
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;

      __gnu_cxx::__ops::_Iter_less_iter __comp;
      return __first +
 std::__is_heap_until(__first, std::distance(__first, __last), __comp);
    }
# 523 "/usr/include/c++/15.1.1/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    [[__nodiscard__]]
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {

     

      ;
      ;

      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      return __first
 + std::__is_heap_until(__first, std::distance(__first, __last), __cmp);
    }
# 548 "/usr/include/c++/15.1.1/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    [[__nodiscard__]]
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::is_heap_until(__first, __last) == __last; }
# 562 "/usr/include/c++/15.1.1/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    [[__nodiscard__]]
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _Compare __comp)
    {

     

      ;
      ;

      const auto __dist = std::distance(__first, __last);
      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      return std::__is_heap_until(__first, __dist, __cmp) == __dist;
    }



}
# 62 "/usr/include/c++/15.1.1/bits/stl_algo.h" 2 3



# 1 "/usr/include/c++/15.1.1/bits/uniform_int_dist.h" 1 3
# 32 "/usr/include/c++/15.1.1/bits/uniform_int_dist.h" 3
#define _GLIBCXX_BITS_UNIFORM_INT_DIST_H 
# 41 "/usr/include/c++/15.1.1/bits/uniform_int_dist.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 64 "/usr/include/c++/15.1.1/bits/uniform_int_dist.h" 3
  namespace __detail
  {



    template<typename _Tp>
      constexpr bool
      _Power_of_2(_Tp __x)
      {
 return ((__x - 1) & __x) == 0;
      }
  }
# 87 "/usr/include/c++/15.1.1/bits/uniform_int_dist.h" 3
  template<typename _IntType = int>
    class uniform_int_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument must be an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef uniform_int_distribution<_IntType> distribution_type;

 param_type() : param_type(0) { }

 explicit
 param_type(_IntType __a,
     _IntType __b = __gnu_cxx::__int_traits<_IntType>::__max)
 : _M_a(__a), _M_b(__b)
 {
   do { if (std::__is_constant_evaluated() && !bool(_M_a <= _M_b)) std::__glibcxx_assert_fail(); } while (false);
 }

 result_type
 a() const
 { return _M_a; }

 result_type
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

 friend bool
 operator!=(const param_type& __p1, const param_type& __p2)
 { return !(__p1 == __p2); }

      private:
 _IntType _M_a;
 _IntType _M_b;
      };

    public:



      uniform_int_distribution() : uniform_int_distribution(0) { }




      explicit
      uniform_int_distribution(_IntType __a,
          _IntType __b
     = __gnu_cxx::__int_traits<_IntType>::__max)
      : _M_param(__a, __b)
      { }

      explicit
      uniform_int_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }

      result_type
      a() const
      { return _M_param.a(); }

      result_type
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return this->a(); }




      result_type
      max() const
      { return this->b(); }




      template<typename _UniformRandomBitGenerator>
 result_type
 operator()(_UniformRandomBitGenerator& __urng)
        { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomBitGenerator>
 result_type
 operator()(_UniformRandomBitGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomBitGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomBitGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomBitGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomBitGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomBitGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomBitGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const uniform_int_distribution& __d1,
   const uniform_int_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomBitGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomBitGenerator& __urng,
   const param_type& __p);

      param_type _M_param;




      template<typename _Wp, typename _Urbg, typename _Up>
 static _Up
 _S_nd(_Urbg& __g, _Up __range)
 {
   using _Up_traits = __gnu_cxx::__int_traits<_Up>;
   using _Wp_traits = __gnu_cxx::__int_traits<_Wp>;
   static_assert(!_Up_traits::__is_signed, "U must be unsigned");
   static_assert(!_Wp_traits::__is_signed, "W must be unsigned");
   static_assert(_Wp_traits::__digits == (2 * _Up_traits::__digits),
   "W must be twice as wide as U");




   _Wp __product = _Wp(__g()) * _Wp(__range);
   _Up __low = _Up(__product);
   if (__low < __range)
     {
       _Up __threshold = -__range % __range;
       while (__low < __threshold)
  {
    __product = _Wp(__g()) * _Wp(__range);
    __low = _Up(__product);
  }
     }
   return __product >> _Up_traits::__digits;
 }
    };

  template<typename _IntType>
    template<typename _UniformRandomBitGenerator>
      typename uniform_int_distribution<_IntType>::result_type
      uniform_int_distribution<_IntType>::
      operator()(_UniformRandomBitGenerator& __urng,
   const param_type& __param)
      {
 typedef typename _UniformRandomBitGenerator::result_type _Gresult_type;
 typedef typename make_unsigned<result_type>::type __utype;
 typedef typename common_type<_Gresult_type, __utype>::type __uctype;

 constexpr __uctype __urngmin = _UniformRandomBitGenerator::min();
 constexpr __uctype __urngmax = _UniformRandomBitGenerator::max();
 static_assert( __urngmin < __urngmax,
     "Uniform random bit generator must define min() < max()");
 constexpr __uctype __urngrange = __urngmax - __urngmin;

 const __uctype __urange
   = __uctype(__param.b()) - __uctype(__param.a());

 __uctype __ret;
 if (__urngrange > __urange)
   {


     const __uctype __uerange = __urange + 1;



     if constexpr (__urngrange == 0xffffffffffffffffUL)
       {


  long unsigned int __u64erange = __uerange;
  __ret = __extension__ _S_nd<unsigned __int128>(__urng,
              __u64erange);
       }
     else

     if constexpr (__urngrange == 0xffffffffU)
       {


  unsigned int __u32erange = __uerange;
  __ret = _S_nd<long unsigned int>(__urng, __u32erange);
       }
     else

       {

  const __uctype __scaling = __urngrange / __uerange;
  const __uctype __past = __uerange * __scaling;
  do
    __ret = __uctype(__urng()) - __urngmin;
  while (__ret >= __past);
  __ret /= __scaling;
       }
   }
 else if (__urngrange < __urange)
   {
# 359 "/usr/include/c++/15.1.1/bits/uniform_int_dist.h" 3
     __uctype __tmp;
     do
       {
  const __uctype __uerngrange = __urngrange + 1;
  __tmp = (__uerngrange * operator()
    (__urng, param_type(0, __urange / __uerngrange)));
  __ret = __tmp + (__uctype(__urng()) - __urngmin);
       }
     while (__ret > __urange || __ret < __tmp);
   }
 else
   __ret = __uctype(__urng()) - __urngmin;

 return __ret + __param.a();
      }


  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomBitGenerator>
      void
      uniform_int_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomBitGenerator& __urng,
        const param_type& __param)
      {

 typedef typename _UniformRandomBitGenerator::result_type _Gresult_type;
 typedef typename make_unsigned<result_type>::type __utype;
 typedef typename common_type<_Gresult_type, __utype>::type __uctype;

 static_assert( __urng.min() < __urng.max(),
     "Uniform random bit generator must define min() < max()");

 constexpr __uctype __urngmin = __urng.min();
 constexpr __uctype __urngmax = __urng.max();
 constexpr __uctype __urngrange = __urngmax - __urngmin;
 const __uctype __urange
   = __uctype(__param.b()) - __uctype(__param.a());

 __uctype __ret;

 if (__urngrange > __urange)
   {
     if (__detail::_Power_of_2(__urngrange + 1)
  && __detail::_Power_of_2(__urange + 1))
       {
  while (__f != __t)
    {
      __ret = __uctype(__urng()) - __urngmin;
      *__f++ = (__ret & __urange) + __param.a();
    }
       }
     else
       {

  const __uctype __uerange = __urange + 1;
  const __uctype __scaling = __urngrange / __uerange;
  const __uctype __past = __uerange * __scaling;
  while (__f != __t)
    {
      do
        __ret = __uctype(__urng()) - __urngmin;
      while (__ret >= __past);
      *__f++ = __ret / __scaling + __param.a();
    }
       }
   }
 else if (__urngrange < __urange)
   {
# 444 "/usr/include/c++/15.1.1/bits/uniform_int_dist.h" 3
     __uctype __tmp;
     while (__f != __t)
       {
  do
    {
      constexpr __uctype __uerngrange = __urngrange + 1;
      __tmp = (__uerngrange * operator()
        (__urng, param_type(0, __urange / __uerngrange)));
      __ret = __tmp + (__uctype(__urng()) - __urngmin);
    }
  while (__ret > __urange || __ret < __tmp);
  *__f++ = __ret;
       }
   }
 else
   while (__f != __t)
     *__f++ = __uctype(__urng()) - __urngmin + __param.a();
      }




}
# 66 "/usr/include/c++/15.1.1/bits/stl_algo.h" 2 3



# 1 "/usr/include/c++/15.1.1/bits/stl_tempbuf.h" 1 3
# 57 "/usr/include/c++/15.1.1/bits/stl_tempbuf.h" 3
#define _STL_TEMPBUF_H 1







namespace std __attribute__ ((__visibility__ ("default")))
{



#define _GLIBCXX_OPERATOR_NEW __builtin_operator_new
#define _GLIBCXX_OPERATOR_DELETE __builtin_operator_delete





  namespace __detail
  {


    template<typename _Tp>
      inline _Tp*
      __get_temporary_buffer(ptrdiff_t __len) noexcept
      {
 if (__builtin_expect(size_t(__len) > (size_t(-1) / sizeof(_Tp)), 0))
   return 0;


 if (alignof(_Tp) > 16)
   return (_Tp*) __builtin_operator_new(__len * sizeof(_Tp),
           align_val_t(alignof(_Tp)),
           nothrow_t());

 return (_Tp*) __builtin_operator_new(__len * sizeof(_Tp), nothrow_t());
      }



    template<typename _Tp>
      inline void
      __return_temporary_buffer(_Tp* __p,
    size_t __len __attribute__((__unused__)))
      {

#define _GLIBCXX_SIZED_DEALLOC(T,p,n) (p), (n) * sizeof(T)





 if (alignof(_Tp) > 16)
   {
     __builtin_operator_delete((__p), (__len) * sizeof(_Tp),
         align_val_t(alignof(_Tp)));
     return;
   }

 __builtin_operator_delete((__p), (__len) * sizeof(_Tp));
      }
#undef _GLIBCXX_SIZED_DEALLOC
  }
# 140 "/usr/include/c++/15.1.1/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    [[__deprecated__]]
    pair<_Tp*, ptrdiff_t>
    get_temporary_buffer(ptrdiff_t __len) noexcept
    {
      const ptrdiff_t __max =
 __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
      if (__len > __max)
 __len = __max;

      while (__len > 0)
 {
   if (_Tp* __tmp = __detail::__get_temporary_buffer<_Tp>(__len))
     return pair<_Tp*, ptrdiff_t>(__tmp, __len);
   __len = __len == 1 ? 0 : ((__len + 1) / 2);
 }
      return pair<_Tp*, ptrdiff_t>();
    }
# 166 "/usr/include/c++/15.1.1/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    [[__deprecated__]]
    inline void
    return_temporary_buffer(_Tp* __p)
    {

      if (alignof(_Tp) > 16)
 __builtin_operator_delete(__p, align_val_t(alignof(_Tp)));
      else

      __builtin_operator_delete(__p);
    }

#undef _GLIBCXX_OPERATOR_DELETE
#undef _GLIBCXX_OPERATOR_NEW






  template<typename _ForwardIterator, typename _Tp>
    class _Temporary_buffer
    {

     

    public:
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected:
      size_type _M_original_len;
      struct _Impl
      {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 explicit
 _Impl(ptrdiff_t __original_len)
 {
   pair<pointer, size_type> __p(
     std::get_temporary_buffer<value_type>(__original_len));
   _M_len = __p.second;
   _M_buffer = __p.first;
 }
#pragma GCC diagnostic pop

 ~_Impl()
 { std::__detail::__return_temporary_buffer(_M_buffer, _M_len); }

 size_type _M_len;
 pointer _M_buffer;
      } _M_impl;

    public:

      size_type
      size() const
      { return _M_impl._M_len; }


      size_type
      requested_size() const
      { return _M_original_len; }


      iterator
      begin()
      { return _M_impl._M_buffer; }


      iterator
      end()
      { return _M_impl._M_buffer + _M_impl._M_len; }





      _Temporary_buffer(_ForwardIterator __seed, size_type __original_len);

      ~_Temporary_buffer()
      { std::_Destroy(_M_impl._M_buffer, _M_impl._M_buffer + _M_impl._M_len); }

    private:

      _Temporary_buffer(const _Temporary_buffer&);

      void
      operator=(const _Temporary_buffer&);
    };


  template<bool>
    struct __uninitialized_construct_buf_dispatch
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer __first, _Pointer __last,
       _ForwardIterator __seed)
        {
   if (__builtin_expect(__first == __last, 0))
     return;

   _Pointer __cur = __first;
   try
     {
       std::_Construct(std::__addressof(*__first),
         std::move(*__seed));
       _Pointer __prev = __cur;
       ++__cur;
       for(; __cur != __last; ++__cur, ++__prev)
  std::_Construct(std::__addressof(*__cur),
    std::move(*__prev));
       *__seed = std::move(*__prev);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_construct_buf_dispatch<true>
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer, _Pointer, _ForwardIterator) { }
    };
# 311 "/usr/include/c++/15.1.1/bits/stl_tempbuf.h" 3
  template<typename _Tp, typename _ForwardIterator>
    inline void
    __uninitialized_construct_buf(_Tp* __first, _Tp* __last,
      _ForwardIterator __seed)
    {
      std::__uninitialized_construct_buf_dispatch<
 __has_trivial_constructor(_Tp)>::
   __ucr(__first, __last, __seed);
    }

  template<typename _ForwardIterator, typename _Tp>
    _Temporary_buffer<_ForwardIterator, _Tp>::
    _Temporary_buffer(_ForwardIterator __seed, size_type __original_len)
    : _M_original_len(__original_len), _M_impl(__original_len)
    {
      std::__uninitialized_construct_buf(begin(), end(), __seed);
    }


}
# 70 "/usr/include/c++/15.1.1/bits/stl_algo.h" 2 3





#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"



namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Iterator, typename _Compare>
   
    void
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
      _Iterator __c, _Compare __comp)
    {
      if (__comp(__a, __b))
 {
   if (__comp(__b, __c))
     std::iter_swap(__result, __b);
   else if (__comp(__a, __c))
     std::iter_swap(__result, __c);
   else
     std::iter_swap(__result, __a);
 }
      else if (__comp(__a, __c))
 std::iter_swap(__result, __a);
      else if (__comp(__b, __c))
 std::iter_swap(__result, __c);
      else
 std::iter_swap(__result, __b);
    }


  template<typename _InputIterator, typename _Predicate>
   
    inline _InputIterator
    __find_if_not(_InputIterator __first, _InputIterator __last,
    _Predicate __pred)
    {
      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__negate(__pred));
    }




  template<typename _InputIterator, typename _Predicate, typename _Distance>
   
    _InputIterator
    __find_if_not_n(_InputIterator __first, _Distance& __len, _Predicate __pred)
    {
      for (; __len; --__len, (void) ++__first)
 if (!__pred(__first))
   break;
      return __first;
    }
# 150 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer,
    typename _UnaryPredicate>
   
    _ForwardIterator
    __search_n_aux(_ForwardIterator __first, _ForwardIterator __last,
     _Integer __count, _UnaryPredicate __unary_pred,
     std::forward_iterator_tag)
    {
      __first = std::__find_if(__first, __last, __unary_pred);
      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && __unary_pred(__i))
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = std::__find_if(++__i, __last, __unary_pred);
 }
      return __last;
    }





  template<typename _RandomAccessIter, typename _Integer,
    typename _UnaryPredicate>
   
    _RandomAccessIter
    __search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last,
     _Integer __count, _UnaryPredicate __unary_pred,
     std::random_access_iterator_tag)
    {
      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      _DistanceType __remainder = __count;

      while (__remainder <= __tailSize)
 {
   __first += __remainder;
   __tailSize -= __remainder;


   _RandomAccessIter __backTrack = __first;
   while (__unary_pred(--__backTrack))
     {
       if (--__remainder == 0)
  return (__first - __count);
     }
   __remainder = __count + 1 - (__first - __backTrack);
 }
      return __last;
    }

  template<typename _ForwardIterator, typename _Integer,
    typename _UnaryPredicate>
   
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count,
        _UnaryPredicate __unary_pred)
    {
      if (__count <= 0)
 return __first;

      if (__count == 1)
 return std::__find_if(__first, __last, __unary_pred);

      return std::__search_n_aux(__first, __last, __count, __unary_pred,
     std::__iterator_category(__first));
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
   
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag,
        _BinaryPredicate __comp)
    {
      if (__first2 == __last2)
 return __last1;

      _ForwardIterator1 __result = __last1;
      while (1)
 {
   _ForwardIterator1 __new_result
     = std::__search(__first1, __last1, __first2, __last2, __comp);
   if (__new_result == __last1)
     return __result;
   else
     {
       __result = __new_result;
       __first1 = __new_result;
       ++__first1;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BinaryPredicate>
   
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag,
        _BinaryPredicate __comp)
    {

     

     


      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::__search(_RevIterator1(__last1), __rlast1,
           _RevIterator2(__last2), __rlast2,
           __comp);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }
# 324 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    [[__nodiscard__]]
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {

     
     
     


      ;
      ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 373 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    [[__nodiscard__]]
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __comp)
    {

     
     
     


      ;
      ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 409 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    [[__nodiscard__]]
    inline bool
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if_not(__first, __last, __pred); }
# 427 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    [[__nodiscard__]]
    inline bool
    none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if(__first, __last, __pred); }
# 446 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    [[__nodiscard__]]
    inline bool
    any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return !std::none_of(__first, __last, __pred); }
# 462 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    [[__nodiscard__]]
    inline _InputIterator
    find_if_not(_InputIterator __first, _InputIterator __last,
  _Predicate __pred)
    {

     
     

      ;
      return std::__find_if_not(__first, __last,
    __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 487 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    [[__nodiscard__]]
    inline bool
    is_partitioned(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {
      __first = std::find_if_not(__first, __last, __pred);
      if (__first == __last)
 return true;
      ++__first;
      return std::none_of(__first, __last, __pred);
    }
# 509 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    [[__nodiscard__]]
    _ForwardIterator
    partition_point(_ForwardIterator __first, _ForwardIterator __last,
      _Predicate __pred)
    {

     
     



      ;

      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__pred(*__middle))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }


  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
   
    _OutputIterator
    __remove_copy_if(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _Predicate __pred)
    {
      for (; __first != __last; ++__first)
 if (!__pred(__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 576 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
   
    inline _OutputIterator
    remove_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, const _Tp& __value)
    {

     
     

     

      ;

      return std::__remove_copy_if(__first, __last, __result,
 __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 609 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
   
    inline _OutputIterator
    remove_copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {

     
     

     

      ;

      return std::__remove_copy_if(__first, __last, __result,
       __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 644 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
   
    _OutputIterator
    copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {

     
     

     

      ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 681 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Size, typename _OutputIterator>
   
    inline _OutputIterator
    copy_n(_InputIterator __first, _Size __n, _OutputIterator __result)
    {

     
     


      const auto __n2 = std::__size_to_integer(__n);
      if (__n2 <= 0)
 return __result;

      ;
      ;

      auto __res = std::__copy_n_a(std::__niter_base(__first), __n2,
       std::__niter_base(__result), true);
      return std::__niter_wrap(__result, std::move(__res));
    }
# 718 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator1,
    typename _OutputIterator2, typename _Predicate>
   
    pair<_OutputIterator1, _OutputIterator2>
    partition_copy(_InputIterator __first, _InputIterator __last,
     _OutputIterator1 __out_true, _OutputIterator2 __out_false,
     _Predicate __pred)
    {

     
     

     

     

      ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__out_true = *__first;
     ++__out_true;
   }
 else
   {
     *__out_false = *__first;
     ++__out_false;
   }

      return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);
    }
# 769 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    [[__nodiscard__]]
    inline _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __value)
    {

     

     

      ;

      return std::__remove_if(__first, __last,
  __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 803 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    [[__nodiscard__]]
    inline _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      return std::__remove_if(__first, __last,
         __gnu_cxx::__ops::__pred_iter(__pred));
    }

  template<typename _ForwardIterator, typename _BinaryPredicate>
   
    _ForwardIterator
    __adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
      _BinaryPredicate __binary_pred)
    {
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while (++__next != __last)
 {
   if (__binary_pred(__first, __next))
     return __first;
   __first = __next;
 }
      return __last;
    }

  template<typename _ForwardIterator, typename _BinaryPredicate>
   
    _ForwardIterator
    __unique(_ForwardIterator __first, _ForwardIterator __last,
      _BinaryPredicate __binary_pred)
    {

      __first = std::__adjacent_find(__first, __last, __binary_pred);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!__binary_pred(__dest, __first))
   *++__dest = std::move(*__first);
      return ++__dest;
    }
# 872 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    [[__nodiscard__]]
    inline _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last)
    {

     

     

      ;

      return std::__unique(__first, __last,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 903 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    [[__nodiscard__]]
    inline _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {

     

     


      ;

      return std::__unique(__first, __last,
      __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }







  template<typename _ForwardIterator, typename _OutputIterator,
    typename _BinaryPredicate>
   
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    forward_iterator_tag, output_iterator_tag)
    {

     



      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!__binary_pred(__first, __next))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
   
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, output_iterator_tag)
    {

     



      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      __decltype(__gnu_cxx::__ops::__iter_comp_val(__binary_pred))
 __rebound_pred
 = __gnu_cxx::__ops::__iter_comp_val(__binary_pred);
      *__result = __value;
      while (++__first != __last)
 if (!__rebound_pred(__first, __value))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
   
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, forward_iterator_tag)
    {

     


      *__result = *__first;
      while (++__first != __last)
 if (!__binary_pred(__result, __first))
   *++__result = *__first;
      return ++__result;
    }






  template<typename _BidirectionalIterator>
   
    void
    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {
      while (true)
 if (__first == __last || __first == --__last)
   return;
 else
   {
     std::iter_swap(__first, __last);
     ++__first;
   }
    }






  template<typename _RandomAccessIterator>
   
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
       random_access_iterator_tag)
    {
      if (__first == __last)
 return;
      --__last;
      while (__first < __last)
 {
   std::iter_swap(__first, __last);
   ++__first;
   --__last;
 }
    }
# 1064 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
   
    inline void
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
    {

     

      ;
      std::__reverse(__first, __last, std::__iterator_category(__first));
    }
# 1092 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _OutputIterator>
   
    _OutputIterator
    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
   _OutputIterator __result)
    {

     

     

      ;

      while (__first != __last)
 {
   --__last;
   *__result = *__last;
   ++__result;
 }
      return __result;
    }





  template<typename _EuclideanRingElement>
   
    _EuclideanRingElement
    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
    {
      while (__n != 0)
 {
   _EuclideanRingElement __t = __m % __n;
   __m = __n;
   __n = __t;
 }
      return __m;
    }

inline namespace _V2 {


  template<typename _ForwardIterator>
   
    _ForwardIterator
    __rotate(_ForwardIterator __first,
      _ForwardIterator __middle,
      _ForwardIterator __last,
      forward_iterator_tag)
    {
      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      _ForwardIterator __first2 = __middle;
      do
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
 }
      while (__first2 != __last);

      _ForwardIterator __ret = __first;

      __first2 = __middle;

      while (__first2 != __last)
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
   else if (__first2 == __last)
     __first2 = __middle;
 }
      return __ret;
    }


  template<typename _BidirectionalIterator>
   
    _BidirectionalIterator
    __rotate(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {

     


      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      std::__reverse(__first, __middle, bidirectional_iterator_tag());
      std::__reverse(__middle, __last, bidirectional_iterator_tag());

      while (__first != __middle && __middle != __last)
 {
   std::iter_swap(__first, --__last);
   ++__first;
 }

      if (__first == __middle)
 {
   std::__reverse(__middle, __last, bidirectional_iterator_tag());
   return __last;
 }
      else
 {
   std::__reverse(__first, __middle, bidirectional_iterator_tag());
   return __first;
 }
    }


  template<typename _RandomAccessIterator>
   
    _RandomAccessIterator
    __rotate(_RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      random_access_iterator_tag)
    {

     


      if (__first == __middle)
 return __last;
      else if (__last == __middle)
 return __first;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


      typedef typename make_unsigned<_Distance>::type _UDistance;




      _Distance __n = __last - __first;
      _Distance __k = __middle - __first;

      if (__k == __n - __k)
 {
   std::swap_ranges(__first, __middle, __middle);
   return __middle;
 }

      _RandomAccessIterator __p = __first;
      _RandomAccessIterator __ret = __first + (__last - __middle);

      for (;;)
 {
   if (__k < __n - __k)
     {
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*__p);
    std::move(__p + 1, __p + __n, __p);
    *(__p + __n - 1) = std::move(__t);
    return __ret;
  }
       _RandomAccessIterator __q = __p + __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    std::iter_swap(__p, __q);
    ++__p;
    ++__q;
  }
       __n = static_cast<_UDistance>(__n) % static_cast<_UDistance>(__k);
       if (__n == 0)
  return __ret;
       std::swap(__n, __k);
       __k = __n - __k;
     }
   else
     {
       __k = __n - __k;
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*(__p + __n - 1));
    std::move_backward(__p, __p + __n - 1, __p + __n);
    *__p = std::move(__t);
    return __ret;
  }
       _RandomAccessIterator __q = __p + __n;
       __p = __q - __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    --__p;
    --__q;
    std::iter_swap(__p, __q);
  }
       __n = static_cast<_UDistance>(__n) % static_cast<_UDistance>(__k);
       if (__n == 0)
  return __ret;
       std::swap(__n, __k);
     }
 }
    }
# 1329 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
   
    inline _ForwardIterator
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
    _ForwardIterator __last)
    {

     

      ;
      ;

      return std::__rotate(__first, __middle, __last,
      std::__iterator_category(__first));
    }

}
# 1367 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _OutputIterator>
   
    inline _OutputIterator
    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
  _ForwardIterator __last, _OutputIterator __result)
    {

     
     

      ;
      ;

      return std::copy(__first, __middle,
         std::copy(__middle, __last, __result));
    }


  template<typename _ForwardIterator, typename _Predicate>
   
    _ForwardIterator
    __partition(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred, forward_iterator_tag)
    {
      if (__first == __last)
 return __first;

      while (__pred(*__first))
 if (++__first == __last)
   return __first;

      _ForwardIterator __next = __first;

      while (++__next != __last)
 if (__pred(*__next))
   {
     std::iter_swap(__first, __next);
     ++__first;
   }

      return __first;
    }


  template<typename _BidirectionalIterator, typename _Predicate>
   
    _BidirectionalIterator
    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
  _Predicate __pred, bidirectional_iterator_tag)
    {
      while (true)
 {
   while (true)
     if (__first == __last)
       return __first;
     else if (__pred(*__first))
       ++__first;
     else
       break;
   --__last;
   while (true)
     if (__first == __last)
       return __first;
     else if (!bool(__pred(*__last)))
       --__last;
     else
       break;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }
# 1448 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
    typename _Distance>
   
    _ForwardIterator
    __stable_partition_adaptive(_ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred, _Distance __len,
    _Pointer __buffer,
    _Distance __buffer_size)
    {
      if (__len == 1)
 return __first;

      if (__len <= __buffer_size)
 {
   _ForwardIterator __result1 = __first;
   _Pointer __result2 = __buffer;




   *__result2 = std::move(*__first);
   ++__result2;
   ++__first;
   for (; __first != __last; ++__first)
     if (__pred(__first))
       {
  *__result1 = std::move(*__first);
  ++__result1;
       }
     else
       {
  *__result2 = std::move(*__first);
  ++__result2;
       }

   std::move(__buffer, __result2, __result1);
   return __result1;
 }

      _ForwardIterator __middle = __first;
      std::advance(__middle, __len / 2);
      _ForwardIterator __left_split =
 std::__stable_partition_adaptive(__first, __middle, __pred,
      __len / 2, __buffer,
      __buffer_size);



      _Distance __right_len = __len - __len / 2;
      _ForwardIterator __right_split =
 std::__find_if_not_n(__middle, __right_len, __pred);

      if (__right_len)
 __right_split =
   std::__stable_partition_adaptive(__right_split, __last, __pred,
        __right_len,
        __buffer, __buffer_size);

      return std::rotate(__left_split, __middle, __right_split);
    }

  template<typename _ForwardIterator, typename _Predicate>
   
    _ForwardIterator
    __stable_partition(_ForwardIterator __first, _ForwardIterator __last,
         _Predicate __pred)
    {
      __first = std::__find_if_not(__first, __last, __pred);

      if (__first == __last)
 return __first;

      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      const _DistanceType __len = std::distance(__first, __last);
# 1540 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
      _Temporary_buffer<_ForwardIterator, _ValueType>
 __buf(__first, __len);
      return
 std::__stable_partition_adaptive(__first, __last, __pred,
      __len,
      __buf.begin(),
      _DistanceType(__buf.size()));
    }
# 1566 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
   
    inline _ForwardIterator
    stable_partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      return std::__stable_partition(__first, __last,
         __gnu_cxx::__ops::__pred_iter(__pred));
    }





  template<typename _RandomAccessIterator, typename _Compare>
   
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last, _Compare __comp)
    {
      std::__make_heap(__first, __middle, __comp);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (__comp(__i, __first))
   std::__pop_heap(__first, __middle, __i, __comp);
    }



  template<typename _InputIterator, typename _RandomAccessIterator,
    typename _Compare>
   
    _RandomAccessIterator
    __partial_sort_copy(_InputIterator __first, _InputIterator __last,
   _RandomAccessIterator __result_first,
   _RandomAccessIterator __result_last,
   _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef iterator_traits<_RandomAccessIterator> _RItTraits;
      typedef typename _RItTraits::difference_type _DistanceType;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while (__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }

      std::__make_heap(__result_first, __result_real_last, __comp);
      while (__first != __last)
 {
   if (__comp(__first, __result_first))
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first), __comp);
   ++__first;
 }
      std::__sort_heap(__result_first, __result_real_last, __comp);
      return __result_real_last;
    }
# 1660 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator>
   
    inline _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last)
    {
# 1675 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
     
     

     

     
      ;
      ;
      ;

      return std::__partial_sort_copy(__first, __last,
          __result_first, __result_last,
          __gnu_cxx::__ops::__iter_less_iter());
    }
# 1710 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator,
    typename _Compare>
   
    inline _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last,
        _Compare __comp)
    {
# 1727 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
     
     

     

     

     

      ;
      ;
      ;

      return std::__partial_sort_copy(__first, __last,
          __result_first, __result_last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }




  template<typename _RandomAccessIterator, typename _Compare>
   
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
         _Compare __comp)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
 __val = std::move(*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, __next))
 {
   *__last = std::move(*__next);
   __last = __next;
   --__next;
 }
      *__last = std::move(__val);
    }


  template<typename _RandomAccessIterator, typename _Compare>
   
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   if (__comp(__i, __first))
     {
       typename iterator_traits<_RandomAccessIterator>::value_type
  __val = std::move(*__i);
       std::move_backward(__first, __i, __i + 1);
       *__first = std::move(__val);
     }
   else
     std::__unguarded_linear_insert(__i,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last, _Compare __comp)
    {
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }





  enum { _S_threshold = 16 };


  template<typename _RandomAccessIterator, typename _Compare>
   
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
       __comp);
 }
      else
 std::__insertion_sort(__first, __last, __comp);
    }


  template<typename _RandomAccessIterator, typename _Compare>
   
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last,
     _RandomAccessIterator __pivot, _Compare __comp)
    {
      while (true)
 {
   while (__comp(__first, __pivot))
     ++__first;
   --__last;
   while (__comp(__pivot, __last))
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
   
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
    _RandomAccessIterator __last, _Compare __comp)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
      __comp);
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    __partial_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __middle,
     _RandomAccessIterator __last,
     _Compare __comp)
    {
      std::__heap_select(__first, __middle, __last, __comp);
      std::__sort_heap(__first, __middle, __comp);
    }


  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
   
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::__partial_sort(__first, __last, __last, __comp);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   __last = __cut;
 }
    }



  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {
      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2,
    __comp);
   std::__final_insertion_sort(__first, __last, __comp);
 }
    }

  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
   
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit,
    _Compare __comp)
    {
      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last, __comp);

       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last, __comp);
    }
# 1961 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    [[__nodiscard__]]
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {

     
     

     
                    ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_comp_val(__comp));
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
   
    _ForwardIterator
    __upper_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__val, __middle))
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2017 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    [[__nodiscard__]]
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {

     
     

      ;

      return std::__upper_bound(__first, __last, __val,
    __gnu_cxx::__ops::__val_less_iter());
    }
# 2048 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    [[__nodiscard__]]
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {

     
     

     
                    ;

      return std::__upper_bound(__first, __last, __val,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Tp,
    typename _CompareItTp, typename _CompareTpIt>
   
    pair<_ForwardIterator, _ForwardIterator>
    __equal_range(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val,
    _CompareItTp __comp_it_val, _CompareTpIt __comp_val_it)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp_it_val(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__comp_val_it(__val, __middle))
     __len = __half;
   else
     {
       _ForwardIterator __left
  = std::__lower_bound(__first, __middle, __val, __comp_it_val);
       std::advance(__first, __len);
       _ForwardIterator __right
  = std::__upper_bound(++__middle, __first, __val, __comp_val_it);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2121 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    [[__nodiscard__]]
    inline pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {

     
     

     

      ;
      ;

      return std::__equal_range(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val(),
    __gnu_cxx::__ops::__val_less_iter());
    }
# 2158 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    [[__nodiscard__]]
    inline pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {

     
     

     

     
                    ;
     
                    ;

      return std::__equal_range(__first, __last, __val,
    __gnu_cxx::__ops::__iter_comp_val(__comp),
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }
# 2192 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    [[__nodiscard__]]
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val)
    {

     
     

      ;
      ;

      _ForwardIterator __i
 = std::__lower_bound(__first, __last, __val,
        __gnu_cxx::__ops::__iter_less_val());
      return __i != __last && !(__val < *__i);
    }
# 2226 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    [[__nodiscard__]]
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {

     
     

     
                    ;
     
                    ;

      _ForwardIterator __i
 = std::__lower_bound(__first, __last, __val,
        __gnu_cxx::__ops::__iter_comp_val(__comp));
      return __i != __last && !bool(__comp(__val, *__i));
    }




  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    void
    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      if (__first1 != __last1)
 std::move(__first1, __last1, __result);
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3, typename _Compare>
    void
    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result,
       _Compare __comp)
    {
      if (__first1 == __last1)
 {
   std::move_backward(__first2, __last2, __result);
   return;
 }
      else if (__first2 == __last2)
 return;

      --__last1;
      --__last2;
      while (true)
 {
   if (__comp(__last2, __last1))
     {
       *--__result = std::move(*__last1);
       if (__first1 == __last1)
  {
    std::move_backward(__first2, ++__last2, __result);
    return;
  }
       --__last1;
     }
   else
     {
       *--__result = std::move(*__last2);
       if (__first2 == __last2)
  return;
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _Distance>
    _BidirectionalIterator1
    __rotate_adaptive(_BidirectionalIterator1 __first,
        _BidirectionalIterator1 __middle,
        _BidirectionalIterator1 __last,
        _Distance __len1, _Distance __len2,
        _BidirectionalIterator2 __buffer,
        _Distance __buffer_size)
    {
      _BidirectionalIterator2 __buffer_end;
      if (__len1 > __len2 && __len2 <= __buffer_size)
 {
   if (__len2)
     {
       __buffer_end = std::move(__middle, __last, __buffer);
       std::move_backward(__first, __middle, __last);
       return std::move(__buffer, __buffer_end, __first);
     }
   else
     return __first;
 }
      else if (__len1 <= __buffer_size)
 {
   if (__len1)
     {
       __buffer_end = std::move(__first, __middle, __buffer);
       std::move(__middle, __last, __first);
       return std::move_backward(__buffer, __buffer_end, __last);
     }
   else
     return __last;
 }
      else
 return std::rotate(__first, __middle, __last);
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer, typename _Compare>
    void
    __merge_adaptive(_BidirectionalIterator __first,
       _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Compare __comp)
    {
      if (__len1 <= __len2)
 {
   _Pointer __buffer_end = std::move(__first, __middle, __buffer);
   std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
         __first, __comp);
 }
      else
 {
   _Pointer __buffer_end = std::move(__middle, __last, __buffer);
   std::__move_merge_adaptive_backward(__first, __middle, __buffer,
           __buffer_end, __last, __comp);
 }
    }

  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer, typename _Compare>
    void
    __merge_adaptive_resize(_BidirectionalIterator __first,
       _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size,
       _Compare __comp)
    {
      if (__len1 <= __buffer_size || __len2 <= __buffer_size)
 std::__merge_adaptive(__first, __middle, __last,
         __len1, __len2, __buffer, __comp);
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut
  = std::__lower_bound(__middle, __last, *__first_cut,
         __gnu_cxx::__ops::__iter_comp_val(__comp));
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut
  = std::__upper_bound(__first, __middle, *__second_cut,
         __gnu_cxx::__ops::__val_comp_iter(__comp));
       __len11 = std::distance(__first, __first_cut);
     }

   _BidirectionalIterator __new_middle
     = std::__rotate_adaptive(__first_cut, __middle, __second_cut,
         _Distance(__len1 - __len11), __len22,
         __buffer, __buffer_size);
   std::__merge_adaptive_resize(__first, __first_cut, __new_middle,
           __len11, __len22,
           __buffer, __buffer_size, __comp);
   std::__merge_adaptive_resize(__new_middle, __second_cut, __last,
           _Distance(__len1 - __len11),
           _Distance(__len2 - __len22),
           __buffer, __buffer_size, __comp);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Compare>
   
    void
    __merge_without_buffer(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2,
      _Compare __comp)
    {
      if (__len1 == 0 || __len2 == 0)
 return;

      if (__len1 + __len2 == 2)
 {
   if (__comp(__middle, __first))
     std::iter_swap(__first, __middle);
   return;
 }

      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut
     = std::__lower_bound(__middle, __last, *__first_cut,
     __gnu_cxx::__ops::__iter_comp_val(__comp));
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut
     = std::__upper_bound(__first, __middle, *__second_cut,
     __gnu_cxx::__ops::__val_comp_iter(__comp));
   __len11 = std::distance(__first, __first_cut);
 }

      _BidirectionalIterator __new_middle
 = std::rotate(__first_cut, __middle, __second_cut);
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22, __comp);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22, __comp);
    }

  template<typename _BidirectionalIterator, typename _Compare>
   
    void
    __inplace_merge(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Compare __comp)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
   _DistanceType;

      if (__first == __middle || __middle == __last)
 return;

      const _DistanceType __len1 = std::distance(__first, __middle);
      const _DistanceType __len2 = std::distance(__middle, __last);
# 2510 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
      typedef _Temporary_buffer<_BidirectionalIterator, _ValueType> _TmpBuf;


      _TmpBuf __buf(__first, std::min(__len1, __len2));

      if (__builtin_expect(__buf.size() == __buf.requested_size(), true))
 std::__merge_adaptive
   (__first, __middle, __last, __len1, __len2, __buf.begin(), __comp);
      else if (__builtin_expect(__buf.begin() == 0, false))
 std::__merge_without_buffer
   (__first, __middle, __last, __len1, __len2, __comp);
      else
 std::__merge_adaptive_resize
   (__first, __middle, __last, __len1, __len2, __buf.begin(),
    _DistanceType(__buf.size()), __comp);




    }
# 2549 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
   
    inline void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last)
    {

     

     

      ;
      ;
      ;

      std::__inplace_merge(__first, __middle, __last,
      __gnu_cxx::__ops::__iter_less_iter());
    }
# 2591 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
   
    inline void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare __comp)
    {

     

     


      ;
      ;
      ;

      std::__inplace_merge(__first, __middle, __last,
      __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }



  template<typename _InputIterator, typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __move_merge(_InputIterator __first1, _InputIterator __last1,
   _InputIterator __first2, _InputIterator __last2,
   _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      return std::move(__first2, __last2, std::move(__first1, __last1, __result))

                  ;
    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance, typename _Compare>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result, _Distance __step_size,
        _Compare __comp)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::__move_merge(__first, __first + __step_size,
           __first + __step_size,
           __first + __two_step,
           __result, __comp);
   __first += __two_step;
 }
      __step_size = std::min(_Distance(__last - __first), __step_size);

      std::__move_merge(__first, __first + __step_size,
   __first + __step_size, __last, __result, __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
   
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size, _Compare __comp)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size, __comp);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last, __comp);
    }

  enum { _S_chunk_size = 7 };

  template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
        _Pointer __buffer, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size, __comp);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer,
     __step_size, __comp);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first,
     __step_size, __comp);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      _Pointer __buffer, _Compare __comp)
    {
      std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
      std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);

      std::__merge_adaptive(__first, __middle, __last,
       __middle - __first, __last - __middle,
       __buffer, __comp);
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance, typename _Compare>
    void
    __stable_sort_adaptive_resize(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Pointer __buffer, _Distance __buffer_size,
      _Compare __comp)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive_resize(__first, __middle, __buffer,
          __buffer_size, __comp);
   std::__stable_sort_adaptive_resize(__middle, __last, __buffer,
          __buffer_size, __comp);
   std::__merge_adaptive_resize(__first, __middle, __last,
           _Distance(__middle - __first),
           _Distance(__last - __middle),
           __buffer, __buffer_size,
           __comp);
 }
      else
 std::__stable_sort_adaptive(__first, __middle, __last,
        __buffer, __comp);
    }


  template<typename _RandomAccessIterator, typename _Compare>
   
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last, __comp);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle, __comp);
      std::__inplace_stable_sort(__middle, __last, __comp);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle,
      __comp);
    }
# 2779 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
   
    bool
    __includes(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     return false;
   if (!__comp(__first1, __first2))
     ++__first2;
   ++__first1;
 }

      return __first2 == __last2;
    }
# 2817 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    [[__nodiscard__]]
    inline bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {

     
     
     


     


      ;
      ;
      ;
      ;

      return std::__includes(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 2862 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    [[__nodiscard__]]
    inline bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _Compare __comp)
    {

     
     
     


     


      ;
      ;
      ;
      ;

      return std::__includes(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 2898 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
   
    bool
    __next_permutation(_BidirectionalIterator __first,
         _BidirectionalIterator __last, _Compare __comp)
    {
      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(__i, __ii))
     {
       _BidirectionalIterator __j = __last;
       while (!__comp(__i, --__j))
  {}
       std::iter_swap(__i, __j);
       std::__reverse(__ii, __last,
        std::__iterator_category(__first));
       return true;
     }
   if (__i == __first)
     {
       std::__reverse(__first, __last,
        std::__iterator_category(__first));
       return false;
     }
 }
    }
# 2948 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
   
    inline bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {

     

     

      ;
      ;

      return std::__next_permutation
 (__first, __last, __gnu_cxx::__ops::__iter_less_iter());
    }
# 2981 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
   
    inline bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {

     

     


      ;
      ;

      return std::__next_permutation
 (__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _BidirectionalIterator, typename _Compare>
   
    bool
    __prev_permutation(_BidirectionalIterator __first,
         _BidirectionalIterator __last, _Compare __comp)
    {
      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(__ii, __i))
     {
       _BidirectionalIterator __j = __last;
       while (!__comp(--__j, __i))
  {}
       std::iter_swap(__i, __j);
       std::__reverse(__ii, __last,
        std::__iterator_category(__first));
       return true;
     }
   if (__i == __first)
     {
       std::__reverse(__first, __last,
        std::__iterator_category(__first));
       return false;
     }
 }
    }
# 3051 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
   
    inline bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {

     

     

      ;
      ;

      return std::__prev_permutation(__first, __last,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 3084 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
   
    inline bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {

     

     


      ;
      ;

      return std::__prev_permutation(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }




  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
   
    _OutputIterator
    __replace_copy_if(_InputIterator __first, _InputIterator __last,
        _OutputIterator __result,
        _Predicate __pred, const _Tp& __new_value)
    {
      for (; __first != __last; ++__first, (void)++__result)
 if (__pred(__first))
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 3136 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
   
    inline _OutputIterator
    replace_copy(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result,
   const _Tp& __old_value, const _Tp& __new_value)
    {

     
     

     

      ;

      return std::__replace_copy_if(__first, __last, __result,
   __gnu_cxx::__ops::__iter_equals_val(__old_value),
           __new_value);
    }
# 3171 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
   
    inline _OutputIterator
    replace_copy_if(_InputIterator __first, _InputIterator __last,
      _OutputIterator __result,
      _Predicate __pred, const _Tp& __new_value)
    {

     
     

     

      ;

      return std::__replace_copy_if(__first, __last, __result,
    __gnu_cxx::__ops::__pred_iter(__pred),
           __new_value);
    }
# 3200 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    [[__nodiscard__]]
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last)
    { return std::is_sorted_until(__first, __last) == __last; }
# 3215 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    [[__nodiscard__]]
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last,
       _Compare __comp)
    { return std::is_sorted_until(__first, __last, __comp) == __last; }

  template<typename _ForwardIterator, typename _Compare>
   
    _ForwardIterator
    __is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
        _Compare __comp)
    {
      if (__first == __last)
 return __last;

      _ForwardIterator __next = __first;
      for (++__next; __next != __last; __first = __next, (void)++__next)
 if (__comp(__next, __first))
   return __next;
      return __next;
    }
# 3246 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    [[__nodiscard__]]
    inline _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;
      ;

      return std::__is_sorted_until(__first, __last,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 3271 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    [[__nodiscard__]]
    inline _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
      _Compare __comp)
    {

     
     


      ;
      ;

      return std::__is_sorted_until(__first, __last,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 3297 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _Tp>
    [[__nodiscard__]] constexpr
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b)
    {

     

      return __b < __a ? pair<const _Tp&, const _Tp&>(__b, __a)
         : pair<const _Tp&, const _Tp&>(__a, __b);
    }
# 3318 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _Tp, typename _Compare>
    [[__nodiscard__]] constexpr
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {
      return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a)
         : pair<const _Tp&, const _Tp&>(__a, __b);
    }

  template<typename _ForwardIterator, typename _Compare>
    constexpr
    pair<_ForwardIterator, _ForwardIterator>
    __minmax_element(_ForwardIterator __first, _ForwardIterator __last,
       _Compare __comp)
    {
      _ForwardIterator __next = __first;
      if (__first == __last
   || ++__next == __last)
 return std::make_pair(__first, __first);

      _ForwardIterator __min{}, __max{};
      if (__comp(__next, __first))
 {
   __min = __next;
   __max = __first;
 }
      else
 {
   __min = __first;
   __max = __next;
 }

      __first = __next;
      ++__first;

      while (__first != __last)
 {
   __next = __first;
   if (++__next == __last)
     {
       if (__comp(__first, __min))
  __min = __first;
       else if (!__comp(__first, __max))
  __max = __first;
       break;
     }

   if (__comp(__next, __first))
     {
       if (__comp(__next, __min))
  __min = __next;
       if (!__comp(__first, __max))
  __max = __first;
     }
   else
     {
       if (__comp(__first, __min))
  __min = __first;
       if (!__comp(__next, __max))
  __max = __next;
     }

   __first = __next;
   ++__first;
 }

      return std::make_pair(__min, __max);
    }
# 3398 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    [[__nodiscard__]] constexpr
    inline pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;
      ;

      return std::__minmax_element(__first, __last,
       __gnu_cxx::__ops::__iter_less_iter());
    }
# 3426 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    [[__nodiscard__]] constexpr
    inline pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last,
     _Compare __comp)
    {

     
     


      ;
      ;

      return std::__minmax_element(__first, __last,
       __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _Tp>
    [[__nodiscard__]] constexpr
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l)
    {
      ;
      pair<const _Tp*, const _Tp*> __p =
 std::__minmax_element(__l.begin(), __l.end(),
         __gnu_cxx::__ops::__iter_less_iter());
      return std::make_pair(*__p.first, *__p.second);
    }

  template<typename _Tp, typename _Compare>
    [[__nodiscard__]] constexpr
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l, _Compare __comp)
    {
      ;
      pair<const _Tp*, const _Tp*> __p =
 std::__minmax_element(__l.begin(), __l.end(),
         __gnu_cxx::__ops::__iter_comp_iter(__comp));
      return std::make_pair(*__p.first, *__p.second);
    }
# 3482 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    [[__nodiscard__]]
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {

     
     
     


      ;

      return std::__is_permutation(__first1, __last1, __first2,
       __gnu_cxx::__ops::__iter_comp_iter(__pred));
    }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
   
    bool
    __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
       _ForwardIterator2 __first2, _ForwardIterator2 __last2,
       _BinaryPredicate __pred)
    {
      using _Cat1
 = typename iterator_traits<_ForwardIterator1>::iterator_category;
      using _Cat2
 = typename iterator_traits<_ForwardIterator2>::iterator_category;
      using _It1_is_RA = is_same<_Cat1, random_access_iterator_tag>;
      using _It2_is_RA = is_same<_Cat2, random_access_iterator_tag>;
      constexpr bool __ra_iters = __and_<_It1_is_RA, _It2_is_RA>::value;
      if constexpr (__ra_iters)
 {
   if ((__last1 - __first1) != (__last2 - __first2))
     return false;
 }



      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!__pred(__first1, __first2))
   break;

      if constexpr (__ra_iters)
 {
   if (__first1 == __last1)
     return true;
 }
      else
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 == 0 && __d2 == 0)
     return true;
   if (__d1 != __d2)
     return false;
 }

      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   if (__scan != std::__find_if(__first1, __scan,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
     continue;

   auto __matches = std::__count_if(__first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
   if (0 == __matches
       || std::__count_if(__scan, __last1,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
       != __matches)
     return false;
 }
      return true;
    }
#pragma GCC diagnostic pop
# 3578 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    [[__nodiscard__]]
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {
      ;
      ;

      return
 std::__is_permutation(__first1, __last1, __first2, __last2,
         __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 3606 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    [[__nodiscard__]]
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
     _BinaryPredicate __pred)
    {
      ;
      ;

      return std::__is_permutation(__first1, __last1, __first2, __last2,
       __gnu_cxx::__ops::__iter_comp_iter(__pred));
    }
# 3634 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _Tp>
    [[nodiscard]] constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
    {
      do { if (std::__is_constant_evaluated() && !bool(!(__hi < __lo))) std::__glibcxx_assert_fail(); } while (false);
      return std::min(std::max(__val, __lo), __hi);
    }
# 3654 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _Tp, typename _Compare>
    [[nodiscard]] constexpr const _Tp&
    clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi, _Compare __comp)
    {
      do { if (std::__is_constant_evaluated() && !bool(!__comp(__hi, __lo))) std::__glibcxx_assert_fail(); } while (false);
      return std::min(std::max(__val, __lo, __comp), __hi, __comp);
    }
# 3684 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _IntType, typename _UniformRandomBitGenerator>
    pair<_IntType, _IntType>
    __gen_two_uniform_ints(_IntType __b0, _IntType __b1,
      _UniformRandomBitGenerator&& __g)
    {
      _IntType __x
 = uniform_int_distribution<_IntType>{0, (__b0 * __b1) - 1}(__g);
      return std::make_pair(__x / __b1, __x % __b1);
    }
# 3706 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator,
    typename _UniformRandomNumberGenerator>
    void
    shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _UniformRandomNumberGenerator&& __g)
    {

     

      ;

      if (__first == __last)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
      typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
      typedef typename __distr_type::param_type __p_type;

      typedef typename remove_reference<_UniformRandomNumberGenerator>::type
 _Gen;
      typedef typename common_type<typename _Gen::result_type, __ud_type>::type
 __uc_type;

      const __uc_type __urngrange = __g.max() - __g.min();
      const __uc_type __urange = __uc_type(__last - __first);

      if (__urngrange / __urange >= __urange)

      {
 _RandomAccessIterator __i = __first + 1;





 if ((__urange % 2) == 0)
 {
   __distr_type __d{0, 1};
   std::iter_swap(__i++, __first + __d(__g));
 }





 while (__i != __last)
 {
   const __uc_type __swap_range = __uc_type(__i - __first) + 1;

   const pair<__uc_type, __uc_type> __pospos =
     __gen_two_uniform_ints(__swap_range, __swap_range + 1, __g);

   std::iter_swap(__i++, __first + __pospos.first);
   std::iter_swap(__i++, __first + __pospos.second);
 }

 return;
      }

      __distr_type __d;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
    }



# 3789 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Function>
   
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
    {

     
      ;
      for (; __first != __last; ++__first)
 __f(*__first);
      return __f;
    }
# 3815 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Size, typename _Function>
   
    _InputIterator
    for_each_n(_InputIterator __first, _Size __n, _Function __f)
    {
      auto __n2 = std::__size_to_integer(__n);
      using _Cat = typename iterator_traits<_InputIterator>::iterator_category;
      if constexpr (is_base_of_v<random_access_iterator_tag, _Cat>)
 {
   if (__n2 <= 0)
     return __first;
   auto __last = __first + __n2;
   std::for_each(__first, __last, std::move(__f));
   return __last;
 }
      else
 {
   while (__n2-->0)
     {
       __f(*__first);
       ++__first;
     }
   return __first;
 }
    }
# 3851 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    [[__nodiscard__]]
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last, const _Tp& __val)
    {

     
     

      ;


      using _ValT = typename iterator_traits<_InputIterator>::value_type;
      if constexpr (__can_use_memchr_for_find<_ValT, _Tp>)
 if constexpr (is_pointer_v<decltype(std::__niter_base(__first))>



       )
   {




     if (!(static_cast<_ValT>(__val) == __val))
       return __last;
     else if (!__is_constant_evaluated())
       {
  const int __ival = static_cast<int>(__val);
  if (auto __n = __last - __first; __n > 0)
    {



      const void* __p0 = std::__niter_base(__first);

      if (auto __p1 = __builtin_memchr(__p0, __ival, __n))
        return __first + ((const char*)__p1 - (const char*)__p0);
    }
  return __last;
       }
   }


      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__iter_equals_val(__val));
    }
# 3909 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    [[__nodiscard__]]
    inline _InputIterator
    find_if(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {

     
     

      ;

      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 3941 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    [[__nodiscard__]]
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2)
    {

     
     
     


      ;
      ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (*__first1 == *__iter)
     return __first1;
      return __last1;
    }
# 3982 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    [[__nodiscard__]]
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2,
    _BinaryPredicate __comp)
    {

     
     
     


      ;
      ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (__comp(*__first1, *__iter))
     return __first1;
      return __last1;
    }
# 4015 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    [[__nodiscard__]]
    inline _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;

      return std::__adjacent_find(__first, __last,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 4041 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    [[__nodiscard__]]
    inline _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {

     
     


      ;

      return std::__adjacent_find(__first, __last,
   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }
# 4067 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    [[__nodiscard__]]
    inline typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
    {

     
     

      ;

      return std::__count_if(__first, __last,
        __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 4091 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    [[__nodiscard__]]
    inline typename iterator_traits<_InputIterator>::difference_type
    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {

     
     

      ;

      return std::__count_if(__first, __last,
        __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 4132 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    [[__nodiscard__]]
    inline _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {

     
     
     


      ;
      ;

      return std::__search(__first1, __last1, __first2, __last2,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 4166 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    [[__nodiscard__]]
    inline _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val)
    {

     
     

      ;

      return std::__search_n(__first, __last, __count,
        __gnu_cxx::__ops::__iter_equals_val(__val));
    }
# 4200 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
    typename _BinaryPredicate>
    [[__nodiscard__]]
    inline _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val,
      _BinaryPredicate __binary_pred)
    {

     
     

      ;

      return std::__search_n(__first, __last, __count,
  __gnu_cxx::__ops::__iter_comp_val(__binary_pred, __val));
    }
# 4226 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Searcher>
    [[__nodiscard__]]
    inline _ForwardIterator
    search(_ForwardIterator __first, _ForwardIterator __last,
    const _Searcher& __searcher)
    { return __searcher(__first, __last).first; }
# 4250 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _UnaryOperation>
   
    _OutputIterator
    transform(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _UnaryOperation __unary_op)
    {

     
     


      ;

      for (; __first != __last; ++__first, (void)++__result)
 *__result = __unary_op(*__first);
      return __result;
    }
# 4288 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _BinaryOperation>
   
    _OutputIterator
    transform(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _OutputIterator __result,
       _BinaryOperation __binary_op)
    {

     
     
     


      ;

      for (; __first1 != __last1; ++__first1, (void)++__first2, ++__result)
 *__result = __binary_op(*__first1, *__first2);
      return __result;
    }
# 4322 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
   
    void
    replace(_ForwardIterator __first, _ForwardIterator __last,
     const _Tp& __old_value, const _Tp& __new_value)
    {

     

     

     

      ;

      for (; __first != __last; ++__first)
 if (*__first == __old_value)
   *__first = __new_value;
    }
# 4355 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate, typename _Tp>
   
    void
    replace_if(_ForwardIterator __first, _ForwardIterator __last,
        _Predicate __pred, const _Tp& __new_value)
    {

     

     

     

      ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   *__first = __new_value;
    }
# 4387 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Generator>
   
    void
    generate(_ForwardIterator __first, _ForwardIterator __last,
      _Generator __gen)
    {

     
     

      ;

      for (; __first != __last; ++__first)
 *__first = __gen();
    }
# 4420 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _OutputIterator, typename _Size, typename _Generator>
   
    _OutputIterator
    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)
    {

     



      typedef __decltype(std::__size_to_integer(__n)) _IntSize;
      for (_IntSize __niter = std::__size_to_integer(__n);
    __niter > 0; --__niter, (void) ++__first)
 *__first = __gen();
      return __first;
    }
# 4455 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator>
   
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {

     
     

     

      ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
    __gnu_cxx::__ops::__iter_equal_to_iter(),
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 4495 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
   
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result,
  _BinaryPredicate __binary_pred)
    {

     
     

      ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred),
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 4534 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    __attribute__ ((__deprecated__ ("use '" "std::shuffle" "' instead")))
    inline void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

      ;

      if (__first == __last)
 return;
# 4569 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {

   _RandomAccessIterator __j = __first
     + (std::rand() % ((__i - __first) + 1));
   if (__i != __j)
     std::iter_swap(__i, __j);
 }
    }
# 4597 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _RandomNumberGenerator>
    __attribute__ ((__deprecated__ ("use '" "std::shuffle" "' instead")))
    void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,

     _RandomNumberGenerator&& __rand)



    {

     

      ;

      if (__first == __last)
 return;
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   _RandomAccessIterator __j = __first + __rand((__i - __first) + 1);
   if (__i != __j)
     std::iter_swap(__i, __j);
 }
    }
# 4639 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
   
    inline _ForwardIterator
    partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      return std::__partition(__first, __last, __pred,
         std::__iterator_category(__first));
    }
# 4674 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last)
    {

     

     

      ;
      ;
      ;

      std::__partial_sort(__first, __middle, __last,
     __gnu_cxx::__ops::__iter_less_iter());
    }
# 4713 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last,
   _Compare __comp)
    {

     

     


      ;
      ;
      ;

      std::__partial_sort(__first, __middle, __last,
     __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 4750 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last)
    {

     

     

      ;
      ;
      ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 4790 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last, _Compare __comp)
    {

     

     


      ;
      ;
      ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 4828 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
    }
# 4859 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {

     

     


      ;
      ;

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
   
    _OutputIterator
    __merge(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 4922 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
   
    inline _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {

     
     
     

     

     


      ;
      ;
      ;
      ;

      return std::__merge(__first1, __last1,
         __first2, __last2, __result,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 4973 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
   
    inline _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {

     
     
     

     

     


      ;
      ;
      ;
      ;

      return std::__merge(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    __stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      if (__first == __last)
 return;
# 5022 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
      typedef _Temporary_buffer<_RandomAccessIterator, _ValueType> _TmpBuf;


      _TmpBuf __buf(__first, (__last - __first + 1) / 2);

      if (__builtin_expect(__buf.requested_size() == __buf.size(), true))
 std::__stable_sort_adaptive(__first,
        __first + _DistanceType(__buf.size()),
        __last, __buf.begin(), __comp);
      else if (__builtin_expect(__buf.begin() == 0, false))
 std::__inplace_stable_sort(__first, __last, __comp);
      else
 std::__stable_sort_adaptive_resize(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()), __comp);



    }
# 5058 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
   
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;

      std::__stable_sort(__first, __last,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 5093 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
   
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {

     

     


      ;
      ;

      std::__stable_sort(__first, __last,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
   
    _OutputIterator
    __set_union(_InputIterator1 __first1, _InputIterator1 __last1,
  _InputIterator2 __first2, _InputIterator2 __last2,
  _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first1, __first2))
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (__comp(__first2, __first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 5164 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
   
    inline _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {

     
     
     

     

     


     


      ;
      ;
      ;
      ;

      return std::__set_union(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5215 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
   
    inline _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {

     
     
     

     

     


     


      ;
      ;
      ;
      ;

      return std::__set_union(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
   
    _OutputIterator
    __set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
         _InputIterator2 __first2, _InputIterator2 __last2,
         _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   ++__first1;
 else if (__comp(__first2, __first1))
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5288 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
   
    inline _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {

     
     
     

     


     


      ;
      ;
      ;
      ;

      return std::__set_intersection(__first1, __last1,
         __first2, __last2, __result,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 5338 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
   
    inline _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {

     
     
     

     


     


      ;
      ;
      ;
      ;

      return std::__set_intersection(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
   
    _OutputIterator
    __set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(__first2, __first1))
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 5413 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
   
    inline _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {

     
     
     

     


     


      ;
      ;
      ;
      ;

      return std::__set_difference(__first1, __last1,
       __first2, __last2, __result,
       __gnu_cxx::__ops::__iter_less_iter());
    }
# 5465 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
   
    inline _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {

     
     
     

     


     


      ;
      ;
      ;
      ;

      return std::__set_difference(__first1, __last1,
       __first2, __last2, __result,
       __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
   
    _OutputIterator
    __set_symmetric_difference(_InputIterator1 __first1,
          _InputIterator1 __last1,
          _InputIterator2 __first2,
          _InputIterator2 __last2,
          _OutputIterator __result,
          _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(__first2, __first1))
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 5546 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
   
    inline _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result)
    {

     
     
     

     

     


     


      ;
      ;
      ;
      ;

      return std::__set_symmetric_difference(__first1, __last1,
     __first2, __last2, __result,
     __gnu_cxx::__ops::__iter_less_iter());
    }
# 5598 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
   
    inline _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result,
        _Compare __comp)
    {

     
     
     

     

     


     


      ;
      ;
      ;
      ;

      return std::__set_symmetric_difference(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Compare>
    constexpr
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
    _Compare __comp)
    {
      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(__first, __result))
   __result = __first;
      return __result;
    }
# 5652 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    [[__nodiscard__]] constexpr
    _ForwardIterator
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;
      ;

      return std::__min_element(__first, __last,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5677 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    [[__nodiscard__]] constexpr
    inline _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {

     
     


      ;
      ;

      return std::__min_element(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Compare>
    constexpr
    _ForwardIterator
    __max_element(_ForwardIterator __first, _ForwardIterator __last,
    _Compare __comp)
    {
      if (__first == __last) return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(__result, __first))
   __result = __first;
      return __result;
    }
# 5716 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    [[__nodiscard__]] constexpr
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;
      ;

      return std::__max_element(__first, __last,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5741 "/usr/include/c++/15.1.1/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    [[__nodiscard__]] constexpr
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {

     
     


      ;
      ;

      return std::__max_element(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }



  template<typename _Tp>
    constexpr
    inline _Tp
    min(initializer_list<_Tp> __l)
    {
      ;
      return *std::__min_element(__l.begin(), __l.end(),
   __gnu_cxx::__ops::__iter_less_iter());
    }

  template<typename _Tp, typename _Compare>
    constexpr
    inline _Tp
    min(initializer_list<_Tp> __l, _Compare __comp)
    {
      ;
      return *std::__min_element(__l.begin(), __l.end(),
   __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _Tp>
    constexpr
    inline _Tp
    max(initializer_list<_Tp> __l)
    {
      ;
      return *std::__max_element(__l.begin(), __l.end(),
   __gnu_cxx::__ops::__iter_less_iter());
    }

  template<typename _Tp, typename _Compare>
    constexpr
    inline _Tp
    max(initializer_list<_Tp> __l, _Compare __comp)
    {
      ;
      return *std::__max_element(__l.begin(), __l.end(),
   __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }




  template<typename _InputIterator, typename _RandomAccessIterator,
           typename _Size, typename _UniformRandomBitGenerator>
    _RandomAccessIterator
    __sample(_InputIterator __first, _InputIterator __last, input_iterator_tag,
      _RandomAccessIterator __out, random_access_iterator_tag,
      _Size __n, _UniformRandomBitGenerator&& __g)
    {
      using __distrib_type = uniform_int_distribution<_Size>;
      using __param_type = typename __distrib_type::param_type;
      __distrib_type __d{};
      _Size __sample_sz = 0;
      while (__first != __last && __sample_sz != __n)
 {
   __out[__sample_sz++] = *__first;
   ++__first;
 }
      for (auto __pop_sz = __sample_sz; __first != __last;
   ++__first, (void) ++__pop_sz)
 {
   const auto __k = __d(__g, __param_type{0, __pop_sz});
   if (__k < __n)
     __out[__k] = *__first;
 }
      return __out + __sample_sz;
    }


  template<typename _ForwardIterator, typename _OutputIterator, typename _Cat,
           typename _Size, typename _UniformRandomBitGenerator>
    _OutputIterator
    __sample(_ForwardIterator __first, _ForwardIterator __last,
      forward_iterator_tag,
      _OutputIterator __out, _Cat,
      _Size __n, _UniformRandomBitGenerator&& __g)
    {
      using __distrib_type = uniform_int_distribution<_Size>;
      using __param_type = typename __distrib_type::param_type;
      using _USize = make_unsigned_t<_Size>;
      using _Gen = remove_reference_t<_UniformRandomBitGenerator>;
      using __uc_type = common_type_t<typename _Gen::result_type, _USize>;

      if (__first == __last)
 return __out;

      __distrib_type __d{};
      _Size __unsampled_sz = std::distance(__first, __last);
      __n = std::min(__n, __unsampled_sz);




      const __uc_type __urngrange = __g.max() - __g.min();
      if (__urngrange / __uc_type(__unsampled_sz) >= __uc_type(__unsampled_sz))


        {
   while (__n != 0 && __unsampled_sz >= 2)
     {
       const pair<_Size, _Size> __p =
  __gen_two_uniform_ints(__unsampled_sz, __unsampled_sz - 1, __g);

       --__unsampled_sz;
       if (__p.first < __n)
  {
    *__out++ = *__first;
    --__n;
  }

       ++__first;

       if (__n == 0) break;

       --__unsampled_sz;
       if (__p.second < __n)
  {
    *__out++ = *__first;
    --__n;
  }

       ++__first;
     }
        }



      for (; __n != 0; ++__first)
 if (__d(__g, __param_type{0, --__unsampled_sz}) < __n)
   {
     *__out++ = *__first;
     --__n;
   }
      return __out;
    }




  template<typename _PopulationIterator, typename _SampleIterator,
           typename _Distance, typename _UniformRandomBitGenerator>
    _SampleIterator
    sample(_PopulationIterator __first, _PopulationIterator __last,
    _SampleIterator __out, _Distance __n,
    _UniformRandomBitGenerator&& __g)
    {
      using __pop_cat = typename
 std::iterator_traits<_PopulationIterator>::iterator_category;
      using __samp_cat = typename
 std::iterator_traits<_SampleIterator>::iterator_category;

      static_assert(
   __or_<is_convertible<__pop_cat, forward_iterator_tag>,
  is_convertible<__samp_cat, random_access_iterator_tag>>::value,
   "output range must use a RandomAccessIterator when input range"
   " does not meet the ForwardIterator requirements");

      static_assert(is_integral<_Distance>::value,
      "sample size must be an integer type");

      typename iterator_traits<_PopulationIterator>::difference_type __d = __n;
      return std::
 __sample(__first, __last, __pop_cat{}, __out, __samp_cat{}, __d,
   std::forward<_UniformRandomBitGenerator>(__g));
    }




}

#pragma GCC diagnostic pop
# 64 "/usr/include/c++/15.1.1/algorithm" 2 3




#define __glibcxx_want_algorithm_default_value_type 
#define __glibcxx_want_clamp 
#define __glibcxx_want_constexpr_algorithms 
#define __glibcxx_want_freestanding_algorithm 
#define __glibcxx_want_parallel_algorithm 
#define __glibcxx_want_ranges 
#define __glibcxx_want_ranges_contains 
#define __glibcxx_want_ranges_find_last 
#define __glibcxx_want_ranges_fold 
#define __glibcxx_want_robust_nonmodifying_seq_ops 
#define __glibcxx_want_sample 
#define __glibcxx_want_shift 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 81 "/usr/include/c++/15.1.1/algorithm" 2 3
# 89 "/usr/include/c++/15.1.1/algorithm" 3
# 1 "/usr/include/c++/15.1.1/pstl/glue_algorithm_defs.h" 1 3
# 11 "/usr/include/c++/15.1.1/pstl/glue_algorithm_defs.h" 3
#define _PSTL_GLUE_ALGORITHM_DEFS_H 




# 1 "/usr/include/c++/15.1.1/pstl/execution_defs.h" 1 3
# 11 "/usr/include/c++/15.1.1/pstl/execution_defs.h" 3
#define _PSTL_EXECUTION_POLICY_DEFS_H 



namespace __pstl
{
namespace execution
{
inline namespace v1
{


class sequenced_policy
{
};


class parallel_policy
{
};


class parallel_unsequenced_policy
{
};

class unsequenced_policy
{
};


inline constexpr sequenced_policy seq{};
inline constexpr parallel_policy par{};
inline constexpr parallel_unsequenced_policy par_unseq{};
inline constexpr unsequenced_policy unseq{};


template <class _Tp>
struct is_execution_policy : std::false_type
{
};

template <>
struct is_execution_policy<__pstl::execution::sequenced_policy> : std::true_type
{
};
template <>
struct is_execution_policy<__pstl::execution::parallel_policy> : std::true_type
{
};
template <>
struct is_execution_policy<__pstl::execution::parallel_unsequenced_policy> : std::true_type
{
};
template <>
struct is_execution_policy<__pstl::execution::unsequenced_policy> : std::true_type
{
};


template <class _Tp>
constexpr bool is_execution_policy_v = __pstl::execution::is_execution_policy<_Tp>::value;


}
}

namespace __internal
{
template <class _ExecPolicy, class _Tp>

using __enable_if_execution_policy =
    typename std::enable_if<__pstl::execution::is_execution_policy<std::__remove_cvref_t<_ExecPolicy>>::value,
                            _Tp>::type;






template <class _IsVector>
struct __serial_tag;
template <class _IsVector>
struct __parallel_tag;

}

}
# 17 "/usr/include/c++/15.1.1/pstl/glue_algorithm_defs.h" 2 3

namespace std
{



template <class _ExecutionPolicy, class _ForwardIterator, class _Predicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool>
any_of(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred);



template <class _ExecutionPolicy, class _ForwardIterator, class _Predicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool>
all_of(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred);



template <class _ExecutionPolicy, class _ForwardIterator, class _Predicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool>
none_of(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred);



template <class _ExecutionPolicy, class _ForwardIterator, class _Function>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void>
for_each(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Function __f);

template <class _ExecutionPolicy, class _ForwardIterator, class _Size, class _Function>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
for_each_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Size __n, _Function __f);



template <class _ExecutionPolicy, class _ForwardIterator, class _Predicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
find_if(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred);

template <class _ExecutionPolicy, class _ForwardIterator, class _Predicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
find_if_not(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred);

template <class _ExecutionPolicy, class _ForwardIterator, class _Tp >
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
find(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp& __value);



template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator1>
find_end(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first,
         _ForwardIterator2 __s_last, _BinaryPredicate __pred);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator1>
find_end(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first,
         _ForwardIterator2 __s_last);



template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator1>
find_first_of(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _ForwardIterator1 __last,
              _ForwardIterator2 __s_first, _ForwardIterator2 __s_last, _BinaryPredicate __pred);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator1>
find_first_of(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _ForwardIterator1 __last,
              _ForwardIterator2 __s_first, _ForwardIterator2 __s_last);



template <class _ExecutionPolicy, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
adjacent_find(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last);

template <class _ExecutionPolicy, class _ForwardIterator, class _BinaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
adjacent_find(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred);



template <class _ExecutionPolicy, class _ForwardIterator, class _Tp >
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,
                                                 typename iterator_traits<_ForwardIterator>::difference_type>
count(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp& __value);

template <class _ExecutionPolicy, class _ForwardIterator, class _Predicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,
                                                 typename iterator_traits<_ForwardIterator>::difference_type>
count_if(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred);



template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator1>
search(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first,
       _ForwardIterator2 __s_last, _BinaryPredicate __pred);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator1>
search(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __s_first,
       _ForwardIterator2 __s_last);

template <class _ExecutionPolicy, class _ForwardIterator, class _Size, class _Tp , class _BinaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
search_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Size __count,
         const _Tp& __value, _BinaryPredicate __pred);

template <class _ExecutionPolicy, class _ForwardIterator, class _Size, class _Tp >
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
search_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Size __count,
         const _Tp& __value);



template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2>
copy(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result);

template <class _ExecutionPolicy, class _ForwardIterator1, class _Size, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2>
copy_n(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _Size __n, _ForwardIterator2 __result);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Predicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2>
copy_if(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 result,
        _Predicate __pred);



template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2>
swap_ranges(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1,
            _ForwardIterator2 __first2);



template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _UnaryOperation>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2>
transform(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result,
          _UnaryOperation __op);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _ForwardIterator,
          class _BinaryOperation>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
transform(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2,
          _ForwardIterator __result, _BinaryOperation __op);



template <class _ExecutionPolicy, class _ForwardIterator, class _UnaryPredicate, class _Tp >
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void>
replace_if(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred,
           const _Tp& __new_value);

template <class _ExecutionPolicy, class _ForwardIterator, class _Tp >
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void>
replace(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp& __old_value,
        const _Tp& __new_value);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _UnaryPredicate, class _Tp >
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2>
replace_copy_if(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _ForwardIterator1 __last,
                _ForwardIterator2 __result, _UnaryPredicate __pred, const _Tp& __new_value);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Tp>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2>
replace_copy(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result,
             const _Tp& __old_value, const _Tp& __new_value);



template <class _ExecutionPolicy, class _ForwardIterator, class _Tp >
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void>
fill(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp& __value);

template <class _ExecutionPolicy, class _ForwardIterator, class _Size, class _Tp >
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
fill_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Size __count, const _Tp& __value);


template <class _ExecutionPolicy, class _ForwardIterator, class _Generator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void>
generate(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Generator __g);

template <class _ExecutionPolicy, class _ForwardIterator, class _Size, class _Generator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
generate_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Size count, _Generator __g);



template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Predicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2>
remove_copy_if(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _ForwardIterator1 __last,
               _ForwardIterator2 __result, _Predicate __pred);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Tp >
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2>
remove_copy(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result,
            const _Tp& __value);

template <class _ExecutionPolicy, class _ForwardIterator, class _UnaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
remove_if(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred);

template <class _ExecutionPolicy, class _ForwardIterator, class _Tp >
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
remove(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp& __value);



template <class _ExecutionPolicy, class _ForwardIterator, class _BinaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
unique(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred);

template <class _ExecutionPolicy, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
unique(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2>
unique_copy(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result,
            _BinaryPredicate __pred);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2>
unique_copy(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result);



template <class _ExecutionPolicy, class _BidirectionalIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void>
reverse(_ExecutionPolicy&& __exec, _BidirectionalIterator __first, _BidirectionalIterator __last);

template <class _ExecutionPolicy, class _BidirectionalIterator, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
reverse_copy(_ExecutionPolicy&& __exec, _BidirectionalIterator __first, _BidirectionalIterator __last,
             _ForwardIterator __d_first);



template <class _ExecutionPolicy, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
rotate(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2>
rotate_copy(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _ForwardIterator1 __middle, _ForwardIterator1 __last,
            _ForwardIterator2 __result);



template <class _ExecutionPolicy, class _ForwardIterator, class _UnaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool>
is_partitioned(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred);

template <class _ExecutionPolicy, class _ForwardIterator, class _UnaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
partition(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred);

template <class _ExecutionPolicy, class _BidirectionalIterator, class _UnaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _BidirectionalIterator>
stable_partition(_ExecutionPolicy&& __exec, _BidirectionalIterator __first, _BidirectionalIterator __last,
                 _UnaryPredicate __pred);

template <class _ExecutionPolicy, class _ForwardIterator, class _ForwardIterator1, class _ForwardIterator2,
          class _UnaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, std::pair<_ForwardIterator1, _ForwardIterator2>>
partition_copy(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last,
               _ForwardIterator1 __out_true, _ForwardIterator2 __out_false, _UnaryPredicate __pred);



template <class _ExecutionPolicy, class _RandomAccessIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void>
sort(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp);

template <class _ExecutionPolicy, class _RandomAccessIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void>
sort(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _RandomAccessIterator __last);



template <class _ExecutionPolicy, class _RandomAccessIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void>
stable_sort(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp);

template <class _ExecutionPolicy, class _RandomAccessIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void>
stable_sort(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _RandomAccessIterator __last);



template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, std::pair<_ForwardIterator1, _ForwardIterator2>>
mismatch(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2,
         _ForwardIterator2 __last2, _BinaryPredicate __pred);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, std::pair<_ForwardIterator1, _ForwardIterator2>>
mismatch(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2,
         _BinaryPredicate __pred);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, std::pair<_ForwardIterator1, _ForwardIterator2>>
mismatch(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2,
         _ForwardIterator2 __last2);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, std::pair<_ForwardIterator1, _ForwardIterator2>>
mismatch(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2);



template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool>
equal(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2,
      _BinaryPredicate __p);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool>
equal(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool>
equal(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2,
      _ForwardIterator2 __last2, _BinaryPredicate __p);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool>
equal(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2,
      _ForwardIterator2 __last2);


template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2>
move(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __d_first);



template <class _ExecutionPolicy, class _RandomAccessIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void>
partial_sort(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _RandomAccessIterator __middle,
             _RandomAccessIterator __last, _Compare __comp);

template <class _ExecutionPolicy, class _RandomAccessIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void>
partial_sort(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _RandomAccessIterator __middle,
             _RandomAccessIterator __last);



template <class _ExecutionPolicy, class _ForwardIterator, class _RandomAccessIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _RandomAccessIterator>
partial_sort_copy(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last,
                  _RandomAccessIterator __d_first, _RandomAccessIterator __d_last, _Compare __comp);

template <class _ExecutionPolicy, class _ForwardIterator, class _RandomAccessIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _RandomAccessIterator>
partial_sort_copy(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last,
                  _RandomAccessIterator __d_first, _RandomAccessIterator __d_last);


template <class _ExecutionPolicy, class _ForwardIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
is_sorted_until(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp);

template <class _ExecutionPolicy, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
is_sorted_until(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last);

template <class _ExecutionPolicy, class _ForwardIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool>
is_sorted(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp);

template <class _ExecutionPolicy, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool>
is_sorted(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last);



template <class _ExecutionPolicy, class _RandomAccessIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void>
nth_element(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _RandomAccessIterator __nth,
            _RandomAccessIterator __last, _Compare __comp);

template <class _ExecutionPolicy, class _RandomAccessIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void>
nth_element(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _RandomAccessIterator __nth,
            _RandomAccessIterator __last);


template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _ForwardIterator,
          class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
merge(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2,
      _ForwardIterator2 __last2, _ForwardIterator __d_first, _Compare __comp);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
merge(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2,
      _ForwardIterator2 __last2, _ForwardIterator __d_first);

template <class _ExecutionPolicy, class _BidirectionalIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void>
inplace_merge(_ExecutionPolicy&& __exec, _BidirectionalIterator __first, _BidirectionalIterator __middle,
              _BidirectionalIterator __last, _Compare __comp);

template <class _ExecutionPolicy, class _BidirectionalIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void>
inplace_merge(_ExecutionPolicy&& __exec, _BidirectionalIterator __first, _BidirectionalIterator __middle,
              _BidirectionalIterator __last);



template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool>
includes(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2,
         _ForwardIterator2 __last2, _Compare __comp);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool>
includes(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2,
         _ForwardIterator2 __last2);



template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _ForwardIterator,
          class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
set_union(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2,
          _ForwardIterator2 __last2, _ForwardIterator __result, _Compare __comp);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
set_union(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2,
          _ForwardIterator2 __last2, _ForwardIterator __result);



template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _ForwardIterator,
          class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
set_intersection(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1,
                 _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result, _Compare __comp);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
set_intersection(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1,
                 _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result);



template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _ForwardIterator,
          class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
set_difference(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1,
               _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result, _Compare __comp);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
set_difference(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1,
               _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result);



template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _ForwardIterator,
          class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
set_symmetric_difference(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1,
                         _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator result,
                         _Compare __comp);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
set_symmetric_difference(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1,
                         _ForwardIterator2 __first2, _ForwardIterator2 __last2, _ForwardIterator __result);


template <class _ExecutionPolicy, class _RandomAccessIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _RandomAccessIterator>
is_heap_until(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp);

template <class _ExecutionPolicy, class _RandomAccessIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _RandomAccessIterator>
is_heap_until(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _RandomAccessIterator __last);

template <class _ExecutionPolicy, class _RandomAccessIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool>
is_heap(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp);

template <class _ExecutionPolicy, class _RandomAccessIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool>
is_heap(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _RandomAccessIterator __last);



template <class _ExecutionPolicy, class _ForwardIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
min_element(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp);

template <class _ExecutionPolicy, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
min_element(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last);

template <class _ExecutionPolicy, class _ForwardIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
max_element(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp);

template <class _ExecutionPolicy, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
max_element(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last);

template <class _ExecutionPolicy, class _ForwardIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, std::pair<_ForwardIterator, _ForwardIterator>>
minmax_element(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp);

template <class _ExecutionPolicy, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, std::pair<_ForwardIterator, _ForwardIterator>>
minmax_element(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last);



template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool>
lexicographical_compare(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1,
                        _ForwardIterator2 __first2, _ForwardIterator2 __last2, _Compare __comp);

template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool>
lexicographical_compare(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1,
                        _ForwardIterator2 __first2, _ForwardIterator2 __last2);

}
# 90 "/usr/include/c++/15.1.1/algorithm" 2 3
#define _PSTL_ALGORITHM_FORWARD_DECLARED 1
# 14 "emc/sterp/sterp.cc" 2

# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/limits.h" 1 3 4
# 30 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/limits.h" 3 4
#define _GCC_LIMITS_H_ 



# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/syslimits.h" 1 3 4





#define _GCC_NEXT_LIMITS_H 
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/limits.h" 1 3 4
# 210 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 23 "/usr/include/limits.h" 3 4
#define _LIBC_LIMITS_H_ 1

#define __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION 
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 31 "/usr/include/bits/libc-header-start.h" 3 4
#undef __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION





#undef __GLIBC_USE_LIB_EXT2


#define __GLIBC_USE_LIB_EXT2 1
# 67 "/usr/include/bits/libc-header-start.h" 3 4
#undef __GLIBC_USE_IEC_60559_BFP_EXT

#define __GLIBC_USE_IEC_60559_BFP_EXT 1



#undef __GLIBC_USE_IEC_60559_BFP_EXT_C23

#define __GLIBC_USE_IEC_60559_BFP_EXT_C23 1



#undef __GLIBC_USE_IEC_60559_EXT

#define __GLIBC_USE_IEC_60559_EXT 1
# 90 "/usr/include/bits/libc-header-start.h" 3 4
#undef __GLIBC_USE_IEC_60559_FUNCS_EXT

#define __GLIBC_USE_IEC_60559_FUNCS_EXT 1



#undef __GLIBC_USE_IEC_60559_FUNCS_EXT_C23

#define __GLIBC_USE_IEC_60559_FUNCS_EXT_C23 1






#undef __GLIBC_USE_IEC_60559_TYPES_EXT

#define __GLIBC_USE_IEC_60559_TYPES_EXT 1
# 27 "/usr/include/limits.h" 2 3 4





#define MB_LEN_MAX 16
# 132 "/usr/include/limits.h" 3 4
#define LLONG_MIN (-LLONG_MAX-1)


#define LLONG_MAX __LONG_LONG_MAX__


#define ULLONG_MAX (LLONG_MAX * 2ULL + 1)
# 147 "/usr/include/limits.h" 3 4
#define CHAR_WIDTH 8


#define SCHAR_WIDTH 8


#define UCHAR_WIDTH 8


#define SHRT_WIDTH 16


#define USHRT_WIDTH 16


#define INT_WIDTH 32


#define UINT_WIDTH 32


#define LONG_WIDTH __WORDSIZE


#define ULONG_WIDTH __WORDSIZE


#define LLONG_WIDTH 64


#define ULLONG_WIDTH 64
# 186 "/usr/include/limits.h" 3 4
#define BOOL_MAX 1


#define BOOL_WIDTH 1





# 1 "/usr/include/bits/posix1_lim.h" 1 3 4
# 25 "/usr/include/bits/posix1_lim.h" 3 4
#define _BITS_POSIX1_LIM_H 1

# 1 "/usr/include/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64






#define __WORDSIZE_TIME64_COMPAT32 1



#define __SYSCALL_WORDSIZE 64
# 28 "/usr/include/bits/posix1_lim.h" 2 3 4




#define _POSIX_AIO_LISTIO_MAX 2


#define _POSIX_AIO_MAX 1


#define _POSIX_ARG_MAX 4096



#define _POSIX_CHILD_MAX 25





#define _POSIX_DELAYTIMER_MAX 32



#define _POSIX_HOST_NAME_MAX 255


#define _POSIX_LINK_MAX 8


#define _POSIX_LOGIN_NAME_MAX 9


#define _POSIX_MAX_CANON 255



#define _POSIX_MAX_INPUT 255


#define _POSIX_MQ_OPEN_MAX 8


#define _POSIX_MQ_PRIO_MAX 32


#define _POSIX_NAME_MAX 14



#define _POSIX_NGROUPS_MAX 8






#define _POSIX_OPEN_MAX 20







#define _POSIX_FD_SETSIZE _POSIX_OPEN_MAX



#define _POSIX_PATH_MAX 256


#define _POSIX_PIPE_BUF 512



#define _POSIX_RE_DUP_MAX 255


#define _POSIX_RTSIG_MAX 8


#define _POSIX_SEM_NSEMS_MAX 256


#define _POSIX_SEM_VALUE_MAX 32767


#define _POSIX_SIGQUEUE_MAX 32


#define _POSIX_SSIZE_MAX 32767


#define _POSIX_STREAM_MAX 8


#define _POSIX_SYMLINK_MAX 255



#define _POSIX_SYMLOOP_MAX 8


#define _POSIX_TIMER_MAX 32


#define _POSIX_TTY_NAME_MAX 9



#define _POSIX_TZNAME_MAX 6






#define _POSIX_QLIMIT 1



#define _POSIX_HIWAT _POSIX_PIPE_BUF


#define _POSIX_UIO_MAXIOV 16



#define _POSIX_CLOCKRES_MIN 20000000



# 1 "/usr/include/bits/local_lim.h" 1 3 4
# 25 "/usr/include/bits/local_lim.h" 3 4
#define __undef_NR_OPEN 


#define __undef_LINK_MAX 


#define __undef_OPEN_MAX 


#define __undef_ARG_MAX 



# 1 "/usr/include/linux/limits.h" 1 3 4


#define _LINUX_LIMITS_H 

#define NR_OPEN 1024

#define NGROUPS_MAX 65536
#define ARG_MAX 131072
#define LINK_MAX 127
#define MAX_CANON 255
#define MAX_INPUT 255
#define NAME_MAX 255
#define PATH_MAX 4096
#define PIPE_BUF 4096
#define XATTR_NAME_MAX 255
#define XATTR_SIZE_MAX 65536
#define XATTR_LIST_MAX 65536

#define RTSIG_MAX 32
# 39 "/usr/include/bits/local_lim.h" 2 3 4



#undef NR_OPEN
#undef __undef_NR_OPEN



#undef LINK_MAX
#undef __undef_LINK_MAX



#undef OPEN_MAX
#undef __undef_OPEN_MAX



#undef ARG_MAX
#undef __undef_ARG_MAX



#define _POSIX_THREAD_KEYS_MAX 128

#define PTHREAD_KEYS_MAX 1024


#define _POSIX_THREAD_DESTRUCTOR_ITERATIONS 4

#define PTHREAD_DESTRUCTOR_ITERATIONS _POSIX_THREAD_DESTRUCTOR_ITERATIONS


#define _POSIX_THREAD_THREADS_MAX 64

#undef PTHREAD_THREADS_MAX



#define AIO_PRIO_DELTA_MAX 20


# 1 "/usr/include/bits/pthread_stack_min-dynamic.h" 1 3 4
# 22 "/usr/include/bits/pthread_stack_min-dynamic.h" 3 4
#define __SC_THREAD_STACK_MIN_VALUE 75
extern "C" {
extern long int __sysconf (int __name) noexcept (true);
}
#define PTHREAD_STACK_MIN __sysconf (__SC_THREAD_STACK_MIN_VALUE)
# 82 "/usr/include/bits/local_lim.h" 2 3 4


#define DELAYTIMER_MAX 2147483647


#define TTY_NAME_MAX 32


#define LOGIN_NAME_MAX 256


#define HOST_NAME_MAX 64


#define MQ_PRIO_MAX 32768


#define SEM_VALUE_MAX (2147483647)
# 162 "/usr/include/bits/posix1_lim.h" 2 3 4







#define SSIZE_MAX LONG_MAX
# 196 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/posix2_lim.h" 1 3 4
# 23 "/usr/include/bits/posix2_lim.h" 3 4
#define _BITS_POSIX2_LIM_H 1



#define _POSIX2_BC_BASE_MAX 99


#define _POSIX2_BC_DIM_MAX 2048


#define _POSIX2_BC_SCALE_MAX 99


#define _POSIX2_BC_STRING_MAX 1000



#define _POSIX2_COLL_WEIGHTS_MAX 2



#define _POSIX2_EXPR_NEST_MAX 32


#define _POSIX2_LINE_MAX 2048



#define _POSIX2_RE_DUP_MAX 255



#define _POSIX2_CHARCLASS_NAME_MAX 14







#define BC_BASE_MAX _POSIX2_BC_BASE_MAX


#define BC_DIM_MAX _POSIX2_BC_DIM_MAX


#define BC_SCALE_MAX _POSIX2_BC_SCALE_MAX


#define BC_STRING_MAX _POSIX2_BC_STRING_MAX


#define COLL_WEIGHTS_MAX 255


#define EXPR_NEST_MAX _POSIX2_EXPR_NEST_MAX


#define LINE_MAX _POSIX2_LINE_MAX


#define CHARCLASS_NAME_MAX 2048



#define RE_DUP_MAX (0x7fff)
# 200 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/xopen_lim.h" 1 3 4
# 30 "/usr/include/bits/xopen_lim.h" 3 4
#define _XOPEN_LIM_H 1
# 62 "/usr/include/bits/xopen_lim.h" 3 4
#define _XOPEN_IOV_MAX _POSIX_UIO_MAXIOV

# 1 "/usr/include/bits/uio_lim.h" 1 3 4
# 20 "/usr/include/bits/uio_lim.h" 3 4
#define _BITS_UIO_LIM_H 1
# 30 "/usr/include/bits/uio_lim.h" 3 4
#define __IOV_MAX 1024
# 65 "/usr/include/bits/xopen_lim.h" 2 3 4

#define IOV_MAX __IOV_MAX






#define NL_ARGMAX _POSIX_ARG_MAX


#define NL_LANGMAX _POSIX2_LINE_MAX


#define NL_MSGMAX INT_MAX




#define NL_NMAX INT_MAX



#define NL_SETMAX INT_MAX


#define NL_TEXTMAX INT_MAX


#define NZERO 20
# 114 "/usr/include/bits/xopen_lim.h" 3 4
#define WORD_BIT 32
# 137 "/usr/include/bits/xopen_lim.h" 3 4
#define LONG_BIT 64
# 204 "/usr/include/limits.h" 2 3 4
# 211 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/limits.h" 2 3 4
# 10 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/syslimits.h" 2 3 4
 
# 10 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/syslimits.h" 3 4
#pragma GCC diagnostic pop
#undef _GCC_NEXT_LIMITS_H
# 35 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/limits.h" 2 3 4
# 60 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/limits.h" 3 4
#define _LIMITS_H___ 


#undef CHAR_BIT
#define CHAR_BIT __CHAR_BIT__







#undef SCHAR_MIN
#define SCHAR_MIN (-SCHAR_MAX - 1)
#undef SCHAR_MAX
#define SCHAR_MAX __SCHAR_MAX__


#undef UCHAR_MAX



#define UCHAR_MAX (SCHAR_MAX * 2 + 1)
# 96 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/limits.h" 3 4
#undef CHAR_MIN
#define CHAR_MIN SCHAR_MIN
#undef CHAR_MAX
#define CHAR_MAX SCHAR_MAX



#undef SHRT_MIN
#define SHRT_MIN (-SHRT_MAX - 1)
#undef SHRT_MAX
#define SHRT_MAX __SHRT_MAX__


#undef USHRT_MAX



#define USHRT_MAX (SHRT_MAX * 2 + 1)



#undef INT_MIN
#define INT_MIN (-INT_MAX - 1)
#undef INT_MAX
#define INT_MAX __INT_MAX__


#undef UINT_MAX
#define UINT_MAX (INT_MAX * 2U + 1U)



#undef LONG_MIN
#define LONG_MIN (-LONG_MAX - 1L)
#undef LONG_MAX
#define LONG_MAX __LONG_MAX__


#undef ULONG_MAX
#define ULONG_MAX (LONG_MAX * 2UL + 1UL)
# 151 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/limits.h" 3 4
#undef LONG_LONG_MIN
#define LONG_LONG_MIN (-LONG_LONG_MAX - 1LL)
#undef LONG_LONG_MAX
#define LONG_LONG_MAX __LONG_LONG_MAX__


#undef ULONG_LONG_MAX
#define ULONG_LONG_MAX (LONG_LONG_MAX * 2ULL + 1ULL)
# 16 "emc/sterp/sterp.cc" 2
# 1 "/usr/include/c++/15.1.1/memory" 1 3
# 45 "/usr/include/c++/15.1.1/memory" 3
#define _GLIBCXX_MEMORY 1
# 72 "/usr/include/c++/15.1.1/memory" 3
# 1 "/usr/include/c++/15.1.1/bits/stl_raw_storage_iter.h" 1 3
# 57 "/usr/include/c++/15.1.1/bits/stl_raw_storage_iter.h" 3
#define _STL_RAW_STORAGE_ITERATOR_H 1

namespace std __attribute__ ((__visibility__ ("default")))
{



 
# 64 "/usr/include/c++/15.1.1/bits/stl_raw_storage_iter.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"





  template <class _OutputIterator, class _Tp>
    class [[__deprecated__]] raw_storage_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _OutputIterator _M_iter;

    public:
      explicit
      raw_storage_iterator(_OutputIterator __x)
      : _M_iter(__x) {}

      raw_storage_iterator&
      operator*() { return *this; }

      raw_storage_iterator&
      operator=(const _Tp& __element)
      {
 std::_Construct(std::__addressof(*_M_iter), __element);
 return *this;
      }




      raw_storage_iterator&
      operator=(_Tp&& __element)
      {
 std::_Construct(std::__addressof(*_M_iter), std::move(__element));
 return *this;
      }


      raw_storage_iterator&
      operator++()
      {
 ++_M_iter;
 return *this;
      }

      raw_storage_iterator
      operator++(int)
      {
 raw_storage_iterator __tmp = *this;
 ++_M_iter;
 return __tmp;
      }



      _OutputIterator base() const { return _M_iter; }
    };
#pragma GCC diagnostic pop


}
# 73 "/usr/include/c++/15.1.1/memory" 2 3



# 1 "/usr/include/c++/15.1.1/bits/align.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/align.h" 3
#define _GLIBCXX_ALIGN_H 1



# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 36 "/usr/include/c++/15.1.1/bits/align.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 59 "/usr/include/c++/15.1.1/bits/align.h" 3
inline void*
align(size_t __align, size_t __size, void*& __ptr, size_t& __space) noexcept
{
  if (__space < __size)
    return nullptr;
  const auto __intptr = reinterpret_cast<long unsigned int>(__ptr);
  const auto __aligned = (__intptr - 1u + __align) & -__align;
  const auto __diff = __aligned - __intptr;
  if (__diff > (__space - __size))
    return nullptr;
  else
    {
      __space -= __diff;
      return __ptr = reinterpret_cast<void*>(__aligned);
    }
}
# 105 "/usr/include/c++/15.1.1/bits/align.h" 3

}
# 77 "/usr/include/c++/15.1.1/memory" 2 3



# 1 "/usr/include/c++/15.1.1/bits/unique_ptr.h" 1 3
# 32 "/usr/include/c++/15.1.1/bits/unique_ptr.h" 3
#define _UNIQUE_PTR_H 1
# 47 "/usr/include/c++/15.1.1/bits/unique_ptr.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{








 
# 57 "/usr/include/c++/15.1.1/bits/unique_ptr.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  template<typename> class auto_ptr;
#pragma GCC diagnostic pop







  template<typename _Tp>
    struct default_delete
    {

      constexpr default_delete() noexcept = default;






      template<typename _Up,
        typename = _Require<is_convertible<_Up*, _Tp*>>>

        default_delete(const default_delete<_Up>&) noexcept { }


     
      void
      operator()(_Tp* __ptr) const
      {
 static_assert(!is_void<_Tp>::value,
        "can't delete pointer to incomplete type");
 static_assert(sizeof(_Tp)>0,
        "can't delete pointer to incomplete type");
 delete __ptr;
      }
    };
# 105 "/usr/include/c++/15.1.1/bits/unique_ptr.h" 3
  template<typename _Tp>
    struct default_delete<_Tp[]>
    {
    public:

      constexpr default_delete() noexcept = default;
# 121 "/usr/include/c++/15.1.1/bits/unique_ptr.h" 3
      template<typename _Up,
        typename = _Require<is_convertible<_Up(*)[], _Tp(*)[]>>>

        default_delete(const default_delete<_Up[]>&) noexcept { }


      template<typename _Up>

 typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
 operator()(_Up* __ptr) const
 {
   static_assert(sizeof(_Tp)>0,
   "can't delete pointer to incomplete type");
   delete [] __ptr;
 }
    };




  template <typename _Tp, typename _Dp>
    class __uniq_ptr_impl
    {
      template <typename _Up, typename _Ep, typename = void>
 struct _Ptr
 {
   using type = _Up*;
 };

      template <typename _Up, typename _Ep>
 struct
 _Ptr<_Up, _Ep, __void_t<typename remove_reference<_Ep>::type::pointer>>
 {
   using type = typename remove_reference<_Ep>::type::pointer;
 };

    public:
      using _DeleterConstraint = enable_if<
        __and_<__not_<is_pointer<_Dp>>,
        is_default_constructible<_Dp>>::value>;

      using pointer = typename _Ptr<_Tp, _Dp>::type;

      static_assert( !is_rvalue_reference<_Dp>::value,
       "unique_ptr's deleter type must be a function object type"
       " or an lvalue reference type" );

      __uniq_ptr_impl() = default;
     
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }

      template<typename _Del>

 __uniq_ptr_impl(pointer __p, _Del&& __d)
 : _M_t(__p, std::forward<_Del>(__d)) { }

     
      __uniq_ptr_impl(__uniq_ptr_impl&& __u) noexcept
      : _M_t(std::move(__u._M_t))
      { __u._M_ptr() = nullptr; }

     
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
      {
 reset(__u.release());
 _M_deleter() = std::forward<_Dp>(__u._M_deleter());
 return *this;
      }

     
      pointer& _M_ptr() noexcept { return std::get<0>(_M_t); }
     
      pointer _M_ptr() const noexcept { return std::get<0>(_M_t); }
     
      _Dp& _M_deleter() noexcept { return std::get<1>(_M_t); }
     
      const _Dp& _M_deleter() const noexcept { return std::get<1>(_M_t); }

     
      void reset(pointer __p) noexcept
      {
 const pointer __old_p = _M_ptr();
 _M_ptr() = __p;
 if (__old_p)
   _M_deleter()(__old_p);
      }

     
      pointer release() noexcept
      {
 pointer __p = _M_ptr();
 _M_ptr() = nullptr;
 return __p;
      }

     
      void
      swap(__uniq_ptr_impl& __rhs) noexcept
      {
 using std::swap;
 swap(this->_M_ptr(), __rhs._M_ptr());
 swap(this->_M_deleter(), __rhs._M_deleter());
      }

    private:
      tuple<pointer, _Dp> _M_t;
    };


  template <typename _Tp, typename _Dp,
     bool = is_move_constructible<_Dp>::value,
     bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
    };

  template <typename _Tp, typename _Dp>
    struct __uniq_ptr_data<_Tp, _Dp, true, false> : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = delete;
    };

  template <typename _Tp, typename _Dp>
    struct __uniq_ptr_data<_Tp, _Dp, false, true> : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = delete;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
    };

  template <typename _Tp, typename _Dp>
    struct __uniq_ptr_data<_Tp, _Dp, false, false> : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = delete;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = delete;
    };







  template <typename _Tp, typename _Dp = default_delete<_Tp>>
    class unique_ptr
    {
      template <typename _Up>
 using _DeleterConstraint =
   typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;

      __uniq_ptr_data<_Tp, _Dp> _M_t;

    public:
      using pointer = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;
      using element_type = _Tp;
      using deleter_type = _Dp;

    private:


      template<typename _Up, typename _Ep>
 using __safe_conversion_up = __and_<
   is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>,
   __not_<is_array<_Up>>
        >;

    public:



      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
 constexpr unique_ptr() noexcept
 : _M_t()
 { }







      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>

 explicit
 unique_ptr(pointer __p) noexcept
 : _M_t(__p)
        { }
# 322 "/usr/include/c++/15.1.1/bits/unique_ptr.h" 3
      template<typename _Del = deleter_type,
        typename = _Require<is_copy_constructible<_Del>>>

 unique_ptr(pointer __p, const deleter_type& __d) noexcept
 : _M_t(__p, __d) { }
# 335 "/usr/include/c++/15.1.1/bits/unique_ptr.h" 3
      template<typename _Del = deleter_type,
        typename = _Require<is_move_constructible<_Del>>>

 unique_ptr(pointer __p,
     __enable_if_t<!is_lvalue_reference<_Del>::value,
     _Del&&> __d) noexcept
 : _M_t(__p, std::move(__d))
 { }

      template<typename _Del = deleter_type,
        typename _DelUnref = typename remove_reference<_Del>::type>

 unique_ptr(pointer,
     __enable_if_t<is_lvalue_reference<_Del>::value,
     _DelUnref&&>) = delete;


      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
 constexpr unique_ptr(nullptr_t) noexcept
 : _M_t()
 { }




      unique_ptr(unique_ptr&&) = default;







      template<typename _Up, typename _Ep, typename = _Require<
               __safe_conversion_up<_Up, _Ep>,
        __conditional_t<is_reference<_Dp>::value,
          is_same<_Ep, _Dp>,
          is_convertible<_Ep, _Dp>>>>

 unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 : _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 { }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

      template<typename _Up,
        typename = _Require<is_convertible<_Up*, pointer>,
       is_same<_Dp, default_delete<_Tp>>>>
 unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop






      ~unique_ptr() noexcept
      {
 static_assert(__is_invocable<deleter_type&, pointer>::value,
        "unique_ptr's deleter must be invocable with a pointer");
 auto& __ptr = _M_t._M_ptr();
 if (__ptr != nullptr)
   get_deleter()(std::move(__ptr));
 __ptr = pointer();
      }







      unique_ptr& operator=(unique_ptr&&) = default;
# 418 "/usr/include/c++/15.1.1/bits/unique_ptr.h" 3
      template<typename _Up, typename _Ep>

        typename enable_if< __and_<
          __safe_conversion_up<_Up, _Ep>,
          is_assignable<deleter_type&, _Ep&&>
          >::value,
          unique_ptr&>::type
 operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 {
   reset(__u.release());
   get_deleter() = std::forward<_Ep>(__u.get_deleter());
   return *this;
 }


     
      unique_ptr&
      operator=(nullptr_t) noexcept
      {
 reset();
 return *this;
      }




     
      typename add_lvalue_reference<element_type>::type
      operator*() const noexcept(noexcept(*std::declval<pointer>()))
      {



 using _ResT = typename add_lvalue_reference<element_type>::type;
 using _DerefT = decltype(*get());
 static_assert(!__reference_converts_from_temporary(_ResT, _DerefT),
        "operator* must not return a dangling reference");

 do { if (std::__is_constant_evaluated() && !bool(get() != pointer())) std::__glibcxx_assert_fail(); } while (false);
 return *get();
      }


     
      pointer
      operator->() const noexcept
      {
 ;
 return get();
      }


     
      pointer
      get() const noexcept
      { return _M_t._M_ptr(); }


     
      deleter_type&
      get_deleter() noexcept
      { return _M_t._M_deleter(); }


     
      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }


     
      explicit operator bool() const noexcept
      { return get() == pointer() ? false : true; }




     
      pointer
      release() noexcept
      { return _M_t.release(); }







     
      void
      reset(pointer __p = pointer()) noexcept
      {
 static_assert(__is_invocable<deleter_type&, pointer>::value,
        "unique_ptr's deleter must be invocable with a pointer");
 _M_t.reset(std::move(__p));
      }


     
      void
      swap(unique_ptr& __u) noexcept
      {
 static_assert(__is_swappable<_Dp>::value, "deleter must be swappable");
 _M_t.swap(__u._M_t);
      }


      unique_ptr(const unique_ptr&) = delete;
      unique_ptr& operator=(const unique_ptr&) = delete;

    private:






  };
# 545 "/usr/include/c++/15.1.1/bits/unique_ptr.h" 3
  template<typename _Tp, typename _Dp>
    class unique_ptr<_Tp[], _Dp>
    {
      template <typename _Up>
      using _DeleterConstraint =
 typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;

      __uniq_ptr_data<_Tp, _Dp> _M_t;


      template<typename _Up>
 using __is_derived_Tp
   = __and_< is_base_of<_Tp, _Up>,
      __not_<is_same<__remove_cv_t<_Tp>, __remove_cv_t<_Up>>> >;

    public:
      using pointer = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;
      using element_type = _Tp;
      using deleter_type = _Dp;



      template<typename _Up, typename _Ep,
               typename _UPtr = unique_ptr<_Up, _Ep>,
        typename _UP_pointer = typename _UPtr::pointer,
        typename _UP_element_type = typename _UPtr::element_type>
 using __safe_conversion_up = __and_<
          is_array<_Up>,
          is_same<pointer, element_type*>,
          is_same<_UP_pointer, _UP_element_type*>,
          is_convertible<_UP_element_type(*)[], element_type(*)[]>
        >;


      template<typename _Up>
        using __safe_conversion_raw = __and_<
          __or_<__or_<is_same<_Up, pointer>,
                      is_same<_Up, nullptr_t>>,
                __and_<is_pointer<_Up>,
                       is_same<pointer, element_type*>,
                       is_convertible<
                         typename remove_pointer<_Up>::type(*)[],
                         element_type(*)[]>
                >
          >
        >;




      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
 constexpr unique_ptr() noexcept
 : _M_t()
 { }
# 607 "/usr/include/c++/15.1.1/bits/unique_ptr.h" 3
      template<typename _Up,
        typename _Vp = _Dp,
        typename = _DeleterConstraint<_Vp>,
        typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>

 explicit
 unique_ptr(_Up __p) noexcept
 : _M_t(__p)
        { }
# 626 "/usr/include/c++/15.1.1/bits/unique_ptr.h" 3
      template<typename _Up, typename _Del = deleter_type,
        typename = _Require<__safe_conversion_raw<_Up>,
       is_copy_constructible<_Del>>>

 unique_ptr(_Up __p, const deleter_type& __d) noexcept
 : _M_t(__p, __d) { }
# 641 "/usr/include/c++/15.1.1/bits/unique_ptr.h" 3
      template<typename _Up, typename _Del = deleter_type,
        typename = _Require<__safe_conversion_raw<_Up>,
       is_move_constructible<_Del>>>

 unique_ptr(_Up __p,
     __enable_if_t<!is_lvalue_reference<_Del>::value,
     _Del&&> __d) noexcept
 : _M_t(std::move(__p), std::move(__d))
 { }

      template<typename _Up, typename _Del = deleter_type,
        typename _DelUnref = typename remove_reference<_Del>::type,
        typename = _Require<__safe_conversion_raw<_Up>>>
 unique_ptr(_Up,
     __enable_if_t<is_lvalue_reference<_Del>::value,
     _DelUnref&&>) = delete;


      unique_ptr(unique_ptr&&) = default;


      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
 constexpr unique_ptr(nullptr_t) noexcept
 : _M_t()
        { }

      template<typename _Up, typename _Ep, typename = _Require<
        __safe_conversion_up<_Up, _Ep>,
        __conditional_t<is_reference<_Dp>::value,
          is_same<_Ep, _Dp>,
          is_convertible<_Ep, _Dp>>>>

 unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 : _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 { }





      ~unique_ptr()
      {
 auto& __ptr = _M_t._M_ptr();
 if (__ptr != nullptr)
   get_deleter()(__ptr);
 __ptr = pointer();
      }







      unique_ptr&
      operator=(unique_ptr&&) = default;
# 705 "/usr/include/c++/15.1.1/bits/unique_ptr.h" 3
      template<typename _Up, typename _Ep>

 typename
 enable_if<__and_<__safe_conversion_up<_Up, _Ep>,
                         is_assignable<deleter_type&, _Ep&&>
                  >::value,
                  unique_ptr&>::type
 operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 {
   reset(__u.release());
   get_deleter() = std::forward<_Ep>(__u.get_deleter());
   return *this;
 }


     
      unique_ptr&
      operator=(nullptr_t) noexcept
      {
 reset();
 return *this;
      }




     
      typename std::add_lvalue_reference<element_type>::type
      operator[](size_t __i) const
      {
 do { if (std::__is_constant_evaluated() && !bool(get() != pointer())) std::__glibcxx_assert_fail(); } while (false);
 return get()[__i];
      }


     
      pointer
      get() const noexcept
      { return _M_t._M_ptr(); }


     
      deleter_type&
      get_deleter() noexcept
      { return _M_t._M_deleter(); }


     
      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }


     
      explicit operator bool() const noexcept
      { return get() == pointer() ? false : true; }




     
      pointer
      release() noexcept
      { return _M_t.release(); }







      template <typename _Up,
                typename = _Require<
                  __or_<is_same<_Up, pointer>,
                        __and_<is_same<pointer, element_type*>,
                               is_pointer<_Up>,
                               is_convertible<
                                 typename remove_pointer<_Up>::type(*)[],
                                 element_type(*)[]
                               >
                        >
                  >
               >>
     
      void
      reset(_Up __p) noexcept
      { _M_t.reset(std::move(__p)); }

     
      void reset(nullptr_t = nullptr) noexcept
      { reset(pointer()); }


     
      void
      swap(unique_ptr& __u) noexcept
      {
 static_assert(__is_swappable<_Dp>::value, "deleter must be swappable");
 _M_t.swap(__u._M_t);
      }


      unique_ptr(const unique_ptr&) = delete;
      unique_ptr& operator=(const unique_ptr&) = delete;

    private:




    };





  template<typename _Tp, typename _Dp>
    inline


   
    typename enable_if<__is_swappable<_Dp>::value>::type



    swap(unique_ptr<_Tp, _Dp>& __x,
  unique_ptr<_Tp, _Dp>& __y) noexcept
    { __x.swap(__y); }


  template<typename _Tp, typename _Dp>
    typename enable_if<!__is_swappable<_Dp>::value>::type
    swap(unique_ptr<_Tp, _Dp>&,
  unique_ptr<_Tp, _Dp>&) = delete;



  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    [[__nodiscard__]]
    inline bool
    operator==(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() == __y.get(); }


  template<typename _Tp, typename _Dp>
    [[__nodiscard__]]
    inline bool
    operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
    { return !__x; }



  template<typename _Tp, typename _Dp>
    [[__nodiscard__]]
    inline bool
    operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
    { return !__x; }


  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    [[__nodiscard__]]
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }


  template<typename _Tp, typename _Dp>
    [[__nodiscard__]]
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
    { return (bool)__x; }


  template<typename _Tp, typename _Dp>
    [[__nodiscard__]]
    inline bool
    operator!=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
    { return (bool)__x; }



  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    [[__nodiscard__]]
    inline bool
    operator<(const unique_ptr<_Tp, _Dp>& __x,
       const unique_ptr<_Up, _Ep>& __y)
    {
      typedef typename
 std::common_type<typename unique_ptr<_Tp, _Dp>::pointer,
                  typename unique_ptr<_Up, _Ep>::pointer>::type _CT;
      return std::less<_CT>()(__x.get(), __y.get());
    }


  template<typename _Tp, typename _Dp>
    [[__nodiscard__]]
    inline bool
    operator<(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    {
      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
         nullptr);
    }


  template<typename _Tp, typename _Dp>
    [[__nodiscard__]]
    inline bool
    operator<(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    {
      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
         __x.get());
    }


  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    [[__nodiscard__]]
    inline bool
    operator<=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Dp>
    [[__nodiscard__]]
    inline bool
    operator<=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return !(nullptr < __x); }


  template<typename _Tp, typename _Dp>
    [[__nodiscard__]]
    inline bool
    operator<=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return !(__x < nullptr); }


  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    [[__nodiscard__]]
    inline bool
    operator>(const unique_ptr<_Tp, _Dp>& __x,
       const unique_ptr<_Up, _Ep>& __y)
    { return (__y < __x); }


  template<typename _Tp, typename _Dp>
    [[__nodiscard__]]
    inline bool
    operator>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    {
      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
         __x.get());
    }


  template<typename _Tp, typename _Dp>
    [[__nodiscard__]]
    inline bool
    operator>(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    {
      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
         nullptr);
    }


  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    [[__nodiscard__]]
    inline bool
    operator>=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Dp>
    [[__nodiscard__]]
    inline bool
    operator>=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return !(__x < nullptr); }


  template<typename _Tp, typename _Dp>
    [[__nodiscard__]] inline bool
    operator>=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return !(nullptr < __x); }
# 1023 "/usr/include/c++/15.1.1/bits/unique_ptr.h" 3
  template<typename _Up, typename _Ptr = typename _Up::pointer>
    struct __uniq_ptr_hash
    : public __hash_base<size_t, _Up>

    , private __hash_empty_base<_Ptr>

    {
      size_t
      operator()(const _Up& __u) const
      noexcept(noexcept(std::declval<hash<_Ptr>>()(std::declval<_Ptr>())))
      { return hash<_Ptr>()(__u.get()); }
    };

  template<typename _Up>
    using __uniq_ptr_hash_base
      = __conditional_t<__is_hash_enabled_for<typename _Up::pointer>,
        __uniq_ptr_hash<_Up>,
        __hash_not_enabled<typename _Up::pointer>>;



  template<typename _Tp, typename _Dp>
    struct hash<unique_ptr<_Tp, _Dp>>
    : public __uniq_ptr_hash_base<unique_ptr<_Tp, _Dp>>
    { };



namespace __detail
{
  template<typename _Tp>
    struct _MakeUniq
    { typedef unique_ptr<_Tp> __single_object; };

  template<typename _Tp>
    struct _MakeUniq<_Tp[]>
    { typedef unique_ptr<_Tp[]> __array; };

  template<typename _Tp, size_t _Bound>
    struct _MakeUniq<_Tp[_Bound]>
    { struct __invalid_type { }; };

  template<typename _Tp>
    using __unique_ptr_t = typename _MakeUniq<_Tp>::__single_object;
  template<typename _Tp>
    using __unique_ptr_array_t = typename _MakeUniq<_Tp>::__array;
  template<typename _Tp>
    using __invalid_make_unique_t = typename _MakeUniq<_Tp>::__invalid_type;
}
# 1081 "/usr/include/c++/15.1.1/bits/unique_ptr.h" 3
  template<typename _Tp, typename... _Args>
   
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
# 1096 "/usr/include/c++/15.1.1/bits/unique_ptr.h" 3
  template<typename _Tp>
   
    inline __detail::__unique_ptr_array_t<_Tp>
    make_unique(size_t __num)
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }






  template<typename _Tp, typename... _Args>
    __detail::__invalid_make_unique_t<_Tp>
    make_unique(_Args&&...) = delete;
# 1167 "/usr/include/c++/15.1.1/bits/unique_ptr.h" 3
  template<typename _Tp>
    constexpr bool __is_unique_ptr = false;
  template<typename _Tp, typename _Del>
    constexpr bool __is_unique_ptr<unique_ptr<_Tp, _Del>> = true;





  namespace __detail::__variant
  {
    template<typename> struct _Never_valueless_alt;



    template<typename _Tp, typename _Del>
      struct _Never_valueless_alt<std::unique_ptr<_Tp, _Del>>
      : std::true_type
      { };
  }



}
# 81 "/usr/include/c++/15.1.1/memory" 2 3

# 1 "/usr/include/c++/15.1.1/bits/shared_ptr.h" 1 3
# 50 "/usr/include/c++/15.1.1/bits/shared_ptr.h" 3
#define _SHARED_PTR_H 1


# 1 "/usr/include/c++/15.1.1/bits/shared_ptr_base.h" 1 3
# 50 "/usr/include/c++/15.1.1/bits/shared_ptr_base.h" 3
#define _SHARED_PTR_BASE_H 1

# 1 "/usr/include/c++/15.1.1/typeinfo" 1 3
# 30 "/usr/include/c++/15.1.1/typeinfo" 3
#define _TYPEINFO 
# 41 "/usr/include/c++/15.1.1/typeinfo" 3
#define __glibcxx_want_constexpr_typeinfo 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 43 "/usr/include/c++/15.1.1/typeinfo" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 73 "/usr/include/c++/15.1.1/typeinfo" 3
#define __GXX_MERGED_TYPEINFO_NAMES 0







#define __GXX_TYPEINFO_EQUALITY_INLINE 1



namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const noexcept
    { return __name[0] == '*' ? __name + 1 : __name; }



    bool before(const type_info& __arg) const noexcept;

   
    bool operator==(const type_info& __arg) const noexcept;


    bool operator!=(const type_info& __arg) const noexcept
    { return !operator==(__arg); }



    size_t hash_code() const noexcept
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:


    type_info& operator=(const type_info&) = delete;
    type_info(const type_info&) = delete;
# 168 "/usr/include/c++/15.1.1/typeinfo" 3
  };


  inline bool
  type_info::before(const type_info& __arg) const noexcept
  {




    if (__name[0] != '*' || __arg.__name[0] != '*')
      return __builtin_strcmp (__name, __arg.__name) < 0;
# 188 "/usr/include/c++/15.1.1/typeinfo" 3
    return __name < __arg.__name;
  }






  inline bool
  type_info::operator==(const type_info& __arg) const noexcept
  {
    if (std::__is_constant_evaluated())
      return this == &__arg;

    if (__name == __arg.__name)
      return true;






    return __name[0] != '*' && __builtin_strcmp (__name, __arg.name()) == 0;



  }
# 224 "/usr/include/c++/15.1.1/typeinfo" 3
  class bad_cast : public exception
  {
  public:
    bad_cast() noexcept { }



    virtual ~bad_cast() noexcept;


    virtual const char* what() const noexcept;
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () noexcept { }



    virtual ~bad_typeid() noexcept;


    virtual const char* what() const noexcept;
  };
}

}

#pragma GCC visibility pop
# 53 "/usr/include/c++/15.1.1/bits/shared_ptr_base.h" 2 3
# 1 "/usr/include/c++/15.1.1/bits/allocated_ptr.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/allocated_ptr.h" 3
#define _ALLOCATED_PTR_H 1
# 40 "/usr/include/c++/15.1.1/bits/allocated_ptr.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Alloc>
    struct __allocated_ptr
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;


      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
      { }


      template<typename _Ptr,
        typename _Req = _Require<is_same<_Ptr, value_type*>>>
      __allocated_ptr(_Alloc& __a, _Ptr __ptr)
      : _M_alloc(std::__addressof(__a)),
 _M_ptr(pointer_traits<pointer>::pointer_to(*__ptr))
      { }


      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }


      ~__allocated_ptr()
      {
 if (_M_ptr != nullptr)
   std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }


      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
 _M_ptr = nullptr;
 return *this;
      }

      explicit operator bool() const noexcept { return (bool)_M_ptr; }


      value_type* get() const { return std::__to_address(_M_ptr); }

      pointer release() { return std::__exchange(_M_ptr, nullptr); }

    private:
      _Alloc* _M_alloc;
      pointer _M_ptr;
    };


  template<typename _Alloc>
    inline __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
    }


  template<typename _Alloc>
    struct __allocated_obj : __allocated_ptr<_Alloc>
    {
      using value_type = typename __allocated_ptr<_Alloc>::value_type;

      __allocated_obj(__allocated_obj<_Alloc>&&) = default;


      __allocated_obj(__allocated_ptr<_Alloc>&& __ptr)
      : __allocated_ptr<_Alloc>(std::move(__ptr))
      { ::new ((void*)this->get()) value_type; }


      ~__allocated_obj()
      {
 if (static_cast<bool>(*this))
   this->get()->~value_type();
      }

      using __allocated_ptr<_Alloc>::operator=;

      value_type& operator*() const { return *this->get(); }
      value_type* operator->() const { return this->get(); }
    };


  template<typename _Alloc>
    inline __allocated_obj<_Alloc>
    __allocate_guarded_obj(_Alloc& __a)
    {
      return { std::__allocate_guarded(__a) };
    }



}
# 54 "/usr/include/c++/15.1.1/bits/shared_ptr_base.h" 2 3






# 1 "/usr/include/c++/15.1.1/ext/aligned_buffer.h" 1 3
# 30 "/usr/include/c++/15.1.1/ext/aligned_buffer.h" 3
#define _ALIGNED_BUFFER_H 1
# 42 "/usr/include/c++/15.1.1/ext/aligned_buffer.h" 3
namespace __gnu_cxx
{




  template<typename _Tp>
    struct __aligned_membuf
    {
# 60 "/usr/include/c++/15.1.1/ext/aligned_buffer.h" 3
      alignas(_Tp)

 unsigned char _M_storage[sizeof(_Tp)];

      __aligned_membuf() = default;


      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }

      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
      { return static_cast<const _Tp*>(_M_addr()); }
    };
# 95 "/usr/include/c++/15.1.1/ext/aligned_buffer.h" 3
  template<typename _Tp>
    struct __aligned_buffer
    {

      alignas(__alignof__(_Tp)) unsigned char _M_storage[sizeof(_Tp)];

      __aligned_buffer() = default;


      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
      }

      const void*
      _M_addr() const noexcept
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
      { return static_cast<const _Tp*>(_M_addr()); }
    };


}
# 61 "/usr/include/c++/15.1.1/bits/shared_ptr_base.h" 2 3
# 1 "/usr/include/c++/15.1.1/ext/atomicity.h" 1 3
# 30 "/usr/include/c++/15.1.1/ext/atomicity.h" 3
#define _GLIBCXX_ATOMICITY_H 1






# 1 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/gthr.h" 1 3
# 27 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/gthr.h" 3
#define _GLIBCXX_GCC_GTHR_H 


#pragma GCC visibility push(default)
# 157 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/gthr.h" 3
# 1 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/gthr-default.h" 1 3
# 27 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
#define _GLIBCXX_GCC_GTHR_POSIX_H 




#define __GTHREADS 1
#define __GTHREADS_CXX0X 1

# 1 "/usr/include/pthread.h" 1 3 4
# 19 "/usr/include/pthread.h" 3 4
#define _PTHREAD_H 1


# 1 "/usr/include/sched.h" 1 3 4
# 20 "/usr/include/sched.h" 3 4
#define _SCHED_H 1






#define __need_size_t 
#define __need_NULL 
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 1 3 4
# 173 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 252 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_size_t
# 364 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_wchar_t
# 414 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef NULL

#define NULL __null
# 425 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_NULL




#undef offsetof
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 30 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/bits/sched.h" 1 3 4
# 21 "/usr/include/bits/sched.h" 3 4
#define _BITS_SCHED_H 1






#define SCHED_OTHER 0
#define SCHED_FIFO 1
#define SCHED_RR 2

#define SCHED_NORMAL 0
#define SCHED_BATCH 3
#define SCHED_ISO 4
#define SCHED_IDLE 5
#define SCHED_DEADLINE 6
#define SCHED_EXT 7


#define SCHED_RESET_ON_FORK 0x40000000


#define SCHED_FLAG_RESET_ON_FORK 0x01
#define SCHED_FLAG_RECLAIM 0x02
#define SCHED_FLAG_DL_OVERRUN 0x04
#define SCHED_FLAG_KEEP_POLICY 0x08
#define SCHED_FLAG_KEEP_PARAMS 0x10
#define SCHED_FLAG_UTIL_CLAMP_MIN 0x20
#define SCHED_FLAG_UTIL_CLAMP_MAX 0x40


#define SCHED_FLAG_KEEP_ALL (SCHED_FLAG_KEEP_POLICY | SCHED_FLAG_KEEP_PARAMS)

#define SCHED_FLAG_UTIL_CLAMP (SCHED_FLAG_UTIL_CLAMP_MIN | SCHED_FLAG_UTIL_CLAMP_MAX)







#define sched_param __glibc_mask_sched_param
# 1 "/usr/include/linux/sched/types.h" 1 3 4


#define _LINUX_SCHED_TYPES_H 

# 1 "/usr/include/linux/types.h" 1 3 4


#define _LINUX_TYPES_H 

# 1 "/usr/include/asm/types.h" 1 3 4
# 1 "/usr/include/asm-generic/types.h" 1 3 4


#define _ASM_GENERIC_TYPES_H 



# 1 "/usr/include/asm-generic/int-ll64.h" 1 3 4
# 10 "/usr/include/asm-generic/int-ll64.h" 3 4
#define _ASM_GENERIC_INT_LL64_H 

# 1 "/usr/include/asm/bitsperlong.h" 1 3 4


#define __ASM_X86_BITSPERLONG_H 


#define __BITS_PER_LONG 64




# 1 "/usr/include/asm-generic/bitsperlong.h" 1 3 4


#define __ASM_GENERIC_BITS_PER_LONG 
# 28 "/usr/include/asm-generic/bitsperlong.h" 3 4
#define __BITS_PER_LONG_LONG 64
# 12 "/usr/include/asm/bitsperlong.h" 2 3 4
# 13 "/usr/include/asm-generic/int-ll64.h" 2 3 4







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 8 "/usr/include/asm-generic/types.h" 2 3 4
# 2 "/usr/include/asm/types.h" 2 3 4
# 6 "/usr/include/linux/types.h" 2 3 4



# 1 "/usr/include/linux/posix_types.h" 1 3 4


#define _LINUX_POSIX_TYPES_H 

# 1 "/usr/include/linux/stddef.h" 1 3 4


#define _LINUX_STDDEF_H 
# 15 "/usr/include/linux/stddef.h" 3 4
#define __struct_group_tag(TAG) 
# 33 "/usr/include/linux/stddef.h" 3 4
#define __struct_group(TAG,NAME,ATTRS,MEMBERS...) union { struct { MEMBERS } ATTRS; struct __struct_group_tag(TAG) { MEMBERS } ATTRS NAME; } ATTRS







#define __DECLARE_FLEX_ARRAY(T,member) T member[0]
# 62 "/usr/include/linux/stddef.h" 3 4
#define __counted_by(m) 



#define __counted_by_le(m) 



#define __counted_by_be(m) 


#define __kernel_nonstring 
# 6 "/usr/include/linux/posix_types.h" 2 3 4
# 22 "/usr/include/linux/posix_types.h" 3 4
#undef __FD_SETSIZE
#define __FD_SETSIZE 1024

typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "/usr/include/asm/posix_types.h" 1 3 4






# 1 "/usr/include/asm/posix_types_64.h" 1 3 4


#define _ASM_X86_POSIX_TYPES_64_H 







typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;
#define __kernel_old_uid_t __kernel_old_uid_t

typedef unsigned long __kernel_old_dev_t;
#define __kernel_old_dev_t __kernel_old_dev_t

# 1 "/usr/include/asm-generic/posix_types.h" 1 3 4


#define __ASM_GENERIC_POSIX_TYPES_H 
# 15 "/usr/include/asm-generic/posix_types.h" 3 4
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
# 72 "/usr/include/asm-generic/posix_types.h" 3 4
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_old_time_t;
typedef __kernel_long_t __kernel_time_t;
typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 19 "/usr/include/asm/posix_types_64.h" 2 3 4
# 8 "/usr/include/asm/posix_types.h" 2 3 4
# 37 "/usr/include/linux/posix_types.h" 2 3 4
# 10 "/usr/include/linux/types.h" 2 3 4


typedef __signed__ __int128 __s128 __attribute__((aligned(16)));
typedef unsigned __int128 __u128 __attribute__((aligned(16)));
# 25 "/usr/include/linux/types.h" 3 4
#define __bitwise 



#define __bitwise__ __bitwise

typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 50 "/usr/include/linux/types.h" 3 4
#define __aligned_u64 __u64 __attribute__((aligned(8)))
#define __aligned_s64 __s64 __attribute__((aligned(8)))
#define __aligned_be64 __be64 __attribute__((aligned(8)))
#define __aligned_le64 __le64 __attribute__((aligned(8)))

typedef unsigned __poll_t;
# 6 "/usr/include/linux/sched/types.h" 2 3 4

#define SCHED_ATTR_SIZE_VER0 48
#define SCHED_ATTR_SIZE_VER1 56
# 98 "/usr/include/linux/sched/types.h" 3 4
struct sched_attr {
 __u32 size;

 __u32 sched_policy;
 __u64 sched_flags;


 __s32 sched_nice;


 __u32 sched_priority;


 __u64 sched_runtime;
 __u64 sched_deadline;
 __u64 sched_period;


 __u32 sched_util_min;
 __u32 sched_util_max;

};
# 64 "/usr/include/bits/sched.h" 2 3 4
#undef sched_param
# 88 "/usr/include/bits/sched.h" 3 4
#define CSIGNAL 0x000000ff
#define CLONE_VM 0x00000100
#define CLONE_FS 0x00000200
#define CLONE_FILES 0x00000400
#define CLONE_SIGHAND 0x00000800
#define CLONE_PIDFD 0x00001000

#define CLONE_PTRACE 0x00002000
#define CLONE_VFORK 0x00004000

#define CLONE_PARENT 0x00008000

#define CLONE_THREAD 0x00010000
#define CLONE_NEWNS 0x00020000
#define CLONE_SYSVSEM 0x00040000
#define CLONE_SETTLS 0x00080000
#define CLONE_PARENT_SETTID 0x00100000

#define CLONE_CHILD_CLEARTID 0x00200000

#define CLONE_DETACHED 0x00400000
#define CLONE_UNTRACED 0x00800000

#define CLONE_CHILD_SETTID 0x01000000

#define CLONE_NEWCGROUP 0x02000000
#define CLONE_NEWUTS 0x04000000
#define CLONE_NEWIPC 0x08000000
#define CLONE_NEWUSER 0x10000000
#define CLONE_NEWPID 0x20000000
#define CLONE_NEWNET 0x40000000
#define CLONE_IO 0x80000000



#define CLONE_NEWTIME 0x00000080


# 1 "/usr/include/bits/types/struct_sched_param.h" 1 3 4
# 20 "/usr/include/bits/types/struct_sched_param.h" 3 4
#define _BITS_TYPES_STRUCT_SCHED_PARAM 1


struct sched_param
{
  int sched_priority;
};
# 127 "/usr/include/bits/sched.h" 2 3 4

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) noexcept (true);


extern int unshare (int __flags) noexcept (true);


extern int sched_getcpu (void) noexcept (true);


extern int getcpu (unsigned int *, unsigned int *) noexcept (true);


extern int setns (int __fd, int __nstype) noexcept (true);


int sched_setattr (pid_t tid, struct sched_attr *attr, unsigned int flags)
  noexcept (true) __attribute__ ((__nonnull__ (2)));



int sched_getattr (pid_t tid, struct sched_attr *attr, unsigned int size,
     unsigned int flags)
  noexcept (true) __attribute__ ((__nonnull__ (2)));



}
# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/bits/cpu-set.h" 1 3 4
# 21 "/usr/include/bits/cpu-set.h" 3 4
#define _BITS_CPU_SET_H 1






#define __CPU_SETSIZE 1024
#define __NCPUBITS (8 * sizeof (__cpu_mask))


typedef unsigned long int __cpu_mask;


#define __CPUELT(cpu) ((cpu) / __NCPUBITS)
#define __CPUMASK(cpu) ((__cpu_mask) 1 << ((cpu) % __NCPUBITS))


typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;



#define __CPU_ZERO_S(setsize,cpusetp) do __builtin_memset (cpusetp, '\0', setsize); while (0)
# 58 "/usr/include/bits/cpu-set.h" 3 4
#define __CPU_SET_S(cpu,setsize,cpusetp) (__extension__ ({ size_t __cpu = (cpu); __cpu / 8 < (setsize) ? (((__cpu_mask *) ((cpusetp)->__bits))[__CPUELT (__cpu)] |= __CPUMASK (__cpu)) : 0; }))






#define __CPU_CLR_S(cpu,setsize,cpusetp) (__extension__ ({ size_t __cpu = (cpu); __cpu / 8 < (setsize) ? (((__cpu_mask *) ((cpusetp)->__bits))[__CPUELT (__cpu)] &= ~__CPUMASK (__cpu)) : 0; }))






#define __CPU_ISSET_S(cpu,setsize,cpusetp) (__extension__ ({ size_t __cpu = (cpu); __cpu / 8 < (setsize) ? ((((const __cpu_mask *) ((cpusetp)->__bits))[__CPUELT (__cpu)] & __CPUMASK (__cpu))) != 0 : 0; }))







#define __CPU_COUNT_S(setsize,cpusetp) __sched_cpucount (setsize, cpusetp)



#define __CPU_EQUAL_S(setsize,cpusetp1,cpusetp2) (__builtin_memcmp (cpusetp1, cpusetp2, setsize) == 0)
# 99 "/usr/include/bits/cpu-set.h" 3 4
#define __CPU_OP_S(setsize,destset,srcset1,srcset2,op) (__extension__ ({ cpu_set_t *__dest = (destset); const __cpu_mask *__arr1 = (srcset1)->__bits; const __cpu_mask *__arr2 = (srcset2)->__bits; size_t __imax = (setsize) / sizeof (__cpu_mask); size_t __i; for (__i = 0; __i < __imax; ++__i) ((__cpu_mask *) __dest->__bits)[__i] = __arr1[__i] op __arr2[__i]; __dest; }))
# 110 "/usr/include/bits/cpu-set.h" 3 4
#define __CPU_ALLOC_SIZE(count) ((((count) + __NCPUBITS - 1) / __NCPUBITS) * sizeof (__cpu_mask))

#define __CPU_ALLOC(count) __sched_cpualloc (count)
#define __CPU_FREE(cpuset) __sched_cpufree (cpuset)

extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     noexcept (true);
extern cpu_set_t *__sched_cpualloc (size_t __count) noexcept (true) __attribute__ ((__warn_unused_result__));
extern void __sched_cpufree (cpu_set_t *__set) noexcept (true);

}
# 45 "/usr/include/sched.h" 2 3 4


#define sched_priority sched_priority
#define __sched_priority sched_priority


extern "C" {


extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     noexcept (true);


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) noexcept (true);


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) noexcept (true);


extern int sched_getscheduler (__pid_t __pid) noexcept (true);


extern int sched_yield (void) noexcept (true);


extern int sched_get_priority_max (int __algorithm) noexcept (true);


extern int sched_get_priority_min (int __algorithm) noexcept (true);



extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) noexcept (true);
# 91 "/usr/include/sched.h" 3 4
#define CPU_SETSIZE __CPU_SETSIZE
#define CPU_SET(cpu,cpusetp) __CPU_SET_S (cpu, sizeof (cpu_set_t), cpusetp)
#define CPU_CLR(cpu,cpusetp) __CPU_CLR_S (cpu, sizeof (cpu_set_t), cpusetp)
#define CPU_ISSET(cpu,cpusetp) __CPU_ISSET_S (cpu, sizeof (cpu_set_t), cpusetp)

#define CPU_ZERO(cpusetp) __CPU_ZERO_S (sizeof (cpu_set_t), cpusetp)
#define CPU_COUNT(cpusetp) __CPU_COUNT_S (sizeof (cpu_set_t), cpusetp)

#define CPU_SET_S(cpu,setsize,cpusetp) __CPU_SET_S (cpu, setsize, cpusetp)
#define CPU_CLR_S(cpu,setsize,cpusetp) __CPU_CLR_S (cpu, setsize, cpusetp)
#define CPU_ISSET_S(cpu,setsize,cpusetp) __CPU_ISSET_S (cpu, setsize, cpusetp)

#define CPU_ZERO_S(setsize,cpusetp) __CPU_ZERO_S (setsize, cpusetp)
#define CPU_COUNT_S(setsize,cpusetp) __CPU_COUNT_S (setsize, cpusetp)

#define CPU_EQUAL(cpusetp1,cpusetp2) __CPU_EQUAL_S (sizeof (cpu_set_t), cpusetp1, cpusetp2)

#define CPU_EQUAL_S(setsize,cpusetp1,cpusetp2) __CPU_EQUAL_S (setsize, cpusetp1, cpusetp2)


#define CPU_AND(destset,srcset1,srcset2) __CPU_OP_S (sizeof (cpu_set_t), destset, srcset1, srcset2, &)

#define CPU_OR(destset,srcset1,srcset2) __CPU_OP_S (sizeof (cpu_set_t), destset, srcset1, srcset2, |)

#define CPU_XOR(destset,srcset1,srcset2) __CPU_OP_S (sizeof (cpu_set_t), destset, srcset1, srcset2, ^)

#define CPU_AND_S(setsize,destset,srcset1,srcset2) __CPU_OP_S (setsize, destset, srcset1, srcset2, &)

#define CPU_OR_S(setsize,destset,srcset1,srcset2) __CPU_OP_S (setsize, destset, srcset1, srcset2, |)

#define CPU_XOR_S(setsize,destset,srcset1,srcset2) __CPU_OP_S (setsize, destset, srcset1, srcset2, ^)


#define CPU_ALLOC_SIZE(count) __CPU_ALLOC_SIZE (count)
#define CPU_ALLOC(count) __CPU_ALLOC (count)
#define CPU_FREE(cpuset) __CPU_FREE (cpuset)



extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) noexcept (true);


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) noexcept (true);


}
# 23 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 23 "/usr/include/time.h" 3 4
#define _TIME_H 1



#define __need_size_t 
#define __need_NULL 
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 1 3 4
# 173 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 252 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_size_t
# 364 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_wchar_t
# 414 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef NULL

#define NULL __null
# 425 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_NULL




#undef offsetof
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 24 "/usr/include/bits/time.h" 3 4
#define _BITS_TIME_H 1
# 34 "/usr/include/bits/time.h" 3 4
#define CLOCKS_PER_SEC ((__clock_t) 1000000)
# 46 "/usr/include/bits/time.h" 3 4
#define CLOCK_REALTIME 0

#define CLOCK_MONOTONIC 1

#define CLOCK_PROCESS_CPUTIME_ID 2

#define CLOCK_THREAD_CPUTIME_ID 3

#define CLOCK_MONOTONIC_RAW 4

#define CLOCK_REALTIME_COARSE 5

#define CLOCK_MONOTONIC_COARSE 6

#define CLOCK_BOOTTIME 7

#define CLOCK_REALTIME_ALARM 8

#define CLOCK_BOOTTIME_ALARM 9

#define CLOCK_TAI 11


#define TIMER_ABSTIME 1



# 1 "/usr/include/bits/timex.h" 1 3 4
# 19 "/usr/include/bits/timex.h" 3 4
#define _BITS_TIMEX_H 1






struct timex
{
# 58 "/usr/include/bits/timex.h" 3 4
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;

};


#define ADJ_OFFSET 0x0001
#define ADJ_FREQUENCY 0x0002
#define ADJ_MAXERROR 0x0004
#define ADJ_ESTERROR 0x0008
#define ADJ_STATUS 0x0010
#define ADJ_TIMECONST 0x0020
#define ADJ_TAI 0x0080
#define ADJ_SETOFFSET 0x0100
#define ADJ_MICRO 0x1000
#define ADJ_NANO 0x2000
#define ADJ_TICK 0x4000
#define ADJ_OFFSET_SINGLESHOT 0x8001
#define ADJ_OFFSET_SS_READ 0xa001


#define MOD_OFFSET ADJ_OFFSET
#define MOD_FREQUENCY ADJ_FREQUENCY
#define MOD_MAXERROR ADJ_MAXERROR
#define MOD_ESTERROR ADJ_ESTERROR
#define MOD_STATUS ADJ_STATUS
#define MOD_TIMECONST ADJ_TIMECONST
#define MOD_CLKB ADJ_TICK
#define MOD_CLKA ADJ_OFFSET_SINGLESHOT
#define MOD_TAI ADJ_TAI
#define MOD_MICRO ADJ_MICRO
#define MOD_NANO ADJ_NANO



#define STA_PLL 0x0001
#define STA_PPSFREQ 0x0002
#define STA_PPSTIME 0x0004
#define STA_FLL 0x0008

#define STA_INS 0x0010
#define STA_DEL 0x0020
#define STA_UNSYNC 0x0040
#define STA_FREQHOLD 0x0080

#define STA_PPSSIGNAL 0x0100
#define STA_PPSJITTER 0x0200
#define STA_PPSWANDER 0x0400
#define STA_PPSERROR 0x0800

#define STA_CLOCKERR 0x1000
#define STA_NANO 0x2000
#define STA_MODE 0x4000
#define STA_CLK 0x8000


#define STA_RONLY (STA_PPSSIGNAL | STA_PPSJITTER | STA_PPSWANDER | STA_PPSERROR | STA_CLOCKERR | STA_NANO | STA_MODE | STA_CLK)
# 74 "/usr/include/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) noexcept (true) __attribute__ ((__nonnull__ (2)));
# 90 "/usr/include/bits/time.h" 3 4
}
# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/bits/types/struct_tm.h" 1 3 4

#define __struct_tm_defined 1




struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/bits/types/struct_itimerspec.h" 1 3 4

#define __itimerspec_defined 1





struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 65 "/usr/include/time.h" 3 4
#define TIME_UTC 1


extern "C" {



extern clock_t clock (void) noexcept (true);



extern time_t time (time_t *__timer) noexcept (true);


extern double difftime (time_t __time1, time_t __time0);


extern time_t mktime (struct tm *__tp) noexcept (true);
# 99 "/usr/include/time.h" 3 4
extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp)
   noexcept (true) __attribute__ ((__nonnull__ (1, 3, 4)));




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     noexcept (true);






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) noexcept (true);



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) noexcept (true);






extern struct tm *gmtime (const time_t *__timer) noexcept (true);



extern struct tm *localtime (const time_t *__timer) noexcept (true);
# 154 "/usr/include/time.h" 3 4
extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) noexcept (true);



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) noexcept (true);
# 179 "/usr/include/time.h" 3 4
extern char *asctime (const struct tm *__tp) noexcept (true);



extern char *ctime (const time_t *__timer) noexcept (true);
# 197 "/usr/include/time.h" 3 4
extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) noexcept (true);



extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) noexcept (true);
# 217 "/usr/include/time.h" 3 4
extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) noexcept (true);



extern int daylight;
extern long int timezone;





#define __isleap(year) ((year) % 4 == 0 && ((year) % 100 != 0 || (year) % 400 == 0))






extern time_t timegm (struct tm *__tp) noexcept (true);
# 263 "/usr/include/time.h" 3 4
extern time_t timelocal (struct tm *__tp) noexcept (true);







extern int dysize (int __year) noexcept (true) __attribute__ ((__const__));
# 281 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);


extern int clock_getres (clockid_t __clock_id, struct timespec *__res) noexcept (true);


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp)
     noexcept (true) __attribute__ ((__nonnull__ (2)));


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     noexcept (true) __attribute__ ((__nonnull__ (2)));
# 323 "/usr/include/time.h" 3 4
extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);
# 338 "/usr/include/time.h" 3 4
extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) noexcept (true);




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) noexcept (true);


extern int timer_delete (timer_t __timerid) noexcept (true);



extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) noexcept (true);


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     noexcept (true);
# 376 "/usr/include/time.h" 3 4
extern int timer_getoverrun (timer_t __timerid) noexcept (true);






extern int timespec_get (struct timespec *__ts, int __base)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 399 "/usr/include/time.h" 3 4
extern int timespec_getres (struct timespec *__ts, int __base)
     noexcept (true);
# 425 "/usr/include/time.h" 3 4
extern int getdate_err;
# 434 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 448 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 24 "/usr/include/pthread.h" 2 3 4



# 1 "/usr/include/bits/setjmp.h" 1 3 4
# 20 "/usr/include/bits/setjmp.h" 3 4
#define _BITS_SETJMP_H 1





# 1 "/usr/include/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64






#define __WORDSIZE_TIME64_COMPAT32 1



#define __SYSCALL_WORDSIZE 64
# 27 "/usr/include/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64






#define __WORDSIZE_TIME64_COMPAT32 1



#define __SYSCALL_WORDSIZE 64
# 29 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/bits/types/struct___jmp_buf_tag.h" 1 3 4
# 20 "/usr/include/bits/types/struct___jmp_buf_tag.h" 3 4
#define __jmp_buf_tag_defined 1





struct __jmp_buf_tag
  {




    __jmp_buf __jmpbuf;
    int __mask_was_saved;
    __sigset_t __saved_mask;
  };
# 32 "/usr/include/pthread.h" 2 3 4





enum
{
  PTHREAD_CREATE_JOINABLE,
#define PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_JOINABLE
  PTHREAD_CREATE_DETACHED
#define PTHREAD_CREATE_DETACHED PTHREAD_CREATE_DETACHED
};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};



#define PTHREAD_MUTEX_INITIALIZER { { __PTHREAD_MUTEX_INITIALIZER (PTHREAD_MUTEX_TIMED_NP) } }


#define PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP { { __PTHREAD_MUTEX_INITIALIZER (PTHREAD_MUTEX_RECURSIVE_NP) } }

#define PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP { { __PTHREAD_MUTEX_INITIALIZER (PTHREAD_MUTEX_ERRORCHECK_NP) } }

#define PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP { { __PTHREAD_MUTEX_INITIALIZER (PTHREAD_MUTEX_ADAPTIVE_NP) } }






enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};



#define PTHREAD_RWLOCK_INITIALIZER { { __PTHREAD_RWLOCK_INITIALIZER (PTHREAD_RWLOCK_DEFAULT_NP) } }


#define PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP { { __PTHREAD_RWLOCK_INITIALIZER (PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP) } }






enum
{
  PTHREAD_INHERIT_SCHED,
#define PTHREAD_INHERIT_SCHED PTHREAD_INHERIT_SCHED
  PTHREAD_EXPLICIT_SCHED
#define PTHREAD_EXPLICIT_SCHED PTHREAD_EXPLICIT_SCHED
};



enum
{
  PTHREAD_SCOPE_SYSTEM,
#define PTHREAD_SCOPE_SYSTEM PTHREAD_SCOPE_SYSTEM
  PTHREAD_SCOPE_PROCESS
#define PTHREAD_SCOPE_PROCESS PTHREAD_SCOPE_PROCESS
};



enum
{
  PTHREAD_PROCESS_PRIVATE,
#define PTHREAD_PROCESS_PRIVATE PTHREAD_PROCESS_PRIVATE
  PTHREAD_PROCESS_SHARED
#define PTHREAD_PROCESS_SHARED PTHREAD_PROCESS_SHARED
};




#define PTHREAD_COND_INITIALIZER { { {0}, {0}, {0, 0}, 0, 0, {0, 0}, 0, 0 } }



struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,
#define PTHREAD_CANCEL_ENABLE PTHREAD_CANCEL_ENABLE
  PTHREAD_CANCEL_DISABLE
#define PTHREAD_CANCEL_DISABLE PTHREAD_CANCEL_DISABLE
};
enum
{
  PTHREAD_CANCEL_DEFERRED,
#define PTHREAD_CANCEL_DEFERRED PTHREAD_CANCEL_DEFERRED
  PTHREAD_CANCEL_ASYNCHRONOUS
#define PTHREAD_CANCEL_ASYNCHRONOUS PTHREAD_CANCEL_ASYNCHRONOUS
};
#define PTHREAD_CANCELED ((void *) -1)



#define PTHREAD_ONCE_INIT 0






#define PTHREAD_BARRIER_SERIAL_THREAD -1



extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) noexcept (true) __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) noexcept (true);
# 233 "/usr/include/pthread.h" 3 4
extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);
# 243 "/usr/include/pthread.h" 3 4
extern int pthread_clockjoin_np (pthread_t __th, void **__thread_return,
                                 clockid_t __clockid,
     const struct timespec *__abstime);
# 269 "/usr/include/pthread.h" 3 4
extern int pthread_detach (pthread_t __th) noexcept (true);



extern pthread_t pthread_self (void) noexcept (true) __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  noexcept (true) __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_setsigmask_np (pthread_attr_t *__attr,
           const __sigset_t *sigmask);




extern int pthread_attr_getsigmask_np (const pthread_attr_t *__attr,
           __sigset_t *sigmask);



#define PTHREAD_ATTR_NO_SIGMASK_NP (-1)



extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     noexcept (true) __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     noexcept (true) __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     noexcept (true);




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     noexcept (true) __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     noexcept (true) __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) noexcept (true);


extern int pthread_setconcurrency (int __level) noexcept (true);



extern int pthread_yield (void) noexcept (true);

extern int pthread_yield (void) noexcept (true) __asm__ ("" "sched_yield")
  __attribute__ ((__deprecated__ ("pthread_yield is deprecated, use sched_yield instead")))
                                                      ;







extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     noexcept (true) __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     noexcept (true) __attribute__ ((__nonnull__ (3)));
# 509 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 521 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




struct __cancel_jmp_buf_tag
{
  __jmp_buf __cancel_jmp_buf;
  int __mask_was_saved;
};

typedef struct
{
  struct __cancel_jmp_buf_tag __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));



#define __cleanup_fct_attribute 




struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};




class __pthread_cleanup_class
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;

 public:
  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)
    : __cancel_routine (__fct), __cancel_arg (__arg), __do_it (1) { }
  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }
  void __setdoit (int __newval) { __do_it = __newval; }
  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,
        &__cancel_type); }
  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }
};
# 592 "/usr/include/pthread.h" 3 4
#define pthread_cleanup_push(routine,arg) do { __pthread_cleanup_class __clframe (routine, arg)





#define pthread_cleanup_pop(execute) __clframe.__setdoit (execute); } while (0)







#define pthread_cleanup_push_defer_np(routine,arg) do { __pthread_cleanup_class __clframe (routine, arg); __clframe.__defer ()







#define pthread_cleanup_pop_restore_np(execute) __clframe.__restore (); __clframe.__setdoit (execute); } while (0)
# 766 "/usr/include/pthread.h" 3 4
extern int __sigsetjmp_cancel (struct __cancel_jmp_buf_tag __env[1], int __savemask) noexcept (true) __asm__ ("" "__sigsetjmp")


                     __attribute__ ((__returns_twice__));
# 781 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
# 817 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_clocklock (pthread_mutex_t *__restrict __mutex,
        clockid_t __clockid,
        const struct timespec *__restrict
        __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 835 "/usr/include/pthread.h" 3 4
extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_consistent_np (pthread_mutex_t *) noexcept (true) __asm__ ("" "pthread_mutex_consistent")
                                __attribute__ ((__nonnull__ (1)))
  __attribute__ ((__deprecated__ ("pthread_mutex_consistent_np is deprecated, use pthread_mutex_consistent")))
                                                                         ;
# 874 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_getrobust_np (pthread_mutexattr_t *, int *) noexcept (true) __asm__ ("" "pthread_mutexattr_getrobust")

                                   __attribute__ ((__nonnull__ (1)))
  __attribute__ ((__deprecated__ ("pthread_mutexattr_getrobust_np is deprecated, use pthread_mutexattr_getrobust")))
                                                                               ;






extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *, int) noexcept (true) __asm__ ("" "pthread_mutexattr_setrobust")

                                   __attribute__ ((__nonnull__ (1)))
  __attribute__ ((__deprecated__ ("pthread_mutexattr_setrobust_np is deprecated, use pthread_mutexattr_setrobust")))
                                                                               ;
# 967 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
# 1004 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_clockrdlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 1023 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
# 1051 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_clockwrlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) noexcept (true) __attribute__ ((__nonnull__ (1, 3)));
# 1071 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) noexcept (true) __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     noexcept (true) __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1145 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 1171 "/usr/include/pthread.h" 3 4
extern int pthread_cond_clockwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       __clockid_t __clock_id,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 4)));
# 1194 "/usr/include/pthread.h" 3 4
extern int pthread_condattr_init (pthread_condattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 1230 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     noexcept (true) __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 1297 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) noexcept (true);


extern void *pthread_getspecific (pthread_key_t __key) noexcept (true);


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer)
  noexcept (true) __attribute__ ((__access__ (__none__, 2)));




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     noexcept (true) __attribute__ ((__nonnull__ (2)));
# 1332 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) noexcept (true);
# 1346 "/usr/include/pthread.h" 3 4
}
# 36 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/gthr-default.h" 2 3
# 49 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
#define __GTHREAD_ALWAYS_INLINE __attribute__((__always_inline__))







#define __GTHREAD_INLINE inline __GTHREAD_ALWAYS_INLINE




typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;



typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;



#define __GTHREAD_HAS_COND 1

#define __GTHREAD_MUTEX_INIT PTHREAD_MUTEX_INITIALIZER
#define __GTHREAD_MUTEX_INIT_FUNCTION __gthread_mutex_init_function



#define __GTHREAD_ONCE_INIT PTHREAD_ONCE_INIT



#define __GTHREAD_RECURSIVE_MUTEX_INIT PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP



#define __GTHREAD_COND_INIT PTHREAD_COND_INITIALIZER
#define __GTHREAD_TIME_INIT {0,0}
# 116 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
#define __gthrw2(name,name2,type) 
#define __gthrw_(name) name



#define __gthrw(name) __gthrw2(__gthrw_ ## name,name,name)




































# 345 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
inline __attribute__((__always_inline__)) int
__gthread_active_p (void)
{
  return 1;
}
# 705 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
inline __attribute__((__always_inline__)) int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return pthread_create (__threadid, __null, __func, __args);
}

inline __attribute__((__always_inline__)) int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return pthread_join (__threadid, __value_ptr);
}

inline __attribute__((__always_inline__)) int
__gthread_detach (__gthread_t __threadid)
{
  return pthread_detach (__threadid);
}

inline __attribute__((__always_inline__)) int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return pthread_equal (__t1, __t2);
}

inline __attribute__((__always_inline__)) __gthread_t
__gthread_self (void)
{
  return pthread_self ();
}

inline __attribute__((__always_inline__)) int
__gthread_yield (void)
{
  return sched_yield ();
}

inline __attribute__((__always_inline__)) int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return pthread_once (__once, __func);
  else
    return -1;
}

inline __attribute__((__always_inline__)) int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return pthread_key_create (__key, __dtor);
}

inline __attribute__((__always_inline__)) int
__gthread_key_delete (__gthread_key_t __key)
{
  return pthread_key_delete (__key);
}

inline __attribute__((__always_inline__)) void *
__gthread_getspecific (__gthread_key_t __key)
{
  return pthread_getspecific (__key);
}

inline __attribute__((__always_inline__)) int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return pthread_setspecific (__key, __ptr);
}

inline __attribute__((__always_inline__)) void
__gthread_mutex_init_function (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    pthread_mutex_init (__mutex, __null);
}

inline __attribute__((__always_inline__)) int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return pthread_mutex_destroy (__mutex);
  else
    return 0;
}

inline __attribute__((__always_inline__)) int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return pthread_mutex_lock (__mutex);
  else
    return 0;
}

inline __attribute__((__always_inline__)) int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return pthread_mutex_trylock (__mutex);
  else
    return 0;
}


inline __attribute__((__always_inline__)) int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}


inline __attribute__((__always_inline__)) int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return pthread_mutex_unlock (__mutex);
  else
    return 0;
}
# 854 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
inline __attribute__((__always_inline__)) int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

inline __attribute__((__always_inline__)) int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}


inline __attribute__((__always_inline__)) int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}


inline __attribute__((__always_inline__)) int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

inline __attribute__((__always_inline__)) int
__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_destroy (__mutex);
}
# 896 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
inline __attribute__((__always_inline__)) int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return pthread_cond_broadcast (__cond);
}

inline __attribute__((__always_inline__)) int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return pthread_cond_signal (__cond);
}

inline __attribute__((__always_inline__)) int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return pthread_cond_wait (__cond, __mutex);
}

inline __attribute__((__always_inline__)) int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

inline __attribute__((__always_inline__)) int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

inline __attribute__((__always_inline__)) int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return pthread_cond_destroy (__cond);
}
# 983 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/gthr-default.h" 3
#undef __GTHREAD_INLINE
#undef __GTHREAD_ALWAYS_INLINE
# 158 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/gthr.h" 2 3


#pragma GCC visibility pop
# 38 "/usr/include/c++/15.1.1/ext/atomicity.h" 2 3
# 1 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/atomic_word.h" 1 3
# 30 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/atomic_word.h" 3
#define _GLIBCXX_ATOMIC_WORD_H 1

typedef int _Atomic_word;



#define _GLIBCXX_READ_MEM_BARRIER __atomic_thread_fence (__ATOMIC_ACQUIRE)

#define _GLIBCXX_WRITE_MEM_BARRIER __atomic_thread_fence (__ATOMIC_RELEASE)
# 39 "/usr/include/c++/15.1.1/ext/atomicity.h" 2 3

# 1 "/usr/include/sys/single_threaded.h" 1 3 4
# 20 "/usr/include/sys/single_threaded.h" 3 4
#define _SYS_SINGLE_THREADED_H 



extern "C" {




extern char __libc_single_threaded;

}
# 41 "/usr/include/c++/15.1.1/ext/atomicity.h" 2 3


namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  __attribute__((__always_inline__))
  inline bool
  __is_single_threaded() noexcept
  {



    return ::__libc_single_threaded;



  }






  inline _Atomic_word
  __attribute__((__always_inline__))
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __atomic_fetch_add(__mem, __val, 4); }

  inline void
  __attribute__((__always_inline__))
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __atomic_fetch_add(__mem, __val, 4); }
# 82 "/usr/include/c++/15.1.1/ext/atomicity.h" 3
  inline _Atomic_word
  __attribute__((__always_inline__))
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  inline void
  __attribute__((__always_inline__))
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  inline _Atomic_word
  __attribute__ ((__always_inline__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {
    if (__is_single_threaded())
      return __exchange_and_add_single(__mem, __val);
    else
      return __exchange_and_add(__mem, __val);
  }

  inline void
  __attribute__ ((__always_inline__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {
    if (__is_single_threaded())
      __atomic_add_single(__mem, __val);
    else
      __atomic_add(__mem, __val);
  }


}
# 62 "/usr/include/c++/15.1.1/bits/shared_ptr_base.h" 2 3
# 1 "/usr/include/c++/15.1.1/ext/concurrence.h" 1 3
# 30 "/usr/include/c++/15.1.1/ext/concurrence.h" 3
#define _CONCURRENCE_H 1





# 1 "/usr/include/c++/15.1.1/exception" 1 3
# 31 "/usr/include/c++/15.1.1/exception" 3
#define __EXCEPTION__ 
# 40 "/usr/include/c++/15.1.1/exception" 3
#define __glibcxx_want_uncaught_exceptions 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 42 "/usr/include/c++/15.1.1/exception" 2 3

extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{
# 56 "/usr/include/c++/15.1.1/exception" 3
  class bad_exception : public exception
  {
  public:
    bad_exception() noexcept { }



    virtual ~bad_exception() noexcept;


    virtual const char*
    what() const noexcept;
  };


  typedef void (*terminate_handler) ();


  terminate_handler set_terminate(terminate_handler) noexcept;



  terminate_handler get_terminate() noexcept;




  void terminate() noexcept __attribute__ ((__noreturn__,__cold__));



  typedef void (*__attribute__ ((__deprecated__)) unexpected_handler) ();





  __attribute__ ((__deprecated__))
  unexpected_handler set_unexpected(unexpected_handler) noexcept;







  __attribute__ ((__deprecated__))
  unexpected_handler get_unexpected() noexcept;







  __attribute__ ((__deprecated__))
  void unexpected() __attribute__ ((__noreturn__,__cold__));
# 126 "/usr/include/c++/15.1.1/exception" 3
  __attribute__ ((__deprecated__ ("use '" "std::uncaught_exceptions()" "' instead")))
  bool uncaught_exception() noexcept __attribute__ ((__pure__));






  int uncaught_exceptions() noexcept __attribute__ ((__pure__));



}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 160 "/usr/include/c++/15.1.1/exception" 3
  void __verbose_terminate_handler();


}

}


# 1 "/usr/include/c++/15.1.1/bits/exception_ptr.h" 1 3
# 32 "/usr/include/c++/15.1.1/bits/exception_ptr.h" 3
#define _EXCEPTION_PTR_H 



# 1 "/usr/include/c++/15.1.1/bits/cxxabi_init_exception.h" 1 3
# 32 "/usr/include/c++/15.1.1/bits/cxxabi_init_exception.h" 3
#define _CXXABI_INIT_EXCEPTION_H 1





#pragma GCC visibility push(default)

# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 1 3 4
# 41 "/usr/include/c++/15.1.1/bits/cxxabi_init_exception.h" 2 3



#define _GLIBCXX_CDTOR_CALLABI 
#define _GLIBCXX_HAVE_CDTOR_CALLABI 0






namespace std
{
  class type_info;
}

namespace __cxxabiv1
{
  struct __cxa_refcounted_exception;

  extern "C"
    {

      void*
      __cxa_allocate_exception(size_t) noexcept;

      void
      __cxa_free_exception(void*) noexcept;


      __cxa_refcounted_exception*
      __cxa_init_primary_exception(void *__object, std::type_info *__tinfo,
                void ( *__dest) (void *))
 noexcept;

    }
}



#pragma GCC visibility pop
# 37 "/usr/include/c++/15.1.1/bits/exception_ptr.h" 2 3
# 47 "/usr/include/c++/15.1.1/bits/exception_ptr.h" 3
#define _GLIBCXX_EH_PTR_USED 


extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{
  class type_info;






  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;
# 75 "/usr/include/c++/15.1.1/bits/exception_ptr.h" 3
  exception_ptr current_exception() noexcept;

  template<typename _Ex>
  exception_ptr make_exception_ptr(_Ex) noexcept;


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {
    using std::rethrow_exception;
# 97 "/usr/include/c++/15.1.1/bits/exception_ptr.h" 3
    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) noexcept;

      void _M_addref() noexcept;
      void _M_release() noexcept;

      void *_M_get() const noexcept __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() noexcept;
      friend void std::rethrow_exception(exception_ptr);
      template<typename _Ex>
      friend exception_ptr std::make_exception_ptr(_Ex) noexcept;

    public:
      exception_ptr() noexcept;

      exception_ptr(const exception_ptr&) noexcept;


      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(nullptr)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = nullptr; }
# 135 "/usr/include/c++/15.1.1/bits/exception_ptr.h" 3
      exception_ptr&
      operator=(const exception_ptr&) noexcept;


      exception_ptr&
      operator=(exception_ptr&& __o) noexcept
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() noexcept;

      void
      swap(exception_ptr&) noexcept;
# 161 "/usr/include/c++/15.1.1/bits/exception_ptr.h" 3
      explicit operator bool() const noexcept
      { return _M_exception_object; }







      friend bool
      operator==(const exception_ptr& __x, const exception_ptr& __y)
      noexcept
      { return __x._M_exception_object == __y._M_exception_object; }

      friend bool
      operator!=(const exception_ptr& __x, const exception_ptr& __y)
      noexcept
      { return __x._M_exception_object != __y._M_exception_object; }


      const class std::type_info*
      __cxa_exception_type() const noexcept
 __attribute__ ((__pure__));
    };

   
    inline
    exception_ptr::exception_ptr() noexcept
    : _M_exception_object(0)
    { }

   
    inline
    exception_ptr::exception_ptr(const exception_ptr& __other)
    noexcept
    : _M_exception_object(__other._M_exception_object)
    {
      if (_M_exception_object)
 _M_addref();
    }

   
    inline
    exception_ptr::~exception_ptr() noexcept
    {
      if (_M_exception_object)
 _M_release();
    }

   
    inline exception_ptr&
    exception_ptr::operator=(const exception_ptr& __other) noexcept
    {
      exception_ptr(__other).swap(*this);
      return *this;
    }

   
    inline void
    exception_ptr::swap(exception_ptr &__other) noexcept
    {
      void *__tmp = _M_exception_object;
      _M_exception_object = __other._M_exception_object;
      __other._M_exception_object = __tmp;
    }


    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }


    template<typename _Ex>
     
      inline void
      __dest_thunk(void* __x)
      { static_cast<_Ex*>(__x)->~_Ex(); }


  }

  using __exception_ptr::swap;



  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) noexcept
    {

      using _Ex2 = typename decay<_Ex>::type;
      void* __e = __cxxabiv1::__cxa_allocate_exception(sizeof(_Ex));
      (void) __cxxabiv1::__cxa_init_primary_exception(
   __e, const_cast<std::type_info*>(&typeid(_Ex)),
   __exception_ptr::__dest_thunk<_Ex2>);
      try
 {
   ::new (__e) _Ex2(__ex);
   return exception_ptr(__e);
 }
      catch(...)
 {
   __cxxabiv1::__cxa_free_exception(__e);
   return current_exception();
 }
# 276 "/usr/include/c++/15.1.1/bits/exception_ptr.h" 3
    }
# 287 "/usr/include/c++/15.1.1/bits/exception_ptr.h" 3
#undef _GLIBCXX_EH_PTR_USED


}

}
# 169 "/usr/include/c++/15.1.1/exception" 2 3
# 1 "/usr/include/c++/15.1.1/bits/nested_exception.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/nested_exception.h" 3
#define _GLIBCXX_NESTED_EXCEPTION_H 1
# 40 "/usr/include/c++/15.1.1/bits/nested_exception.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{
# 59 "/usr/include/c++/15.1.1/bits/nested_exception.h" 3
  class nested_exception
  {
    exception_ptr _M_ptr;

  public:

    nested_exception() noexcept : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) noexcept = default;

    nested_exception& operator=(const nested_exception&) noexcept = default;

    virtual ~nested_exception() noexcept;


    [[noreturn]]
    void
    rethrow_nested() const
    {
      if (_M_ptr)
 rethrow_exception(_M_ptr);
      std::terminate();
    }


    exception_ptr
    nested_ptr() const noexcept
    { return _M_ptr; }
  };



  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(const _Except& __ex)
      : _Except(__ex)
      { }

      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };
# 145 "/usr/include/c++/15.1.1/bits/nested_exception.h" 3
  template<typename _Tp>
    [[noreturn]]
    inline void
    throw_with_nested(_Tp&& __t)
    {
      using _Up = typename decay<_Tp>::type;
      using _CopyConstructible
 = __and_<is_copy_constructible<_Up>, is_move_constructible<_Up>>;
      static_assert(_CopyConstructible::value,
   "throw_with_nested argument must be CopyConstructible");


      if constexpr (is_class_v<_Up>)
 if constexpr (!is_final_v<_Up>)
   if constexpr (!is_base_of_v<nested_exception, _Up>)
     throw _Nested_exception<_Up>{std::forward<_Tp>(__t)};
      throw std::forward<_Tp>(__t);





    }
# 203 "/usr/include/c++/15.1.1/bits/nested_exception.h" 3
  template<typename _Ex>



    inline void
    rethrow_if_nested(const _Ex& __ex)
    {
      const _Ex* __ptr = __builtin_addressof(__ex);
# 223 "/usr/include/c++/15.1.1/bits/nested_exception.h" 3
      if constexpr (!is_polymorphic_v<_Ex>)
 return;
      else if constexpr (is_base_of_v<nested_exception, _Ex>
    && !is_convertible_v<_Ex*, nested_exception*>)
 return;




      else if (auto __ne_ptr = dynamic_cast<const nested_exception*>(__ptr))
 __ne_ptr->rethrow_nested();

    }


}

}
# 170 "/usr/include/c++/15.1.1/exception" 2 3
# 37 "/usr/include/c++/15.1.1/ext/concurrence.h" 2 3





#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  enum _Lock_policy { _S_single, _S_mutex, _S_atomic };



  inline const _Lock_policy __default_lock_policy =



  _S_atomic;






  class __concurrence_lock_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_lock_error"; }
  };

  class __concurrence_unlock_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_unlock_error"; }
  };

  class __concurrence_broadcast_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_broadcast_error"; }
  };

  class __concurrence_wait_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_wait_error"; }
  };


  inline void
  __throw_concurrence_lock_error()
  { (throw (__concurrence_lock_error())); }

  inline void
  __throw_concurrence_unlock_error()
  { (throw (__concurrence_unlock_error())); }


  inline void
  __throw_concurrence_broadcast_error()
  { (throw (__concurrence_broadcast_error())); }

  inline void
  __throw_concurrence_wait_error()
  { (throw (__concurrence_wait_error())); }


  class __mutex
  {
  private:

    __gthread_mutex_t _M_mutex = { { 0, 0, 0, 0, PTHREAD_MUTEX_TIMED_NP, 0, 0, { __null, __null } } };




    __mutex(const __mutex&);
    __mutex& operator=(const __mutex&);

  public:
    __mutex()
    {




    }
# 149 "/usr/include/c++/15.1.1/ext/concurrence.h" 3
    void lock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_mutex_lock(&_M_mutex) != 0)
     __throw_concurrence_lock_error();
 }

    }

    void unlock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_mutex_unlock(&_M_mutex) != 0)
     __throw_concurrence_unlock_error();
 }

    }

    __gthread_mutex_t* gthread_mutex(void)
      { return &_M_mutex; }
  };

  class __recursive_mutex
  {
  private:

    __gthread_recursive_mutex_t _M_mutex = { { 0, 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP, 0, 0, { __null, __null } } };




    __recursive_mutex(const __recursive_mutex&);
    __recursive_mutex& operator=(const __recursive_mutex&);

  public:
    __recursive_mutex()
    {




    }
# 204 "/usr/include/c++/15.1.1/ext/concurrence.h" 3
    void lock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_recursive_mutex_lock(&_M_mutex) != 0)
     __throw_concurrence_lock_error();
 }

    }

    void unlock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_recursive_mutex_unlock(&_M_mutex) != 0)
     __throw_concurrence_unlock_error();
 }

    }

    __gthread_recursive_mutex_t* gthread_recursive_mutex(void)
    { return &_M_mutex; }
  };




  class __scoped_lock
  {
  public:
    typedef __mutex __mutex_type;

  private:
    __mutex_type& _M_device;

    __scoped_lock(const __scoped_lock&);
    __scoped_lock& operator=(const __scoped_lock&);

  public:
    explicit __scoped_lock(__mutex_type& __name) : _M_device(__name)
    { _M_device.lock(); }

    ~__scoped_lock() throw()
    { _M_device.unlock(); }
  };


  class __cond
  {
  private:

    __gthread_cond_t _M_cond = { { {0}, {0}, {0, 0}, 0, 0, {0, 0}, 0, 0 } };




    __cond(const __cond&);
    __cond& operator=(const __cond&);

  public:
    __cond()
    {




    }
# 282 "/usr/include/c++/15.1.1/ext/concurrence.h" 3
    void broadcast()
    {

      if (__gthread_active_p())
 {
   if (__gthread_cond_broadcast(&_M_cond) != 0)
     __throw_concurrence_broadcast_error();
 }

    }

    void wait(__mutex *mutex)
    {

      {
   if (__gthread_cond_wait(&_M_cond, mutex->gthread_mutex()) != 0)
     __throw_concurrence_wait_error();
      }

    }

    void wait_recursive(__recursive_mutex *mutex)
    {

      {
   if (__gthread_cond_wait_recursive(&_M_cond,
         mutex->gthread_recursive_mutex())
       != 0)
     __throw_concurrence_wait_error();
      }

    }
  };



}

#pragma GCC diagnostic pop
# 63 "/usr/include/c++/15.1.1/bits/shared_ptr_base.h" 2 3






namespace std __attribute__ ((__visibility__ ("default")))
{



 
# 74 "/usr/include/c++/15.1.1/bits/shared_ptr_base.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  template<typename> class auto_ptr;
#pragma GCC diagnostic pop






  class bad_weak_ptr : public std::exception
  {
  public:
    virtual char const* what() const noexcept;

    virtual ~bad_weak_ptr() noexcept;
  };


  inline void
  __throw_bad_weak_ptr()
  { (throw (bad_weak_ptr())); }

  using __gnu_cxx::_Lock_policy;
  using __gnu_cxx::__default_lock_policy;
  using __gnu_cxx::_S_single;
  using __gnu_cxx::_S_mutex;
  using __gnu_cxx::_S_atomic;


  template<_Lock_policy _Lp>
    class _Mutex_base
    {
    protected:

      enum { _S_need_barriers = 0 };
    };

  template<>
    class _Mutex_base<_S_mutex>
    : public __gnu_cxx::__mutex
    {
    protected:



      enum { _S_need_barriers = 1 };
    };

  template<_Lock_policy _Lp = __default_lock_policy>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }

      virtual
      ~_Sp_counted_base() noexcept
      { }



      virtual void
      _M_dispose() noexcept = 0;


      virtual void
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept = 0;


      void
      _M_add_ref_copy()
      { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }


      void
      _M_add_ref_lock()
      {
 if (!_M_add_ref_lock_nothrow())
   __throw_bad_weak_ptr();
      }


      bool
      _M_add_ref_lock_nothrow() noexcept;


      void
      _M_release() noexcept;


      void
      _M_release_last_use() noexcept
      {
 ;
 _M_dispose();




 if (_Mutex_base<_Lp>::_S_need_barriers)
   {
     __atomic_thread_fence (4);
   }


 ;
 if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
         -1) == 1)
   {
     ;
     _M_destroy();
   }
      }


      __attribute__((__noinline__))
      void
      _M_release_last_use_cold() noexcept
      { _M_release_last_use(); }


      void
      _M_weak_add_ref() noexcept
      { __gnu_cxx::__atomic_add_dispatch(&_M_weak_count, 1); }


      void
      _M_weak_release() noexcept
      {

        ;
 if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count, -1) == 1)
   {
            ;
     if (_Mutex_base<_Lp>::_S_need_barriers)
       {


  __atomic_thread_fence (4);
       }
     _M_destroy();
   }
      }

      long
      _M_get_use_count() const noexcept
      {


        return __atomic_load_n(&_M_use_count, 0);
      }

    private:
      _Sp_counted_base(_Sp_counted_base const&) = delete;
      _Sp_counted_base& operator=(_Sp_counted_base const&) = delete;

      _Atomic_word _M_use_count;
      _Atomic_word _M_weak_count;
    };

  template<>
    inline bool
    _Sp_counted_base<_S_single>::
    _M_add_ref_lock_nothrow() noexcept
    {
      if (_M_use_count == 0)
 return false;
      ++_M_use_count;
      return true;
    }

  template<>
    inline bool
    _Sp_counted_base<_S_mutex>::
    _M_add_ref_lock_nothrow() noexcept
    {
      __gnu_cxx::__scoped_lock sentry(*this);
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)
 {
   _M_use_count = 0;
   return false;
 }
      return true;
    }

  template<>
    inline bool
    _Sp_counted_base<_S_atomic>::
    _M_add_ref_lock_nothrow() noexcept
    {

      _Atomic_word __count = _M_get_use_count();
      do
 {
   if (__count == 0)
     return false;


 }
      while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,
       true, 4,
       0));
      return true;
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
        }
    }

  template<>
    inline void
    _Sp_counted_base<_S_mutex>::_M_release() noexcept
    {

      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
 {
   _M_release_last_use();
 }
    }

  template<>
    inline void
    _Sp_counted_base<_S_atomic>::_M_release() noexcept
    {
      ;

      constexpr bool __lock_free
 = __atomic_always_lock_free(sizeof(long long), 0)
 && __atomic_always_lock_free(sizeof(_Atomic_word), 0);
      constexpr bool __double_word
 = sizeof(long long) == 2 * sizeof(_Atomic_word);


      constexpr bool __aligned = __alignof(long long) <= alignof(void*);
      if constexpr (__lock_free && __double_word && __aligned)
 {
   constexpr int __wordbits = 8 * sizeof(_Atomic_word);
   constexpr int __shiftbits = __double_word ? __wordbits : 0;
   constexpr long long __unique_ref = 1LL + (1LL << __shiftbits);
   auto __both_counts = reinterpret_cast<long long*>(&_M_use_count);

   ;
   if (__atomic_load_n(__both_counts, 2) == __unique_ref)
     {




       _M_weak_count = _M_use_count = 0;
       ;
       ;
       _M_dispose();
       _M_destroy();
       return;
     }
   if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
     [[__unlikely__]]
     {
       _M_release_last_use_cold();
       return;
     }
 }
      else

      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
 {
   _M_release_last_use();
 }
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_weak_add_ref() noexcept
    { ++_M_weak_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_weak_release() noexcept
    {
      if (--_M_weak_count == 0)
        _M_destroy();
    }

  template<>
    inline long
    _Sp_counted_base<_S_single>::_M_get_use_count() const noexcept
    { return _M_use_count; }



  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __shared_ptr;

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __weak_ptr;

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __enable_shared_from_this;

  template<typename _Tp>
    class shared_ptr;

  template<typename _Tp>
    class weak_ptr;

  template<typename _Tp>
    struct owner_less;

  template<typename _Tp>
    class enable_shared_from_this;

  template<_Lock_policy _Lp = __default_lock_policy>
    class __weak_count;

  template<_Lock_policy _Lp = __default_lock_policy>
    class __shared_count;







  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }

      _Sp_counted_ptr(const _Sp_counted_ptr&) = delete;
      _Sp_counted_ptr& operator=(const _Sp_counted_ptr&) = delete;

    private:
      _Ptr _M_ptr;
    };

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_single>::_M_dispose() noexcept { }

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_mutex>::_M_dispose() noexcept { }

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_atomic>::_M_dispose() noexcept { }






  template<int _Nm, typename _Tp,
    bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
    struct _Sp_ebo_helper;


  template<int _Nm, typename _Tp>
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
    {
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }

      static _Tp&
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
    };


  template<int _Nm, typename _Tp>
    struct _Sp_ebo_helper<_Nm, _Tp, false>
    {
      explicit _Sp_ebo_helper(const _Tp& __tp) : _M_tp(__tp) { }
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }

      static _Tp&
      _S_get(_Sp_ebo_helper& __eboh)
      { return __eboh._M_tp; }

    private:
      _Tp _M_tp;
    };


  template<typename _Ptr, typename _Deleter, typename _Alloc, _Lock_policy _Lp>
    class _Sp_counted_deleter final : public _Sp_counted_base<_Lp>
    {
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
      {
 typedef _Sp_ebo_helper<0, _Deleter> _Del_base;
 typedef _Sp_ebo_helper<1, _Alloc> _Alloc_base;

      public:
 _Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 : _Del_base(std::move(__d)), _Alloc_base(__a), _M_ptr(__p)
 { }

 _Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 _Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }

 _Ptr _M_ptr;
      };

    public:
      using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_deleter>;


      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, std::move(__d), _Alloc()) { }


      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, std::move(__d), __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }

      virtual void
      _M_destroy() noexcept
      {
 __allocator_type __a(_M_impl._M_alloc());
 __allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 this->~_Sp_counted_deleter();
      }

      virtual void*
      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept
      {



        return __ti == typeid(_Deleter)
   ? std::__addressof(_M_impl._M_del())
   : nullptr;



      }

    private:



      _Impl _M_impl;
    };



  struct _Sp_make_shared_tag
  {
  private:
    template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
      friend class _Sp_counted_ptr_inplace;

    static const type_info&
    _S_ti() noexcept __attribute__ ((__visibility__ ("default")))
    {
      alignas(type_info) static constexpr char __tag[sizeof(type_info)] = { };
      return reinterpret_cast<const type_info&>(__tag);
    }

    static bool _S_eq(const type_info&) noexcept;
  };

  template<typename _Alloc>
    struct _Sp_alloc_shared_tag
    {
      const _Alloc& _M_a;
    };

  template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
    class _Sp_counted_ptr_inplace final : public _Sp_counted_base<_Lp>
    {
      class _Impl : _Sp_ebo_helper<0, _Alloc>
      {
 typedef _Sp_ebo_helper<0, _Alloc> _A_base;

      public:
 explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }

 _Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }

 __gnu_cxx::__aligned_buffer<__remove_cv_t<_Tp>> _M_storage;
      };

    public:
      using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_ptr_inplace>;


      template<typename... _Args>
 _Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 : _M_impl(__a)
 {


   allocator_traits<_Alloc>::construct(__a, _M_ptr(),
       std::forward<_Args>(__args)...);
 }

      ~_Sp_counted_ptr_inplace() noexcept { }

      virtual void
      _M_dispose() noexcept
      {
 allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
      }


      virtual void
      _M_destroy() noexcept
      {
 __allocator_type __a(_M_impl._M_alloc());
 __allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 this->~_Sp_counted_ptr_inplace();
      }

    private:
      friend class __shared_count<_Lp>;



      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept override
      {




 if (&__ti == &_Sp_make_shared_tag::_S_ti()
     ||

     __ti == typeid(_Sp_make_shared_tag)



    )
   return _M_ptr();
 return nullptr;
      }

      __remove_cv_t<_Tp>*
      _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }

      _Impl _M_impl;
    };
# 883 "/usr/include/c++/15.1.1/bits/shared_ptr_base.h" 3
  struct __sp_array_delete
  {
    template<typename _Yp>
      void operator()(_Yp* __p) const { delete[] __p; }
  };

  template<_Lock_policy _Lp>
    class __shared_count
    {

      template<typename _Tp>
 struct __not_alloc_shared_tag { using type = void; };

      template<typename _Tp>
 struct __not_alloc_shared_tag<_Sp_alloc_shared_tag<_Tp>> { };






    public:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
 __shared_count(_Ptr __p) : _M_pi(0)
 {
   try
     {
       _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
     }
   catch(...)
     {
       delete __p;
       throw;
     }
 }

      template<typename _Ptr>
 __shared_count(_Ptr __p, false_type)
 : __shared_count(__p)
 { }

      template<typename _Ptr>
 __shared_count(_Ptr __p, true_type)
 : __shared_count(__p, __sp_array_delete{}, allocator<void>())
 { }

      template<typename _Ptr, typename _Deleter,
        typename = typename __not_alloc_shared_tag<_Deleter>::type>
 __shared_count(_Ptr __p, _Deleter __d)
 : __shared_count(__p, std::move(__d), allocator<void>())
 { }

      template<typename _Ptr, typename _Deleter, typename _Alloc,
        typename = typename __not_alloc_shared_tag<_Deleter>::type>
 __shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 {
   typedef _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp> _Sp_cd_type;
   try
     {
       typename _Sp_cd_type::__allocator_type __a2(__a);
       auto __guard = std::__allocate_guarded(__a2);
       _Sp_cd_type* __mem = __guard.get();
       ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
       _M_pi = __mem;
       __guard = nullptr;
     }
   catch(...)
     {
       __d(__p);
       throw;
     }
 }

      template<typename _Tp, typename _Alloc, typename... _Args>
 __shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
         _Args&&... __args)
 {
   using _Tp2 = __remove_cv_t<_Tp>;
   using _Sp_cp_type = _Sp_counted_ptr_inplace<_Tp2, _Alloc, _Lp>;
   typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
   auto __guard = std::__allocate_guarded(__a2);
   _Sp_cp_type* __mem = __guard.get();
   auto __pi = ::new (__mem)
     _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
   __guard = nullptr;
   _M_pi = __pi;
   __p = __pi->_M_ptr();
 }
# 1022 "/usr/include/c++/15.1.1/bits/shared_ptr_base.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

      template<typename _Tp>
        explicit
 __shared_count(std::auto_ptr<_Tp>&& __r);
#pragma GCC diagnostic pop



      template<typename _Tp, typename _Del>
        explicit
 __shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 {


   if (__r.get() == nullptr)
     return;

   using _Ptr = typename unique_ptr<_Tp, _Del>::pointer;
   using _Del2 = __conditional_t<is_reference<_Del>::value,
       reference_wrapper<typename remove_reference<_Del>::type>,
       _Del>;
   using _Sp_cd_type
     = _Sp_counted_deleter<_Ptr, _Del2, allocator<void>, _Lp>;
   using _Alloc = allocator<_Sp_cd_type>;
   using _Alloc_traits = allocator_traits<_Alloc>;
   _Alloc __a;
   _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);



   _Alloc_traits::construct(__a, __mem, __r.release(),
       std::forward<_Del>(__r.get_deleter()));
   _M_pi = __mem;
 }


      explicit __shared_count(const __weak_count<_Lp>& __r);


      explicit
      __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t) noexcept;

      ~__shared_count() noexcept
      {
 if (_M_pi != nullptr)
   _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != nullptr)
   _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != _M_pi)
   {
     if (__tmp != nullptr)
       __tmp->_M_add_ref_copy();
     if (_M_pi != nullptr)
       _M_pi->_M_release();
     _M_pi = __tmp;
   }
 return *this;
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 __r._M_pi = _M_pi;
 _M_pi = __tmp;
      }

      long
      _M_get_use_count() const noexcept
      { return _M_pi ? _M_pi->_M_get_use_count() : 0; }

      bool
      _M_unique() const noexcept
      { return this->_M_get_use_count() == 1; }

      void*
      _M_get_deleter(const std::type_info& __ti) const noexcept
      { return _M_pi ? _M_pi->_M_get_deleter(__ti) : nullptr; }

      bool
      _M_less(const __shared_count& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }

      bool
      _M_less(const __weak_count<_Lp>& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }


      friend inline bool
      operator==(const __shared_count& __a, const __shared_count& __b) noexcept
      { return __a._M_pi == __b._M_pi; }

    private:
      friend class __weak_count<_Lp>;







      _Sp_counted_base<_Lp>* _M_pi;
    };


  template<_Lock_policy _Lp>
    class __weak_count
    {
    public:
      constexpr __weak_count() noexcept : _M_pi(nullptr)
      { }

      __weak_count(const __shared_count<_Lp>& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_add_ref();
      }

      __weak_count(const __weak_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_add_ref();
      }

      __weak_count(__weak_count&& __r) noexcept
      : _M_pi(__r._M_pi)
      { __r._M_pi = nullptr; }

      ~__weak_count() noexcept
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
      }

      __weak_count&
      operator=(const __shared_count<_Lp>& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != nullptr)
   __tmp->_M_weak_add_ref();
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
 _M_pi = __tmp;
 return *this;
      }

      __weak_count&
      operator=(const __weak_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != nullptr)
   __tmp->_M_weak_add_ref();
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
 _M_pi = __tmp;
 return *this;
      }

      __weak_count&
      operator=(__weak_count&& __r) noexcept
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
 _M_pi = __r._M_pi;
        __r._M_pi = nullptr;
 return *this;
      }

      void
      _M_swap(__weak_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 __r._M_pi = _M_pi;
 _M_pi = __tmp;
      }

      long
      _M_get_use_count() const noexcept
      { return _M_pi != nullptr ? _M_pi->_M_get_use_count() : 0; }

      bool
      _M_less(const __weak_count& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }

      bool
      _M_less(const __shared_count<_Lp>& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }


      friend inline bool
      operator==(const __weak_count& __a, const __weak_count& __b) noexcept
      { return __a._M_pi == __b._M_pi; }

    private:
      friend class __shared_count<_Lp>;




      _Sp_counted_base<_Lp>* _M_pi;
    };


  template<_Lock_policy _Lp>
    inline
    __shared_count<_Lp>::__shared_count(const __weak_count<_Lp>& __r)
    : _M_pi(__r._M_pi)
    {
      if (_M_pi == nullptr || !_M_pi->_M_add_ref_lock_nothrow())
 __throw_bad_weak_ptr();
    }


  template<_Lock_policy _Lp>
    inline
    __shared_count<_Lp>::
    __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t) noexcept
    : _M_pi(__r._M_pi)
    {
      if (_M_pi && !_M_pi->_M_add_ref_lock_nothrow())
 _M_pi = nullptr;
    }





  template<typename _Yp_ptr, typename _Tp_ptr>
    struct __sp_compatible_with
    : false_type
    { };

  template<typename _Yp, typename _Tp>
    struct __sp_compatible_with<_Yp*, _Tp*>
    : is_convertible<_Yp*, _Tp*>::type
    { };

  template<typename _Up, size_t _Nm>
    struct __sp_compatible_with<_Up(*)[_Nm], _Up(*)[]>
    : true_type
    { };

  template<typename _Up, size_t _Nm>
    struct __sp_compatible_with<_Up(*)[_Nm], const _Up(*)[]>
    : true_type
    { };

  template<typename _Up, size_t _Nm>
    struct __sp_compatible_with<_Up(*)[_Nm], volatile _Up(*)[]>
    : true_type
    { };

  template<typename _Up, size_t _Nm>
    struct __sp_compatible_with<_Up(*)[_Nm], const volatile _Up(*)[]>
    : true_type
    { };


  template<typename _Up, size_t _Nm, typename _Yp, typename = void>
    struct __sp_is_constructible_arrN
    : false_type
    { };

  template<typename _Up, size_t _Nm, typename _Yp>
    struct __sp_is_constructible_arrN<_Up, _Nm, _Yp, __void_t<_Yp[_Nm]>>
    : is_convertible<_Yp(*)[_Nm], _Up(*)[_Nm]>::type
    { };


  template<typename _Up, typename _Yp, typename = void>
    struct __sp_is_constructible_arr
    : false_type
    { };

  template<typename _Up, typename _Yp>
    struct __sp_is_constructible_arr<_Up, _Yp, __void_t<_Yp[]>>
    : is_convertible<_Yp(*)[], _Up(*)[]>::type
    { };


  template<typename _Tp, typename _Yp>
    struct __sp_is_constructible;


  template<typename _Up, size_t _Nm, typename _Yp>
    struct __sp_is_constructible<_Up[_Nm], _Yp>
    : __sp_is_constructible_arrN<_Up, _Nm, _Yp>::type
    { };


  template<typename _Up, typename _Yp>
    struct __sp_is_constructible<_Up[], _Yp>
    : __sp_is_constructible_arr<_Up, _Yp>::type
    { };


  template<typename _Tp, typename _Yp>
    struct __sp_is_constructible
    : is_convertible<_Yp*, _Tp*>::type
    { };


  template<typename _Tp>
    [[__gnu__::__always_inline__]]
    inline _Tp*
    __shared_ptr_deref(_Tp* __p)
    {
      do { if (std::__is_constant_evaluated() && !bool(__p != nullptr)) std::__glibcxx_assert_fail(); } while (false);
      return __p;
    }


  template<typename _Tp, _Lock_policy _Lp,
    bool = is_array<_Tp>::value, bool = is_void<_Tp>::value>
    class __shared_ptr_access
    {
    public:
      using element_type = _Tp;

      element_type&
      operator*() const noexcept
      { return *std::__shared_ptr_deref(_M_get()); }

      element_type*
      operator->() const noexcept
      {
 ;
 return _M_get();
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr_access<_Tp, _Lp, false, true>
    {
    public:
      using element_type = _Tp;

      element_type*
      operator->() const noexcept
      {
 auto __ptr = static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get();
 ;
 return __ptr;
      }
    };


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr_access<_Tp, _Lp, true, false>
    {
    public:
      using element_type = typename remove_extent<_Tp>::type;
# 1411 "/usr/include/c++/15.1.1/bits/shared_ptr_base.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
      element_type&
      operator[](ptrdiff_t __i) const noexcept
      {
 if constexpr (extent<_Tp>::value)
   do { if (std::__is_constant_evaluated() && !bool(__i < extent<_Tp>::value)) std::__glibcxx_assert_fail(); } while (false);
 return std::__shared_ptr_deref(_M_get())[__i];
      }
#pragma GCC diagnostic pop

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };

  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
    : public __shared_ptr_access<_Tp, _Lp>
    {
    public:
      using element_type = typename remove_extent<_Tp>::type;

    private:

      template<typename _Yp>
 using _SafeConv
   = typename enable_if<__sp_is_constructible<_Tp, _Yp>::value>::type;


      template<typename _Yp, typename _Res = void>
 using _Compatible = typename
   enable_if<__sp_compatible_with<_Yp*, _Tp*>::value, _Res>::type;


      template<typename _Yp>
 using _Assignable = _Compatible<_Yp, __shared_ptr&>;


      template<typename _Yp, typename _Del, typename _Res = void,
        typename _Ptr = typename unique_ptr<_Yp, _Del>::pointer>
 using _UniqCompatible = __enable_if_t<__and_<
   __sp_compatible_with<_Yp*, _Tp*>,
   is_convertible<_Ptr, element_type*>,
   is_move_constructible<_Del>
   >::value, _Res>;


      template<typename _Yp, typename _Del>
 using _UniqAssignable = _UniqCompatible<_Yp, _Del, __shared_ptr&>;

    public:


      using weak_type = __weak_ptr<_Tp, _Lp>;


      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Yp, typename = _SafeConv<_Yp>>
 explicit
 __shared_ptr(_Yp* __p)
 : _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 {
   static_assert( !is_void<_Yp>::value, "incomplete type" );
   static_assert( sizeof(_Yp) > 0, "incomplete type" );
   _M_enable_shared_from_this_with(__p);
 }

      template<typename _Yp, typename _Deleter, typename = _SafeConv<_Yp>>
 __shared_ptr(_Yp* __p, _Deleter __d)
 : _M_ptr(__p), _M_refcount(__p, std::move(__d))
 {
   static_assert(__is_invocable<_Deleter&, _Yp*&>::value,
       "deleter expression d(p) is well-formed");
   _M_enable_shared_from_this_with(__p);
 }

      template<typename _Yp, typename _Deleter, typename _Alloc,
        typename = _SafeConv<_Yp>>
 __shared_ptr(_Yp* __p, _Deleter __d, _Alloc __a)
 : _M_ptr(__p), _M_refcount(__p, std::move(__d), std::move(__a))
 {
   static_assert(__is_invocable<_Deleter&, _Yp*&>::value,
       "deleter expression d(p) is well-formed");
   _M_enable_shared_from_this_with(__p);
 }

      template<typename _Deleter>
 __shared_ptr(nullptr_t __p, _Deleter __d)
 : _M_ptr(0), _M_refcount(__p, std::move(__d))
 { }

      template<typename _Deleter, typename _Alloc>
        __shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)
 : _M_ptr(0), _M_refcount(__p, std::move(__d), std::move(__a))
 { }


      template<typename _Yp>
 __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
       element_type* __p) noexcept
 : _M_ptr(__p), _M_refcount(__r._M_refcount)
 { }


      template<typename _Yp>
 __shared_ptr(__shared_ptr<_Yp, _Lp>&& __r,
       element_type* __p) noexcept
 : _M_ptr(__p), _M_refcount()
 {
   _M_refcount._M_swap(__r._M_refcount);
   __r._M_ptr = nullptr;
 }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;

      template<typename _Yp, typename = _Compatible<_Yp>>
 __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 { }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
 _M_refcount._M_swap(__r._M_refcount);
 __r._M_ptr = nullptr;
      }

      template<typename _Yp, typename = _Compatible<_Yp>>
 __shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount()
 {
   _M_refcount._M_swap(__r._M_refcount);
   __r._M_ptr = nullptr;
 }

      template<typename _Yp, typename = _Compatible<_Yp>>
 explicit __shared_ptr(const __weak_ptr<_Yp, _Lp>& __r)
 : _M_refcount(__r._M_refcount)
 {


   _M_ptr = __r._M_ptr;
 }


      template<typename _Yp, typename _Del,
        typename = _UniqCompatible<_Yp, _Del>>
 __shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 : _M_ptr(__r.get()), _M_refcount()
 {
   auto __raw = std::__to_address(__r.get());
   _M_refcount = __shared_count<_Lp>(std::move(__r));
   _M_enable_shared_from_this_with(__raw);
 }
# 1592 "/usr/include/c++/15.1.1/bits/shared_ptr_base.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

      template<typename _Yp, typename = _Compatible<_Yp>>
 __shared_ptr(auto_ptr<_Yp>&& __r);
#pragma GCC diagnostic pop


      constexpr __shared_ptr(nullptr_t) noexcept : __shared_ptr() { }

      template<typename _Yp>
 _Assignable<_Yp>
 operator=(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 {
   _M_ptr = __r._M_ptr;
   _M_refcount = __r._M_refcount;
   return *this;
 }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
      template<typename _Yp>
 _Assignable<_Yp>
 operator=(auto_ptr<_Yp>&& __r)
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }
#pragma GCC diagnostic pop


      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
      {
 __shared_ptr(std::move(__r)).swap(*this);
 return *this;
      }

      template<class _Yp>
 _Assignable<_Yp>
 operator=(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }

      template<typename _Yp, typename _Del>
 _UniqAssignable<_Yp, _Del>
 operator=(unique_ptr<_Yp, _Del>&& __r)
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }

      void
      reset() noexcept
      { __shared_ptr().swap(*this); }

      template<typename _Yp>
 _SafeConv<_Yp>
 reset(_Yp* __p)
 {

   do { if (std::__is_constant_evaluated() && !bool(__p == nullptr || __p != _M_ptr)) std::__glibcxx_assert_fail(); } while (false);
   __shared_ptr(__p).swap(*this);
 }

      template<typename _Yp, typename _Deleter>
 _SafeConv<_Yp>
 reset(_Yp* __p, _Deleter __d)
 { __shared_ptr(__p, std::move(__d)).swap(*this); }

      template<typename _Yp, typename _Deleter, typename _Alloc>
 _SafeConv<_Yp>
 reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }


      element_type*
      get() const noexcept
      { return _M_ptr; }


      explicit operator bool() const noexcept
      { return _M_ptr != nullptr; }


      bool
      unique() const noexcept
      { return _M_refcount._M_unique(); }


      long
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }


      void
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
      {
 std::swap(_M_ptr, __other._M_ptr);
 _M_refcount._M_swap(__other._M_refcount);
      }
# 1704 "/usr/include/c++/15.1.1/bits/shared_ptr_base.h" 3
      template<typename _Tp1>
 bool
 owner_before(__shared_ptr<_Tp1, _Lp> const& __rhs) const noexcept
 { return _M_refcount._M_less(__rhs._M_refcount); }

      template<typename _Tp1>
 bool
 owner_before(__weak_ptr<_Tp1, _Lp> const& __rhs) const noexcept
 { return _M_refcount._M_less(__rhs._M_refcount); }


    protected:

      template<typename _Alloc, typename... _Args>
 __shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 : _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 { _M_enable_shared_from_this_with(_M_ptr); }

      template<typename _Tp1, _Lock_policy _Lp1, typename _Alloc,
        typename... _Args>
 friend __shared_ptr<_Tp1, _Lp1>
 __allocate_shared(const _Alloc& __a, _Args&&... __args);
# 1738 "/usr/include/c++/15.1.1/bits/shared_ptr_base.h" 3
      __shared_ptr(const __weak_ptr<_Tp, _Lp>& __r, std::nothrow_t) noexcept
      : _M_refcount(__r._M_refcount, std::nothrow)
      {
 _M_ptr = _M_refcount._M_get_use_count() ? __r._M_ptr : nullptr;
      }

      friend class __weak_ptr<_Tp, _Lp>;

    private:

      template<typename _Yp>
 using __esft_base_t = decltype(__enable_shared_from_this_base(
       std::declval<const __shared_count<_Lp>&>(),
       std::declval<_Yp*>()));


      template<typename _Yp, typename = void>
 struct __has_esft_base
 : false_type { };

      template<typename _Yp>
 struct __has_esft_base<_Yp, __void_t<__esft_base_t<_Yp>>>
 : __not_<is_array<_Tp>> { };

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
 typename enable_if<__has_esft_base<_Yp2>::value>::type
 _M_enable_shared_from_this_with(_Yp* __p) noexcept
 {
   if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
     __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
 }

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
 typename enable_if<!__has_esft_base<_Yp2>::value>::type
 _M_enable_shared_from_this_with(_Yp*) noexcept
 { }

      void*
      _M_get_deleter(const std::type_info& __ti) const noexcept
      { return _M_refcount._M_get_deleter(__ti); }

      template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;
      template<typename _Tp1, _Lock_policy _Lp1> friend class __weak_ptr;

      template<typename _Del, typename _Tp1, _Lock_policy _Lp1>
 friend _Del* get_deleter(const __shared_ptr<_Tp1, _Lp1>&) noexcept;

      template<typename _Del, typename _Tp1>
 friend _Del* get_deleter(const shared_ptr<_Tp1>&) noexcept;
# 1795 "/usr/include/c++/15.1.1/bits/shared_ptr_base.h" 3
      element_type* _M_ptr;
      __shared_count<_Lp> _M_refcount;
    };



  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator==(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return __a.get() == __b.get(); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !__a; }
# 1827 "/usr/include/c++/15.1.1/bits/shared_ptr_base.h" 3
  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !__a; }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator!=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return __a.get() != __b.get(); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator!=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return (bool)__a; }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator!=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return (bool)__a; }

  template<typename _Tp, typename _Up, _Lock_policy _Lp>
    inline bool
    operator<(const __shared_ptr<_Tp, _Lp>& __a,
       const __shared_ptr<_Up, _Lp>& __b) noexcept
    {
      using _Tp_elt = typename __shared_ptr<_Tp, _Lp>::element_type;
      using _Up_elt = typename __shared_ptr<_Up, _Lp>::element_type;
      using _Vp = typename common_type<_Tp_elt*, _Up_elt*>::type;
      return less<_Vp>()(__a.get(), __b.get());
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    {
      using _Tp_elt = typename __shared_ptr<_Tp, _Lp>::element_type;
      return less<_Tp_elt*>()(__a.get(), nullptr);
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    {
      using _Tp_elt = typename __shared_ptr<_Tp, _Lp>::element_type;
      return less<_Tp_elt*>()(nullptr, __a.get());
    }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator<=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return !(__b < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !(nullptr < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator>(const __shared_ptr<_Tp1, _Lp>& __a,
       const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return (__b < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return nullptr < __a; }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return __a < nullptr; }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator>=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return !(__a < __b); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !(nullptr < __a); }



  template<typename _Tp, _Lock_policy _Lp>
    inline void
    swap(__shared_ptr<_Tp, _Lp>& __a, __shared_ptr<_Tp, _Lp>& __b) noexcept
    { __a.swap(__b); }
# 1937 "/usr/include/c++/15.1.1/bits/shared_ptr_base.h" 3
  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    static_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    {
      using _Sp = __shared_ptr<_Tp, _Lp>;
      return _Sp(__r, static_cast<typename _Sp::element_type*>(__r.get()));
    }






  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    const_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    {
      using _Sp = __shared_ptr<_Tp, _Lp>;
      return _Sp(__r, const_cast<typename _Sp::element_type*>(__r.get()));
    }






  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    dynamic_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    {
      using _Sp = __shared_ptr<_Tp, _Lp>;
      if (auto* __p = dynamic_cast<typename _Sp::element_type*>(__r.get()))
 return _Sp(__r, __p);
      return _Sp();
    }


  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    reinterpret_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    {
      using _Sp = __shared_ptr<_Tp, _Lp>;
      return _Sp(__r, reinterpret_cast<typename _Sp::element_type*>(__r.get()));
    }


  template<typename _Tp, _Lock_policy _Lp>
    class __weak_ptr
    {
      template<typename _Yp, typename _Res = void>
 using _Compatible = typename
   enable_if<__sp_compatible_with<_Yp*, _Tp*>::value, _Res>::type;


      template<typename _Yp>
 using _Assignable = _Compatible<_Yp, __weak_ptr&>;

    public:
      using element_type = typename remove_extent<_Tp>::type;

      constexpr __weak_ptr() noexcept
      : _M_ptr(nullptr), _M_refcount()
      { }

      __weak_ptr(const __weak_ptr&) noexcept = default;

      ~__weak_ptr() = default;
# 2019 "/usr/include/c++/15.1.1/bits/shared_ptr_base.h" 3
      template<typename _Yp, typename = _Compatible<_Yp>>
 __weak_ptr(const __weak_ptr<_Yp, _Lp>& __r) noexcept
 : _M_refcount(__r._M_refcount)
        { _M_ptr = __r.lock().get(); }

      template<typename _Yp, typename = _Compatible<_Yp>>
 __weak_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 { }

      __weak_ptr(__weak_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount(std::move(__r._M_refcount))
      { __r._M_ptr = nullptr; }

      template<typename _Yp, typename = _Compatible<_Yp>>
 __weak_ptr(__weak_ptr<_Yp, _Lp>&& __r) noexcept
 : _M_ptr(__r.lock().get()), _M_refcount(std::move(__r._M_refcount))
        { __r._M_ptr = nullptr; }

      __weak_ptr&
      operator=(const __weak_ptr& __r) noexcept = default;

      template<typename _Yp>
 _Assignable<_Yp>
 operator=(const __weak_ptr<_Yp, _Lp>& __r) noexcept
 {
   _M_ptr = __r.lock().get();
   _M_refcount = __r._M_refcount;
   return *this;
 }

      template<typename _Yp>
 _Assignable<_Yp>
 operator=(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 {
   _M_ptr = __r._M_ptr;
   _M_refcount = __r._M_refcount;
   return *this;
 }

      __weak_ptr&
      operator=(__weak_ptr&& __r) noexcept
      {
 __weak_ptr(std::move(__r)).swap(*this);
 return *this;
      }

      template<typename _Yp>
 _Assignable<_Yp>
 operator=(__weak_ptr<_Yp, _Lp>&& __r) noexcept
 {
   _M_ptr = __r.lock().get();
   _M_refcount = std::move(__r._M_refcount);
   __r._M_ptr = nullptr;
   return *this;
 }

      __shared_ptr<_Tp, _Lp>
      lock() const noexcept
      { return __shared_ptr<_Tp, _Lp>(*this, std::nothrow); }

      long
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }

      bool
      expired() const noexcept
      { return _M_refcount._M_get_use_count() == 0; }

      template<typename _Tp1>
 bool
 owner_before(const __shared_ptr<_Tp1, _Lp>& __rhs) const noexcept
 { return _M_refcount._M_less(__rhs._M_refcount); }

      template<typename _Tp1>
 bool
 owner_before(const __weak_ptr<_Tp1, _Lp>& __rhs) const noexcept
 { return _M_refcount._M_less(__rhs._M_refcount); }

      void
      reset() noexcept
      { __weak_ptr().swap(*this); }

      void
      swap(__weak_ptr& __s) noexcept
      {
 std::swap(_M_ptr, __s._M_ptr);
 _M_refcount._M_swap(__s._M_refcount);
      }

    private:

      void
      _M_assign(_Tp* __ptr, const __shared_count<_Lp>& __refcount) noexcept
      {
 if (use_count() == 0)
   {
     _M_ptr = __ptr;
     _M_refcount = __refcount;
   }
      }

      template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;
      template<typename _Tp1, _Lock_policy _Lp1> friend class __weak_ptr;
      friend class __enable_shared_from_this<_Tp, _Lp>;
      friend class enable_shared_from_this<_Tp>;




      element_type* _M_ptr;
      __weak_count<_Lp> _M_refcount;
    };


  template<typename _Tp, _Lock_policy _Lp>
    inline void
    swap(__weak_ptr<_Tp, _Lp>& __a, __weak_ptr<_Tp, _Lp>& __b) noexcept
    { __a.swap(__b); }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  template<typename _Tp, typename _Tp1>
    struct _Sp_owner_less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __lhs, const _Tp& __rhs) const noexcept
      { return __lhs.owner_before(__rhs); }

      bool
      operator()(const _Tp& __lhs, const _Tp1& __rhs) const noexcept
      { return __lhs.owner_before(__rhs); }

      bool
      operator()(const _Tp1& __lhs, const _Tp& __rhs) const noexcept
      { return __lhs.owner_before(__rhs); }
    };
#pragma GCC diagnostic pop

  template<>
    struct _Sp_owner_less<void, void>
    {
      template<typename _Tp, typename _Up>
 auto
 operator()(const _Tp& __lhs, const _Up& __rhs) const noexcept
 -> decltype(__lhs.owner_before(__rhs))
 { return __lhs.owner_before(__rhs); }

      using is_transparent = void;
    };

  template<typename _Tp, _Lock_policy _Lp>
    struct owner_less<__shared_ptr<_Tp, _Lp>>
    : public _Sp_owner_less<__shared_ptr<_Tp, _Lp>, __weak_ptr<_Tp, _Lp>>
    { };

  template<typename _Tp, _Lock_policy _Lp>
    struct owner_less<__weak_ptr<_Tp, _Lp>>
    : public _Sp_owner_less<__weak_ptr<_Tp, _Lp>, __shared_ptr<_Tp, _Lp>>
    { };


  template<typename _Tp, _Lock_policy _Lp>
    class __enable_shared_from_this
    {
    protected:
      constexpr __enable_shared_from_this() noexcept { }

      __enable_shared_from_this(const __enable_shared_from_this&) noexcept { }

      __enable_shared_from_this&
      operator=(const __enable_shared_from_this&) noexcept
      { return *this; }

      ~__enable_shared_from_this() { }

    public:
      __shared_ptr<_Tp, _Lp>
      shared_from_this()
      { return __shared_ptr<_Tp, _Lp>(this->_M_weak_this); }

      __shared_ptr<const _Tp, _Lp>
      shared_from_this() const
      { return __shared_ptr<const _Tp, _Lp>(this->_M_weak_this); }


      __weak_ptr<_Tp, _Lp>
      weak_from_this() noexcept
      { return this->_M_weak_this; }

      __weak_ptr<const _Tp, _Lp>
      weak_from_this() const noexcept
      { return this->_M_weak_this; }


    private:
      template<typename _Tp1>
 void
 _M_weak_assign(_Tp1* __p, const __shared_count<_Lp>& __n) const noexcept
 { _M_weak_this._M_assign(__p, __n); }

      friend const __enable_shared_from_this*
      __enable_shared_from_this_base(const __shared_count<_Lp>&,
         const __enable_shared_from_this* __p)
      { return __p; }

      template<typename, _Lock_policy>
 friend class __shared_ptr;

      mutable __weak_ptr<_Tp, _Lp> _M_weak_this;
    };

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy,
    typename _Alloc, typename... _Args>
    inline __shared_ptr<_Tp, _Lp>
    __allocate_shared(const _Alloc& __a, _Args&&... __args)
    {
      static_assert(!is_array<_Tp>::value, "make_shared<T[]> not supported");

      return __shared_ptr<_Tp, _Lp>(_Sp_alloc_shared_tag<_Alloc>{__a},
        std::forward<_Args>(__args)...);
    }

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy,
    typename... _Args>
    inline __shared_ptr<_Tp, _Lp>
    __make_shared(_Args&&... __args)
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::__allocate_shared<_Tp, _Lp>(std::allocator<_Tp_nc>(),
           std::forward<_Args>(__args)...);
    }


  template<typename _Tp, _Lock_policy _Lp>
    struct hash<__shared_ptr<_Tp, _Lp>>
    : public __hash_base<size_t, __shared_ptr<_Tp, _Lp>>
    {
      size_t
      operator()(const __shared_ptr<_Tp, _Lp>& __s) const noexcept
      {
 return hash<typename __shared_ptr<_Tp, _Lp>::element_type*>()(
     __s.get());
      }
    };


}
# 54 "/usr/include/c++/15.1.1/bits/shared_ptr.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 68 "/usr/include/c++/15.1.1/bits/shared_ptr.h" 3
  template<typename _Ch, typename _Tr, typename _Tp, _Lock_policy _Lp>
    inline std::basic_ostream<_Ch, _Tr>&
    operator<<(std::basic_ostream<_Ch, _Tr>& __os,
        const __shared_ptr<_Tp, _Lp>& __p)
    {
      __os << __p.get();
      return __os;
    }

  template<typename _Del, typename _Tp, _Lock_policy _Lp>
    inline _Del*
    get_deleter(const __shared_ptr<_Tp, _Lp>& __p) noexcept
    {

      return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del)));



    }





  template<typename _Del, typename _Tp>
    inline _Del*
    get_deleter(const shared_ptr<_Tp>& __p) noexcept
    {

      return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del)));



    }
# 111 "/usr/include/c++/15.1.1/bits/shared_ptr.h" 3
  template<typename _Tp>
    using _NonArray = __enable_if_t<!is_array<_Tp>::value, _Tp>;
# 174 "/usr/include/c++/15.1.1/bits/shared_ptr.h" 3
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
    {
      template<typename... _Args>
 using _Constructible = typename enable_if<
   is_constructible<__shared_ptr<_Tp>, _Args...>::value
 >::type;

      template<typename _Arg>
 using _Assignable = typename enable_if<
   is_assignable<__shared_ptr<_Tp>&, _Arg>::value, shared_ptr&
 >::type;

    public:


      using element_type = typename __shared_ptr<_Tp>::element_type;




      using weak_type = weak_ptr<_Tp>;





      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;







      template<typename _Yp, typename = _Constructible<_Yp*>>
 explicit
 shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
# 228 "/usr/include/c++/15.1.1/bits/shared_ptr.h" 3
      template<typename _Yp, typename _Deleter,
        typename = _Constructible<_Yp*, _Deleter>>
 shared_ptr(_Yp* __p, _Deleter __d)
        : __shared_ptr<_Tp>(__p, std::move(__d)) { }
# 246 "/usr/include/c++/15.1.1/bits/shared_ptr.h" 3
      template<typename _Deleter>
 shared_ptr(nullptr_t __p, _Deleter __d)
        : __shared_ptr<_Tp>(__p, std::move(__d)) { }
# 265 "/usr/include/c++/15.1.1/bits/shared_ptr.h" 3
      template<typename _Yp, typename _Deleter, typename _Alloc,
        typename = _Constructible<_Yp*, _Deleter, _Alloc>>
 shared_ptr(_Yp* __p, _Deleter __d, _Alloc __a)
 : __shared_ptr<_Tp>(__p, std::move(__d), std::move(__a)) { }
# 285 "/usr/include/c++/15.1.1/bits/shared_ptr.h" 3
      template<typename _Deleter, typename _Alloc>
 shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)
 : __shared_ptr<_Tp>(__p, std::move(__d), std::move(__a)) { }
# 309 "/usr/include/c++/15.1.1/bits/shared_ptr.h" 3
      template<typename _Yp>
 shared_ptr(const shared_ptr<_Yp>& __r, element_type* __p) noexcept
 : __shared_ptr<_Tp>(__r, __p) { }
# 348 "/usr/include/c++/15.1.1/bits/shared_ptr.h" 3
      template<typename _Yp,
        typename = _Constructible<const shared_ptr<_Yp>&>>
 shared_ptr(const shared_ptr<_Yp>& __r) noexcept
        : __shared_ptr<_Tp>(__r) { }






      shared_ptr(shared_ptr&& __r) noexcept
      : __shared_ptr<_Tp>(std::move(__r)) { }






      template<typename _Yp, typename = _Constructible<shared_ptr<_Yp>>>
 shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 : __shared_ptr<_Tp>(std::move(__r)) { }
# 378 "/usr/include/c++/15.1.1/bits/shared_ptr.h" 3
      template<typename _Yp, typename = _Constructible<const weak_ptr<_Yp>&>>
 explicit shared_ptr(const weak_ptr<_Yp>& __r)
 : __shared_ptr<_Tp>(__r) { }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
      template<typename _Yp, typename = _Constructible<auto_ptr<_Yp>>>
 shared_ptr(auto_ptr<_Yp>&& __r);
#pragma GCC diagnostic pop




      template<typename _Yp, typename _Del,
        typename = _Constructible<unique_ptr<_Yp, _Del>>>
 shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 : __shared_ptr<_Tp>(std::move(__r)) { }
# 411 "/usr/include/c++/15.1.1/bits/shared_ptr.h" 3
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;

      template<typename _Yp>
 _Assignable<const shared_ptr<_Yp>&>
 operator=(const shared_ptr<_Yp>& __r) noexcept
 {
   this->__shared_ptr<_Tp>::operator=(__r);
   return *this;
 }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
      template<typename _Yp>
 _Assignable<auto_ptr<_Yp>>
 operator=(auto_ptr<_Yp>&& __r)
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }
#pragma GCC diagnostic pop


      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
 this->__shared_ptr<_Tp>::operator=(std::move(__r));
 return *this;
      }

      template<class _Yp>
 _Assignable<shared_ptr<_Yp>>
 operator=(shared_ptr<_Yp>&& __r) noexcept
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }

      template<typename _Yp, typename _Del>
 _Assignable<unique_ptr<_Yp, _Del>>
 operator=(unique_ptr<_Yp, _Del>&& __r)
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }

    private:

      template<typename _Alloc, typename... _Args>
 shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 : __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 { }

      template<typename _Yp, typename _Alloc, typename... _Args>
 friend shared_ptr<_NonArray<_Yp>>
 allocate_shared(const _Alloc&, _Args&&...);

      template<typename _Yp, typename... _Args>
 friend shared_ptr<_NonArray<_Yp>>
 make_shared(_Args&&...);
# 534 "/usr/include/c++/15.1.1/bits/shared_ptr.h" 3
      shared_ptr(const weak_ptr<_Tp>& __r, std::nothrow_t) noexcept
      : __shared_ptr<_Tp>(__r, std::nothrow) { }

      friend class weak_ptr<_Tp>;
    };


  template<typename _Tp>
    shared_ptr(weak_ptr<_Tp>) -> shared_ptr<_Tp>;
  template<typename _Tp, typename _Del>
    shared_ptr(unique_ptr<_Tp, _Del>) -> shared_ptr<_Tp>;







  template<typename _Tp, typename _Up>
    [[__nodiscard__]] inline bool
    operator==(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return __a.get() == __b.get(); }


  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !__a; }
# 579 "/usr/include/c++/15.1.1/bits/shared_ptr.h" 3
  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator==(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !__a; }


  template<typename _Tp, typename _Up>
    [[__nodiscard__]] inline bool
    operator!=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return __a.get() != __b.get(); }


  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return (bool)__a; }


  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator!=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return (bool)__a; }


  template<typename _Tp, typename _Up>
    [[__nodiscard__]] inline bool
    operator<(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    {
      using _Tp_elt = typename shared_ptr<_Tp>::element_type;
      using _Up_elt = typename shared_ptr<_Up>::element_type;
      using _Vp = typename common_type<_Tp_elt*, _Up_elt*>::type;
      return less<_Vp>()(__a.get(), __b.get());
    }


  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator<(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    {
      using _Tp_elt = typename shared_ptr<_Tp>::element_type;
      return less<_Tp_elt*>()(__a.get(), nullptr);
    }


  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator<(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    {
      using _Tp_elt = typename shared_ptr<_Tp>::element_type;
      return less<_Tp_elt*>()(nullptr, __a.get());
    }


  template<typename _Tp, typename _Up>
    [[__nodiscard__]] inline bool
    operator<=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return !(__b < __a); }


  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator<=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !(nullptr < __a); }


  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator<=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !(__a < nullptr); }


  template<typename _Tp, typename _Up>
    [[__nodiscard__]] inline bool
    operator>(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return (__b < __a); }


  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator>(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return nullptr < __a; }


  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator>(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return __a < nullptr; }


  template<typename _Tp, typename _Up>
    [[__nodiscard__]] inline bool
    operator>=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return !(__a < __b); }


  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator>=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !(__a < nullptr); }


  template<typename _Tp>
    [[__nodiscard__]] inline bool
    operator>=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !(nullptr < __a); }





  template<typename _Tp>
    inline void
    swap(shared_ptr<_Tp>& __a, shared_ptr<_Tp>& __b) noexcept
    { __a.swap(__b); }




  template<typename _Tp, typename _Up>
    inline shared_ptr<_Tp>
    static_pointer_cast(const shared_ptr<_Up>& __r) noexcept
    {
      using _Sp = shared_ptr<_Tp>;
      return _Sp(__r, static_cast<typename _Sp::element_type*>(__r.get()));
    }


  template<typename _Tp, typename _Up>
    inline shared_ptr<_Tp>
    const_pointer_cast(const shared_ptr<_Up>& __r) noexcept
    {
      using _Sp = shared_ptr<_Tp>;
      return _Sp(__r, const_cast<typename _Sp::element_type*>(__r.get()));
    }


  template<typename _Tp, typename _Up>
    inline shared_ptr<_Tp>
    dynamic_pointer_cast(const shared_ptr<_Up>& __r) noexcept
    {
      using _Sp = shared_ptr<_Tp>;
      if (auto* __p = dynamic_cast<typename _Sp::element_type*>(__r.get()))
 return _Sp(__r, __p);
      return _Sp();
    }




  template<typename _Tp, typename _Up>
    inline shared_ptr<_Tp>
    reinterpret_pointer_cast(const shared_ptr<_Up>& __r) noexcept
    {
      using _Sp = shared_ptr<_Tp>;
      return _Sp(__r, reinterpret_cast<typename _Sp::element_type*>(__r.get()));
    }
# 809 "/usr/include/c++/15.1.1/bits/shared_ptr.h" 3
  template<typename _Tp>
    class weak_ptr : public __weak_ptr<_Tp>
    {
      template<typename _Arg>
 using _Constructible = typename enable_if<
   is_constructible<__weak_ptr<_Tp>, _Arg>::value
 >::type;

      template<typename _Arg>
 using _Assignable = typename enable_if<
   is_assignable<__weak_ptr<_Tp>&, _Arg>::value, weak_ptr&
 >::type;

    public:
      constexpr weak_ptr() noexcept = default;

      template<typename _Yp,
        typename = _Constructible<const shared_ptr<_Yp>&>>
 weak_ptr(const shared_ptr<_Yp>& __r) noexcept
 : __weak_ptr<_Tp>(__r) { }

      weak_ptr(const weak_ptr&) noexcept = default;

      template<typename _Yp, typename = _Constructible<const weak_ptr<_Yp>&>>
 weak_ptr(const weak_ptr<_Yp>& __r) noexcept
 : __weak_ptr<_Tp>(__r) { }

      weak_ptr(weak_ptr&&) noexcept = default;

      template<typename _Yp, typename = _Constructible<weak_ptr<_Yp>>>
 weak_ptr(weak_ptr<_Yp>&& __r) noexcept
 : __weak_ptr<_Tp>(std::move(__r)) { }

      weak_ptr&
      operator=(const weak_ptr& __r) noexcept = default;

      template<typename _Yp>
 _Assignable<const weak_ptr<_Yp>&>
 operator=(const weak_ptr<_Yp>& __r) noexcept
 {
   this->__weak_ptr<_Tp>::operator=(__r);
   return *this;
 }

      template<typename _Yp>
 _Assignable<const shared_ptr<_Yp>&>
 operator=(const shared_ptr<_Yp>& __r) noexcept
 {
   this->__weak_ptr<_Tp>::operator=(__r);
   return *this;
 }

      weak_ptr&
      operator=(weak_ptr&& __r) noexcept = default;

      template<typename _Yp>
 _Assignable<weak_ptr<_Yp>>
 operator=(weak_ptr<_Yp>&& __r) noexcept
 {
   this->__weak_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }

      shared_ptr<_Tp>
      lock() const noexcept
      { return shared_ptr<_Tp>(*this, std::nothrow); }
    };


  template<typename _Tp>
    weak_ptr(shared_ptr<_Tp>) -> weak_ptr<_Tp>;





  template<typename _Tp>
    inline void
    swap(weak_ptr<_Tp>& __a, weak_ptr<_Tp>& __b) noexcept
    { __a.swap(__b); }



  template<typename _Tp = void>
    struct owner_less;


  template<>
    struct owner_less<void> : _Sp_owner_less<void, void>
    { };


  template<typename _Tp>
    struct owner_less<shared_ptr<_Tp>>
    : public _Sp_owner_less<shared_ptr<_Tp>, weak_ptr<_Tp>>
    { };


  template<typename _Tp>
    struct owner_less<weak_ptr<_Tp>>
    : public _Sp_owner_less<weak_ptr<_Tp>, shared_ptr<_Tp>>
    { };






  template<typename _Tp>
    class enable_shared_from_this
    {
    protected:
      constexpr enable_shared_from_this() noexcept { }

      enable_shared_from_this(const enable_shared_from_this&) noexcept { }

      enable_shared_from_this&
      operator=(const enable_shared_from_this&) noexcept
      { return *this; }

      ~enable_shared_from_this() { }

    public:
      shared_ptr<_Tp>
      shared_from_this()
      { return shared_ptr<_Tp>(this->_M_weak_this); }

      shared_ptr<const _Tp>
      shared_from_this() const
      { return shared_ptr<const _Tp>(this->_M_weak_this); }






      weak_ptr<_Tp>
      weak_from_this() noexcept
      { return this->_M_weak_this; }

      weak_ptr<const _Tp>
      weak_from_this() const noexcept
      { return this->_M_weak_this; }



    private:
      template<typename _Tp1>
 void
 _M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 { _M_weak_this._M_assign(__p, __n); }


      friend const enable_shared_from_this*
      __enable_shared_from_this_base(const __shared_count<>&,
         const enable_shared_from_this* __p)
      { return __p; }

      template<typename, _Lock_policy>
 friend class __shared_ptr;

      mutable weak_ptr<_Tp> _M_weak_this;
    };
# 986 "/usr/include/c++/15.1.1/bits/shared_ptr.h" 3
  template<typename _Tp, typename _Alloc, typename... _Args>
    inline shared_ptr<_NonArray<_Tp>>
    allocate_shared(const _Alloc& __a, _Args&&... __args)
    {
      return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},
        std::forward<_Args>(__args)...);
    }
# 1001 "/usr/include/c++/15.1.1/bits/shared_ptr.h" 3
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_NonArray<_Tp>>
    make_shared(_Args&&... __args)
    {
      using _Alloc = allocator<void>;
      _Alloc __a;
      return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},
        std::forward<_Args>(__args)...);
    }
# 1150 "/usr/include/c++/15.1.1/bits/shared_ptr.h" 3
  template<typename _Tp>
    struct hash<shared_ptr<_Tp>>
    : public __hash_base<size_t, shared_ptr<_Tp>>
    {
      size_t
      operator()(const shared_ptr<_Tp>& __s) const noexcept
      {
 return std::hash<typename shared_ptr<_Tp>::element_type*>()(__s.get());
      }
    };


  template<typename _Tp>
    constexpr bool __is_shared_ptr = false;
  template<typename _Tp>
    constexpr bool __is_shared_ptr<shared_ptr<_Tp>> = true;






  namespace __detail::__variant
  {
    template<typename> struct _Never_valueless_alt;



    template<typename _Tp>
      struct _Never_valueless_alt<std::shared_ptr<_Tp>>
      : std::true_type
      { };



    template<typename _Tp>
      struct _Never_valueless_alt<std::weak_ptr<_Tp>>
      : std::true_type
      { };
  }



}
# 83 "/usr/include/c++/15.1.1/memory" 2 3
# 1 "/usr/include/c++/15.1.1/bits/shared_ptr_atomic.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/shared_ptr_atomic.h" 3
#define _SHARED_PTR_ATOMIC_H 1

# 1 "/usr/include/c++/15.1.1/bits/atomic_base.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/atomic_base.h" 3
#define _GLIBCXX_ATOMIC_BASE_H 1







# 1 "/usr/include/c++/15.1.1/bits/atomic_lockfree_defines.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/atomic_lockfree_defines.h" 3
#define _GLIBCXX_ATOMIC_LOCK_FREE_H 1
# 51 "/usr/include/c++/15.1.1/bits/atomic_lockfree_defines.h" 3
#define ATOMIC_BOOL_LOCK_FREE __GCC_ATOMIC_BOOL_LOCK_FREE
#define ATOMIC_CHAR_LOCK_FREE __GCC_ATOMIC_CHAR_LOCK_FREE
#define ATOMIC_WCHAR_T_LOCK_FREE __GCC_ATOMIC_WCHAR_T_LOCK_FREE



#define ATOMIC_CHAR16_T_LOCK_FREE __GCC_ATOMIC_CHAR16_T_LOCK_FREE
#define ATOMIC_CHAR32_T_LOCK_FREE __GCC_ATOMIC_CHAR32_T_LOCK_FREE
#define ATOMIC_SHORT_LOCK_FREE __GCC_ATOMIC_SHORT_LOCK_FREE
#define ATOMIC_INT_LOCK_FREE __GCC_ATOMIC_INT_LOCK_FREE
#define ATOMIC_LONG_LOCK_FREE __GCC_ATOMIC_LONG_LOCK_FREE
#define ATOMIC_LLONG_LOCK_FREE __GCC_ATOMIC_LLONG_LOCK_FREE
#define ATOMIC_POINTER_LOCK_FREE __GCC_ATOMIC_POINTER_LOCK_FREE
# 40 "/usr/include/c++/15.1.1/bits/atomic_base.h" 2 3
# 50 "/usr/include/c++/15.1.1/bits/atomic_base.h" 3
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 51 "/usr/include/c++/15.1.1/bits/atomic_base.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 82 "/usr/include/c++/15.1.1/bits/atomic_base.h" 3
  enum memory_order : int
    {
      memory_order_relaxed,
      memory_order_consume,
      memory_order_acquire,
      memory_order_release,
      memory_order_acq_rel,
      memory_order_seq_cst
    };



  enum __memory_order_modifier
    {
      __memory_order_mask = 0x0ffff,
      __memory_order_modifier_mask = 0xffff0000,
      __memory_order_hle_acquire = 0x10000,
      __memory_order_hle_release = 0x20000
    };


  constexpr memory_order
  operator|(memory_order __m, __memory_order_modifier __mod) noexcept
  {
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod) noexcept
  {
    return memory_order(int(__m) & int(__mod));
  }




  constexpr memory_order
  __cmpexch_failure_order2(memory_order __m) noexcept
  {
    return __m == memory_order_acq_rel ? memory_order_acquire
      : __m == memory_order_release ? memory_order_relaxed : __m;
  }

  constexpr memory_order
  __cmpexch_failure_order(memory_order __m) noexcept
  {
    return memory_order(__cmpexch_failure_order2(__m & __memory_order_mask)
      | __memory_order_modifier(__m & __memory_order_modifier_mask));
  }

  constexpr bool
  __is_valid_cmpexch_failure_order(memory_order __m) noexcept
  {
    return (__m & __memory_order_mask) != memory_order_release
 && (__m & __memory_order_mask) != memory_order_acq_rel;
  }


  template<typename _IntTp>
    struct __atomic_base;



  inline __attribute__((__always_inline__)) void
  atomic_thread_fence(memory_order __m) noexcept
  { __atomic_thread_fence(int(__m)); }

  inline __attribute__((__always_inline__)) void
  atomic_signal_fence(memory_order __m) noexcept
  { __atomic_signal_fence(int(__m)); }


  template<typename _Tp>
    inline _Tp
    kill_dependency(_Tp __y) noexcept
    {
      _Tp __ret(__y);
      return __ret;
    }





#define _GLIBCXX20_INIT(I) 



#define ATOMIC_VAR_INIT(_VI) { _VI }

  template<typename _Tp>
    struct atomic;

  template<typename _Tp>
    struct atomic<_Tp*>;



    typedef bool __atomic_flag_data_type;
# 197 "/usr/include/c++/15.1.1/bits/atomic_base.h" 3
  extern "C" {

  struct __atomic_flag_base
  {
    __atomic_flag_data_type _M_i ;
  };

  }



#define ATOMIC_FLAG_INIT { 0 }


  struct atomic_flag : public __atomic_flag_base
  {
    atomic_flag() noexcept = default;
    ~atomic_flag() noexcept = default;
    atomic_flag(const atomic_flag&) = delete;
    atomic_flag& operator=(const atomic_flag&) = delete;
    atomic_flag& operator=(const atomic_flag&) volatile = delete;


    constexpr atomic_flag(bool __i) noexcept
      : __atomic_flag_base{ _S_init(__i) }
    { }

    inline __attribute__((__always_inline__)) bool
    test_and_set(memory_order __m = memory_order_seq_cst) noexcept
    {
      return __atomic_test_and_set (&_M_i, int(__m));
    }

    inline __attribute__((__always_inline__)) bool
    test_and_set(memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      return __atomic_test_and_set (&_M_i, int(__m));
    }
# 281 "/usr/include/c++/15.1.1/bits/atomic_base.h" 3
    inline __attribute__((__always_inline__)) void
    clear(memory_order __m = memory_order_seq_cst) noexcept
    {
      memory_order __b __attribute__ ((__unused__))
 = __m & __memory_order_mask;
      do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_consume)) std::__glibcxx_assert_fail(); } while (false);
      do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acquire)) std::__glibcxx_assert_fail(); } while (false);
      do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acq_rel)) std::__glibcxx_assert_fail(); } while (false);

      __atomic_clear (&_M_i, int(__m));
    }

    inline __attribute__((__always_inline__)) void
    clear(memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      memory_order __b __attribute__ ((__unused__))
 = __m & __memory_order_mask;
      do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_consume)) std::__glibcxx_assert_fail(); } while (false);
      do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acquire)) std::__glibcxx_assert_fail(); } while (false);
      do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acq_rel)) std::__glibcxx_assert_fail(); } while (false);

      __atomic_clear (&_M_i, int(__m));
    }

  private:
    static constexpr __atomic_flag_data_type
    _S_init(bool __i)
    { return __i ? 1 : 0; }
  };
# 337 "/usr/include/c++/15.1.1/bits/atomic_base.h" 3
  template<typename _ITp>
    struct __atomic_base
    {
      using value_type = _ITp;
      using difference_type = value_type;

    private:
      typedef _ITp __int_type;

      static constexpr int _S_alignment =
 sizeof(_ITp) > alignof(_ITp) ? sizeof(_ITp) : alignof(_ITp);

      alignas(_S_alignment) __int_type _M_i ;

    public:
      __atomic_base() noexcept = default;
      ~__atomic_base() noexcept = default;
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }

      operator __int_type() const noexcept
      { return load(); }

      operator __int_type() const volatile noexcept
      { return load(); }

      __int_type
      operator=(__int_type __i) noexcept
      {
 store(__i);
 return __i;
      }

      __int_type
      operator=(__int_type __i) volatile noexcept
      {
 store(__i);
 return __i;
      }

      __int_type
      operator++(int) noexcept
      { return fetch_add(1); }

      __int_type
      operator++(int) volatile noexcept
      { return fetch_add(1); }

      __int_type
      operator--(int) noexcept
      { return fetch_sub(1); }

      __int_type
      operator--(int) volatile noexcept
      { return fetch_sub(1); }

      __int_type
      operator++() noexcept
      { return __atomic_add_fetch(&_M_i, 1, int(memory_order_seq_cst)); }

      __int_type
      operator++() volatile noexcept
      { return __atomic_add_fetch(&_M_i, 1, int(memory_order_seq_cst)); }

      __int_type
      operator--() noexcept
      { return __atomic_sub_fetch(&_M_i, 1, int(memory_order_seq_cst)); }

      __int_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_i, 1, int(memory_order_seq_cst)); }

      __int_type
      operator+=(__int_type __i) noexcept
      { return __atomic_add_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator+=(__int_type __i) volatile noexcept
      { return __atomic_add_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator-=(__int_type __i) noexcept
      { return __atomic_sub_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator-=(__int_type __i) volatile noexcept
      { return __atomic_sub_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator&=(__int_type __i) noexcept
      { return __atomic_and_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator&=(__int_type __i) volatile noexcept
      { return __atomic_and_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator|=(__int_type __i) noexcept
      { return __atomic_or_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator|=(__int_type __i) volatile noexcept
      { return __atomic_or_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator^=(__int_type __i) noexcept
      { return __atomic_xor_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator^=(__int_type __i) volatile noexcept
      { return __atomic_xor_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      bool
      is_lock_free() const noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-_S_alignment));
      }

      bool
      is_lock_free() const volatile noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-_S_alignment));
      }

      inline __attribute__((__always_inline__)) void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
 memory_order __b __attribute__ ((__unused__))
   = __m & __memory_order_mask;
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acquire)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acq_rel)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_consume)) std::__glibcxx_assert_fail(); } while (false);

 __atomic_store_n(&_M_i, __i, int(__m));
      }

      inline __attribute__((__always_inline__)) void
      store(__int_type __i,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 memory_order __b __attribute__ ((__unused__))
   = __m & __memory_order_mask;
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acquire)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acq_rel)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_consume)) std::__glibcxx_assert_fail(); } while (false);

 __atomic_store_n(&_M_i, __i, int(__m));
      }

      inline __attribute__((__always_inline__)) __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
 memory_order __b __attribute__ ((__unused__))
   = __m & __memory_order_mask;
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_release)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acq_rel)) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_load_n(&_M_i, int(__m));
      }

      inline __attribute__((__always_inline__)) __int_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
 memory_order __b __attribute__ ((__unused__))
   = __m & __memory_order_mask;
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_release)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acq_rel)) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_load_n(&_M_i, int(__m));
      }

      inline __attribute__((__always_inline__)) __int_type
      exchange(__int_type __i,
        memory_order __m = memory_order_seq_cst) noexcept
      {
 return __atomic_exchange_n(&_M_i, __i, int(__m));
      }


      inline __attribute__((__always_inline__)) __int_type
      exchange(__int_type __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return __atomic_exchange_n(&_M_i, __i, int(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m1, memory_order __m2) noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__is_valid_cmpexch_failure_order(__m2))) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 1,
        int(__m1), int(__m2));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m1,
       memory_order __m2) volatile noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__is_valid_cmpexch_failure_order(__m2))) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 1,
        int(__m1), int(__m2));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m = memory_order_seq_cst) noexcept
      {
 return compare_exchange_weak(__i1, __i2, __m,
         __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return compare_exchange_weak(__i1, __i2, __m,
         __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m1, memory_order __m2) noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__is_valid_cmpexch_failure_order(__m2))) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0,
        int(__m1), int(__m2));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m1,
         memory_order __m2) volatile noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__is_valid_cmpexch_failure_order(__m2))) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0,
        int(__m1), int(__m2));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m = memory_order_seq_cst) noexcept
      {
 return compare_exchange_strong(__i1, __i2, __m,
           __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
   memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return compare_exchange_strong(__i1, __i2, __m,
           __cmpexch_failure_order(__m));
      }
# 628 "/usr/include/c++/15.1.1/bits/atomic_base.h" 3
      inline __attribute__((__always_inline__)) __int_type
      fetch_add(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_add(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_add(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_sub(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_sub(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_sub(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_sub(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_and(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_and(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_and(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_and(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_or(__int_type __i,
        memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_or(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_or(__int_type __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_or(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_xor(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_xor(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_xor(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_xor(&_M_i, __i, int(__m)); }
    };



  template<typename _PTp>
    struct __atomic_base<_PTp*>
    {
    private:
      typedef _PTp* __pointer_type;

      __pointer_type _M_p ;

      static constexpr ptrdiff_t
      _S_type_size(ptrdiff_t __d)
      { return __d * sizeof(_PTp); }

    public:
      __atomic_base() noexcept = default;
      ~__atomic_base() noexcept = default;
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;


      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }

      operator __pointer_type() const noexcept
      { return load(); }

      operator __pointer_type() const volatile noexcept
      { return load(); }

      __pointer_type
      operator=(__pointer_type __p) noexcept
      {
 store(__p);
 return __p;
      }

      __pointer_type
      operator=(__pointer_type __p) volatile noexcept
      {
 store(__p);
 return __p;
      }

      __pointer_type
      operator++(int) noexcept
      { return fetch_add(1); }

      __pointer_type
      operator++(int) volatile noexcept
      { return fetch_add(1); }

      __pointer_type
      operator--(int) noexcept
      { return fetch_sub(1); }

      __pointer_type
      operator--(int) volatile noexcept
      { return fetch_sub(1); }

      __pointer_type
      operator++() noexcept
      { return __atomic_add_fetch(&_M_p, _S_type_size(1),
      int(memory_order_seq_cst)); }

      __pointer_type
      operator++() volatile noexcept
      { return __atomic_add_fetch(&_M_p, _S_type_size(1),
      int(memory_order_seq_cst)); }

      __pointer_type
      operator--() noexcept
      { return __atomic_sub_fetch(&_M_p, _S_type_size(1),
      int(memory_order_seq_cst)); }

      __pointer_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_p, _S_type_size(1),
      int(memory_order_seq_cst)); }

      __pointer_type
      operator+=(ptrdiff_t __d) noexcept
      { return __atomic_add_fetch(&_M_p, _S_type_size(__d),
      int(memory_order_seq_cst)); }

      __pointer_type
      operator+=(ptrdiff_t __d) volatile noexcept
      { return __atomic_add_fetch(&_M_p, _S_type_size(__d),
      int(memory_order_seq_cst)); }

      __pointer_type
      operator-=(ptrdiff_t __d) noexcept
      { return __atomic_sub_fetch(&_M_p, _S_type_size(__d),
      int(memory_order_seq_cst)); }

      __pointer_type
      operator-=(ptrdiff_t __d) volatile noexcept
      { return __atomic_sub_fetch(&_M_p, _S_type_size(__d),
      int(memory_order_seq_cst)); }

      bool
      is_lock_free() const noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_p),
     reinterpret_cast<void *>(-__alignof(_M_p)));
      }

      bool
      is_lock_free() const volatile noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_p),
     reinterpret_cast<void *>(-__alignof(_M_p)));
      }

      inline __attribute__((__always_inline__)) void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) noexcept
      {
 memory_order __b __attribute__ ((__unused__))
   = __m & __memory_order_mask;

 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acquire)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acq_rel)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_consume)) std::__glibcxx_assert_fail(); } while (false);

 __atomic_store_n(&_M_p, __p, int(__m));
      }

      inline __attribute__((__always_inline__)) void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 memory_order __b __attribute__ ((__unused__))
   = __m & __memory_order_mask;
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acquire)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acq_rel)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_consume)) std::__glibcxx_assert_fail(); } while (false);

 __atomic_store_n(&_M_p, __p, int(__m));
      }

      inline __attribute__((__always_inline__)) __pointer_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
 memory_order __b __attribute__ ((__unused__))
   = __m & __memory_order_mask;
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_release)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acq_rel)) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_load_n(&_M_p, int(__m));
      }

      inline __attribute__((__always_inline__)) __pointer_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
 memory_order __b __attribute__ ((__unused__))
   = __m & __memory_order_mask;
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_release)) std::__glibcxx_assert_fail(); } while (false);
 do { if (std::__is_constant_evaluated() && !bool(__b != memory_order_acq_rel)) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_load_n(&_M_p, int(__m));
      }

      inline __attribute__((__always_inline__)) __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) noexcept
      {
 return __atomic_exchange_n(&_M_p, __p, int(__m));
      }


      inline __attribute__((__always_inline__)) __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return __atomic_exchange_n(&_M_p, __p, int(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
       memory_order __m1,
       memory_order __m2) noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__is_valid_cmpexch_failure_order(__m2))) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 1,
        int(__m1), int(__m2));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
       memory_order __m1,
       memory_order __m2) volatile noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__is_valid_cmpexch_failure_order(__m2))) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 1,
        int(__m1), int(__m2));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1,
         memory_order __m2) noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__is_valid_cmpexch_failure_order(__m2))) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 0,
        int(__m1), int(__m2));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1,
         memory_order __m2) volatile noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__is_valid_cmpexch_failure_order(__m2))) std::__glibcxx_assert_fail(); } while (false);

 return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 0,
        int(__m1), int(__m2));
      }
# 928 "/usr/include/c++/15.1.1/bits/atomic_base.h" 3
      inline __attribute__((__always_inline__)) __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_p, _S_type_size(__d), int(__m)); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_add(&_M_p, _S_type_size(__d), int(__m)); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_sub(&_M_p, _S_type_size(__d), int(__m)); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_sub(&_M_p, _S_type_size(__d), int(__m)); }
    };

  namespace __atomic_impl
  {


    template<typename _Tp>
      constexpr bool
      __maybe_has_padding()
      {



 return !__has_unique_object_representations(_Tp)
   && !is_same<_Tp, float>::value && !is_same<_Tp, double>::value;



      }

    template<typename _Tp>
      inline __attribute__((__always_inline__)) constexpr _Tp*
      __clear_padding(_Tp& __val) noexcept
      {
 auto* __ptr = std::__addressof(__val);

 if constexpr (__atomic_impl::__maybe_has_padding<_Tp>())
   __builtin_clear_padding(__ptr);

 return __ptr;
      }


    template<typename _Tp>
      using _Val = typename remove_volatile<_Tp>::type;

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"

    template<bool _AtomicRef = false, typename _Tp>
      inline __attribute__((__always_inline__)) bool
      __compare_exchange(_Tp& __val, _Val<_Tp>& __e, _Val<_Tp>& __i,
    bool __is_weak,
    memory_order __s, memory_order __f) noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__is_valid_cmpexch_failure_order(__f))) std::__glibcxx_assert_fail(); } while (false);

 using _Vp = _Val<_Tp>;
 _Tp* const __pval = std::__addressof(__val);

 if constexpr (!__atomic_impl::__maybe_has_padding<_Vp>())
   {
     return __atomic_compare_exchange(__pval, std::__addressof(__e),
          std::__addressof(__i), __is_weak,
          int(__s), int(__f));
   }
 else if constexpr (!_AtomicRef)
   {

     _Vp* const __pi = __atomic_impl::__clear_padding(__i);

     _Vp __exp = __e;

     _Vp* const __pexp = __atomic_impl::__clear_padding(__exp);



     if (__atomic_compare_exchange(__pval, __pexp, __pi,
       __is_weak, int(__s), int(__f)))
       return true;

     __builtin_memcpy(std::__addressof(__e), __pexp, sizeof(_Vp));
     return false;
   }
 else
   {

     _Vp* const __pi = __atomic_impl::__clear_padding(__i);


     _Vp __exp = __e;


     _Vp* const __pexp = __atomic_impl::__clear_padding(__exp);
# 1042 "/usr/include/c++/15.1.1/bits/atomic_base.h" 3
     while (true)
       {

  _Vp __orig = __exp;

  if (__atomic_compare_exchange(__pval, __pexp, __pi,
           __is_weak, int(__s), int(__f)))
    return true;


  _Vp __curr = __exp;


  if (__builtin_memcmp(__atomic_impl::__clear_padding(__orig),
         __atomic_impl::__clear_padding(__curr),
         sizeof(_Vp)))
    {

      __builtin_memcpy(std::__addressof(__e), __pexp,
         sizeof(_Vp));
      return false;
    }
       }
   }
      }
#pragma GCC diagnostic pop
  }
# 2105 "/usr/include/c++/15.1.1/bits/atomic_base.h" 3

}
# 34 "/usr/include/c++/15.1.1/bits/shared_ptr_atomic.h" 2 3
# 52 "/usr/include/c++/15.1.1/bits/shared_ptr_atomic.h" 3
#define _GLIBCXX_TSAN_MUTEX_DESTROY(X) 
#define _GLIBCXX_TSAN_MUTEX_TRY_LOCK(X) 
#define _GLIBCXX_TSAN_MUTEX_TRY_LOCK_FAILED(X) 
#define _GLIBCXX_TSAN_MUTEX_LOCKED(X) 
#define _GLIBCXX_TSAN_MUTEX_PRE_UNLOCK(X) 
#define _GLIBCXX_TSAN_MUTEX_POST_UNLOCK(X) 
#define _GLIBCXX_TSAN_MUTEX_PRE_SIGNAL(X) 
#define _GLIBCXX_TSAN_MUTEX_POST_SIGNAL(X) 


namespace std __attribute__ ((__visibility__ ("default")))
{

# 74 "/usr/include/c++/15.1.1/bits/shared_ptr_atomic.h" 3
  struct _Sp_locker
  {
    _Sp_locker(const _Sp_locker&) = delete;
    _Sp_locker& operator=(const _Sp_locker&) = delete;


    explicit
    _Sp_locker(const void*) noexcept;
    _Sp_locker(const void*, const void*) noexcept;
    ~_Sp_locker();

  private:
    unsigned char _M_key1;
    unsigned char _M_key2;



  };
# 101 "/usr/include/c++/15.1.1/bits/shared_ptr_atomic.h" 3
  template<typename _Tp, _Lock_policy _Lp>
   
    inline bool
    atomic_is_lock_free(const __shared_ptr<_Tp, _Lp>*)
    {

      return __gthread_active_p() == 0;



    }

  template<typename _Tp>
   
    inline bool
    atomic_is_lock_free(const shared_ptr<_Tp>* __p)
    { return std::atomic_is_lock_free<_Tp, __default_lock_policy>(__p); }
# 130 "/usr/include/c++/15.1.1/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
   
    inline shared_ptr<_Tp>
    atomic_load_explicit(const shared_ptr<_Tp>* __p, memory_order)
    {
      _Sp_locker __lock{__p};
      return *__p;
    }

  template<typename _Tp>
   
    inline shared_ptr<_Tp>
    atomic_load(const shared_ptr<_Tp>* __p)
    { return std::atomic_load_explicit(__p, memory_order_seq_cst); }

  template<typename _Tp, _Lock_policy _Lp>
   
    inline __shared_ptr<_Tp, _Lp>
    atomic_load_explicit(const __shared_ptr<_Tp, _Lp>* __p, memory_order)
    {
      _Sp_locker __lock{__p};
      return *__p;
    }

  template<typename _Tp, _Lock_policy _Lp>
   
    inline __shared_ptr<_Tp, _Lp>
    atomic_load(const __shared_ptr<_Tp, _Lp>* __p)
    { return std::atomic_load_explicit(__p, memory_order_seq_cst); }
# 170 "/usr/include/c++/15.1.1/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
   
    inline void
    atomic_store_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r,
     memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
    }

  template<typename _Tp>
   
    inline void
    atomic_store(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
    { std::atomic_store_explicit(__p, std::move(__r), memory_order_seq_cst); }

  template<typename _Tp, _Lock_policy _Lp>
   
    inline void
    atomic_store_explicit(__shared_ptr<_Tp, _Lp>* __p,
     __shared_ptr<_Tp, _Lp> __r,
     memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
    }

  template<typename _Tp, _Lock_policy _Lp>
   
    inline void
    atomic_store(__shared_ptr<_Tp, _Lp>* __p, __shared_ptr<_Tp, _Lp> __r)
    { std::atomic_store_explicit(__p, std::move(__r), memory_order_seq_cst); }
# 211 "/usr/include/c++/15.1.1/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
   
    inline shared_ptr<_Tp>
    atomic_exchange_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r,
        memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
      return __r;
    }

  template<typename _Tp>
   
    inline shared_ptr<_Tp>
    atomic_exchange(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
    {
      return std::atomic_exchange_explicit(__p, std::move(__r),
        memory_order_seq_cst);
    }

  template<typename _Tp, _Lock_policy _Lp>
   
    inline __shared_ptr<_Tp, _Lp>
    atomic_exchange_explicit(__shared_ptr<_Tp, _Lp>* __p,
        __shared_ptr<_Tp, _Lp> __r,
        memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
      return __r;
    }

  template<typename _Tp, _Lock_policy _Lp>
   
    inline __shared_ptr<_Tp, _Lp>
    atomic_exchange(__shared_ptr<_Tp, _Lp>* __p, __shared_ptr<_Tp, _Lp> __r)
    {
      return std::atomic_exchange_explicit(__p, std::move(__r),
        memory_order_seq_cst);
    }
# 264 "/usr/include/c++/15.1.1/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
   
    bool
    atomic_compare_exchange_strong_explicit(shared_ptr<_Tp>* __p,
         shared_ptr<_Tp>* __v,
         shared_ptr<_Tp> __w,
         memory_order,
         memory_order)
    {
      shared_ptr<_Tp> __x;
      _Sp_locker __lock{__p, __v};
      owner_less<shared_ptr<_Tp>> __less;
      if (*__p == *__v && !__less(*__p, *__v) && !__less(*__v, *__p))
 {
   __x = std::move(*__p);
   *__p = std::move(__w);
   return true;
 }
      __x = std::move(*__v);
      *__v = *__p;
      return false;
    }

  template<typename _Tp>
   
    inline bool
    atomic_compare_exchange_strong(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
     shared_ptr<_Tp> __w)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }

  template<typename _Tp>
   
    inline bool
    atomic_compare_exchange_weak_explicit(shared_ptr<_Tp>* __p,
       shared_ptr<_Tp>* __v,
       shared_ptr<_Tp> __w,
       memory_order __success,
       memory_order __failure)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), __success, __failure);
    }

  template<typename _Tp>
   
    inline bool
    atomic_compare_exchange_weak(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
     shared_ptr<_Tp> __w)
    {
      return std::atomic_compare_exchange_weak_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }

  template<typename _Tp, _Lock_policy _Lp>
   
    bool
    atomic_compare_exchange_strong_explicit(__shared_ptr<_Tp, _Lp>* __p,
         __shared_ptr<_Tp, _Lp>* __v,
         __shared_ptr<_Tp, _Lp> __w,
         memory_order,
         memory_order)
    {
      __shared_ptr<_Tp, _Lp> __x;
      _Sp_locker __lock{__p, __v};
      owner_less<__shared_ptr<_Tp, _Lp>> __less;
      if (*__p == *__v && !__less(*__p, *__v) && !__less(*__v, *__p))
 {
   __x = std::move(*__p);
   *__p = std::move(__w);
   return true;
 }
      __x = std::move(*__v);
      *__v = *__p;
      return false;
    }

  template<typename _Tp, _Lock_policy _Lp>
   
    inline bool
    atomic_compare_exchange_strong(__shared_ptr<_Tp, _Lp>* __p,
       __shared_ptr<_Tp, _Lp>* __v,
       __shared_ptr<_Tp, _Lp> __w)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }

  template<typename _Tp, _Lock_policy _Lp>
   
    inline bool
    atomic_compare_exchange_weak_explicit(__shared_ptr<_Tp, _Lp>* __p,
       __shared_ptr<_Tp, _Lp>* __v,
       __shared_ptr<_Tp, _Lp> __w,
       memory_order __success,
       memory_order __failure)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), __success, __failure);
    }

  template<typename _Tp, _Lock_policy _Lp>
   
    inline bool
    atomic_compare_exchange_weak(__shared_ptr<_Tp, _Lp>* __p,
     __shared_ptr<_Tp, _Lp>* __v,
     __shared_ptr<_Tp, _Lp> __w)
    {
      return std::atomic_compare_exchange_weak_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }
# 868 "/usr/include/c++/15.1.1/bits/shared_ptr_atomic.h" 3

}
# 84 "/usr/include/c++/15.1.1/memory" 2 3




# 1 "/usr/include/c++/15.1.1/backward/auto_ptr.h" 1 3
# 31 "/usr/include/c++/15.1.1/backward/auto_ptr.h" 3
#define _BACKWARD_AUTO_PTR_H 1




namespace std __attribute__ ((__visibility__ ("default")))
{

# 47 "/usr/include/c++/15.1.1/backward/auto_ptr.h" 3
  template<typename _Tp1>
    struct auto_ptr_ref
    {
      _Tp1* _M_ptr;

      explicit
      auto_ptr_ref(_Tp1* __p): _M_ptr(__p) { }
    } __attribute__ ((__deprecated__));

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 92 "/usr/include/c++/15.1.1/backward/auto_ptr.h" 3
  template<typename _Tp>
    class auto_ptr
    {
    private:
      _Tp* _M_ptr;

    public:

      typedef _Tp element_type;







      explicit
      auto_ptr(element_type* __p = 0) throw() : _M_ptr(__p) { }
# 118 "/usr/include/c++/15.1.1/backward/auto_ptr.h" 3
      auto_ptr(auto_ptr& __a) throw() : _M_ptr(__a.release()) { }
# 130 "/usr/include/c++/15.1.1/backward/auto_ptr.h" 3
      template<typename _Tp1>
        auto_ptr(auto_ptr<_Tp1>& __a) throw() : _M_ptr(__a.release()) { }
# 141 "/usr/include/c++/15.1.1/backward/auto_ptr.h" 3
      auto_ptr&
      operator=(auto_ptr& __a) throw()
      {
 reset(__a.release());
 return *this;
      }
# 158 "/usr/include/c++/15.1.1/backward/auto_ptr.h" 3
      template<typename _Tp1>
        auto_ptr&
        operator=(auto_ptr<_Tp1>& __a) throw()
        {
   reset(__a.release());
   return *this;
 }
# 176 "/usr/include/c++/15.1.1/backward/auto_ptr.h" 3
      ~auto_ptr() { delete _M_ptr; }
# 186 "/usr/include/c++/15.1.1/backward/auto_ptr.h" 3
      element_type&
      operator*() const throw()
      {
 do { if (std::__is_constant_evaluated() && !bool(_M_ptr != 0)) std::__glibcxx_assert_fail(); } while (false);
 return *_M_ptr;
      }







      element_type*
      operator->() const throw()
      {
 do { if (std::__is_constant_evaluated() && !bool(_M_ptr != 0)) std::__glibcxx_assert_fail(); } while (false);
 return _M_ptr;
      }
# 216 "/usr/include/c++/15.1.1/backward/auto_ptr.h" 3
      element_type*
      get() const throw() { return _M_ptr; }
# 230 "/usr/include/c++/15.1.1/backward/auto_ptr.h" 3
      element_type*
      release() throw()
      {
 element_type* __tmp = _M_ptr;
 _M_ptr = 0;
 return __tmp;
      }
# 245 "/usr/include/c++/15.1.1/backward/auto_ptr.h" 3
      void
      reset(element_type* __p = 0) throw()
      {
 if (__p != _M_ptr)
   {
     delete _M_ptr;
     _M_ptr = __p;
   }
      }
# 270 "/usr/include/c++/15.1.1/backward/auto_ptr.h" 3
      auto_ptr(auto_ptr_ref<element_type> __ref) throw()
      : _M_ptr(__ref._M_ptr) { }

      auto_ptr&
      operator=(auto_ptr_ref<element_type> __ref) throw()
      {
 if (__ref._M_ptr != this->get())
   {
     delete _M_ptr;
     _M_ptr = __ref._M_ptr;
   }
 return *this;
      }

      template<typename _Tp1>
        operator auto_ptr_ref<_Tp1>() throw()
        { return auto_ptr_ref<_Tp1>(this->release()); }

      template<typename _Tp1>
        operator auto_ptr<_Tp1>() throw()
        { return auto_ptr<_Tp1>(this->release()); }
    } __attribute__ ((__deprecated__ ("use '" "std::unique_ptr" "' instead")));



  template<>
    class auto_ptr<void>
    {
    public:
      typedef void element_type;
    } __attribute__ ((__deprecated__));



  template<_Lock_policy _Lp>
  template<typename _Tp>
    inline
    __shared_count<_Lp>::__shared_count(std::auto_ptr<_Tp>&& __r)
    : _M_pi(new _Sp_counted_ptr<_Tp*, _Lp>(__r.get()))
    { __r.release(); }

  template<typename _Tp, _Lock_policy _Lp>
  template<typename _Tp1, typename>
    inline
    __shared_ptr<_Tp, _Lp>::__shared_ptr(std::auto_ptr<_Tp1>&& __r)
    : _M_ptr(__r.get()), _M_refcount()
    {
     
      static_assert( sizeof(_Tp1) > 0, "incomplete type" );
      _Tp1* __tmp = __r.get();
      _M_refcount = __shared_count<_Lp>(std::move(__r));
      _M_enable_shared_from_this_with(__tmp);
    }

  template<typename _Tp>
  template<typename _Tp1, typename>
    inline
    shared_ptr<_Tp>::shared_ptr(std::auto_ptr<_Tp1>&& __r)
    : __shared_ptr<_Tp>(std::move(__r)) { }


  template<typename _Tp, typename _Dp>
  template<typename _Up, typename>
    inline
    unique_ptr<_Tp, _Dp>::unique_ptr(auto_ptr<_Up>&& __u) noexcept
    : _M_t(__u.release(), deleter_type()) { }


#pragma GCC diagnostic pop


}
# 89 "/usr/include/c++/15.1.1/memory" 2 3
# 100 "/usr/include/c++/15.1.1/memory" 3
#define __glibcxx_want_allocator_traits_is_always_equal 
#define __glibcxx_want_assume_aligned 
#define __glibcxx_want_atomic_shared_ptr 
#define __glibcxx_want_atomic_value_initialization 
#define __glibcxx_want_constexpr_dynamic_alloc 
#define __glibcxx_want_constexpr_memory 
#define __glibcxx_want_enable_shared_from_this 
#define __glibcxx_want_make_unique 
#define __glibcxx_want_out_ptr 
#define __glibcxx_want_parallel_algorithm 
#define __glibcxx_want_ranges 
#define __glibcxx_want_raw_memory_algorithms 
#define __glibcxx_want_shared_ptr_arrays 
#define __glibcxx_want_shared_ptr_weak_type 
#define __glibcxx_want_smart_ptr_for_overwrite 
#define __glibcxx_want_to_address 
#define __glibcxx_want_transparent_operators 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 118 "/usr/include/c++/15.1.1/memory" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{

# 138 "/usr/include/c++/15.1.1/memory" 3
enum class pointer_safety { relaxed, preferred, strict };


inline void
declare_reachable(void*) { }


template <typename _Tp>
  inline _Tp*
  undeclare_reachable(_Tp* __p) { return __p; }


inline void
declare_no_pointers(char*, size_t) { }


inline void
undeclare_no_pointers(char*, size_t) { }


inline pointer_safety
get_pointer_safety() noexcept { return pointer_safety::relaxed; }



}
# 173 "/usr/include/c++/15.1.1/memory" 3
# 1 "/usr/include/c++/15.1.1/pstl/glue_memory_defs.h" 1 3
# 11 "/usr/include/c++/15.1.1/pstl/glue_memory_defs.h" 3
#define _PSTL_GLUE_MEMORY_DEFS_H 



namespace std
{



template <class _ExecutionPolicy, class _InputIterator, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
uninitialized_copy(_ExecutionPolicy&& __exec, _InputIterator __first, _InputIterator __last, _ForwardIterator __result);

template <class _ExecutionPolicy, class _InputIterator, class _Size, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
uninitialized_copy_n(_ExecutionPolicy&& __exec, _InputIterator __first, _Size __n, _ForwardIterator __result);



template <class _ExecutionPolicy, class _InputIterator, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
uninitialized_move(_ExecutionPolicy&& __exec, _InputIterator __first, _InputIterator __last, _ForwardIterator __result);

template <class _ExecutionPolicy, class _InputIterator, class _Size, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
uninitialized_move_n(_ExecutionPolicy&& __exec, _InputIterator __first, _Size __n, _ForwardIterator __result);



template <class _ExecutionPolicy, class _ForwardIterator, class _Tp>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void>
uninitialized_fill(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp& __value);

template <class _ExecutionPolicy, class _ForwardIterator, class _Size, class _Tp>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
uninitialized_fill_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Size __n, const _Tp& __value);



template <class _ExecutionPolicy, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void>
destroy(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last);

template <class _ExecutionPolicy, class _ForwardIterator, class _Size>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
destroy_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Size __n);



template <class _ExecutionPolicy, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void>
uninitialized_default_construct(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last);

template <class _ExecutionPolicy, class _ForwardIterator, class _Size>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
uninitialized_default_construct_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Size __n);



template <class _ExecutionPolicy, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void>
uninitialized_value_construct(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last);

template <class _ExecutionPolicy, class _ForwardIterator, class _Size>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
uninitialized_value_construct_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Size __n);

}
# 174 "/usr/include/c++/15.1.1/memory" 2 3
# 17 "emc/sterp/sterp.cc" 2
# 1 "/usr/include/c++/15.1.1/queue" 1 3
# 56 "/usr/include/c++/15.1.1/queue" 3
#define _GLIBCXX_QUEUE 1







#define __glibcxx_want_adaptor_iterator_pair_constructor 
#define __glibcxx_want_containers_ranges 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 67 "/usr/include/c++/15.1.1/queue" 2 3

# 1 "/usr/include/c++/15.1.1/deque" 1 3
# 56 "/usr/include/c++/15.1.1/deque" 3
#define _GLIBCXX_DEQUE 1
# 68 "/usr/include/c++/15.1.1/deque" 3
# 1 "/usr/include/c++/15.1.1/bits/stl_deque.h" 1 3
# 57 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
#define _STL_DEQUE_H 1
# 75 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


# 95 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
#define _GLIBCXX_DEQUE_BUF_SIZE 512


  constexpr inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < 512
     ? size_t(512 / __size) : size_t(1)); }
# 115 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
  template<typename _Tp, typename _Ref, typename _Ptr>
    struct _Deque_iterator
    {






    private:
      template<typename _CvTp>
 using __iter = _Deque_iterator<_Tp, _CvTp&, __ptr_rebind<_Ptr, _CvTp>>;
    public:
      typedef __iter<_Tp> iterator;
      typedef __iter<const _Tp> const_iterator;
      typedef __ptr_rebind<_Ptr, _Tp> _Elt_pointer;
      typedef __ptr_rebind<_Ptr, _Elt_pointer> _Map_pointer;


      static size_t _S_buffer_size() noexcept
      { return __deque_buf_size(sizeof(_Tp)); }

      typedef std::random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef _Ptr pointer;
      typedef _Ref reference;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Deque_iterator _Self;

      _Elt_pointer _M_cur;
      _Elt_pointer _M_first;
      _Elt_pointer _M_last;
      _Map_pointer _M_node;

      _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) noexcept
      : _M_cur(__x), _M_first(*__y),
 _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() noexcept
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
# 164 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      template<typename _Iter,
        typename = _Require<is_same<_Self, const_iterator>,
       is_same<_Iter, iterator>>>
       _Deque_iterator(const _Iter& __x) noexcept
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
  _M_last(__x._M_last), _M_node(__x._M_node) { }

      _Deque_iterator(const _Deque_iterator& __x) noexcept
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
  _M_last(__x._M_last), _M_node(__x._M_node) { }

      _Deque_iterator& operator=(const _Deque_iterator&) = default;


      iterator
      _M_const_cast() const noexcept
      { return iterator(_M_cur, _M_node); }

      [[__nodiscard__]]
      reference
      operator*() const noexcept
      { return *_M_cur; }

      [[__nodiscard__]]
      pointer
      operator->() const noexcept
      { return _M_cur; }

      _Self&
      operator++() noexcept
      {
 ++_M_cur;
 if (_M_cur == _M_last)
   {
     _M_set_node(_M_node + 1);
     _M_cur = _M_first;
   }
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 ++*this;
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 if (_M_cur == _M_first)
   {
     _M_set_node(_M_node - 1);
     _M_cur = _M_last;
   }
 --_M_cur;
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 --*this;
 return __tmp;
      }

      _Self&
      operator+=(difference_type __n) noexcept
      {
 const difference_type __offset = __n + (_M_cur - _M_first);
 if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
   _M_cur += __n;
 else
   {
     const difference_type __node_offset =
       __offset > 0 ? __offset / difference_type(_S_buffer_size())
      : -difference_type((-__offset - 1)
           / _S_buffer_size()) - 1;
     _M_set_node(_M_node + __node_offset);
     _M_cur = _M_first + (__offset - __node_offset
     * difference_type(_S_buffer_size()));
   }
 return *this;
      }

      _Self&
      operator-=(difference_type __n) noexcept
      { return *this += -__n; }

      [[__nodiscard__]]
      reference
      operator[](difference_type __n) const noexcept
      { return *(*this + __n); }






      void
      _M_set_node(_Map_pointer __new_node) noexcept
      {
 _M_node = __new_node;
 _M_first = *__new_node;
 _M_last = _M_first + difference_type(_S_buffer_size());
      }

      [[__nodiscard__]]
      friend bool
      operator==(const _Self& __x, const _Self& __y) noexcept
      { return __x._M_cur == __y._M_cur; }




      template<typename _RefR, typename _PtrR>
 [[__nodiscard__]]
 friend bool
 operator==(const _Self& __x,
     const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 noexcept
 { return __x._M_cur == __y._M_cur; }
# 299 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      [[__nodiscard__]]
      friend bool
      operator!=(const _Self& __x, const _Self& __y) noexcept
      { return !(__x == __y); }

      template<typename _RefR, typename _PtrR>
 [[__nodiscard__]]
 friend bool
 operator!=(const _Self& __x,
     const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 noexcept
 { return !(__x == __y); }

      [[__nodiscard__]]
      friend bool
      operator<(const _Self& __x, const _Self& __y) noexcept
      {
 return (__x._M_node == __y._M_node)
   ? (__x._M_cur < __y._M_cur) : (__x._M_node < __y._M_node);
      }

      template<typename _RefR, typename _PtrR>
 [[__nodiscard__]]
 friend bool
 operator<(const _Self& __x,
    const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 noexcept
 {
   return (__x._M_node == __y._M_node)
     ? (__x._M_cur < __y._M_cur) : (__x._M_node < __y._M_node);
 }

      [[__nodiscard__]]
      friend bool
      operator>(const _Self& __x, const _Self& __y) noexcept
      { return __y < __x; }

      template<typename _RefR, typename _PtrR>
 [[__nodiscard__]]
 friend bool
 operator>(const _Self& __x,
    const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 noexcept
 { return __y < __x; }

      [[__nodiscard__]]
      friend bool
      operator<=(const _Self& __x, const _Self& __y) noexcept
      { return !(__y < __x); }

      template<typename _RefR, typename _PtrR>
 [[__nodiscard__]]
 friend bool
 operator<=(const _Self& __x,
     const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 noexcept
 { return !(__y < __x); }

      [[__nodiscard__]]
      friend bool
      operator>=(const _Self& __x, const _Self& __y) noexcept
      { return !(__x < __y); }

      template<typename _RefR, typename _PtrR>
 [[__nodiscard__]]
 friend bool
 operator>=(const _Self& __x,
     const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 noexcept
 { return !(__x < __y); }


      [[__nodiscard__]]
      friend difference_type
      operator-(const _Self& __x, const _Self& __y) noexcept
      {
 return difference_type(_S_buffer_size())
   * (__x._M_node - __y._M_node - bool(__x._M_node))
   + (__x._M_cur - __x._M_first)
   + (__y._M_last - __y._M_cur);
      }





      template<typename _RefR, typename _PtrR>
 [[__nodiscard__]]
 friend difference_type
 operator-(const _Self& __x,
    const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 noexcept
 {
   return difference_type(_S_buffer_size())
     * (__x._M_node - __y._M_node - bool(__x._M_node))
     + (__x._M_cur - __x._M_first)
     + (__y._M_last - __y._M_cur);
 }

      [[__nodiscard__]]
      friend _Self
      operator+(const _Self& __x, difference_type __n) noexcept
      {
 _Self __tmp = __x;
 __tmp += __n;
 return __tmp;
      }

      [[__nodiscard__]]
      friend _Self
      operator-(const _Self& __x, difference_type __n) noexcept
      {
 _Self __tmp = __x;
 __tmp -= __n;
 return __tmp;
      }

      [[__nodiscard__]]
      friend _Self
      operator+(difference_type __n, const _Self& __x) noexcept
      { return __x + __n; }
    };
# 432 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
  template<typename _Tp, typename _Alloc>
    class _Deque_base
    {
    protected:
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Tp>::other _Tp_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Alloc_traits;





      typedef typename _Alloc_traits::pointer _Ptr;
      typedef typename _Alloc_traits::const_pointer _Ptr_const;


      typedef typename _Alloc_traits::template rebind<_Ptr>::other
 _Map_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Map_alloc_type> _Map_alloc_traits;

      typedef _Alloc allocator_type;

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Tp_allocator()); }

      typedef _Deque_iterator<_Tp, _Tp&, _Ptr> iterator;
      typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const> const_iterator;

      _Deque_base()
      : _M_impl()
      { _M_initialize_map(0); }

      _Deque_base(size_t __num_elements)
      : _M_impl()
      { _M_initialize_map(__num_elements); }

      _Deque_base(const allocator_type& __a, size_t __num_elements)
      : _M_impl(__a)
      { _M_initialize_map(__num_elements); }

      _Deque_base(const allocator_type& __a)
      : _M_impl(__a)
      { }


      _Deque_base(_Deque_base&& __x)
      : _M_impl(std::move(__x._M_get_Tp_allocator()))
      {
 _M_initialize_map(0);
 if (__x._M_impl._M_map)
   this->_M_impl._M_swap_data(__x._M_impl);
      }

      _Deque_base(_Deque_base&& __x, const allocator_type& __a)
      : _M_impl(std::move(__x._M_impl), _Tp_alloc_type(__a))
      { __x._M_initialize_map(0); }

      _Deque_base(_Deque_base&& __x, const allocator_type& __a, size_t __n)
      : _M_impl(__a)
      {
 if (__x.get_allocator() == __a)
   {
     if (__x._M_impl._M_map)
       {
  _M_initialize_map(0);
  this->_M_impl._M_swap_data(__x._M_impl);
       }
   }
 else
   {
     _M_initialize_map(__n);
   }
      }


      ~_Deque_base() noexcept;

      typedef typename iterator::_Map_pointer _Map_pointer;

      struct _Deque_impl_data
      {
 _Map_pointer _M_map;
 size_t _M_map_size;
 iterator _M_start;
 iterator _M_finish;

 _Deque_impl_data() noexcept
 : _M_map(), _M_map_size(), _M_start(), _M_finish()
 { }


 _Deque_impl_data(const _Deque_impl_data&) = default;
 _Deque_impl_data&
 operator=(const _Deque_impl_data&) = default;

 _Deque_impl_data(_Deque_impl_data&& __x) noexcept
 : _Deque_impl_data(__x)
 { __x = _Deque_impl_data(); }


 void
 _M_swap_data(_Deque_impl_data& __x) noexcept
 {


   std::swap(*this, __x);
 }
      };




      struct _Deque_impl
      : public _Tp_alloc_type, public _Deque_impl_data
      {
 _Deque_impl() noexcept(is_nothrow_default_constructible<_Tp_alloc_type>::value)

 : _Tp_alloc_type()
 { }

 _Deque_impl(const _Tp_alloc_type& __a) noexcept
 : _Tp_alloc_type(__a)
 { }


 _Deque_impl(_Deque_impl&&) = default;

 _Deque_impl(_Tp_alloc_type&& __a) noexcept
 : _Tp_alloc_type(std::move(__a))
 { }

 _Deque_impl(_Deque_impl&& __d, _Tp_alloc_type&& __a)
 : _Tp_alloc_type(std::move(__a)), _Deque_impl_data(std::move(__d))
 { }

      };

      _Tp_alloc_type&
      _M_get_Tp_allocator() noexcept
      { return this->_M_impl; }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const noexcept
      { return this->_M_impl; }

      _Map_alloc_type
      _M_get_map_allocator() const noexcept
      { return _Map_alloc_type(_M_get_Tp_allocator()); }

      _Ptr
      _M_allocate_node()
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
 return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
      }

      void
      _M_deallocate_node(_Ptr __p) noexcept
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
 _Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
      }

      _Map_pointer
      _M_allocate_map(size_t __n)
      {
 _Map_alloc_type __map_alloc = _M_get_map_allocator();
 return _Map_alloc_traits::allocate(__map_alloc, __n);
      }

      void
      _M_deallocate_map(_Map_pointer __p, size_t __n) noexcept
      {
 _Map_alloc_type __map_alloc = _M_get_map_allocator();
 _Map_alloc_traits::deallocate(__map_alloc, __p, __n);
      }

      void _M_initialize_map(size_t);
      void _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish);
      void _M_destroy_nodes(_Map_pointer __nstart,
       _Map_pointer __nfinish) noexcept;
      enum { _S_initial_map_size = 8 };

      _Deque_impl _M_impl;
    };

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() noexcept
    {
      if (this->_M_impl._M_map)
 {
   _M_destroy_nodes(this->_M_impl._M_start._M_node,
      this->_M_impl._M_finish._M_node + 1);
   _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 }
    }
# 639 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
      + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
        size_t(__num_nodes + 2));
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);






      _Map_pointer __nstart = (this->_M_impl._M_map
          + (this->_M_impl._M_map_size - __num_nodes) / 2);
      _Map_pointer __nfinish = __nstart + __num_nodes;

      try
 { _M_create_nodes(__nstart, __nfinish); }
      catch(...)
 {
   _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
   this->_M_impl._M_map = _Map_pointer();
   this->_M_impl._M_map_size = 0;
   throw;
 }

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
     + __num_elements
     % __deque_buf_size(sizeof(_Tp)));
    }

  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
    _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
    {
      _Map_pointer __cur;
      try
 {
   for (__cur = __nstart; __cur < __nfinish; ++__cur)
     *__cur = this->_M_allocate_node();
 }
      catch(...)
 {
   _M_destroy_nodes(__nstart, __cur);
   throw;
 }
    }

  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
       _Map_pointer __nfinish) noexcept
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 _M_deallocate_node(*__n);
    }
# 790 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class deque : protected _Deque_base<_Tp, _Alloc>
    {
# 803 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
   "std::deque must have a non-const, non-volatile value_type");






      typedef _Deque_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
      typedef typename _Base::_Alloc_traits _Alloc_traits;
      typedef typename _Base::_Map_pointer _Map_pointer;

    public:
      typedef _Tp value_type;
      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Base::iterator iterator;
      typedef typename _Base::const_iterator const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    private:
      static size_t _S_buffer_size() noexcept
      { return __deque_buf_size(sizeof(_Tp)); }


      using _Base::_M_initialize_map;
      using _Base::_M_create_nodes;
      using _Base::_M_destroy_nodes;
      using _Base::_M_allocate_node;
      using _Base::_M_deallocate_node;
      using _Base::_M_allocate_map;
      using _Base::_M_deallocate_map;
      using _Base::_M_get_Tp_allocator;





      using _Base::_M_impl;

    public:







      deque() = default;
# 867 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      explicit
      deque(const allocator_type& __a)
      : _Base(__a, 0) { }
# 880 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      explicit
      deque(size_type __n, const allocator_type& __a = allocator_type())
      : _Base(__a, _S_check_init_len(__n, __a))
      { _M_default_initialize(); }
# 893 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      deque(size_type __n, const value_type& __value,
     const allocator_type& __a = allocator_type())
      : _Base(__a, _S_check_init_len(__n, __a))
      { _M_fill_initialize(__value); }
# 920 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      deque(const deque& __x)
      : _Base(_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()),
       __x.size())
      { std::__uninitialized_copy_a(__x.begin(), __x.end(),
        this->_M_impl._M_start,
        _M_get_Tp_allocator()); }
# 936 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      deque(deque&&) = default;


      deque(const deque& __x, const __type_identity_t<allocator_type>& __a)
      : _Base(__a, __x.size())
      { std::__uninitialized_copy_a(__x.begin(), __x.end(),
        this->_M_impl._M_start,
        _M_get_Tp_allocator()); }


      deque(deque&& __x, const __type_identity_t<allocator_type>& __a)
      : deque(std::move(__x), __a, typename _Alloc_traits::is_always_equal{})
      { }

    private:
      deque(deque&& __x, const allocator_type& __a, true_type)
      : _Base(std::move(__x), __a)
      { }

      deque(deque&& __x, const allocator_type& __a, false_type)
      : _Base(std::move(__x), __a, __x.size())
      {
 if (__x.get_allocator() != __a && !__x.empty())
   {
     std::__uninitialized_move_a(__x.begin(), __x.end(),
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
     __x.clear();
   }
      }

    public:
# 979 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      deque(initializer_list<value_type> __l,
     const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_range_initialize(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }
# 1004 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 deque(_InputIterator __first, _InputIterator __last,
       const allocator_type& __a = allocator_type())
 : _Base(__a)
 {
   _M_range_initialize(__first, __last,
         std::__iterator_category(__first));
 }
# 1042 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      ~deque()
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
# 1054 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      deque&
      operator=(const deque& __x);
# 1066 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      deque&
      operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
      {
 using __always_equal = typename _Alloc_traits::is_always_equal;
 _M_move_assign1(std::move(__x), __always_equal{});
 return *this;
      }
# 1085 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      deque&
      operator=(initializer_list<value_type> __l)
      {
 _M_assign_aux(__l.begin(), __l.end(),
        random_access_iterator_tag());
 return *this;
      }
# 1104 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 1121 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 void
 assign(_InputIterator __first, _InputIterator __last)
 { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
# 1148 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      void
      assign(initializer_list<value_type> __l)
      { _M_assign_aux(__l.begin(), __l.end(), random_access_iterator_tag()); }
# 1201 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      [[__nodiscard__]]
      allocator_type
      get_allocator() const noexcept
      { return _Base::get_allocator(); }






      [[__nodiscard__]]
      iterator
      begin() noexcept
      { return this->_M_impl._M_start; }





      [[__nodiscard__]]
      const_iterator
      begin() const noexcept
      { return this->_M_impl._M_start; }






      [[__nodiscard__]]
      iterator
      end() noexcept
      { return this->_M_impl._M_finish; }






      [[__nodiscard__]]
      const_iterator
      end() const noexcept
      { return this->_M_impl._M_finish; }






      [[__nodiscard__]]
      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(this->_M_impl._M_finish); }






      [[__nodiscard__]]
      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(this->_M_impl._M_finish); }






      [[__nodiscard__]]
      reverse_iterator
      rend() noexcept
      { return reverse_iterator(this->_M_impl._M_start); }






      [[__nodiscard__]]
      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(this->_M_impl._M_start); }






      [[__nodiscard__]]
      const_iterator
      cbegin() const noexcept
      { return this->_M_impl._M_start; }






      [[__nodiscard__]]
      const_iterator
      cend() const noexcept
      { return this->_M_impl._M_finish; }






      [[__nodiscard__]]
      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(this->_M_impl._M_finish); }






      [[__nodiscard__]]
      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(this->_M_impl._M_start); }




      [[__nodiscard__]]
      size_type
      size() const noexcept
      {
 size_type __sz = this->_M_impl._M_finish - this->_M_impl._M_start;
 if (__sz > max_size ())
   __builtin_unreachable ();
 return __sz;
      }


      [[__nodiscard__]]
      size_type
      max_size() const noexcept
      { return _S_max_size(_M_get_Tp_allocator()); }
# 1354 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      void
      resize(size_type __new_size)
      {
 const size_type __len = size();
 if (__new_size > __len)
   _M_default_append(__new_size - __len);
 else if (__new_size < __len)
   _M_erase_at_end(this->_M_impl._M_start
     + difference_type(__new_size));
      }
# 1376 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      void
      resize(size_type __new_size, const value_type& __x)
# 1393 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      {
 const size_type __len = size();
 if (__new_size > __len)
   _M_fill_insert(this->_M_impl._M_finish, __new_size - __len, __x);
 else if (__new_size < __len)
   _M_erase_at_end(this->_M_impl._M_start
     + difference_type(__new_size));
      }



      void
      shrink_to_fit() noexcept
      { _M_shrink_to_fit(); }






      [[__nodiscard__]] bool
      empty() const noexcept
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
# 1429 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      [[__nodiscard__]]
      reference
      operator[](size_type __n) noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__n < this->size())) std::__glibcxx_assert_fail(); } while (false);
 return this->_M_impl._M_start[difference_type(__n)];
      }
# 1448 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      [[__nodiscard__]]
      const_reference
      operator[](size_type __n) const noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__n < this->size())) std::__glibcxx_assert_fail(); } while (false);
 return this->_M_impl._M_start[difference_type(__n)];
      }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("deque::_M_range_check: __n " "(which is %zu)>= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
      }

    public:
# 1480 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 1498 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      [[__nodiscard__]]
      reference
      front() noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return *begin();
      }





      [[__nodiscard__]]
      const_reference
      front() const noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return *begin();
      }





      [[__nodiscard__]]
      reference
      back() noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 iterator __tmp = end();
 --__tmp;
 return *__tmp;
      }





      [[__nodiscard__]]
      const_reference
      back() const noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 const_iterator __tmp = end();
 --__tmp;
 return *__tmp;
      }
# 1567 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      void
      push_front(const value_type& __x)
      {
 if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   {
     _Alloc_traits::construct(this->_M_impl,
         this->_M_impl._M_start._M_cur - 1,
         __x);
     --this->_M_impl._M_start._M_cur;
   }
 else
   _M_push_front_aux(__x);
      }


      void
      push_front(value_type&& __x)
      { emplace_front(std::move(__x)); }

      template<typename... _Args>

 reference



 emplace_front(_Args&&... __args);
# 1604 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish._M_cur
     != this->_M_impl._M_finish._M_last - 1)
   {
     _Alloc_traits::construct(this->_M_impl,
         this->_M_impl._M_finish._M_cur, __x);
     ++this->_M_impl._M_finish._M_cur;
   }
 else
   _M_push_back_aux(__x);
      }


      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }

      template<typename... _Args>

 reference



 emplace_back(_Args&&... __args);
# 1640 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      void
      pop_front() noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 if (this->_M_impl._M_start._M_cur
     != this->_M_impl._M_start._M_last - 1)
   {
     _Alloc_traits::destroy(_M_get_Tp_allocator(),
       this->_M_impl._M_start._M_cur);
     ++this->_M_impl._M_start._M_cur;
   }
 else
   _M_pop_front_aux();
      }
# 1663 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      void
      pop_back() noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 if (this->_M_impl._M_finish._M_cur
     != this->_M_impl._M_finish._M_first)
   {
     --this->_M_impl._M_finish._M_cur;
     _Alloc_traits::destroy(_M_get_Tp_allocator(),
       this->_M_impl._M_finish._M_cur);
   }
 else
   _M_pop_back_aux();
      }
# 1688 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      template<typename... _Args>
 iterator
 emplace(const_iterator __position, _Args&&... __args);
# 1701 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x);
# 1727 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      iterator
      insert(const_iterator __position, value_type&& __x)
      { return emplace(__position, std::move(__x)); }
# 1741 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      iterator
      insert(const_iterator __p, initializer_list<value_type> __l)
      {
 auto __offset = __p - cbegin();
 _M_range_insert_aux(__p._M_const_cast(), __l.begin(), __l.end(),
       std::random_access_iterator_tag());
 return begin() + __offset;
      }
# 1760 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      iterator
      insert(const_iterator __position, size_type __n, const value_type& __x)
      {
 difference_type __offset = __position - cbegin();
 _M_fill_insert(__position._M_const_cast(), __n, __x);
 return begin() + __offset;
      }
# 1794 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
 insert(const_iterator __position, _InputIterator __first,
        _InputIterator __last)
 {
   difference_type __offset = __position - cbegin();
   _M_range_insert_aux(__position._M_const_cast(), __first, __last,
         std::__iterator_category(__first));
   return begin() + __offset;
 }
# 1872 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      iterator

      erase(const_iterator __position)



      { return _M_erase(__position._M_const_cast()); }
# 1896 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      iterator

      erase(const_iterator __first, const_iterator __last)



      { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }
# 1915 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      void
      swap(deque& __x) noexcept
      {

 do { if (std::__is_constant_evaluated() && !bool(_Alloc_traits::propagate_on_container_swap::value || _M_get_Tp_allocator() == __x._M_get_Tp_allocator())) std::__glibcxx_assert_fail(); } while (false)
                                                          ;

 _M_impl._M_swap_data(__x._M_impl);
 _Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
      __x._M_get_Tp_allocator());
      }







      void
      clear() noexcept
      { _M_erase_at_end(begin()); }

    protected:
# 1965 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      static size_t
      _S_check_init_len(size_t __n, const allocator_type& __a)
      {
 if (__n > _S_max_size(__a))
   __throw_length_error(
       ("cannot create std::deque larger than max_size()"));
 return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) noexcept
      {
 const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 const size_t __allocmax = _Alloc_traits::max_size(__a);
 return (std::min)(__diffmax, __allocmax);
      }
# 1994 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      template<typename _InputIterator>
 void
 _M_range_initialize(_InputIterator __first, _InputIterator __last,
       std::input_iterator_tag);


      template<typename _ForwardIterator>
 void
 _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
       std::forward_iterator_tag);
# 2016 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      void
      _M_fill_initialize(const value_type& __value);



      void
      _M_default_initialize();
# 2047 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      template<typename _InputIterator>
 void
 _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
 void
 _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag)
 {
   const size_type __len = std::distance(__first, __last);
   if (__len > size())
     {
       _ForwardIterator __mid = __first;
       std::advance(__mid, size());
       std::copy(__first, __mid, begin());
       _M_range_insert_aux(end(), __mid, __last,
      std::__iterator_category(__first));
     }
   else
     _M_erase_at_end(std::copy(__first, __last, begin()));
 }



      void
      _M_fill_assign(size_type __n, const value_type& __val)
      {
 if (__n > size())
   {
     std::fill(begin(), end(), __val);
     _M_fill_insert(end(), __n - size(), __val);
   }
 else
   {
     _M_erase_at_end(begin() + difference_type(__n));
     std::fill(begin(), end(), __val);
   }
      }
# 2095 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      template<typename... _Args>
 void _M_push_back_aux(_Args&&... __args);

      template<typename... _Args>
 void _M_push_front_aux(_Args&&... __args);


      void _M_pop_back_aux();

      void _M_pop_front_aux();
# 2134 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      template<typename _InputIterator, typename _Sentinel>
      void _M_range_prepend(_InputIterator __first, _Sentinel __last,
       size_type __n);


      template<typename _InputIterator, typename _Sentinel>
      void _M_range_append(_InputIterator __first, _Sentinel __last,
      size_type __n);


      template<typename _InputIterator>
 void
 _M_range_insert_aux(iterator __pos, _InputIterator __first,
       _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
 void
 _M_range_insert_aux(iterator __pos, _ForwardIterator __first,
       _ForwardIterator __last, std::forward_iterator_tag);




      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);






      iterator
      _M_insert_aux(iterator __pos, const value_type& __x)
      { return _M_emplace_aux(__pos, __x); }

      template<typename... _Args>
 iterator
 _M_emplace_aux(iterator __pos, _Args&&... __args);



      void
      _M_insert_aux(iterator __pos, size_type __n, const value_type& __x);


      template<typename _ForwardIterator>
 void
 _M_insert_aux(iterator __pos,
        _ForwardIterator __first, _ForwardIterator __last,
        size_type __n);




      void
      _M_destroy_data_aux(iterator __first, iterator __last);



      template<typename _Alloc1>
 void
 _M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
 { _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
        const std::allocator<_Tp>&)
      {
 if (!__has_trivial_destructor(value_type))
   _M_destroy_data_aux(__first, __last);
      }


      void
      _M_erase_at_begin(iterator __pos)
      {
 _M_destroy_data(begin(), __pos, _M_get_Tp_allocator());
 _M_destroy_nodes(this->_M_impl._M_start._M_node, __pos._M_node);
 this->_M_impl._M_start = __pos;
      }



      void
      _M_erase_at_end(iterator __pos)
      {
 _M_destroy_data(__pos, end(), _M_get_Tp_allocator());
 _M_destroy_nodes(__pos._M_node + 1,
    this->_M_impl._M_finish._M_node + 1);
 this->_M_impl._M_finish = __pos;
      }

      iterator
      _M_erase(iterator __pos);

      iterator
      _M_erase(iterator __first, iterator __last);



      void
      _M_default_append(size_type __n);

      bool
      _M_shrink_to_fit();




      iterator
      _M_reserve_elements_at_front(size_type __n)
      {
 const size_type __vacancies = this->_M_impl._M_start._M_cur
          - this->_M_impl._M_start._M_first;
 if (__n > __vacancies)
   _M_new_elements_at_front(__n - __vacancies);
 return this->_M_impl._M_start - difference_type(__n);
      }

      iterator
      _M_reserve_elements_at_back(size_type __n)
      {
 const size_type __vacancies = (this->_M_impl._M_finish._M_last
           - this->_M_impl._M_finish._M_cur) - 1;
 if (__n > __vacancies)
   _M_new_elements_at_back(__n - __vacancies);
 return this->_M_impl._M_finish + difference_type(__n);
      }

      void
      _M_new_elements_at_front(size_type __new_elements);

      void
      _M_new_elements_at_back(size_type __new_elements);
# 2280 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
 if (__nodes_to_add + 1 > this->_M_impl._M_map_size
     - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   _M_reallocate_map(__nodes_to_add, false);
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
 if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
           - this->_M_impl._M_map))
   _M_reallocate_map(__nodes_to_add, true);
      }

      void
      _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front);





      void
      _M_move_assign1(deque&& __x, true_type) noexcept
      {
 this->_M_impl._M_swap_data(__x._M_impl);
 __x.clear();
 std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }




      void
      _M_move_assign1(deque&& __x, false_type)
      {
 if (_M_get_Tp_allocator() == __x._M_get_Tp_allocator())
   return _M_move_assign1(std::move(__x), true_type());

 constexpr bool __move_storage =
   _Alloc_traits::_S_propagate_on_move_assign();
 _M_move_assign2(std::move(__x), __bool_constant<__move_storage>());
      }



      template<typename... _Args>
      void
      _M_replace_map(_Args&&... __args)
      {

 deque __newobj(std::forward<_Args>(__args)...);

 clear();
 _M_deallocate_node(*begin()._M_node);
 _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 this->_M_impl._M_map = nullptr;
 this->_M_impl._M_map_size = 0;

 this->_M_impl._M_swap_data(__newobj._M_impl);
      }


      void
      _M_move_assign2(deque&& __x, true_type)
      {

 auto __alloc = __x._M_get_Tp_allocator();


 _M_replace_map(std::move(__x));

 _M_get_Tp_allocator() = std::move(__alloc);
      }



      void
      _M_move_assign2(deque&& __x, false_type)
      {
 if (__x._M_get_Tp_allocator() == this->_M_get_Tp_allocator())
   {


     _M_replace_map(std::move(__x), __x.get_allocator());
   }
 else
   {


     _M_assign_aux(std::make_move_iterator(__x.begin()),
     std::make_move_iterator(__x.end()),
     std::random_access_iterator_tag());
     __x.clear();
   }
      }

    };


  template<typename _InputIterator, typename _ValT
      = typename iterator_traits<_InputIterator>::value_type,
    typename _Allocator = allocator<_ValT>,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireAllocator<_Allocator>>
    deque(_InputIterator, _InputIterator, _Allocator = _Allocator())
      -> deque<_ValT, _Allocator>;
# 2407 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
  template<typename _Tp, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator==(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
    { return __x.size() == __y.size()
      && std::equal(__x.begin(), __x.end(), __y.begin()); }
# 2447 "/usr/include/c++/15.1.1/bits/stl_deque.h" 3
  template<typename _Tp, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator<(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator!=(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator>(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator<=(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    [[__nodiscard__]]
    inline bool
    operator>=(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)
    { return !(__x < __y); }



  template<typename _Tp, typename _Alloc>
    inline void
    swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }

#undef _GLIBCXX_DEQUE_BUF_SIZE






  template<class _Tp>
    struct __is_bitwise_relocatable<std::deque<_Tp>>
    : true_type { };



}
# 69 "/usr/include/c++/15.1.1/deque" 2 3


# 1 "/usr/include/c++/15.1.1/bits/deque.tcc" 1 3
# 57 "/usr/include/c++/15.1.1/bits/deque.tcc" 3
#define _DEQUE_TCC 1



namespace std __attribute__ ((__visibility__ ("default")))
{




  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_default_initialize()
    {
      _Map_pointer __cur;
      try
 {
   for (__cur = this->_M_impl._M_start._M_node;
        __cur < this->_M_impl._M_finish._M_node;
        ++__cur)
     std::__uninitialized_default_a(*__cur, *__cur + _S_buffer_size(),
        _M_get_Tp_allocator());
   std::__uninitialized_default_a(this->_M_impl._M_finish._M_first,
      this->_M_impl._M_finish._M_cur,
      _M_get_Tp_allocator());
 }
      catch(...)
 {
   std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),
   _M_get_Tp_allocator());
   throw;
 }
    }


  template <typename _Tp, typename _Alloc>
    deque<_Tp, _Alloc>&
    deque<_Tp, _Alloc>::
    operator=(const deque& __x)
    {
      if (std::__addressof(__x) != this)
 {

   if (_Alloc_traits::_S_propagate_on_copy_assign())
     {
       if (!_Alloc_traits::_S_always_equal()
    && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
  {


    _M_replace_map(__x, __x.get_allocator());
    std::__alloc_on_copy(_M_get_Tp_allocator(),
           __x._M_get_Tp_allocator());
    return *this;
  }
       std::__alloc_on_copy(_M_get_Tp_allocator(),
       __x._M_get_Tp_allocator());
     }

   const size_type __len = size();
   if (__len >= __x.size())
     _M_erase_at_end(std::copy(__x.begin(), __x.end(),
          this->_M_impl._M_start));
   else
     {
       const_iterator __mid = __x.begin() + difference_type(__len);
       std::copy(__x.begin(), __mid, this->_M_impl._M_start);
       _M_range_insert_aux(this->_M_impl._M_finish, __mid, __x.end(),
      std::random_access_iterator_tag());
     }
 }
      return *this;
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>

      typename deque<_Tp, _Alloc>::reference



      deque<_Tp, _Alloc>::
      emplace_front(_Args&&... __args)
      {
 if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   {
     _Alloc_traits::construct(this->_M_impl,
         this->_M_impl._M_start._M_cur - 1,
         std::forward<_Args>(__args)...);
     --this->_M_impl._M_start._M_cur;
   }
 else
   _M_push_front_aux(std::forward<_Args>(__args)...);

 return front();

      }

  template<typename _Tp, typename _Alloc>
    template<typename... _Args>

      typename deque<_Tp, _Alloc>::reference



      deque<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
 if (this->_M_impl._M_finish._M_cur
     != this->_M_impl._M_finish._M_last - 1)
   {
     _Alloc_traits::construct(this->_M_impl,
         this->_M_impl._M_finish._M_cur,
         std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish._M_cur;
   }
 else
   _M_push_back_aux(std::forward<_Args>(__args)...);

 return back();

      }



  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      typename deque<_Tp, _Alloc>::iterator
      deque<_Tp, _Alloc>::
      emplace(const_iterator __position, _Args&&... __args)
      {
 if (__position._M_cur == this->_M_impl._M_start._M_cur)
   {
     emplace_front(std::forward<_Args>(__args)...);
     return this->_M_impl._M_start;
   }
 else if (__position._M_cur == this->_M_impl._M_finish._M_cur)
   {
     emplace_back(std::forward<_Args>(__args)...);
     iterator __tmp = this->_M_impl._M_finish;
     --__tmp;
     return __tmp;
   }
 else
   return _M_emplace_aux(__position._M_const_cast(),
    std::forward<_Args>(__args)...);
      }


  template <typename _Tp, typename _Alloc>
    typename deque<_Tp, _Alloc>::iterator
    deque<_Tp, _Alloc>::

    insert(const_iterator __position, const value_type& __x)



    {
      if (__position._M_cur == this->_M_impl._M_start._M_cur)
 {
   push_front(__x);
   return this->_M_impl._M_start;
 }
      else if (__position._M_cur == this->_M_impl._M_finish._M_cur)
 {
   push_back(__x);
   iterator __tmp = this->_M_impl._M_finish;
   --__tmp;
   return __tmp;
 }
      else
 return _M_insert_aux(__position._M_const_cast(), __x);
   }

  template <typename _Tp, typename _Alloc>
    typename deque<_Tp, _Alloc>::iterator
    deque<_Tp, _Alloc>::
    _M_erase(iterator __position)
    {
      iterator __next = __position;
      ++__next;
      const difference_type __index = __position - begin();
      if (static_cast<size_type>(__index) < (size() >> 1))
 {
   if (__position != begin())
     std::move_backward(begin(), __position, __next);
   pop_front();
 }
      else
 {
   if (__next != end())
     std::move(__next, end(), __position);
   pop_back();
 }
      return begin() + __index;
    }

  template <typename _Tp, typename _Alloc>
    typename deque<_Tp, _Alloc>::iterator
    deque<_Tp, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first == __last)
 return __first;
      else if (__first == begin() && __last == end())
 {
   clear();
   return end();
 }
      else
 {
   const difference_type __n = __last - __first;
   const difference_type __elems_before = __first - begin();
   if (static_cast<size_type>(__elems_before) <= (size() - __n) / 2)
     {
       if (__first != begin())
  std::move_backward(begin(), __first, __last);
       _M_erase_at_begin(begin() + __n);
     }
   else
     {
       if (__last != end())
  std::move(__last, end(), __first);
       _M_erase_at_end(end() - __n);
     }
   return begin() + __elems_before;
 }
    }

  template <typename _Tp, class _Alloc>
    template <typename _InputIterator>
      void
      deque<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 iterator __cur = begin();
 for (; __first != __last && __cur != end(); ++__cur, (void)++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   _M_range_insert_aux(end(), __first, __last,
         std::__iterator_category(__first));
      }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_fill_insert(iterator __pos, size_type __n, const value_type& __x)
    {
      if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 {
   iterator __new_start = _M_reserve_elements_at_front(__n);
   try
     {
       std::__uninitialized_fill_a(__new_start, this->_M_impl._M_start,
       __x, _M_get_Tp_allocator());
       this->_M_impl._M_start = __new_start;
     }
   catch(...)
     {
       _M_destroy_nodes(__new_start._M_node,
          this->_M_impl._M_start._M_node);
       throw;
     }
 }
      else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 {
   iterator __new_finish = _M_reserve_elements_at_back(__n);
   try
     {
       std::__uninitialized_fill_a(this->_M_impl._M_finish,
       __new_finish, __x,
       _M_get_Tp_allocator());
       this->_M_impl._M_finish = __new_finish;
     }
   catch(...)
     {
       _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
          __new_finish._M_node + 1);
       throw;
     }
 }
      else
 _M_insert_aux(__pos, __n, __x);
    }


  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n)
 {
   iterator __new_finish = _M_reserve_elements_at_back(__n);
   try
     {
       std::__uninitialized_default_a(this->_M_impl._M_finish,
          __new_finish,
          _M_get_Tp_allocator());
       this->_M_impl._M_finish = __new_finish;
     }
   catch(...)
     {
       _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
          __new_finish._M_node + 1);
       throw;
     }
 }
    }

  template <typename _Tp, typename _Alloc>
    bool
    deque<_Tp, _Alloc>::
    _M_shrink_to_fit()
    {
      const difference_type __front_capacity
 = (this->_M_impl._M_start._M_cur - this->_M_impl._M_start._M_first);
      if (__front_capacity == 0)
 return false;

      const difference_type __back_capacity
 = (this->_M_impl._M_finish._M_last - this->_M_impl._M_finish._M_cur);
      if (__front_capacity + __back_capacity < _S_buffer_size())
 return false;

      return std::__shrink_to_fit_aux<deque>::_S_do_it(*this);
    }


  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_fill_initialize(const value_type& __value)
    {
      _Map_pointer __cur;
      try
 {
   for (__cur = this->_M_impl._M_start._M_node;
        __cur < this->_M_impl._M_finish._M_node;
        ++__cur)
     std::__uninitialized_fill_a(*__cur, *__cur + _S_buffer_size(),
     __value, _M_get_Tp_allocator());
   std::__uninitialized_fill_a(this->_M_impl._M_finish._M_first,
          this->_M_impl._M_finish._M_cur,
          __value, _M_get_Tp_allocator());
 }
      catch(...)
 {
   std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),
   _M_get_Tp_allocator());
   throw;
 }
    }

  template <typename _Tp, typename _Alloc>
    template <typename _InputIterator>
      void
      deque<_Tp, _Alloc>::
      _M_range_initialize(_InputIterator __first, _InputIterator __last,
     std::input_iterator_tag)
      {
 this->_M_initialize_map(0);
 try
   {
     for (; __first != __last; ++__first)

       emplace_back(*__first);



   }
 catch(...)
   {
     clear();
     throw;
   }
      }

  template <typename _Tp, typename _Alloc>
    template <typename _ForwardIterator>
      void
      deque<_Tp, _Alloc>::
      _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
     std::forward_iterator_tag)
      {
 const size_type __n = std::distance(__first, __last);
 this->_M_initialize_map(_S_check_init_len(__n, _M_get_Tp_allocator()));

 _Map_pointer __cur_node;
 try
   {
     for (__cur_node = this->_M_impl._M_start._M_node;
   __cur_node < this->_M_impl._M_finish._M_node;
   ++__cur_node)
       {
  if (__n < _S_buffer_size())
    __builtin_unreachable();

  _ForwardIterator __mid = __first;
  std::advance(__mid, _S_buffer_size());
  std::__uninitialized_copy_a(__first, __mid, *__cur_node,
         _M_get_Tp_allocator());
  __first = __mid;
       }
     std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_finish._M_first,
     _M_get_Tp_allocator());
   }
 catch(...)
   {
     std::_Destroy(this->_M_impl._M_start,
     iterator(*__cur_node, __cur_node),
     _M_get_Tp_allocator());
     throw;
   }
      }


  template<typename _Tp, typename _Alloc>

    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(_Args&&... __args)





      {
 if (size() == max_size())
   __throw_length_error(
       ("cannot create std::deque larger than max_size()"));

 _M_reserve_map_at_back();
 *(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 try
   {

     _Alloc_traits::construct(this->_M_impl,
         this->_M_impl._M_finish._M_cur,
         std::forward<_Args>(__args)...);



     this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
      + 1);
     this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   }
 catch(...)
   {
     _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
     throw;
   }
      }


  template<typename _Tp, typename _Alloc>

    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
      _M_push_front_aux(_Args&&... __args)





      {
 if (size() == max_size())
   __throw_length_error(
       ("cannot create std::deque larger than max_size()"));

 _M_reserve_map_at_front();
 *(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 try
   {
     this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
            - 1);
     this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;

     _Alloc_traits::construct(this->_M_impl,
         this->_M_impl._M_start._M_cur,
         std::forward<_Args>(__args)...);



   }
 catch(...)
   {
     ++this->_M_impl._M_start;
     _M_deallocate_node(*(this->_M_impl._M_start._M_node - 1));
     throw;
   }
      }


  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
    _M_pop_back_aux()
    {
      _M_deallocate_node(this->_M_impl._M_finish._M_first);
      this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
      this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
        this->_M_impl._M_finish._M_cur);
    }






  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
        this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
    }

  template <typename _Tp, typename _Alloc>
    template <typename _InputIterator, typename _Sentinel>
      void
      deque<_Tp, _Alloc>::
      _M_range_prepend(_InputIterator __first, _Sentinel __last,
        size_type __n)
      {
  iterator __new_start = _M_reserve_elements_at_front(__n);
  try
    {
      std::__uninitialized_copy_a(std::move(__first), __last,
      __new_start, _M_get_Tp_allocator());
      this->_M_impl._M_start = __new_start;
    }
  catch(...)
    {
      _M_destroy_nodes(__new_start._M_node,
         this->_M_impl._M_start._M_node);
      throw;
    }
      }

  template <typename _Tp, typename _Alloc>
    template <typename _InputIterator, typename _Sentinel>
      void
      deque<_Tp, _Alloc>::
      _M_range_append(_InputIterator __first, _Sentinel __last,
        size_type __n)
     {
       iterator __new_finish = _M_reserve_elements_at_back(__n);
       try
 {
   std::__uninitialized_copy_a(std::move(__first), __last,
          this->_M_impl._M_finish,
          _M_get_Tp_allocator());
   this->_M_impl._M_finish = __new_finish;
 }
      catch(...)
 {
   _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
      __new_finish._M_node + 1);
   throw;
 }
     }

  template <typename _Tp, typename _Alloc>
    template <typename _InputIterator>
      void
      deque<_Tp, _Alloc>::
      _M_range_insert_aux(iterator __pos,
     _InputIterator __first, _InputIterator __last,
     std::input_iterator_tag)
      { std::copy(__first, __last, std::inserter(*this, __pos)); }

  template <typename _Tp, typename _Alloc>
    template <typename _ForwardIterator>
      void
      deque<_Tp, _Alloc>::
      _M_range_insert_aux(iterator __pos,
     _ForwardIterator __first, _ForwardIterator __last,
     std::forward_iterator_tag)
      {
 const size_type __n = std::distance(__first, __last);
 if (__builtin_expect(__n == 0, 0))
   return;

 if (__pos._M_cur == this->_M_impl._M_start._M_cur)
   _M_range_prepend(__first, __last, __n);
 else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
   _M_range_append(__first, __last, __n);
 else
   _M_insert_aux(__pos, __first, __last, __n);
      }

  template<typename _Tp, typename _Alloc>

    template<typename... _Args>
      typename deque<_Tp, _Alloc>::iterator
      deque<_Tp, _Alloc>::
      _M_emplace_aux(iterator __pos, _Args&&... __args)
      {
 value_type __x_copy(std::forward<_Args>(__args)...);







 difference_type __index = __pos - this->_M_impl._M_start;
 if (static_cast<size_type>(__index) < size() / 2)
   {
     push_front(std::move(front()));
     iterator __front1 = this->_M_impl._M_start;
     ++__front1;
     iterator __front2 = __front1;
     ++__front2;
     __pos = this->_M_impl._M_start + __index;
     iterator __pos1 = __pos;
     ++__pos1;
     std::move(__front2, __pos1, __front1);
   }
 else
   {
     push_back(std::move(back()));
     iterator __back1 = this->_M_impl._M_finish;
     --__back1;
     iterator __back2 = __back1;
     --__back2;
     __pos = this->_M_impl._M_start + __index;
     std::move_backward(__pos, __back2, __back1);
   }
 *__pos = std::move(__x_copy);
 return __pos;
      }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_insert_aux(iterator __pos, size_type __n, const value_type& __x)
    {
      const difference_type __elems_before = __pos - this->_M_impl._M_start;
      const size_type __length = this->size();
      value_type __x_copy = __x;
      if (__elems_before < difference_type(__length / 2))
 {
   iterator __new_start = _M_reserve_elements_at_front(__n);
   iterator __old_start = this->_M_impl._M_start;
   __pos = this->_M_impl._M_start + __elems_before;
   try
     {
       if (__elems_before >= difference_type(__n))
  {
    iterator __start_n = (this->_M_impl._M_start
     + difference_type(__n));
    std::__uninitialized_move_a(this->_M_impl._M_start,
           __start_n, __new_start,
           _M_get_Tp_allocator());
    this->_M_impl._M_start = __new_start;
    std::move(__start_n, __pos, __old_start);
    std::fill(__pos - difference_type(__n), __pos, __x_copy);
  }
       else
  {
    std::__uninitialized_move_fill(this->_M_impl._M_start,
       __pos, __new_start,
       this->_M_impl._M_start,
       __x_copy,
       _M_get_Tp_allocator());
    this->_M_impl._M_start = __new_start;
    std::fill(__old_start, __pos, __x_copy);
  }
     }
   catch(...)
     {
       _M_destroy_nodes(__new_start._M_node,
          this->_M_impl._M_start._M_node);
       throw;
     }
 }
      else
 {
   iterator __new_finish = _M_reserve_elements_at_back(__n);
   iterator __old_finish = this->_M_impl._M_finish;
   const difference_type __elems_after =
     difference_type(__length) - __elems_before;
   __pos = this->_M_impl._M_finish - __elems_after;
   try
     {
       if (__elems_after > difference_type(__n))
  {
    iterator __finish_n = (this->_M_impl._M_finish
      - difference_type(__n));
    std::__uninitialized_move_a(__finish_n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish = __new_finish;
    std::move_backward(__pos, __finish_n, __old_finish);
    std::fill(__pos, __pos + difference_type(__n), __x_copy);
  }
       else
  {
    std::__uninitialized_fill_move(this->_M_impl._M_finish,
       __pos + difference_type(__n),
       __x_copy, __pos,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
    this->_M_impl._M_finish = __new_finish;
    std::fill(__pos, __old_finish, __x_copy);
  }
     }
   catch(...)
     {
       _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
          __new_finish._M_node + 1);
       throw;
     }
 }
    }

  template <typename _Tp, typename _Alloc>
    template <typename _ForwardIterator>
      void
      deque<_Tp, _Alloc>::
      _M_insert_aux(iterator __pos,
      _ForwardIterator __first, _ForwardIterator __last,
      size_type __n)
      {
 const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
 const size_type __length = size();
 if (static_cast<size_type>(__elemsbefore) < __length / 2)
   {
     iterator __new_start = _M_reserve_elements_at_front(__n);
     iterator __old_start = this->_M_impl._M_start;
     __pos = this->_M_impl._M_start + __elemsbefore;
     try
       {
  if (__elemsbefore >= difference_type(__n))
    {
      iterator __start_n = (this->_M_impl._M_start
       + difference_type(__n));
      std::__uninitialized_move_a(this->_M_impl._M_start,
      __start_n, __new_start,
      _M_get_Tp_allocator());
      this->_M_impl._M_start = __new_start;
      std::move(__start_n, __pos, __old_start);
      std::copy(__first, __last, __pos - difference_type(__n));
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, difference_type(__n) - __elemsbefore);
      std::__uninitialized_move_copy(this->_M_impl._M_start,
         __pos, __first, __mid,
         __new_start,
         _M_get_Tp_allocator());
      this->_M_impl._M_start = __new_start;
      std::copy(__mid, __last, __old_start);
    }
       }
     catch(...)
       {
  _M_destroy_nodes(__new_start._M_node,
     this->_M_impl._M_start._M_node);
  throw;
       }
   }
 else
 {
   iterator __new_finish = _M_reserve_elements_at_back(__n);
   iterator __old_finish = this->_M_impl._M_finish;
   const difference_type __elemsafter =
     difference_type(__length) - __elemsbefore;
   __pos = this->_M_impl._M_finish - __elemsafter;
   try
     {
       if (__elemsafter > difference_type(__n))
  {
    iterator __finish_n = (this->_M_impl._M_finish
      - difference_type(__n));
    std::__uninitialized_move_a(__finish_n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish = __new_finish;
    std::move_backward(__pos, __finish_n, __old_finish);
    std::copy(__first, __last, __pos);
  }
       else
  {
    _ForwardIterator __mid = __first;
    std::advance(__mid, __elemsafter);
    std::__uninitialized_copy_move(__mid, __last, __pos,
       this->_M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
    this->_M_impl._M_finish = __new_finish;
    std::copy(__first, __mid, __pos);
  }
     }
   catch(...)
     {
       _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
          __new_finish._M_node + 1);
       throw;
     }
 }
      }
# 1027 "/usr/include/c++/15.1.1/bits/deque.tcc" 3
   template<typename _Tp, typename _Alloc>
     void
     deque<_Tp, _Alloc>::
     _M_destroy_data_aux(iterator __first, iterator __last)
     {
       for (_Map_pointer __node = __first._M_node + 1;
     __node < __last._M_node; ++__node)
  std::_Destroy(*__node, *__node + _S_buffer_size(),
         _M_get_Tp_allocator());

       if (__first._M_node != __last._M_node)
  {
    std::_Destroy(__first._M_cur, __first._M_last,
    _M_get_Tp_allocator());
    std::_Destroy(__last._M_first, __last._M_cur,
    _M_get_Tp_allocator());
  }
       else
  std::_Destroy(__first._M_cur, __last._M_cur,
         _M_get_Tp_allocator());
     }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_new_elements_at_front(size_type __new_elems)
    {
      if (this->max_size() - this->size() < __new_elems)
 __throw_length_error(("deque::_M_new_elements_at_front"));

      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
         / _S_buffer_size());
      _M_reserve_map_at_front(__new_nodes);
      size_type __i;
      try
 {
   for (__i = 1; __i <= __new_nodes; ++__i)
     *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
 }
      catch(...)
 {
   for (size_type __j = 1; __j < __i; ++__j)
     _M_deallocate_node(*(this->_M_impl._M_start._M_node - __j));
   throw;
 }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_new_elements_at_back(size_type __new_elems)
    {
      if (this->max_size() - this->size() < __new_elems)
 __throw_length_error(("deque::_M_new_elements_at_back"));

      const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
         / _S_buffer_size());
      _M_reserve_map_at_back(__new_nodes);
      size_type __i;
      try
 {
   for (__i = 1; __i <= __new_nodes; ++__i)
     *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
 }
      catch(...)
 {
   for (size_type __j = 1; __j < __i; ++__j)
     _M_deallocate_node(*(this->_M_impl._M_finish._M_node + __j));
   throw;
 }
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
 = this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 {
   __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
      - __new_num_nodes) / 2
    + (__add_at_front ? __nodes_to_add : 0);
   if (__new_nstart < this->_M_impl._M_start._M_node)
     std::copy(this->_M_impl._M_start._M_node,
        this->_M_impl._M_finish._M_node + 1,
        __new_nstart);
   else
     std::copy_backward(this->_M_impl._M_start._M_node,
          this->_M_impl._M_finish._M_node + 1,
          __new_nstart + __old_num_nodes);
 }
      else
 {
   size_type __new_map_size = this->_M_impl._M_map_size
         + std::max(this->_M_impl._M_map_size,
      __nodes_to_add) + 2;

   const size_t __bufsz = __deque_buf_size(sizeof(_Tp));
   if (__new_map_size > ((max_size() + __bufsz - 1) / __bufsz) * 2)
     __builtin_unreachable();

   _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
   __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
    + (__add_at_front ? __nodes_to_add : 0);
   std::copy(this->_M_impl._M_start._M_node,
      this->_M_impl._M_finish._M_node + 1,
      __new_nstart);
   _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);

   this->_M_impl._M_map = __new_map;
   this->_M_impl._M_map_size = __new_map_size;
 }

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
    }





  template<typename _Tp, typename _VTp>
    void
    __fill_a1(const std::_Deque_iterator<_Tp, _Tp&, _Tp*>& __first,
       const std::_Deque_iterator<_Tp, _Tp&, _Tp*>& __last,
       const _VTp& __value)
    {
      typedef std::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      if (__first._M_node != __last._M_node)
 {
   std::__fill_a1(__first._M_cur, __first._M_last, __value);

   for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
        __node < __last._M_node; ++__node)
     std::__fill_a1(*__node, *__node + _Iter::_S_buffer_size(), __value);

   std::__fill_a1(__last._M_first, __last._M_cur, __value);
 }
      else
 std::__fill_a1(__first._M_cur, __last._M_cur, __value);
    }

  template<bool _IsMove,
    typename _Tp, typename _Ref, typename _Ptr, typename _OI>
    _OI
    __copy_move_dit(std::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
      std::_Deque_iterator<_Tp, _Ref, _Ptr> __last,
      _OI __result)
    {
      typedef std::_Deque_iterator<_Tp, _Ref, _Ptr> _Iter;
      if (__first._M_node != __last._M_node)
 {
   __result
     = std::__copy_move_a1<_IsMove>(__first._M_cur, __first._M_last,
        __result);

   for (typename _Iter::_Map_pointer __node = __first._M_node + 1;
        __node != __last._M_node; ++__node)
     __result
       = std::__copy_move_a1<_IsMove>(*__node,
          *__node + _Iter::_S_buffer_size(),
          __result);

   return std::__copy_move_a1<_IsMove>(__last._M_first, __last._M_cur,
           __result);
 }

      return std::__copy_move_a1<_IsMove>(__first._M_cur, __last._M_cur,
       __result);
    }

  template<bool _IsMove,
    typename _Tp, typename _Ref, typename _Ptr, typename _OI>
    _OI
    __copy_move_a1(std::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
     std::_Deque_iterator<_Tp, _Ref, _Ptr> __last,
     _OI __result)
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
    typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    std::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_a1(std::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
     std::_Deque_iterator<_ITp, _IRef, _IPtr> __last,
     std::_Deque_iterator<_OTp, _OTp&, _OTp*> __result)
    { return __copy_move_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      std::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II __first, _II __last,
     std::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef std::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
      while (__len > 0)
 {
   const difference_type __clen
     = std::min(__len, __result._M_last - __result._M_cur);
   std::__copy_move_a1<_IsMove>(__first, __first + __clen,
           __result._M_cur);

   __first += __clen;
   __result += __clen;
   __len -= __clen;
 }

      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<
      __is_char<_CharT>::__value,
      std::_Deque_iterator<_CharT, _CharT&, _CharT*> >::__type
    __copy_move_a2(
 istreambuf_iterator<_CharT, char_traits<_CharT> > __first,
 istreambuf_iterator<_CharT, char_traits<_CharT> > __last,
 std::_Deque_iterator<_CharT, _CharT&, _CharT*> __result)
    {
      if (__first == __last)
 return __result;

      for (;;)
 {
   const std::ptrdiff_t __len = __result._M_last - __result._M_cur;
   const std::ptrdiff_t __nb
     = std::__copy_n_a(__first, __len, __result._M_cur, false)
     - __result._M_cur;
   __result += __nb;

   if (__nb != __len)
     break;
 }

      return __result;
    }

  template<typename _CharT, typename _Size>
    typename __gnu_cxx::__enable_if<
      __is_char<_CharT>::__value,
      std::_Deque_iterator<_CharT, _CharT&, _CharT*> >::__type
    __copy_n_a(
      istreambuf_iterator<_CharT, char_traits<_CharT> > __it, _Size __size,
      std::_Deque_iterator<_CharT, _CharT&, _CharT*> __result,
      bool __strict)
    {
      if (__size == 0)
 return __result;

      do
 {
   const _Size __len
     = std::min<_Size>(__result._M_last - __result._M_cur, __size);
   std::__copy_n_a(__it, __len, __result._M_cur, __strict);
   __result += __len;
   __size -= __len;
 }
      while (__size != 0);
      return __result;
    }

  template<bool _IsMove,
    typename _Tp, typename _Ref, typename _Ptr, typename _OI>
    _OI
    __copy_move_backward_dit(
  std::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
  std::_Deque_iterator<_Tp, _Ref, _Ptr> __last,
  _OI __result)
    {
      typedef std::_Deque_iterator<_Tp, _Ref, _Ptr> _Iter;
      if (__first._M_node != __last._M_node)
 {
   __result = std::__copy_move_backward_a1<_IsMove>(
  __last._M_first, __last._M_cur, __result);

   for (typename _Iter::_Map_pointer __node = __last._M_node - 1;
        __node != __first._M_node; --__node)
     __result = std::__copy_move_backward_a1<_IsMove>(
  *__node, *__node + _Iter::_S_buffer_size(), __result);

   return std::__copy_move_backward_a1<_IsMove>(
   __first._M_cur, __first._M_last, __result);
 }

      return std::__copy_move_backward_a1<_IsMove>(
  __first._M_cur, __last._M_cur, __result);
    }

  template<bool _IsMove,
    typename _Tp, typename _Ref, typename _Ptr, typename _OI>
    _OI
    __copy_move_backward_a1(
  std::_Deque_iterator<_Tp, _Ref, _Ptr> __first,
  std::_Deque_iterator<_Tp, _Ref, _Ptr> __last,
  _OI __result)
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
    typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    std::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_backward_a1(
  std::_Deque_iterator<_ITp, _IRef, _IPtr> __first,
  std::_Deque_iterator<_ITp, _IRef, _IPtr> __last,
  std::_Deque_iterator<_OTp, _OTp&, _OTp*> __result)
    { return __copy_move_backward_dit<_IsMove>(__first, __last, __result); }

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      std::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_backward_a1(_II __first, _II __last,
  std::_Deque_iterator<_Tp, _Tp&, _Tp*> __result)
    {
      typedef std::_Deque_iterator<_Tp, _Tp&, _Tp*> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last - __first;
      while (__len > 0)
 {
   difference_type __rlen = __result._M_cur - __result._M_first;
   _Tp* __rend = __result._M_cur;
   if (!__rlen)
     {
       __rlen = _Iter::_S_buffer_size();
       __rend = *(__result._M_node - 1) + __rlen;
     }

   const difference_type __clen = std::min(__len, __rlen);
   std::__copy_move_backward_a1<_IsMove>(__last - __clen, __last, __rend);

   __last -= __clen;
   __result -= __clen;
   __len -= __clen;
 }

      return __result;
    }

  template<typename _Tp, typename _Ref, typename _Ptr, typename _II>
    bool
    __equal_dit(
 const std::_Deque_iterator<_Tp, _Ref, _Ptr>& __first1,
 const std::_Deque_iterator<_Tp, _Ref, _Ptr>& __last1,
 _II __first2)
    {
      typedef std::_Deque_iterator<_Tp, _Ref, _Ptr> _Iter;
      if (__first1._M_node != __last1._M_node)
 {
   if (!std::__equal_aux1(__first1._M_cur, __first1._M_last, __first2))
     return false;

   __first2 += __first1._M_last - __first1._M_cur;
   for (typename _Iter::_Map_pointer __node = __first1._M_node + 1;
        __node != __last1._M_node;
        __first2 += _Iter::_S_buffer_size(), ++__node)
     if (!std::__equal_aux1(*__node, *__node + _Iter::_S_buffer_size(),
      __first2))
       return false;

   return std::__equal_aux1(__last1._M_first, __last1._M_cur, __first2);
 }

      return std::__equal_aux1(__first1._M_cur, __last1._M_cur, __first2);
    }

  template<typename _Tp, typename _Ref, typename _Ptr, typename _II>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value, bool>::__type
    __equal_aux1(std::_Deque_iterator<_Tp, _Ref, _Ptr> __first1,
   std::_Deque_iterator<_Tp, _Ref, _Ptr> __last1,
   _II __first2)
    { return std::__equal_dit(__first1, __last1, __first2); }

  template<typename _Tp1, typename _Ref1, typename _Ptr1,
    typename _Tp2, typename _Ref2, typename _Ptr2>
    bool
    __equal_aux1(std::_Deque_iterator<_Tp1, _Ref1, _Ptr1> __first1,
   std::_Deque_iterator<_Tp1, _Ref1, _Ptr1> __last1,
   std::_Deque_iterator<_Tp2, _Ref2, _Ptr2> __first2)
    { return std::__equal_dit(__first1, __last1, __first2); }

  template<typename _II, typename _Tp, typename _Ref, typename _Ptr>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value, bool>::__type
    __equal_aux1(_II __first1, _II __last1,
  std::_Deque_iterator<_Tp, _Ref, _Ptr> __first2)
    {
      typedef std::_Deque_iterator<_Tp, _Ref, _Ptr> _Iter;
      typedef typename _Iter::difference_type difference_type;

      difference_type __len = __last1 - __first1;
      while (__len > 0)
 {
   const difference_type __clen
     = std::min(__len, __first2._M_last - __first2._M_cur);
   if (!std::__equal_aux1(__first1, __first1 + __clen, __first2._M_cur))
     return false;

   __first1 += __clen;
   __len -= __clen;
   __first2 += __clen;
 }

      return true;
    }

  template<typename _Tp1, typename _Ref, typename _Ptr, typename _Tp2>
    int
    __lex_cmp_dit(
 std::_Deque_iterator<_Tp1, _Ref, _Ptr> __first1,
 std::_Deque_iterator<_Tp1, _Ref, _Ptr> __last1,
 const _Tp2* __first2, const _Tp2* __last2)
    {

      const bool __simple =
 (__is_memcmp_ordered_with<_Tp1, _Tp2>::__value
  && __is_pointer(_Ptr)






  );
      typedef std::__lexicographical_compare<__simple> _Lc;




      while (__first1._M_node != __last1._M_node)
 {
   const ptrdiff_t __len1 = __first1._M_last - __first1._M_cur;
   const ptrdiff_t __len2 = __last2 - __first2;
   const ptrdiff_t __len = std::min(__len1, __len2);

   if (int __ret = _Lc::__3way(__first1._M_cur, __first1._M_last,
          __first2, __first2 + __len))
     return __ret;

   __first1 += __len;
   __first2 += __len;
 }
      return _Lc::__3way(__first1._M_cur, __last1._M_cur,
    __first2, __last2);
    }

  template<typename _Tp1, typename _Ref1, typename _Ptr1,
    typename _Tp2>
    inline bool
    __lexicographical_compare_aux1(
 std::_Deque_iterator<_Tp1, _Ref1, _Ptr1> __first1,
 std::_Deque_iterator<_Tp1, _Ref1, _Ptr1> __last1,
 _Tp2* __first2, _Tp2* __last2)
    { return std::__lex_cmp_dit(__first1, __last1, __first2, __last2) < 0; }

  template<typename _Tp1,
    typename _Tp2, typename _Ref2, typename _Ptr2>
    inline bool
    __lexicographical_compare_aux1(_Tp1* __first1, _Tp1* __last1,
 std::_Deque_iterator<_Tp2, _Ref2, _Ptr2> __first2,
 std::_Deque_iterator<_Tp2, _Ref2, _Ptr2> __last2)
    { return std::__lex_cmp_dit(__first2, __last2, __first1, __last1) > 0; }

  template<typename _Tp1, typename _Ref1, typename _Ptr1,
    typename _Tp2, typename _Ref2, typename _Ptr2>
    inline bool
    __lexicographical_compare_aux1(
  std::_Deque_iterator<_Tp1, _Ref1, _Ptr1> __first1,
  std::_Deque_iterator<_Tp1, _Ref1, _Ptr1> __last1,
  std::_Deque_iterator<_Tp2, _Ref2, _Ptr2> __first2,
  std::_Deque_iterator<_Tp2, _Ref2, _Ptr2> __last2)
    {

      const bool __simple =
 (__is_memcmp_ordered_with<_Tp1, _Tp2>::__value
  && __is_pointer(_Ptr1) && __is_pointer(_Ptr2)






  );
      typedef std::__lexicographical_compare<__simple> _Lc;




      while (__first1 != __last1)
 {
   const ptrdiff_t __len2 = __first2._M_node == __last2._M_node
     ? __last2._M_cur - __first2._M_cur
     : __first2._M_last - __first2._M_cur;
   if (__len2 == 0)
     return false;
   const ptrdiff_t __len1 = __first1._M_node == __last1._M_node
     ? __last1._M_cur - __first1._M_cur
     : __first1._M_last - __first1._M_cur;
   const ptrdiff_t __len = std::min(__len1, __len2);
   if (int __ret = _Lc::__3way(__first1._M_cur, __first1._M_cur + __len,
          __first2._M_cur, __first2._M_cur + __len))
     return __ret < 0;

   __first1 += __len;
   __first2 += __len;
 }

      return __last2 != __first2;
    }


}
# 72 "/usr/include/c++/15.1.1/deque" 2 3

#define __glibcxx_want_algorithm_default_value_type 
#define __glibcxx_want_allocator_traits_is_always_equal 
#define __glibcxx_want_containers_ranges 
#define __glibcxx_want_erase_if 
#define __glibcxx_want_nonmember_container_access 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 79 "/usr/include/c++/15.1.1/deque" 2 3







namespace std __attribute__ ((__visibility__ ("default")))
{

  namespace pmr
  {
    template<typename _Tp>
      using deque = std::deque<_Tp, polymorphic_allocator<_Tp>>;
  }

}
# 69 "/usr/include/c++/15.1.1/queue" 2 3



# 1 "/usr/include/c++/15.1.1/bits/stl_queue.h" 1 3
# 57 "/usr/include/c++/15.1.1/bits/stl_queue.h" 3
#define _STL_QUEUE_H 1
# 69 "/usr/include/c++/15.1.1/bits/stl_queue.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 103 "/usr/include/c++/15.1.1/bits/stl_queue.h" 3
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
    {
# 117 "/usr/include/c++/15.1.1/bits/stl_queue.h" 3
      template<typename _Tp1, typename _Seq1>
 friend bool
 operator==(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&);

      template<typename _Tp1, typename _Seq1>
 friend bool
 operator<(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&);
# 132 "/usr/include/c++/15.1.1/bits/stl_queue.h" 3
      template<typename _Alloc>
 using _Uses = typename
   enable_if<uses_allocator<_Sequence, _Alloc>::value>::type;





      static_assert(is_same<_Tp, typename _Sequence::value_type>::value,
   "value_type must be the same as the underlying container");



    public:
      typedef typename _Sequence::value_type value_type;
      typedef typename _Sequence::reference reference;
      typedef typename _Sequence::const_reference const_reference;
      typedef typename _Sequence::size_type size_type;
      typedef _Sequence container_type;

    protected:
# 161 "/usr/include/c++/15.1.1/bits/stl_queue.h" 3
      _Sequence c;

    public:
# 172 "/usr/include/c++/15.1.1/bits/stl_queue.h" 3
      template<typename _Seq = _Sequence, typename _Requires = typename
        enable_if<is_default_constructible<_Seq>::value>::type>
 queue()
 : c() { }

      explicit
      queue(const _Sequence& __c)
      : c(__c) { }

      explicit
      queue(_Sequence&& __c)
      : c(std::move(__c)) { }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 explicit
 queue(const _Alloc& __a)
 : c(__a) { }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 queue(const _Sequence& __c, const _Alloc& __a)
 : c(__c, __a) { }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 queue(_Sequence&& __c, const _Alloc& __a)
 : c(std::move(__c), __a) { }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 queue(const queue& __q, const _Alloc& __a)
 : c(__q.c, __a) { }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 queue(queue&& __q, const _Alloc& __a)
 : c(std::move(__q.c), __a) { }
# 244 "/usr/include/c++/15.1.1/bits/stl_queue.h" 3
      [[__nodiscard__]] bool
      empty() const
      { return c.empty(); }


      [[__nodiscard__]]
      size_type
      size() const
      { return c.size(); }





      [[__nodiscard__]]
      reference
      front()
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return c.front();
      }





      [[__nodiscard__]]
      const_reference
      front() const
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return c.front();
      }





      [[__nodiscard__]]
      reference
      back()
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return c.back();
      }





      [[__nodiscard__]]
      const_reference
      back() const
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return c.back();
      }
# 311 "/usr/include/c++/15.1.1/bits/stl_queue.h" 3
      void
      push(const value_type& __x)
      { c.push_back(__x); }


      void
      push(value_type&& __x)
      { c.push_back(std::move(__x)); }


      template<typename... _Args>
 decltype(auto)
 emplace(_Args&&... __args)
 { return c.emplace_back(std::forward<_Args>(__args)...); }
# 356 "/usr/include/c++/15.1.1/bits/stl_queue.h" 3
      void
      pop()
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 c.pop_front();
      }


      void
      swap(queue& __q)

      noexcept(__is_nothrow_swappable<_Sequence>::value)



      {
 using std::swap;
 swap(c, __q.c);
      }






    };


  template<typename _Container,
    typename = _RequireNotAllocator<_Container>>
    queue(_Container) -> queue<typename _Container::value_type, _Container>;

  template<typename _Container, typename _Allocator,
    typename = _RequireNotAllocator<_Container>>
    queue(_Container, _Allocator)
    -> queue<typename _Container::value_type, _Container>;
# 431 "/usr/include/c++/15.1.1/bits/stl_queue.h" 3
  template<typename _Tp, typename _Seq>
    [[__nodiscard__]]
    inline bool
    operator==(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
    { return __x.c == __y.c; }
# 450 "/usr/include/c++/15.1.1/bits/stl_queue.h" 3
  template<typename _Tp, typename _Seq>
    [[__nodiscard__]]
    inline bool
    operator<(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
    { return __x.c < __y.c; }


  template<typename _Tp, typename _Seq>
    [[__nodiscard__]]
    inline bool
    operator!=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Seq>
    [[__nodiscard__]]
    inline bool
    operator>(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Seq>
    [[__nodiscard__]]
    inline bool
    operator<=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Seq>
    [[__nodiscard__]]
    inline bool
    operator>=(const queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)
    { return !(__x < __y); }
# 493 "/usr/include/c++/15.1.1/bits/stl_queue.h" 3
  template<typename _Tp, typename _Seq>
    inline


    typename enable_if<__is_swappable<_Seq>::value>::type



    swap(queue<_Tp, _Seq>& __x, queue<_Tp, _Seq>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }

  template<typename _Tp, typename _Seq, typename _Alloc>
    struct uses_allocator<queue<_Tp, _Seq>, _Alloc>
    : public uses_allocator<_Seq, _Alloc>::type { };
# 550 "/usr/include/c++/15.1.1/bits/stl_queue.h" 3
  template<typename _Tp, typename _Sequence = vector<_Tp>,
    typename _Compare = less<typename _Sequence::value_type> >
    class priority_queue
    {
# 568 "/usr/include/c++/15.1.1/bits/stl_queue.h" 3
      template<typename _Alloc>
 using _Uses = typename
   enable_if<uses_allocator<_Sequence, _Alloc>::value>::type;





      static_assert(is_same<_Tp, typename _Sequence::value_type>::value,
   "value_type must be the same as the underlying container");



    public:
      typedef typename _Sequence::value_type value_type;
      typedef typename _Sequence::reference reference;
      typedef typename _Sequence::const_reference const_reference;
      typedef typename _Sequence::size_type size_type;
      typedef _Sequence container_type;


      typedef _Compare value_compare;

    protected:

      _Sequence c;
      _Compare comp;

    public:
# 607 "/usr/include/c++/15.1.1/bits/stl_queue.h" 3
      template<typename _Seq = _Sequence, typename _Requires = typename
        enable_if<__and_<is_default_constructible<_Compare>,
    is_default_constructible<_Seq>>::value>::type>
 priority_queue()
 : c(), comp() { }

      explicit
      priority_queue(const _Compare& __x, const _Sequence& __s)
      : c(__s), comp(__x)
      { std::make_heap(c.begin(), c.end(), comp); }

      explicit
      priority_queue(const _Compare& __x, _Sequence&& __s = _Sequence())
      : c(std::move(__s)), comp(__x)
      { std::make_heap(c.begin(), c.end(), comp); }

      priority_queue(const priority_queue&) = default;
      priority_queue& operator=(const priority_queue&) = default;

      priority_queue(priority_queue&& __q)
      noexcept(__and_<is_nothrow_move_constructible<_Sequence>,
        is_nothrow_move_constructible<_Compare>>::value)
      : c(std::move(__q.c)), comp(std::move(__q.comp))
      { __q.c.clear(); }

      priority_queue&
      operator=(priority_queue&& __q)
      noexcept(__and_<is_nothrow_move_assignable<_Sequence>,
        is_nothrow_move_assignable<_Compare>>::value)
      {
 c = std::move(__q.c);
 __q.c.clear();
 comp = std::move(__q.comp);
 return *this;
      }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 explicit
 priority_queue(const _Alloc& __a)
 : c(__a), comp() { }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 priority_queue(const _Compare& __x, const _Alloc& __a)
 : c(__a), comp(__x) { }



      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 priority_queue(const _Compare& __x, const _Sequence& __c,
         const _Alloc& __a)
 : c(__c, __a), comp(__x)
 { std::make_heap(c.begin(), c.end(), comp); }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 priority_queue(const _Compare& __x, _Sequence&& __c, const _Alloc& __a)
 : c(std::move(__c), __a), comp(__x)
 { std::make_heap(c.begin(), c.end(), comp); }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 priority_queue(const priority_queue& __q, const _Alloc& __a)
 : c(__q.c, __a), comp(__q.comp) { }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 priority_queue(priority_queue&& __q, const _Alloc& __a)
 : c(std::move(__q.c), __a), comp(std::move(__q.comp))
 { __q.c.clear(); }
# 703 "/usr/include/c++/15.1.1/bits/stl_queue.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 priority_queue(_InputIterator __first, _InputIterator __last,
         const _Compare& __x = _Compare())
 : c(__first, __last), comp(__x)
 { std::make_heap(c.begin(), c.end(), comp); }



      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 priority_queue(_InputIterator __first, _InputIterator __last,
         const _Compare& __x, const _Sequence& __s)
 : c(__s), comp(__x)
 {
   ;
   c.insert(c.end(), __first, __last);
   std::make_heap(c.begin(), c.end(), comp);
 }

      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 priority_queue(_InputIterator __first, _InputIterator __last,
         const _Compare& __x, _Sequence&& __s)
 : c(std::move(__s)), comp(__x)
 {
   ;
   c.insert(c.end(), __first, __last);
   std::make_heap(c.begin(), c.end(), comp);
 }



      template<typename _InputIterator, typename _Alloc,
        typename = std::_RequireInputIter<_InputIterator>,
        typename _Requires = _Uses<_Alloc>>
 priority_queue(_InputIterator __first, _InputIterator __last,
         const _Alloc& __alloc)
 : c(__first, __last, __alloc), comp()
 { std::make_heap(c.begin(), c.end(), comp); }

      template<typename _InputIterator, typename _Alloc,
        typename = std::_RequireInputIter<_InputIterator>,
        typename _Requires = _Uses<_Alloc>>
 priority_queue(_InputIterator __first, _InputIterator __last,
         const _Compare& __x, const _Alloc& __alloc)
 : c(__first, __last, __alloc), comp(__x)
 { std::make_heap(c.begin(), c.end(), comp); }

      template<typename _InputIterator, typename _Alloc,
        typename = std::_RequireInputIter<_InputIterator>,
        typename _Requires = _Uses<_Alloc>>
 priority_queue(_InputIterator __first, _InputIterator __last,
         const _Compare& __x, const _Sequence& __s,
         const _Alloc& __alloc)
 : c(__s, __alloc), comp(__x)
 {
   ;
   c.insert(c.end(), __first, __last);
   std::make_heap(c.begin(), c.end(), comp);
 }

      template<typename _InputIterator, typename _Alloc,
        typename _Requires = _Uses<_Alloc>>
 priority_queue(_InputIterator __first, _InputIterator __last,
         const _Compare& __x, _Sequence&& __s,
         const _Alloc& __alloc)
 : c(std::move(__s), __alloc), comp(__x)
 {
   ;
   c.insert(c.end(), __first, __last);
   std::make_heap(c.begin(), c.end(), comp);
 }
# 807 "/usr/include/c++/15.1.1/bits/stl_queue.h" 3
      [[__nodiscard__]] bool
      empty() const
      { return c.empty(); }


      [[__nodiscard__]]
      size_type
      size() const
      { return c.size(); }





      [[__nodiscard__]]
      const_reference
      top() const
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return c.front();
      }
# 837 "/usr/include/c++/15.1.1/bits/stl_queue.h" 3
      void
      push(const value_type& __x)
      {
 c.push_back(__x);
 std::push_heap(c.begin(), c.end(), comp);
      }


      void
      push(value_type&& __x)
      {
 c.push_back(std::move(__x));
 std::push_heap(c.begin(), c.end(), comp);
      }

      template<typename... _Args>
 void
 emplace(_Args&&... __args)
 {
   c.emplace_back(std::forward<_Args>(__args)...);
   std::push_heap(c.begin(), c.end(), comp);
 }
# 885 "/usr/include/c++/15.1.1/bits/stl_queue.h" 3
      void
      pop()
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 std::pop_heap(c.begin(), c.end(), comp);
 c.pop_back();
      }


      void
      swap(priority_queue& __pq)
      noexcept(__and_<

   __is_nothrow_swappable<_Sequence>,



   __is_nothrow_swappable<_Compare>
        >::value)
      {
 using std::swap;
 swap(c, __pq.c);
 swap(comp, __pq.comp);
      }






    };


  template<typename _Compare, typename _Container,
    typename = _RequireNotAllocator<_Compare>,
    typename = _RequireNotAllocator<_Container>>
    priority_queue(_Compare, _Container)
    -> priority_queue<typename _Container::value_type, _Container, _Compare>;

  template<typename _InputIterator, typename _ValT
    = typename iterator_traits<_InputIterator>::value_type,
    typename _Compare = less<_ValT>,
    typename _Container = vector<_ValT>,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireNotAllocator<_Compare>,
    typename = _RequireNotAllocator<_Container>>
    priority_queue(_InputIterator, _InputIterator, _Compare = _Compare(),
     _Container = _Container())
    -> priority_queue<_ValT, _Container, _Compare>;

  template<typename _Compare, typename _Container, typename _Allocator,
    typename = _RequireNotAllocator<_Compare>,
    typename = _RequireNotAllocator<_Container>>
    priority_queue(_Compare, _Container, _Allocator)
    -> priority_queue<typename _Container::value_type, _Container, _Compare>;
# 961 "/usr/include/c++/15.1.1/bits/stl_queue.h" 3
  template<typename _Tp, typename _Sequence, typename _Compare>
    inline


    typename enable_if<__and_<__is_swappable<_Sequence>,
         __is_swappable<_Compare>>::value>::type



    swap(priority_queue<_Tp, _Sequence, _Compare>& __x,
  priority_queue<_Tp, _Sequence, _Compare>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }

  template<typename _Tp, typename _Sequence, typename _Compare,
    typename _Alloc>
    struct uses_allocator<priority_queue<_Tp, _Sequence, _Compare>, _Alloc>
    : public uses_allocator<_Sequence, _Alloc>::type { };



}
# 73 "/usr/include/c++/15.1.1/queue" 2 3
# 18 "emc/sterp/sterp.cc" 2
# 1 "/usr/include/c++/15.1.1/stack" 1 3
# 56 "/usr/include/c++/15.1.1/stack" 3
#define _GLIBCXX_STACK 1







#define __glibcxx_want_adaptor_iterator_pair_constructor 
#define __glibcxx_want_containers_ranges 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 67 "/usr/include/c++/15.1.1/stack" 2 3


# 1 "/usr/include/c++/15.1.1/bits/stl_stack.h" 1 3
# 57 "/usr/include/c++/15.1.1/bits/stl_stack.h" 3
#define _STL_STACK_H 1
# 69 "/usr/include/c++/15.1.1/bits/stl_stack.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 106 "/usr/include/c++/15.1.1/bits/stl_stack.h" 3
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class stack
    {
# 119 "/usr/include/c++/15.1.1/bits/stl_stack.h" 3
      template<typename _Tp1, typename _Seq1>
 friend bool
 operator==(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&);

      template<typename _Tp1, typename _Seq1>
 friend bool
 operator<(const stack<_Tp1, _Seq1>&, const stack<_Tp1, _Seq1>&);
# 134 "/usr/include/c++/15.1.1/bits/stl_stack.h" 3
      template<typename _Alloc>
 using _Uses = typename
   enable_if<uses_allocator<_Sequence, _Alloc>::value>::type;





      static_assert(is_same<_Tp, typename _Sequence::value_type>::value,
   "value_type must be the same as the underlying container");



    public:
      typedef typename _Sequence::value_type value_type;
      typedef typename _Sequence::reference reference;
      typedef typename _Sequence::const_reference const_reference;
      typedef typename _Sequence::size_type size_type;
      typedef _Sequence container_type;

    protected:

      _Sequence c;

    public:
# 168 "/usr/include/c++/15.1.1/bits/stl_stack.h" 3
      template<typename _Seq = _Sequence, typename _Requires = typename
        enable_if<is_default_constructible<_Seq>::value>::type>
 stack()
 : c() { }

      explicit
      stack(const _Sequence& __c)
      : c(__c) { }

      explicit
      stack(_Sequence&& __c)
      : c(std::move(__c)) { }
# 209 "/usr/include/c++/15.1.1/bits/stl_stack.h" 3
      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 explicit
 stack(const _Alloc& __a)
 : c(__a) { }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 stack(const _Sequence& __c, const _Alloc& __a)
 : c(__c, __a) { }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 stack(_Sequence&& __c, const _Alloc& __a)
 : c(std::move(__c), __a) { }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 stack(const stack& __q, const _Alloc& __a)
 : c(__q.c, __a) { }

      template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 stack(stack&& __q, const _Alloc& __a)
 : c(std::move(__q.c), __a) { }
# 242 "/usr/include/c++/15.1.1/bits/stl_stack.h" 3
      [[__nodiscard__]] bool
      empty() const
      { return c.empty(); }


      [[__nodiscard__]]
      size_type
      size() const
      { return c.size(); }





      [[__nodiscard__]]
      reference
      top()
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return c.back();
      }





      [[__nodiscard__]]
      const_reference
      top() const
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return c.back();
      }
# 285 "/usr/include/c++/15.1.1/bits/stl_stack.h" 3
      void
      push(const value_type& __x)
      { c.push_back(__x); }


      void
      push(value_type&& __x)
      { c.push_back(std::move(__x)); }


      template<typename... _Args>
 decltype(auto)
 emplace(_Args&&... __args)
 { return c.emplace_back(std::forward<_Args>(__args)...); }
# 330 "/usr/include/c++/15.1.1/bits/stl_stack.h" 3
      void
      pop()
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 c.pop_back();
      }


      void
      swap(stack& __s)

      noexcept(__is_nothrow_swappable<_Sequence>::value)



      {
 using std::swap;
 swap(c, __s.c);
      }






    };


  template<typename _Container,
    typename = _RequireNotAllocator<_Container>>
    stack(_Container) -> stack<typename _Container::value_type, _Container>;

  template<typename _Container, typename _Allocator,
    typename = _RequireNotAllocator<_Container>>
    stack(_Container, _Allocator)
    -> stack<typename _Container::value_type, _Container>;
# 406 "/usr/include/c++/15.1.1/bits/stl_stack.h" 3
  template<typename _Tp, typename _Seq>
    [[__nodiscard__]]
    inline bool
    operator==(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
    { return __x.c == __y.c; }
# 425 "/usr/include/c++/15.1.1/bits/stl_stack.h" 3
  template<typename _Tp, typename _Seq>
    [[__nodiscard__]]
    inline bool
    operator<(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
    { return __x.c < __y.c; }


  template<typename _Tp, typename _Seq>
    [[__nodiscard__]]
    inline bool
    operator!=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Seq>
    [[__nodiscard__]]
    inline bool
    operator>(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Seq>
    [[__nodiscard__]]
    inline bool
    operator<=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Seq>
    [[__nodiscard__]]
    inline bool
    operator>=(const stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)
    { return !(__x < __y); }
# 468 "/usr/include/c++/15.1.1/bits/stl_stack.h" 3
  template<typename _Tp, typename _Seq>
    inline


    typename enable_if<__is_swappable<_Seq>::value>::type



    swap(stack<_Tp, _Seq>& __x, stack<_Tp, _Seq>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }

  template<typename _Tp, typename _Seq, typename _Alloc>
    struct uses_allocator<stack<_Tp, _Seq>, _Alloc>
    : public uses_allocator<_Seq, _Alloc>::type { };



}
# 70 "/usr/include/c++/15.1.1/stack" 2 3
# 19 "emc/sterp/sterp.cc" 2

# 1 "/usr/include/string.h" 1 3 4
# 23 "/usr/include/string.h" 3 4
#define _STRING_H 1

#define __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION 
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 31 "/usr/include/bits/libc-header-start.h" 3 4
#undef __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION





#undef __GLIBC_USE_LIB_EXT2


#define __GLIBC_USE_LIB_EXT2 1
# 67 "/usr/include/bits/libc-header-start.h" 3 4
#undef __GLIBC_USE_IEC_60559_BFP_EXT

#define __GLIBC_USE_IEC_60559_BFP_EXT 1



#undef __GLIBC_USE_IEC_60559_BFP_EXT_C23

#define __GLIBC_USE_IEC_60559_BFP_EXT_C23 1



#undef __GLIBC_USE_IEC_60559_EXT

#define __GLIBC_USE_IEC_60559_EXT 1
# 90 "/usr/include/bits/libc-header-start.h" 3 4
#undef __GLIBC_USE_IEC_60559_FUNCS_EXT

#define __GLIBC_USE_IEC_60559_FUNCS_EXT 1



#undef __GLIBC_USE_IEC_60559_FUNCS_EXT_C23

#define __GLIBC_USE_IEC_60559_FUNCS_EXT_C23 1






#undef __GLIBC_USE_IEC_60559_TYPES_EXT

#define __GLIBC_USE_IEC_60559_TYPES_EXT 1
# 27 "/usr/include/string.h" 2 3 4

extern "C" {


#define __need_size_t 
#define __need_NULL 
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 1 3 4
# 173 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 252 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_size_t
# 364 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_wchar_t
# 414 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef NULL

#define NULL __null
# 425 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_NULL




#undef offsetof
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 34 "/usr/include/string.h" 2 3 4




#define __CORRECT_ISO_CPP_STRING_H_PROTO 




extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
    noexcept (true) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__write_only__, 1, 4)));




extern void *memset (void *__s, int __c, size_t __n) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 80 "/usr/include/string.h" 3 4
extern int __memcmpeq (const void *__s1, const void *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      noexcept (true) __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      noexcept (true) __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) void *
memchr (void *__s, int __c, size_t __n) noexcept (true)
{
  return __builtin_memchr (__s, __c, __n);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const void *
memchr (const void *__s, int __c, size_t __n) noexcept (true)
{
  return __builtin_memchr (__s, __c, __n);
}

}
# 115 "/usr/include/string.h" 3 4
extern "C++" void *rawmemchr (void *__s, int __c)
     noexcept (true) __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     noexcept (true) __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      noexcept (true) __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)))
      __attribute__ ((__access__ (__read_only__, 1, 3)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      noexcept (true) __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)))
      __attribute__ ((__access__ (__read_only__, 1, 3)));
# 141 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
    noexcept (true) __attribute__ ((__nonnull__ (2))) __attribute__ ((__access__ (__write_only__, 1, 3)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) noexcept (true) __attribute__ ((__nonnull__ (2, 4)))
     __attribute__ ((__access__ (__write_only__, 1, 3)));





extern char *strdup (const char *__s)
     noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     noexcept (true) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));




#define strdupa(s) (__extension__ ({ const char *__old = (s); size_t __len = strlen (__old) + 1; char *__new = (char *) __builtin_alloca (__len); (char *) memcpy (__new, __old, __len); }))
# 211 "/usr/include/string.h" 3 4
#define strndupa(s,n) (__extension__ ({ const char *__old = (s); size_t __len = strnlen (__old, (n)); char *__new = (char *) __builtin_alloca (__len + 1); __new[__len] = '\0'; (char *) memcpy (__new, __old, __len); }))
# 224 "/usr/include/string.h" 3 4
extern "C++"
{
extern char *strchr (char *__s, int __c)
     noexcept (true) __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     noexcept (true) __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strchr (char *__s, int __c) noexcept (true)
{
  return __builtin_strchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strchr (const char *__s, int __c) noexcept (true)
{
  return __builtin_strchr (__s, __c);
}

}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     noexcept (true) __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     noexcept (true) __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strrchr (char *__s, int __c) noexcept (true)
{
  return __builtin_strrchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strrchr (const char *__s, int __c) noexcept (true)
{
  return __builtin_strrchr (__s, __c);
}

}
# 281 "/usr/include/string.h" 3 4
extern "C++" char *strchrnul (char *__s, int __c)
     noexcept (true) __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     noexcept (true) __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 293 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     noexcept (true) __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     noexcept (true) __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strpbrk (char *__s, const char *__accept) noexcept (true)
{
  return __builtin_strpbrk (__s, __accept);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strpbrk (const char *__s, const char *__accept) noexcept (true)
{
  return __builtin_strpbrk (__s, __accept);
}

}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     noexcept (true) __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     noexcept (true) __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strstr (char *__haystack, const char *__needle) noexcept (true)
{
  return __builtin_strstr (__haystack, __needle);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strstr (const char *__haystack, const char *__needle) noexcept (true)
{
  return __builtin_strstr (__haystack, __needle);
}

}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     noexcept (true) __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     noexcept (true) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     noexcept (true) __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     noexcept (true) __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     noexcept (true) __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 389 "/usr/include/string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)))
    __attribute__ ((__access__ (__read_only__, 1, 2)))
    __attribute__ ((__access__ (__read_only__, 3, 4)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) noexcept (true);
# 444 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     noexcept (true) __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__)) __attribute__ ((__access__ (__write_only__, 2, 3)));




extern const char *strerrordesc_np (int __err) noexcept (true);

extern const char *strerrorname_np (int __err) noexcept (true);





extern char *strerror_l (int __errnum, locale_t __l) noexcept (true);



# 1 "/usr/include/strings.h" 1 3 4
# 19 "/usr/include/strings.h" 3 4
#define _STRINGS_H 1


#define __need_size_t 
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 1 3 4
# 173 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 252 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_size_t
# 364 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_wchar_t
# 414 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef NULL

#define NULL __null
# 425 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_NULL




#undef offsetof
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 24 "/usr/include/strings.h" 2 3 4



#define __CORRECT_ISO_CPP_STRINGS_H_PROTO 


extern "C" {



extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) noexcept (true) __attribute__ ((__nonnull__ (1)));



extern "C++"
{
extern char *index (char *__s, int __c)
     noexcept (true) __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     noexcept (true) __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
index (char *__s, int __c) noexcept (true)
{
  return __builtin_index (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
index (const char *__s, int __c) noexcept (true)
{
  return __builtin_index (__s, __c);
}

}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     noexcept (true) __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     noexcept (true) __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
rindex (char *__s, int __c) noexcept (true)
{
  return __builtin_rindex (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
rindex (const char *__s, int __c) noexcept (true)
{
  return __builtin_rindex (__s, __c);
}

}
# 104 "/usr/include/strings.h" 3 4
extern int ffs (int __i) noexcept (true) __attribute__ ((__const__));





extern int ffsl (long int __l) noexcept (true) __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     noexcept (true) __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));


}





# 1 "/usr/include/bits/strings_fortified.h" 1 3 4
# 20 "/usr/include/bits/strings_fortified.h" 3 4
#define __STRINGS_FORTIFIED 1

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) bcopy (const void *__src, void *__dest, size_t __len) noexcept (true)
{
  (void) __builtin___memmove_chk (__dest, __src, __len,
      __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) bzero (void *__dest, size_t __len) noexcept (true)
{
  (void) __builtin___memset_chk (__dest, '\0', __len,
     __builtin_object_size (__dest, 0));
}
# 145 "/usr/include/strings.h" 2 3 4
# 463 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) noexcept (true) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__write_only__, 1, 2)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) noexcept (true);



extern const char *sigabbrev_np (int __sig) noexcept (true);


extern const char *sigdescr_np (int __sig) noexcept (true);



extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlcpy (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
  noexcept (true) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__write_only__, 1, 3)));



extern size_t strlcat (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
  noexcept (true) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__access__ (__read_write__, 1, 3)));




extern int strverscmp (const char *__s1, const char *__s2)
     noexcept (true) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) noexcept (true) __attribute__ ((__nonnull__ (1)))
    __attribute__ ((__access__ (__read_write__, 1, 2)));







extern "C++" char *basename (char *__filename)
     noexcept (true) __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     noexcept (true) __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 548 "/usr/include/string.h" 3 4
# 1 "/usr/include/bits/string_fortified.h" 1 3 4
# 19 "/usr/include/bits/string_fortified.h" 3 4
#define _BITS_STRING_FORTIFIED_H 1





extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memcpy (void *__restrict __dest, const void *__restrict __src, size_t __len) noexcept (true)

{
  return __builtin___memcpy_chk (__dest, __src, __len,
     __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memmove (void *__dest, const void *__src, size_t __len) noexcept (true)
{
  return __builtin___memmove_chk (__dest, __src, __len,
      __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) mempcpy (void *__restrict __dest, const void *__restrict __src, size_t __len) noexcept (true)

{
  return __builtin___mempcpy_chk (__dest, __src, __len,
      __builtin_object_size (__dest, 0));
}
# 56 "/usr/include/bits/string_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memset (void *__dest, int __ch, size_t __len) noexcept (true)
{
  return __builtin___memset_chk (__dest, __ch, __len,
     __builtin_object_size (__dest, 0));
}




void __explicit_bzero_chk (void *__dest, size_t __len, size_t __destlen)
  noexcept (true) __attribute__ ((__nonnull__ (1))) __attribute__ ((__access__ (__write_only__, 1, 2)));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) explicit_bzero (void *__dest, size_t __len) noexcept (true)
{
  __explicit_bzero_chk (__dest, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strcpy (char * __restrict __dest, const char *__restrict __src) noexcept (true)

    
{
  return __builtin___strcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) stpcpy (char * __restrict __dest, const char *__restrict __src) noexcept (true)

    
{
  return __builtin___stpcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strncpy (char * __restrict __dest, const char *__restrict __src, size_t __len) noexcept (true)

    
{
  return __builtin___strncpy_chk (__dest, __src, __len,
      __builtin_object_size (__dest, 2 > 1));
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) stpncpy (char * __dest, const char *__src, size_t __n) noexcept (true)

    
{
  return __builtin___stpncpy_chk (__dest, __src, __n,
      __builtin_object_size (__dest, 2 > 1));
}
# 135 "/usr/include/bits/string_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strcat (char * __restrict __dest, const char *__restrict __src) noexcept (true)

    
{
  return __builtin___strcat_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strncat (char * __restrict __dest, const char *__restrict __src, size_t __len) noexcept (true)

    
{
  return __builtin___strncat_chk (__dest, __src, __len,
      __builtin_object_size (__dest, 2 > 1));
}


extern size_t __strlcpy_chk (char *__dest, const char *__src, size_t __n,
        size_t __destlen) noexcept (true);
extern size_t __strlcpy_alias (char *__dest, const char *__src, size_t __n) noexcept (true) __asm__ ("" "strlcpy")

                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) strlcpy (char * __restrict __dest, const char *__restrict __src, size_t __n) noexcept (true)

    
{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1
      && (!__builtin_constant_p (__n > __builtin_object_size (__dest, 2 > 1))
   || __n > __builtin_object_size (__dest, 2 > 1)))
    return __strlcpy_chk (__dest, __src, __n, __builtin_object_size (__dest, 2 > 1));
  return __strlcpy_alias (__dest, __src, __n);
}

extern size_t __strlcat_chk (char *__dest, const char *__src, size_t __n,
        size_t __destlen) noexcept (true);
extern size_t __strlcat_alias (char *__dest, const char *__src, size_t __n) noexcept (true) __asm__ ("" "strlcat")

                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) strlcat (char * __restrict __dest, const char *__restrict __src, size_t __n) noexcept (true)

{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1
      && (!__builtin_constant_p (__n > __builtin_object_size (__dest, 2 > 1))
   || __n > __builtin_object_size (__dest, 2 > 1)))
    return __strlcat_chk (__dest, __src, __n, __builtin_object_size (__dest, 2 > 1));
  return __strlcat_alias (__dest, __src, __n);
}
# 549 "/usr/include/string.h" 2 3 4



}
# 21 "emc/sterp/sterp.cc" 2

# 1 "/usr/include/c++/15.1.1/variant" 1 3
# 30 "/usr/include/c++/15.1.1/variant" 3
#define _GLIBCXX_VARIANT 1





#define __glibcxx_want_freestanding_variant 
#define __glibcxx_want_variant 
#define __glibcxx_want_constrained_equality 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 40 "/usr/include/c++/15.1.1/variant" 2 3




# 1 "/usr/include/c++/15.1.1/bits/enable_special_members.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/enable_special_members.h" 3
#define _ENABLE_SPECIAL_MEMBERS_H 1







namespace std __attribute__ ((__visibility__ ("default")))
{



  struct _Enable_default_constructor_tag
  {
    explicit constexpr _Enable_default_constructor_tag() = default;
  };






template<bool _Switch, typename _Tag = void>
  struct _Enable_default_constructor
  {
    constexpr _Enable_default_constructor() noexcept = default;
    constexpr _Enable_default_constructor(_Enable_default_constructor const&)
      noexcept = default;
    constexpr _Enable_default_constructor(_Enable_default_constructor&&)
      noexcept = default;
    _Enable_default_constructor&
    operator=(_Enable_default_constructor const&) noexcept = default;
    _Enable_default_constructor&
    operator=(_Enable_default_constructor&&) noexcept = default;


    constexpr explicit
    _Enable_default_constructor(_Enable_default_constructor_tag) { }
  };







template<bool _Switch, typename _Tag = void>
  struct _Enable_destructor { };






template<bool _Copy, bool _CopyAssignment,
         bool _Move, bool _MoveAssignment,
         typename _Tag = void>
  struct _Enable_copy_move { };
# 98 "/usr/include/c++/15.1.1/bits/enable_special_members.h" 3
template<bool _Default, bool _Destructor,
         bool _Copy, bool _CopyAssignment,
         bool _Move, bool _MoveAssignment,
         typename _Tag = void>
  struct _Enable_special_members
  : private _Enable_default_constructor<_Default, _Tag>,
    private _Enable_destructor<_Destructor, _Tag>,
    private _Enable_copy_move<_Copy, _CopyAssignment,
                              _Move, _MoveAssignment,
                              _Tag>
  { };



template<typename _Tag>
  struct _Enable_default_constructor<false, _Tag>
  {
    constexpr _Enable_default_constructor() noexcept = delete;
    constexpr _Enable_default_constructor(_Enable_default_constructor const&)
      noexcept = default;
    constexpr _Enable_default_constructor(_Enable_default_constructor&&)
      noexcept = default;
    _Enable_default_constructor&
    operator=(_Enable_default_constructor const&) noexcept = default;
    _Enable_default_constructor&
    operator=(_Enable_default_constructor&&) noexcept = default;


    constexpr explicit
    _Enable_default_constructor(_Enable_default_constructor_tag) { }
  };

template<typename _Tag>
  struct _Enable_destructor<false, _Tag>
  { ~_Enable_destructor() noexcept = delete; };

template<typename _Tag>
  struct _Enable_copy_move<false, true, true, true, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = delete;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = default;
    _Enable_copy_move&
    operator=(_Enable_copy_move const&) noexcept = default;
    _Enable_copy_move&
    operator=(_Enable_copy_move&&) noexcept = default;
  };

template<typename _Tag>
  struct _Enable_copy_move<true, false, true, true, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = default;
    _Enable_copy_move&
    operator=(_Enable_copy_move const&) noexcept = delete;
    _Enable_copy_move&
    operator=(_Enable_copy_move&&) noexcept = default;
  };

template<typename _Tag>
  struct _Enable_copy_move<false, false, true, true, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = delete;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = default;
    _Enable_copy_move&
    operator=(_Enable_copy_move const&) noexcept = delete;
    _Enable_copy_move&
    operator=(_Enable_copy_move&&) noexcept = default;
  };

template<typename _Tag>
  struct _Enable_copy_move<true, true, false, true, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = delete;
    _Enable_copy_move&
    operator=(_Enable_copy_move const&) noexcept = default;
    _Enable_copy_move&
    operator=(_Enable_copy_move&&) noexcept = default;
  };

template<typename _Tag>
  struct _Enable_copy_move<false, true, false, true, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = delete;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = delete;
    _Enable_copy_move&
    operator=(_Enable_copy_move const&) noexcept = default;
    _Enable_copy_move&
    operator=(_Enable_copy_move&&) noexcept = default;
  };

template<typename _Tag>
  struct _Enable_copy_move<true, false, false, true, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = delete;
    _Enable_copy_move&
    operator=(_Enable_copy_move const&) noexcept = delete;
    _Enable_copy_move&
    operator=(_Enable_copy_move&&) noexcept = default;
  };

template<typename _Tag>
  struct _Enable_copy_move<false, false, false, true, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = delete;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = delete;
    _Enable_copy_move&
    operator=(_Enable_copy_move const&) noexcept = delete;
    _Enable_copy_move&
    operator=(_Enable_copy_move&&) noexcept = default;
  };

template<typename _Tag>
  struct _Enable_copy_move<true, true, true, false, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = default;
    _Enable_copy_move&
    operator=(_Enable_copy_move const&) noexcept = default;
    _Enable_copy_move&
    operator=(_Enable_copy_move&&) noexcept = delete;
  };

template<typename _Tag>
  struct _Enable_copy_move<false, true, true, false, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = delete;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = default;
    _Enable_copy_move&
    operator=(_Enable_copy_move const&) noexcept = default;
    _Enable_copy_move&
    operator=(_Enable_copy_move&&) noexcept = delete;
  };

template<typename _Tag>
  struct _Enable_copy_move<true, false, true, false, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = default;
    _Enable_copy_move&
    operator=(_Enable_copy_move const&) noexcept = delete;
    _Enable_copy_move&
    operator=(_Enable_copy_move&&) noexcept = delete;
  };

template<typename _Tag>
  struct _Enable_copy_move<false, false, true, false, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = delete;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = default;
    _Enable_copy_move&
    operator=(_Enable_copy_move const&) noexcept = delete;
    _Enable_copy_move&
    operator=(_Enable_copy_move&&) noexcept = delete;
  };

template<typename _Tag>
  struct _Enable_copy_move<true, true, false, false, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = delete;
    _Enable_copy_move&
    operator=(_Enable_copy_move const&) noexcept = default;
    _Enable_copy_move&
    operator=(_Enable_copy_move&&) noexcept = delete;
  };

template<typename _Tag>
  struct _Enable_copy_move<false, true, false, false, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = delete;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = delete;
    _Enable_copy_move&
    operator=(_Enable_copy_move const&) noexcept = default;
    _Enable_copy_move&
    operator=(_Enable_copy_move&&) noexcept = delete;
  };

template<typename _Tag>
  struct _Enable_copy_move<true, false, false, false, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = delete;
    _Enable_copy_move&
    operator=(_Enable_copy_move const&) noexcept = delete;
    _Enable_copy_move&
    operator=(_Enable_copy_move&&) noexcept = delete;
  };

template<typename _Tag>
  struct _Enable_copy_move<false, false, false, false, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = delete;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = delete;
    _Enable_copy_move&
    operator=(_Enable_copy_move const&) noexcept = delete;
    _Enable_copy_move&
    operator=(_Enable_copy_move&&) noexcept = delete;
  };



}
# 45 "/usr/include/c++/15.1.1/variant" 2 3



# 1 "/usr/include/c++/15.1.1/bits/monostate.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/monostate.h" 3
#define _GLIBCXX_MONOSTATE_H 1

# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 34 "/usr/include/c++/15.1.1/bits/monostate.h" 2 3
# 42 "/usr/include/c++/15.1.1/bits/monostate.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

  struct monostate { };

  constexpr bool operator==(monostate, monostate) noexcept { return true; }




  constexpr bool operator!=(monostate, monostate) noexcept { return false; }
  constexpr bool operator<(monostate, monostate) noexcept { return false; }
  constexpr bool operator>(monostate, monostate) noexcept { return false; }
  constexpr bool operator<=(monostate, monostate) noexcept { return true; }
  constexpr bool operator>=(monostate, monostate) noexcept { return true; }


  template<>
    struct hash<monostate>
    {

      using result_type [[__deprecated__]] = size_t;
      using argument_type [[__deprecated__]] = monostate;


      size_t
      operator()(const monostate&) const noexcept
      {
 constexpr size_t __magic_monostate_hash = -7777;
 return __magic_monostate_hash;
      }
    };


}
# 49 "/usr/include/c++/15.1.1/variant" 2 3
# 1 "/usr/include/c++/15.1.1/bits/parse_numbers.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/parse_numbers.h" 3
#define _GLIBCXX_PARSE_NUMBERS_H 1
# 44 "/usr/include/c++/15.1.1/bits/parse_numbers.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


namespace __parse_int
{
  template<unsigned _Base, char _Dig>
    struct _Digit;

  template<unsigned _Base>
    struct _Digit<_Base, '0'> : integral_constant<unsigned, 0>
    {
      using __valid = true_type;
    };

  template<unsigned _Base>
    struct _Digit<_Base, '1'> : integral_constant<unsigned, 1>
    {
      using __valid = true_type;
    };

  template<unsigned _Base, unsigned _Val>
    struct _Digit_impl : integral_constant<unsigned, _Val>
    {
      static_assert(_Base > _Val, "invalid digit");
      using __valid = true_type;
    };

  template<unsigned _Base>
    struct _Digit<_Base, '2'> : _Digit_impl<_Base, 2>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, '3'> : _Digit_impl<_Base, 3>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, '4'> : _Digit_impl<_Base, 4>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, '5'> : _Digit_impl<_Base, 5>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, '6'> : _Digit_impl<_Base, 6>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, '7'> : _Digit_impl<_Base, 7>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, '8'> : _Digit_impl<_Base, 8>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, '9'> : _Digit_impl<_Base, 9>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'a'> : _Digit_impl<_Base, 0xa>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'A'> : _Digit_impl<_Base, 0xa>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'b'> : _Digit_impl<_Base, 0xb>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'B'> : _Digit_impl<_Base, 0xb>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'c'> : _Digit_impl<_Base, 0xc>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'C'> : _Digit_impl<_Base, 0xc>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'd'> : _Digit_impl<_Base, 0xd>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'D'> : _Digit_impl<_Base, 0xd>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'e'> : _Digit_impl<_Base, 0xe>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'E'> : _Digit_impl<_Base, 0xe>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'f'> : _Digit_impl<_Base, 0xf>
    { };

  template<unsigned _Base>
    struct _Digit<_Base, 'F'> : _Digit_impl<_Base, 0xf>
    { };


  template<unsigned _Base>
    struct _Digit<_Base, '\''> : integral_constant<unsigned, 0>
    {
      using __valid = false_type;
    };



  template<unsigned long long _Val>
    using __ull_constant = integral_constant<unsigned long long, _Val>;

  template<unsigned _Base, char _Dig, char... _Digs>
    struct _Power_help
    {
      using __next = typename _Power_help<_Base, _Digs...>::type;
      using __valid_digit = typename _Digit<_Base, _Dig>::__valid;
      using type
 = __ull_constant<__next::value * (__valid_digit{} ? _Base : 1ULL)>;
    };

  template<unsigned _Base, char _Dig>
    struct _Power_help<_Base, _Dig>
    {
      using __valid_digit = typename _Digit<_Base, _Dig>::__valid;
      using type = __ull_constant<__valid_digit::value>;
    };

  template<unsigned _Base, char... _Digs>
    struct _Power : _Power_help<_Base, _Digs...>::type
    { };

  template<unsigned _Base>
    struct _Power<_Base> : __ull_constant<0>
    { };



  template<unsigned _Base, unsigned long long _Pow, char _Dig, char... _Digs>
    struct _Number_help
    {
      using __digit = _Digit<_Base, _Dig>;
      using __valid_digit = typename __digit::__valid;
      using __next = _Number_help<_Base,
      __valid_digit::value ? _Pow / _Base : _Pow,
      _Digs...>;
      using type = __ull_constant<_Pow * __digit::value + __next::type::value>;
      static_assert((type::value / _Pow) == __digit::value,
      "integer literal does not fit in unsigned long long");
    };


  template<unsigned _Base, unsigned long long _Pow, char _Dig, char..._Digs>
    struct _Number_help<_Base, _Pow, '\'', _Dig, _Digs...>
    : _Number_help<_Base, _Pow, _Dig, _Digs...>
    { };


  template<unsigned _Base, char _Dig>
    struct _Number_help<_Base, 1ULL, _Dig>
    {
      using type = __ull_constant<_Digit<_Base, _Dig>::value>;
    };

  template<unsigned _Base, char... _Digs>
    struct _Number
    : _Number_help<_Base, _Power<_Base, _Digs...>::value, _Digs...>::type
    { };

  template<unsigned _Base>
    struct _Number<_Base>
    : __ull_constant<0>
    { };



  template<char... _Digs>
    struct _Parse_int;

  template<char... _Digs>
    struct _Parse_int<'0', 'b', _Digs...>
    : _Number<2U, _Digs...>::type
    { };

  template<char... _Digs>
    struct _Parse_int<'0', 'B', _Digs...>
    : _Number<2U, _Digs...>::type
    { };

  template<char... _Digs>
    struct _Parse_int<'0', 'x', _Digs...>
    : _Number<16U, _Digs...>::type
    { };

  template<char... _Digs>
    struct _Parse_int<'0', 'X', _Digs...>
    : _Number<16U, _Digs...>::type
    { };

  template<char... _Digs>
    struct _Parse_int<'0', _Digs...>
    : _Number<8U, _Digs...>::type
    { };

  template<char... _Digs>
    struct _Parse_int
    : _Number<10U, _Digs...>::type
    { };

}


namespace __select_int
{
  template<unsigned long long _Val, typename... _Ints>
    struct _Select_int_base;

  template<unsigned long long _Val, typename _IntType, typename... _Ints>
    struct _Select_int_base<_Val, _IntType, _Ints...>
    : __conditional_t<(_Val <= __gnu_cxx::__int_traits<_IntType>::__max),
        integral_constant<_IntType, (_IntType)_Val>,
        _Select_int_base<_Val, _Ints...>>
    { };

  template<unsigned long long _Val>
    struct _Select_int_base<_Val>
    { };

  template<char... _Digs>
    using _Select_int = typename _Select_int_base<
 __parse_int::_Parse_int<_Digs...>::value,
 unsigned char,
 unsigned short,
 unsigned int,
 unsigned long,
 unsigned long long
      >::type;

}


}
# 50 "/usr/include/c++/15.1.1/variant" 2 3
# 63 "/usr/include/c++/15.1.1/variant" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename... _Types> class tuple;
  template<typename... _Types> class variant;

  template<typename _Variant>
    struct variant_size;

  template<typename _Variant>
    struct variant_size<const _Variant> : variant_size<_Variant> {};

  template<typename _Variant>
    struct variant_size<volatile _Variant> : variant_size<_Variant> {};

  template<typename _Variant>
    struct variant_size<const volatile _Variant> : variant_size<_Variant> {};

  template<typename... _Types>
    struct variant_size<variant<_Types...>>
    : std::integral_constant<size_t, sizeof...(_Types)> {};

  template<typename _Variant>
    inline constexpr size_t variant_size_v = variant_size<_Variant>::value;

  template<typename... _Types>
    inline constexpr size_t
    variant_size_v<variant<_Types...>> = sizeof...(_Types);

  template<typename... _Types>
    inline constexpr size_t
    variant_size_v<const variant<_Types...>> = sizeof...(_Types);

  template<size_t _Np, typename _Variant>
    struct variant_alternative;

  template<size_t _Np, typename... _Types>
    struct variant_alternative<_Np, variant<_Types...>>
    {
      static_assert(_Np < sizeof...(_Types));

      using type = typename _Nth_type<_Np, _Types...>::type;
    };

  template<size_t _Np, typename _Variant>
    using variant_alternative_t =
      typename variant_alternative<_Np, _Variant>::type;

  template<size_t _Np, typename _Variant>
    struct variant_alternative<_Np, const _Variant>
    { using type = const variant_alternative_t<_Np, _Variant>; };

  template<size_t _Np, typename _Variant>
    struct variant_alternative<_Np, volatile _Variant>
    { using type = volatile variant_alternative_t<_Np, _Variant>; };

  template<size_t _Np, typename _Variant>
    struct variant_alternative<_Np, const volatile _Variant>
    { using type = const volatile variant_alternative_t<_Np, _Variant>; };

  inline constexpr size_t variant_npos = -1;

  template<size_t _Np, typename... _Types>
    constexpr variant_alternative_t<_Np, variant<_Types...>>&
    get(variant<_Types...>&);

  template<size_t _Np, typename... _Types>
    constexpr variant_alternative_t<_Np, variant<_Types...>>&&
    get(variant<_Types...>&&);

  template<size_t _Np, typename... _Types>
    constexpr variant_alternative_t<_Np, variant<_Types...>> const&
    get(const variant<_Types...>&);

  template<size_t _Np, typename... _Types>
    constexpr variant_alternative_t<_Np, variant<_Types...>> const&&
    get(const variant<_Types...>&&);

  template<typename _Result_type, typename _Visitor, typename... _Variants>
    constexpr decltype(auto)
    __do_visit(_Visitor&& __visitor, _Variants&&... __variants);

  template <typename... _Types, typename _Tp>
   
    decltype(auto)
    __variant_cast(_Tp&& __rhs)
    {
      if constexpr (is_lvalue_reference_v<_Tp>)
 {
   if constexpr (is_const_v<remove_reference_t<_Tp>>)
     return static_cast<const variant<_Types...>&>(__rhs);
   else
     return static_cast<variant<_Types...>&>(__rhs);
 }
      else
        return static_cast<variant<_Types...>&&>(__rhs);
    }

namespace __detail
{
namespace __variant
{

  struct __variant_cookie {};

  struct __variant_idx_cookie { using type = __variant_idx_cookie; };

  template<typename _Tp> struct __deduce_visit_result { using type = _Tp; };


  template<typename _Visitor, typename... _Variants>
    constexpr void
    __raw_visit(_Visitor&& __visitor, _Variants&&... __variants)
    {
      std::__do_visit<__variant_cookie>(std::forward<_Visitor>(__visitor),
            std::forward<_Variants>(__variants)...);
    }


  template<typename _Visitor, typename... _Variants>
    constexpr void
    __raw_idx_visit(_Visitor&& __visitor, _Variants&&... __variants)
    {
      std::__do_visit<__variant_idx_cookie>(std::forward<_Visitor>(__visitor),
   std::forward<_Variants>(__variants)...);
    }



  template<typename... _Types>
    constexpr std::variant<_Types...>&
    __as(std::variant<_Types...>& __v) noexcept
    { return __v; }

  template<typename... _Types>
    constexpr const std::variant<_Types...>&
    __as(const std::variant<_Types...>& __v) noexcept
    { return __v; }

  template<typename... _Types>
    constexpr std::variant<_Types...>&&
    __as(std::variant<_Types...>&& __v) noexcept
    { return std::move(__v); }

  template<typename... _Types>
    constexpr const std::variant<_Types...>&&
    __as(const std::variant<_Types...>&& __v) noexcept
    { return std::move(__v); }


  template<typename _Type, bool = std::is_trivially_destructible_v<_Type>>
    struct _Uninitialized;







  template<typename _Type, bool>
    struct _Uninitialized
    {
      template<typename... _Args>
 constexpr
 _Uninitialized(in_place_index_t<0>, _Args&&... __args)
 : _M_storage(std::forward<_Args>(__args)...)
 { }


      constexpr const _Type& _M_get() const & noexcept
      { return _M_storage; }

      constexpr _Type& _M_get() & noexcept
      { return _M_storage; }

      constexpr const _Type&& _M_get() const && noexcept
      { return std::move(_M_storage); }

      constexpr _Type&& _M_get() && noexcept
      { return std::move(_M_storage); }


      _Type _M_storage;
    };





  template<typename _Type>
    struct _Uninitialized<_Type, false>
    {
      template<typename... _Args>
 constexpr
 _Uninitialized(in_place_index_t<0>, _Args&&... __args)
 {
   ::new ((void*)std::addressof(_M_storage))
     _Type(std::forward<_Args>(__args)...);
 }

      const _Type& _M_get() const & noexcept
      { return *_M_storage._M_ptr(); }

      _Type& _M_get() & noexcept
      { return *_M_storage._M_ptr(); }

      const _Type&& _M_get() const && noexcept
      { return std::move(*_M_storage._M_ptr()); }

      _Type&& _M_get() && noexcept
      { return std::move(*_M_storage._M_ptr()); }

      __gnu_cxx::__aligned_membuf<_Type> _M_storage;
    };

  template<size_t _Np, typename _Union>
    constexpr decltype(auto)
    __get_n(_Union&& __u) noexcept
    {
      if constexpr (_Np == 0)
 return std::forward<_Union>(__u)._M_first._M_get();
      else if constexpr (_Np == 1)
 return std::forward<_Union>(__u)._M_rest._M_first._M_get();
      else if constexpr (_Np == 2)
 return std::forward<_Union>(__u)._M_rest._M_rest._M_first._M_get();
      else
 return __variant::__get_n<_Np - 3>(
   std::forward<_Union>(__u)._M_rest._M_rest._M_rest);
    }
# 311 "/usr/include/c++/15.1.1/variant" 3
  template<size_t _Np, typename _Variant>
    constexpr decltype(auto)
    __get(_Variant&& __v) noexcept
    { return __variant::__get_n<_Np>(std::forward<_Variant>(__v)._M_u); }


  template<size_t _Np, typename _Union>
    constexpr decltype(auto)
    __construct_n(_Union& __u) noexcept
    {
      if constexpr (_Np == 0)
 return &__u._M_first;
      else if constexpr (_Np == 1)
 {
   std::_Construct(&__u._M_rest);
   return &__u._M_rest._M_first;
 }
      else if constexpr (_Np == 2)
 {
   std::_Construct(&__u._M_rest);
   std::_Construct(&__u._M_rest._M_rest);
   return &__u._M_rest._M_rest._M_first;
 }
      else
 {
   std::_Construct(&__u._M_rest);
   std::_Construct(&__u._M_rest._M_rest);
   std::_Construct(&__u._M_rest._M_rest._M_rest);
   return __variant::__construct_n<_Np - 3>(__u._M_rest._M_rest._M_rest);
 }
    }

  template<typename... _Types>
    struct _Traits
    {
      static constexpr bool _S_default_ctor =
   is_default_constructible_v<typename _Nth_type<0, _Types...>::type>;
      static constexpr bool _S_copy_ctor =
   (is_copy_constructible_v<_Types> && ...);
      static constexpr bool _S_move_ctor =
   (is_move_constructible_v<_Types> && ...);
      static constexpr bool _S_copy_assign =
   _S_copy_ctor
   && (is_copy_assignable_v<_Types> && ...);
      static constexpr bool _S_move_assign =
   _S_move_ctor
   && (is_move_assignable_v<_Types> && ...);

      static constexpr bool _S_trivial_dtor =
   (is_trivially_destructible_v<_Types> && ...);
      static constexpr bool _S_trivial_copy_ctor =
   (is_trivially_copy_constructible_v<_Types> && ...);
      static constexpr bool _S_trivial_move_ctor =
   (is_trivially_move_constructible_v<_Types> && ...);
      static constexpr bool _S_trivial_copy_assign =
   _S_trivial_dtor && _S_trivial_copy_ctor
   && (is_trivially_copy_assignable_v<_Types> && ...);
      static constexpr bool _S_trivial_move_assign =
   _S_trivial_dtor && _S_trivial_move_ctor
   && (is_trivially_move_assignable_v<_Types> && ...);



      static constexpr bool _S_nothrow_default_ctor =
   is_nothrow_default_constructible_v<
       typename _Nth_type<0, _Types...>::type>;
      static constexpr bool _S_nothrow_copy_ctor = false;
      static constexpr bool _S_nothrow_move_ctor =
   (is_nothrow_move_constructible_v<_Types> && ...);
      static constexpr bool _S_nothrow_copy_assign = false;
      static constexpr bool _S_nothrow_move_assign =
   _S_nothrow_move_ctor
   && (is_nothrow_move_assignable_v<_Types> && ...);
    };


  template<bool __trivially_destructible, typename... _Types>
    union _Variadic_union
    {
      _Variadic_union() = default;

      template<size_t _Np, typename... _Args>
 _Variadic_union(in_place_index_t<_Np>, _Args&&...) = delete;
    };

  template<bool __trivially_destructible, typename _First, typename... _Rest>
    union _Variadic_union<__trivially_destructible, _First, _Rest...>
    {
      constexpr _Variadic_union() : _M_rest() { }

      template<typename... _Args>
 constexpr
 _Variadic_union(in_place_index_t<0>, _Args&&... __args)
 : _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
 { }

      template<size_t _Np, typename... _Args>
 constexpr
 _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
 : _M_rest(in_place_index<_Np-1>, std::forward<_Args>(__args)...)
 { }
# 429 "/usr/include/c++/15.1.1/variant" 3
      _Uninitialized<_First> _M_first;
      _Variadic_union<__trivially_destructible, _Rest...> _M_rest;
    };






  template<typename _Tp>
    struct _Never_valueless_alt
    : __and_<bool_constant<sizeof(_Tp) <= 256>, is_trivially_copyable<_Tp>>
    { };
# 453 "/usr/include/c++/15.1.1/variant" 3
  template <typename... _Types>
    constexpr bool __never_valueless()
    {
      return _Traits<_Types...>::_S_move_assign
 && (_Never_valueless_alt<_Types>::value && ...);
    }


  template<bool __trivially_destructible, typename... _Types>
    struct _Variant_storage;

  template <typename... _Types>
    using __select_index =
      typename __select_int::_Select_int_base<sizeof...(_Types),
           unsigned char,
           unsigned short>::type::value_type;

  template<typename... _Types>
    struct _Variant_storage<false, _Types...>
    {
      constexpr
      _Variant_storage()
      : _M_index(static_cast<__index_type>(variant_npos))
      { }

      template<size_t _Np, typename... _Args>
 constexpr
 _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 : _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
   _M_index{_Np}
 { }

      constexpr void
      _M_reset()
      {
 if (!_M_valid()) [[__unlikely__]]
   return;

 std::__do_visit<void>([](auto&& __this_mem) mutable
   {
     std::_Destroy(std::__addressof(__this_mem));
   }, __variant_cast<_Types...>(*this));

 _M_index = static_cast<__index_type>(variant_npos);
      }

     
      ~_Variant_storage()
      { _M_reset(); }

      constexpr bool
      _M_valid() const noexcept
      {
 if constexpr (__variant::__never_valueless<_Types...>())
   return true;
 return this->_M_index != __index_type(variant_npos);
      }

      _Variadic_union<false, _Types...> _M_u;
      using __index_type = __select_index<_Types...>;
      __index_type _M_index;
    };

  template<typename... _Types>
    struct _Variant_storage<true, _Types...>
    {
      constexpr
      _Variant_storage()
      : _M_index(static_cast<__index_type>(variant_npos))
      { }

      template<size_t _Np, typename... _Args>
 constexpr
 _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
 : _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...),
   _M_index{_Np}
 { }

      constexpr void
      _M_reset() noexcept
      { _M_index = static_cast<__index_type>(variant_npos); }

      constexpr bool
      _M_valid() const noexcept
      {
 if constexpr (__variant::__never_valueless<_Types...>())
   return true;






 return this->_M_index != static_cast<__index_type>(variant_npos);
      }

      _Variadic_union<true, _Types...> _M_u;
      using __index_type = __select_index<_Types...>;
      __index_type _M_index;
    };


  template<size_t _Np, bool _Triv, typename... _Types, typename... _Args>
   
    inline void
    __emplace(_Variant_storage<_Triv, _Types...>& __v, _Args&&... __args)
    {
      __v._M_reset();
      auto* __addr = __variant::__construct_n<_Np>(__v._M_u);
      std::_Construct(__addr, in_place_index<0>,
        std::forward<_Args>(__args)...);

      __v._M_index = _Np;
    }

  template<typename... _Types>
    using _Variant_storage_alias =
 _Variant_storage<_Traits<_Types...>::_S_trivial_dtor, _Types...>;




  template<bool, typename... _Types>
    struct _Copy_ctor_base : _Variant_storage_alias<_Types...>
    {
      using _Base = _Variant_storage_alias<_Types...>;
      using _Base::_Base;

     
      _Copy_ctor_base(const _Copy_ctor_base& __rhs)
   noexcept(_Traits<_Types...>::_S_nothrow_copy_ctor)
      {
 __variant::__raw_idx_visit(
   [this](auto&& __rhs_mem, auto __rhs_index) mutable
   {
     constexpr size_t __j = __rhs_index;
     if constexpr (__j != variant_npos)
       std::_Construct(std::__addressof(this->_M_u),
         in_place_index<__j>, __rhs_mem);
   }, __variant_cast<_Types...>(__rhs));
 this->_M_index = __rhs._M_index;
      }

      _Copy_ctor_base(_Copy_ctor_base&&) = default;
      _Copy_ctor_base& operator=(const _Copy_ctor_base&) = default;
      _Copy_ctor_base& operator=(_Copy_ctor_base&&) = default;
    };

  template<typename... _Types>
    struct _Copy_ctor_base<true, _Types...> : _Variant_storage_alias<_Types...>
    {
      using _Base = _Variant_storage_alias<_Types...>;
      using _Base::_Base;
    };

  template<typename... _Types>
    using _Copy_ctor_alias =
 _Copy_ctor_base<_Traits<_Types...>::_S_trivial_copy_ctor, _Types...>;

  template<bool, typename... _Types>
    struct _Move_ctor_base : _Copy_ctor_alias<_Types...>
    {
      using _Base = _Copy_ctor_alias<_Types...>;
      using _Base::_Base;

     
      _Move_ctor_base(_Move_ctor_base&& __rhs)
   noexcept(_Traits<_Types...>::_S_nothrow_move_ctor)
      {
 __variant::__raw_idx_visit(
   [this](auto&& __rhs_mem, auto __rhs_index) mutable
   {
     constexpr size_t __j = __rhs_index;
     if constexpr (__j != variant_npos)
       std::_Construct(std::__addressof(this->_M_u),
         in_place_index<__j>,
         std::forward<decltype(__rhs_mem)>(__rhs_mem));
   }, __variant_cast<_Types...>(std::move(__rhs)));
 this->_M_index = __rhs._M_index;
      }

      _Move_ctor_base(const _Move_ctor_base&) = default;
      _Move_ctor_base& operator=(const _Move_ctor_base&) = default;
      _Move_ctor_base& operator=(_Move_ctor_base&&) = default;
    };

  template<typename... _Types>
    struct _Move_ctor_base<true, _Types...> : _Copy_ctor_alias<_Types...>
    {
      using _Base = _Copy_ctor_alias<_Types...>;
      using _Base::_Base;
    };

  template<typename... _Types>
    using _Move_ctor_alias =
 _Move_ctor_base<_Traits<_Types...>::_S_trivial_move_ctor, _Types...>;

  template<bool, typename... _Types>
    struct _Copy_assign_base : _Move_ctor_alias<_Types...>
    {
      using _Base = _Move_ctor_alias<_Types...>;
      using _Base::_Base;

     
      _Copy_assign_base&
      operator=(const _Copy_assign_base& __rhs)
   noexcept(_Traits<_Types...>::_S_nothrow_copy_assign)
      {
 __variant::__raw_idx_visit(
   [this](auto&& __rhs_mem, auto __rhs_index) mutable
   {
     constexpr size_t __j = __rhs_index;
     if constexpr (__j == variant_npos)
       this->_M_reset();
     else if (this->_M_index == __j)
       __variant::__get<__j>(*this) = __rhs_mem;
     else
       {
  using _Tj = typename _Nth_type<__j, _Types...>::type;
  if constexpr (is_nothrow_copy_constructible_v<_Tj>
         || !is_nothrow_move_constructible_v<_Tj>)
    __variant::__emplace<__j>(*this, __rhs_mem);
  else
    {
      using _Variant = variant<_Types...>;
      _Variant& __self = __variant_cast<_Types...>(*this);
      __self = _Variant(in_place_index<__j>, __rhs_mem);
    }
       }
   }, __variant_cast<_Types...>(__rhs));
 return *this;
      }

      _Copy_assign_base(const _Copy_assign_base&) = default;
      _Copy_assign_base(_Copy_assign_base&&) = default;
      _Copy_assign_base& operator=(_Copy_assign_base&&) = default;
    };

  template<typename... _Types>
    struct _Copy_assign_base<true, _Types...> : _Move_ctor_alias<_Types...>
    {
      using _Base = _Move_ctor_alias<_Types...>;
      using _Base::_Base;
    };

  template<typename... _Types>
    using _Copy_assign_alias =
      _Copy_assign_base<_Traits<_Types...>::_S_trivial_copy_assign, _Types...>;

  template<bool, typename... _Types>
    struct _Move_assign_base : _Copy_assign_alias<_Types...>
    {
      using _Base = _Copy_assign_alias<_Types...>;
      using _Base::_Base;

     
      _Move_assign_base&
      operator=(_Move_assign_base&& __rhs)
   noexcept(_Traits<_Types...>::_S_nothrow_move_assign)
      {
 __variant::__raw_idx_visit(
   [this](auto&& __rhs_mem, auto __rhs_index) mutable
   {
     constexpr size_t __j = __rhs_index;
     if constexpr (__j != variant_npos)
       {
  if (this->_M_index == __j)
    __variant::__get<__j>(*this) = std::move(__rhs_mem);
  else
    {
      using _Tj = typename _Nth_type<__j, _Types...>::type;
      if constexpr (is_nothrow_move_constructible_v<_Tj>)
        __variant::__emplace<__j>(*this, std::move(__rhs_mem));
      else
        {
   using _Variant = variant<_Types...>;
   _Variant& __self = __variant_cast<_Types...>(*this);
   __self.template emplace<__j>(std::move(__rhs_mem));
        }
    }
       }
     else
       this->_M_reset();
   }, __variant_cast<_Types...>(__rhs));
 return *this;
      }

      _Move_assign_base(const _Move_assign_base&) = default;
      _Move_assign_base(_Move_assign_base&&) = default;
      _Move_assign_base& operator=(const _Move_assign_base&) = default;
    };

  template<typename... _Types>
    struct _Move_assign_base<true, _Types...> : _Copy_assign_alias<_Types...>
    {
      using _Base = _Copy_assign_alias<_Types...>;
      using _Base::_Base;
    };

  template<typename... _Types>
    using _Move_assign_alias =
      _Move_assign_base<_Traits<_Types...>::_S_trivial_move_assign, _Types...>;

  template<typename... _Types>
    struct _Variant_base : _Move_assign_alias<_Types...>
    {
      using _Base = _Move_assign_alias<_Types...>;

      constexpr
      _Variant_base() noexcept(_Traits<_Types...>::_S_nothrow_default_ctor)
      : _Variant_base(in_place_index<0>) { }

      template<size_t _Np, typename... _Args>
 constexpr explicit
 _Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
 : _Base(__i, std::forward<_Args>(__args)...)
 { }

      _Variant_base(const _Variant_base&) = default;
      _Variant_base(_Variant_base&&) = default;
      _Variant_base& operator=(const _Variant_base&) = default;
      _Variant_base& operator=(_Variant_base&&) = default;
    };

  template<typename _Tp, typename... _Types>
    inline constexpr bool __exactly_once
      = std::__find_uniq_type_in_pack<_Tp, _Types...>() < sizeof...(_Types);


  template<typename _Ti> struct _Arr { _Ti _M_x[1]; };


  template<size_t _Ind, typename _Tp, typename _Ti, typename = void>
    struct _Build_FUN
    {


      void _S_fun() = delete;
    };


  template<size_t _Ind, typename _Tp, typename _Ti>
    struct _Build_FUN<_Ind, _Tp, _Ti,
        void_t<decltype(_Arr<_Ti>{{std::declval<_Tp>()}})>>
    {

      static integral_constant<size_t, _Ind> _S_fun(_Ti);
    };

  template<typename _Tp, typename _Variant,
    typename = make_index_sequence<variant_size_v<_Variant>>>
    struct _Build_FUNs;

  template<typename _Tp, typename... _Ti, size_t... _Ind>
    struct _Build_FUNs<_Tp, variant<_Ti...>, index_sequence<_Ind...>>
    : _Build_FUN<_Ind, _Tp, _Ti>...
    {
      using _Build_FUN<_Ind, _Tp, _Ti>::_S_fun...;
    };



  template<typename _Tp, typename _Variant>
    using _FUN_type
      = decltype(_Build_FUNs<_Tp, _Variant>::_S_fun(std::declval<_Tp>()));


  template<typename _Tp, typename _Variant, typename = void>
    inline constexpr size_t
    __accepted_index = variant_npos;

  template<typename _Tp, typename _Variant>
    inline constexpr size_t
    __accepted_index<_Tp, _Variant, void_t<_FUN_type<_Tp, _Variant>>>
      = _FUN_type<_Tp, _Variant>::value;

  template<typename _Maybe_variant_cookie, typename _Variant,
    typename = __remove_cvref_t<_Variant>>
    inline constexpr bool
    __extra_visit_slot_needed = false;

  template<typename _Var, typename... _Types>
    inline constexpr bool
    __extra_visit_slot_needed<__variant_cookie, _Var, variant<_Types...>>
      = !__variant::__never_valueless<_Types...>();

  template<typename _Var, typename... _Types>
    inline constexpr bool
    __extra_visit_slot_needed<__variant_idx_cookie, _Var, variant<_Types...>>
      = !__variant::__never_valueless<_Types...>();


  template<typename _Tp, size_t... _Dimensions>
    struct _Multi_array;


  template<typename _Tp>
    struct _Multi_array<_Tp>
    {
      template<typename>
 struct __untag_result
 : false_type
 { using element_type = _Tp; };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wignored-qualifiers"
      template <typename... _Args>
 struct __untag_result<const void(*)(_Args...)>
 : false_type
 { using element_type = void(*)(_Args...); };
#pragma GCC diagnostic pop

      template <typename... _Args>
 struct __untag_result<__variant_cookie(*)(_Args...)>
 : false_type
 { using element_type = void(*)(_Args...); };

      template <typename... _Args>
 struct __untag_result<__variant_idx_cookie(*)(_Args...)>
 : false_type
 { using element_type = void(*)(_Args...); };

      template <typename _Res, typename... _Args>
 struct __untag_result<__deduce_visit_result<_Res>(*)(_Args...)>
 : true_type
 { using element_type = _Res(*)(_Args...); };

      using __result_is_deduced = __untag_result<_Tp>;

      constexpr const typename __untag_result<_Tp>::element_type&
      _M_access() const
      { return _M_data; }

      typename __untag_result<_Tp>::element_type _M_data;
    };


  template<typename _Ret,
    typename _Visitor,
    typename... _Variants,
    size_t __first, size_t... __rest>
    struct _Multi_array<_Ret(*)(_Visitor, _Variants...), __first, __rest...>
    {
      static constexpr size_t __index =
 sizeof...(_Variants) - sizeof...(__rest) - 1;

      using _Variant = typename _Nth_type<__index, _Variants...>::type;

      static constexpr int __do_cookie =
 __extra_visit_slot_needed<_Ret, _Variant> ? 1 : 0;

      using _Tp = _Ret(*)(_Visitor, _Variants...);

      template<typename... _Args>
 constexpr decltype(auto)
 _M_access(size_t __first_index, _Args... __rest_indices) const
        {
   return _M_arr[__first_index + __do_cookie]
     ._M_access(__rest_indices...);
 }

      _Multi_array<_Tp, __rest...> _M_arr[__first + __do_cookie];
    };
# 944 "/usr/include/c++/15.1.1/variant" 3
  template<typename _Array_type, typename _Index_seq>
    struct __gen_vtable_impl;
# 954 "/usr/include/c++/15.1.1/variant" 3
  template<typename _Result_type, typename _Visitor, size_t... __dimensions,
    typename... _Variants, size_t... __indices>
    struct __gen_vtable_impl<
 _Multi_array<_Result_type (*)(_Visitor, _Variants...), __dimensions...>,
 std::index_sequence<__indices...>>
    {
      using _Next =
   remove_reference_t<typename _Nth_type<sizeof...(__indices),
        _Variants...>::type>;
      using _Array_type =
   _Multi_array<_Result_type (*)(_Visitor, _Variants...),
         __dimensions...>;

      static constexpr _Array_type
      _S_apply()
      {
 _Array_type __vtable{};
 _S_apply_all_alts(
   __vtable, make_index_sequence<variant_size_v<_Next>>());
 return __vtable;
      }

      template<size_t... __var_indices>
 static constexpr void
 _S_apply_all_alts(_Array_type& __vtable,
     std::index_sequence<__var_indices...>)
 {
   if constexpr (__extra_visit_slot_needed<_Result_type, _Next>)
     (_S_apply_single_alt<true, __var_indices>(
       __vtable._M_arr[__var_indices + 1],
       &(__vtable._M_arr[0])), ...);
   else
     (_S_apply_single_alt<false, __var_indices>(
       __vtable._M_arr[__var_indices]), ...);
 }

      template<bool __do_cookie, size_t __index, typename _Tp>
 static constexpr void
 _S_apply_single_alt(_Tp& __element, _Tp* __cookie_element = nullptr)
 {
   if constexpr (__do_cookie)
     {
       __element = __gen_vtable_impl<
  _Tp,
  std::index_sequence<__indices..., __index>>::_S_apply();
       *__cookie_element = __gen_vtable_impl<
  _Tp,
  std::index_sequence<__indices..., variant_npos>>::_S_apply();
     }
   else
     {
       auto __tmp_element = __gen_vtable_impl<
  remove_reference_t<decltype(__element)>,
  std::index_sequence<__indices..., __index>>::_S_apply();
       static_assert(is_same_v<_Tp, decltype(__tmp_element)>,
       "std::visit requires the visitor to have the same "
       "return type for all alternatives of a variant");
       __element = __tmp_element;
     }
 }
    };




  template<typename _Result_type, typename _Visitor, typename... _Variants,
    size_t... __indices>
    struct __gen_vtable_impl<
      _Multi_array<_Result_type (*)(_Visitor, _Variants...)>,
     std::index_sequence<__indices...>>
    {
      using _Array_type =
   _Multi_array<_Result_type (*)(_Visitor, _Variants...)>;

      template<size_t __index, typename _Variant>
 static constexpr decltype(auto)
 __element_by_index_or_cookie(_Variant&& __var) noexcept
        {
   if constexpr (__index != variant_npos)
     return __variant::__get<__index>(std::forward<_Variant>(__var));
   else
     return __variant_cookie{};
 }

      static constexpr decltype(auto)
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
      {
 if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)


   std::__invoke(std::forward<_Visitor>(__visitor),
       __element_by_index_or_cookie<__indices>(
  std::forward<_Variants>(__vars))...,
       integral_constant<size_t, __indices>()...);
 else if constexpr (is_same_v<_Result_type, __variant_cookie>)

   std::__invoke(std::forward<_Visitor>(__visitor),
       __element_by_index_or_cookie<__indices>(
  std::forward<_Variants>(__vars))...);
 else if constexpr (_Array_type::__result_is_deduced::value)

   return std::__invoke(std::forward<_Visitor>(__visitor),
       __element_by_index_or_cookie<__indices>(
  std::forward<_Variants>(__vars))...);
 else
   return std::__invoke_r<_Result_type>(
       std::forward<_Visitor>(__visitor),
       __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
      }

      static constexpr auto
      _S_apply()
      {
 if constexpr (_Array_type::__result_is_deduced::value)
   {
     constexpr bool __visit_ret_type_mismatch =
       !is_same_v<typename _Result_type::type,
    decltype(__visit_invoke(std::declval<_Visitor>(),
        std::declval<_Variants>()...))>;
     if constexpr (__visit_ret_type_mismatch)
       {
  struct __cannot_match {};
  return __cannot_match{};
       }
     else
       return _Array_type{&__visit_invoke};
   }
 else
   return _Array_type{&__visit_invoke};
      }
    };

  template<typename _Result_type, typename _Visitor, typename... _Variants>
    struct __gen_vtable
    {
      using _Array_type =
   _Multi_array<_Result_type (*)(_Visitor, _Variants...),
         variant_size_v<remove_reference_t<_Variants>>...>;

      static constexpr _Array_type _S_vtable
 = __gen_vtable_impl<_Array_type, std::index_sequence<>>::_S_apply();
    };


  template<size_t _Nm, typename _Tp>
    struct _Base_dedup : public _Tp { };

  template<typename _Variant, typename __indices>
    struct _Variant_hash_base;

  template<typename... _Types, size_t... __indices>
    struct _Variant_hash_base<variant<_Types...>,
         std::index_sequence<__indices...>>
    : _Base_dedup<__indices, __hash_empty_base<remove_const_t<_Types>>>...
    { };



  template<size_t _Np, typename _Variant,
      typename _AsV = decltype(__variant::__as(std::declval<_Variant>())),
      typename _Tp = variant_alternative_t<_Np, remove_reference_t<_AsV>>>
    using __get_t
      = __conditional_t<is_lvalue_reference_v<_Variant>, _Tp&, _Tp&&>;


  template<typename _Visitor, typename... _Variants>
    using __visit_result_t
      = invoke_result_t<_Visitor, __get_t<0, _Variants>...>;

  template<typename _Tp, typename... _Types>
    constexpr inline bool __same_types = (is_same_v<_Tp, _Types> && ...);

  template <typename _Visitor, typename _Variant, size_t... _Idxs>
    constexpr bool __check_visitor_results(std::index_sequence<_Idxs...>)
    {
      return __same_types<
 invoke_result_t<_Visitor, __get_t<_Idxs, _Variant>>...
 >;
    }

}
}

  template<typename _Tp, typename... _Types>
    constexpr bool
    holds_alternative(const variant<_Types...>& __v) noexcept
    {
      static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
      "T must occur exactly once in alternatives");
      return __v.index() == std::__find_uniq_type_in_pack<_Tp, _Types...>();
    }

  template<typename _Tp, typename... _Types>
    constexpr _Tp&
    get(variant<_Types...>& __v)
    {
      static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
      "T must occur exactly once in alternatives");
      constexpr size_t __n = std::__find_uniq_type_in_pack<_Tp, _Types...>();
      return std::get<__n>(__v);
    }

  template<typename _Tp, typename... _Types>
    constexpr _Tp&&
    get(variant<_Types...>&& __v)
    {
      static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
      "T must occur exactly once in alternatives");
      constexpr size_t __n = std::__find_uniq_type_in_pack<_Tp, _Types...>();
      return std::get<__n>(std::move(__v));
    }

  template<typename _Tp, typename... _Types>
    constexpr const _Tp&
    get(const variant<_Types...>& __v)
    {
      static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
      "T must occur exactly once in alternatives");
      constexpr size_t __n = std::__find_uniq_type_in_pack<_Tp, _Types...>();
      return std::get<__n>(__v);
    }

  template<typename _Tp, typename... _Types>
    constexpr const _Tp&&
    get(const variant<_Types...>&& __v)
    {
      static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
      "T must occur exactly once in alternatives");
      constexpr size_t __n = std::__find_uniq_type_in_pack<_Tp, _Types...>();
      return std::get<__n>(std::move(__v));
    }

  template<size_t _Np, typename... _Types>
    constexpr add_pointer_t<variant_alternative_t<_Np, variant<_Types...>>>
    get_if(variant<_Types...>* __ptr) noexcept
    {
      using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
      static_assert(_Np < sizeof...(_Types),
      "The index must be in [0, number of alternatives)");
      static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
      if (__ptr && __ptr->index() == _Np)
 return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
      return nullptr;
    }

  template<size_t _Np, typename... _Types>
    constexpr
    add_pointer_t<const variant_alternative_t<_Np, variant<_Types...>>>
    get_if(const variant<_Types...>* __ptr) noexcept
    {
      using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
      static_assert(_Np < sizeof...(_Types),
      "The index must be in [0, number of alternatives)");
      static_assert(!is_void_v<_Alternative_type>, "_Tp must not be void");
      if (__ptr && __ptr->index() == _Np)
 return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
      return nullptr;
    }

  template<typename _Tp, typename... _Types>
    constexpr add_pointer_t<_Tp>
    get_if(variant<_Types...>* __ptr) noexcept
    {
      static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
      "T must occur exactly once in alternatives");
      static_assert(!is_void_v<_Tp>, "_Tp must not be void");
      constexpr size_t __n = std::__find_uniq_type_in_pack<_Tp, _Types...>();
      return std::get_if<__n>(__ptr);
    }

  template<typename _Tp, typename... _Types>
    constexpr add_pointer_t<const _Tp>
    get_if(const variant<_Types...>* __ptr) noexcept
    {
      static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
      "T must occur exactly once in alternatives");
      static_assert(!is_void_v<_Tp>, "_Tp must not be void");
      constexpr size_t __n = std::__find_uniq_type_in_pack<_Tp, _Types...>();
      return std::get_if<__n>(__ptr);
    }

namespace __detail::__variant
{
  template<typename _Ret, typename _Vp, typename _Op>
    constexpr _Ret
    __compare(_Ret __ret, const _Vp& __lhs, const _Vp& __rhs, _Op __op)
    {
      __variant::__raw_idx_visit(
 [&__ret, &__lhs, __op] (auto&& __rhs_mem, auto __rhs_index) mutable
 {
   if constexpr (__rhs_index != variant_npos)
     {
       if (__lhs.index() == __rhs_index.value)
  {
    auto& __this_mem = std::get<__rhs_index>(__lhs);
    __ret = __op(__this_mem, __rhs_mem);
    return;
  }
     }
   __ret = __op(__lhs.index() + 1, __rhs_index + 1);
 }, __rhs);
      return __ret;
    }
}

  template<typename... _Types>




    constexpr bool
    operator== [[nodiscard]] (const variant<_Types...>& __lhs,
         const variant<_Types...>& __rhs)
    {
      namespace __variant = __detail::__variant;
      return __variant::__compare(true, __lhs, __rhs,
      [](auto&& __l, auto&& __r) -> bool {
        return __l == __r;
      });
    }

  template<typename... _Types>




    constexpr bool
    operator!= [[nodiscard]] (const variant<_Types...>& __lhs,
         const variant<_Types...>& __rhs)
    {
      namespace __variant = __detail::__variant;
      return __variant::__compare(true, __lhs, __rhs,
      [](auto&& __l, auto&& __r) -> bool {
        return __l != __r;
      });
    }

  template<typename... _Types>




    constexpr bool
    operator< [[nodiscard]] (const variant<_Types...>& __lhs,
        const variant<_Types...>& __rhs)
    {
      namespace __variant = __detail::__variant;
      return __variant::__compare(true, __lhs, __rhs,
      [](auto&& __l, auto&& __r) -> bool {
        return __l < __r;
      });
    }

  template<typename... _Types>




    constexpr bool
    operator<= [[nodiscard]] (const variant<_Types...>& __lhs,
         const variant<_Types...>& __rhs)
    {
      namespace __variant = __detail::__variant;
      return __variant::__compare(true, __lhs, __rhs,
      [](auto&& __l, auto&& __r) -> bool {
        return __l <= __r;
      });
    }

  template<typename... _Types>




    constexpr bool
    operator> [[nodiscard]] (const variant<_Types...>& __lhs,
        const variant<_Types...>& __rhs)
    {
      namespace __variant = __detail::__variant;
      return __variant::__compare(true, __lhs, __rhs,
      [](auto&& __l, auto&& __r) -> bool {
        return __l > __r;
      });
    }

  template<typename... _Types>




    constexpr bool
    operator>= [[nodiscard]] (const variant<_Types...>& __lhs,
         const variant<_Types...>& __rhs)
    {
      namespace __variant = __detail::__variant;
      return __variant::__compare(true, __lhs, __rhs,
      [](auto&& __l, auto&& __r) -> bool {
        return __l >= __r;
      });
    }
# 1372 "/usr/include/c++/15.1.1/variant" 3
  template<typename _Visitor, typename... _Variants>
    constexpr __detail::__variant::__visit_result_t<_Visitor, _Variants...>
    visit(_Visitor&&, _Variants&&...);







  template<typename... _Types>
   
    inline enable_if_t<(is_move_constructible_v<_Types> && ...)
   && (is_swappable_v<_Types> && ...)>
    swap(variant<_Types...>& __lhs, variant<_Types...>& __rhs)
    noexcept(noexcept(__lhs.swap(__rhs)))
    { __lhs.swap(__rhs); }

  template<typename... _Types>
    enable_if_t<!((is_move_constructible_v<_Types> && ...)
     && (is_swappable_v<_Types> && ...))>
    swap(variant<_Types...>&, variant<_Types...>&) = delete;

  [[noreturn]] void __throw_bad_variant_access(unsigned);

  class bad_variant_access : public exception
  {
  public:
    bad_variant_access() noexcept { }

    const char* what() const noexcept override
    { return _M_reason; }

  private:

    bad_variant_access(const char* __reason) noexcept : _M_reason(__reason) { }


    const char* _M_reason = "bad variant access";

    friend void __throw_bad_variant_access([[maybe_unused]] unsigned __n)
    {
      [[maybe_unused]] static constexpr const char* __reasons[] = {
 "std::get: wrong index for variant",
 "std::get: variant is valueless",
 "std::visit: variant is valueless",
 "std::visit<R>: variant is valueless",
      };
      (throw (bad_variant_access(__reasons[__n % 4u])));
    }
  };

  template<typename... _Types>
    class variant
    : private __detail::__variant::_Variant_base<_Types...>,
      private _Enable_copy_move<
 __detail::__variant::_Traits<_Types...>::_S_copy_ctor,
 __detail::__variant::_Traits<_Types...>::_S_copy_assign,
 __detail::__variant::_Traits<_Types...>::_S_move_ctor,
 __detail::__variant::_Traits<_Types...>::_S_move_assign,
 variant<_Types...>>
    {
    private:
      template <typename... _UTypes, typename _Tp>
 friend decltype(auto)
 __variant_cast(_Tp&&);

      static_assert(sizeof...(_Types) > 0,
      "variant must have at least one alternative");
      static_assert(((std::is_object_v<_Types> && !is_array_v<_Types>) && ...),
      "variant alternatives must be non-array object types");

      using _Base = __detail::__variant::_Variant_base<_Types...>;

      template<typename _Tp>
 static constexpr bool __not_self
   = !is_same_v<__remove_cvref_t<_Tp>, variant>;

      template<typename _Tp>
 static constexpr bool
 __exactly_once = __detail::__variant::__exactly_once<_Tp, _Types...>;

      template<typename _Tp>
 static constexpr size_t __accepted_index
   = __detail::__variant::__accepted_index<_Tp, variant>;

      template<size_t _Np, typename = enable_if_t<(_Np < sizeof...(_Types))>>
 using __to_type = typename _Nth_type<_Np, _Types...>::type;

      template<typename _Tp, typename = enable_if_t<__not_self<_Tp>>>
 using __accepted_type = __to_type<__accepted_index<_Tp>>;

      template<typename _Tp>
 static constexpr size_t __index_of
   = std::__find_uniq_type_in_pack<_Tp, _Types...>();

      using _Traits = __detail::__variant::_Traits<_Types...>;

      template<typename _Tp>
 static constexpr bool __not_in_place_tag
   = !__is_in_place_type_v<__remove_cvref_t<_Tp>>
       && !__is_in_place_index_v<__remove_cvref_t<_Tp>>;

    public:



      template<typename _Tp0 = __to_type<0>,
        typename = enable_if_t<is_default_constructible_v<_Tp0>>>
 constexpr
 variant() noexcept(is_nothrow_default_constructible_v<__to_type<0>>)
 { }


      variant(const variant& __rhs) = default;
      variant(variant&&) = default;
      variant& operator=(const variant&) = default;
      variant& operator=(variant&&) = default;
      ~variant() = default;

      template<typename _Tp,
        typename = enable_if_t<sizeof...(_Types) != 0>,
        typename = enable_if_t<__not_in_place_tag<_Tp>>,
        typename _Tj = __accepted_type<_Tp&&>,
        typename = enable_if_t<__exactly_once<_Tj>
          && is_constructible_v<_Tj, _Tp>>>
 constexpr
 variant(_Tp&& __t)
 noexcept(is_nothrow_constructible_v<_Tj, _Tp>)
 : variant(in_place_index<__accepted_index<_Tp>>,
    std::forward<_Tp>(__t))
 { }

      template<typename _Tp, typename... _Args,
        typename = enable_if_t<__exactly_once<_Tp>
          && is_constructible_v<_Tp, _Args...>>>
 constexpr explicit
 variant(in_place_type_t<_Tp>, _Args&&... __args)
 : variant(in_place_index<__index_of<_Tp>>,
    std::forward<_Args>(__args)...)
 { }

      template<typename _Tp, typename _Up, typename... _Args,
        typename = enable_if_t<__exactly_once<_Tp>
          && is_constructible_v<_Tp,
        initializer_list<_Up>&, _Args...>>>
 constexpr explicit
 variant(in_place_type_t<_Tp>, initializer_list<_Up> __il,
  _Args&&... __args)
 : variant(in_place_index<__index_of<_Tp>>, __il,
    std::forward<_Args>(__args)...)
 { }

      template<size_t _Np, typename... _Args,
        typename _Tp = __to_type<_Np>,
        typename = enable_if_t<is_constructible_v<_Tp, _Args...>>>
 constexpr explicit
 variant(in_place_index_t<_Np>, _Args&&... __args)
 : _Base(in_place_index<_Np>, std::forward<_Args>(__args)...)
 { }

      template<size_t _Np, typename _Up, typename... _Args,
        typename _Tp = __to_type<_Np>,
        typename = enable_if_t<is_constructible_v<_Tp,
        initializer_list<_Up>&,
        _Args...>>>
 constexpr explicit
 variant(in_place_index_t<_Np>, initializer_list<_Up> __il,
  _Args&&... __args)
 : _Base(in_place_index<_Np>, __il, std::forward<_Args>(__args)...)
 { }

      template<typename _Tp>

 enable_if_t<__exactly_once<__accepted_type<_Tp&&>>
      && is_constructible_v<__accepted_type<_Tp&&>, _Tp>
      && is_assignable_v<__accepted_type<_Tp&&>&, _Tp>,
      variant&>
 operator=(_Tp&& __rhs)
 noexcept(is_nothrow_assignable_v<__accepted_type<_Tp&&>&, _Tp>
   && is_nothrow_constructible_v<__accepted_type<_Tp&&>, _Tp>)
 {
   constexpr auto __index = __accepted_index<_Tp>;
   if (index() == __index)
     std::get<__index>(*this) = std::forward<_Tp>(__rhs);
   else
     {
       using _Tj = __accepted_type<_Tp&&>;
       if constexpr (is_nothrow_constructible_v<_Tj, _Tp>
       || !is_nothrow_move_constructible_v<_Tj>)
  this->emplace<__index>(std::forward<_Tp>(__rhs));
       else


  this->emplace<__index>(_Tj(std::forward<_Tp>(__rhs)));
     }
   return *this;
 }

      template<typename _Tp, typename... _Args>

 enable_if_t<is_constructible_v<_Tp, _Args...> && __exactly_once<_Tp>,
      _Tp&>
 emplace(_Args&&... __args)
 {
   constexpr size_t __index = __index_of<_Tp>;
   return this->emplace<__index>(std::forward<_Args>(__args)...);
 }

      template<typename _Tp, typename _Up, typename... _Args>

 enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>
      && __exactly_once<_Tp>,
      _Tp&>
 emplace(initializer_list<_Up> __il, _Args&&... __args)
 {
   constexpr size_t __index = __index_of<_Tp>;
   return this->emplace<__index>(__il, std::forward<_Args>(__args)...);
 }

      template<size_t _Np, typename... _Args>

 enable_if_t<is_constructible_v<__to_type<_Np>, _Args...>,
      __to_type<_Np>&>
 emplace(_Args&&... __args)
 {
   namespace __variant = std::__detail::__variant;
   using type = typename _Nth_type<_Np, _Types...>::type;


   if constexpr (is_nothrow_constructible_v<type, _Args...>)
     {
       __variant::__emplace<_Np>(*this, std::forward<_Args>(__args)...);
     }
   else if constexpr (is_scalar_v<type>)
     {

       const type __tmp(std::forward<_Args>(__args)...);

       __variant::__emplace<_Np>(*this, __tmp);
     }
   else if constexpr (__variant::_Never_valueless_alt<type>()
       && _Traits::_S_move_assign)
     {

       variant __tmp(in_place_index<_Np>,
       std::forward<_Args>(__args)...);

       *this = std::move(__tmp);
     }
   else
     {


       __variant::__emplace<_Np>(*this, std::forward<_Args>(__args)...);
     }
   return std::get<_Np>(*this);
 }

      template<size_t _Np, typename _Up, typename... _Args>

 enable_if_t<is_constructible_v<__to_type<_Np>,
           initializer_list<_Up>&, _Args...>,
      __to_type<_Np>&>
 emplace(initializer_list<_Up> __il, _Args&&... __args)
 {
   namespace __variant = std::__detail::__variant;
   using type = typename _Nth_type<_Np, _Types...>::type;


   if constexpr (is_nothrow_constructible_v<type,
         initializer_list<_Up>&,
         _Args...>)
     {
       __variant::__emplace<_Np>(*this, __il,
     std::forward<_Args>(__args)...);
     }
   else if constexpr (__variant::_Never_valueless_alt<type>()
       && _Traits::_S_move_assign)
     {

       variant __tmp(in_place_index<_Np>, __il,
       std::forward<_Args>(__args)...);

       *this = std::move(__tmp);
     }
   else
     {


       __variant::__emplace<_Np>(*this, __il,
     std::forward<_Args>(__args)...);
     }
   return std::get<_Np>(*this);
 }

      template<size_t _Np, typename... _Args>
 enable_if_t<!(_Np < sizeof...(_Types))> emplace(_Args&&...) = delete;

      template<typename _Tp, typename... _Args>
 enable_if_t<!__exactly_once<_Tp>> emplace(_Args&&...) = delete;

      constexpr bool valueless_by_exception() const noexcept
      { return !this->_M_valid(); }

      constexpr size_t index() const noexcept
      {
 using __index_type = typename _Base::__index_type;
 if constexpr (__detail::__variant::__never_valueless<_Types...>())
   return this->_M_index;
 else if constexpr (sizeof...(_Types) <= __index_type(-1) / 2)
   return make_signed_t<__index_type>(this->_M_index);
 else
   return size_t(__index_type(this->_M_index + 1)) - 1;
      }

     
      void
      swap(variant& __rhs)
      noexcept((__is_nothrow_swappable<_Types>::value && ...)
        && is_nothrow_move_constructible_v<variant>)
      {
 static_assert((is_move_constructible_v<_Types> && ...));


 if (__rhs.valueless_by_exception()) [[__unlikely__]]
   {
     if (!this->valueless_by_exception()) [[__likely__]]
       __rhs.swap(*this);
     return;
   }

 namespace __variant = __detail::__variant;

 __variant::__raw_idx_visit(
   [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
   {
     constexpr size_t __j = __rhs_index;
     if constexpr (__j != variant_npos)
       {
  if (this->index() == __j)
    {
      using std::swap;
      swap(std::get<__j>(*this), __rhs_mem);
    }
  else
    {
      auto __tmp(std::move(__rhs_mem));

      if constexpr (_Traits::_S_trivial_move_assign)
        __rhs = std::move(*this);
      else
        __variant::__raw_idx_visit(
   [&__rhs](auto&& __this_mem, auto __this_index) mutable
   {
     constexpr size_t __k = __this_index;
     if constexpr (__k != variant_npos)
       __variant::__emplace<__k>(__rhs,
            std::move(__this_mem));
   }, *this);

      __variant::__emplace<__j>(*this, std::move(__tmp));
    }
       }
   }, __rhs);
      }
# 1779 "/usr/include/c++/15.1.1/variant" 3
    private:
      template<size_t _Np, typename _Vp>
 friend constexpr decltype(auto)
 __detail::__variant::__get(_Vp&& __v) noexcept;
    };

  template<size_t _Np, typename... _Types>
    constexpr variant_alternative_t<_Np, variant<_Types...>>&
    get(variant<_Types...>& __v)
    {
      static_assert(_Np < sizeof...(_Types),
      "The index must be in [0, number of alternatives)");
      if (__v.index() != _Np)
 __throw_bad_variant_access(__v.valueless_by_exception());
      return __detail::__variant::__get<_Np>(__v);
    }

  template<size_t _Np, typename... _Types>
    constexpr variant_alternative_t<_Np, variant<_Types...>>&&
    get(variant<_Types...>&& __v)
    {
      static_assert(_Np < sizeof...(_Types),
      "The index must be in [0, number of alternatives)");
      if (__v.index() != _Np)
 __throw_bad_variant_access(__v.valueless_by_exception());
      return __detail::__variant::__get<_Np>(std::move(__v));
    }

  template<size_t _Np, typename... _Types>
    constexpr const variant_alternative_t<_Np, variant<_Types...>>&
    get(const variant<_Types...>& __v)
    {
      static_assert(_Np < sizeof...(_Types),
      "The index must be in [0, number of alternatives)");
      if (__v.index() != _Np)
 __throw_bad_variant_access(__v.valueless_by_exception());
      return __detail::__variant::__get<_Np>(__v);
    }

  template<size_t _Np, typename... _Types>
    constexpr const variant_alternative_t<_Np, variant<_Types...>>&&
    get(const variant<_Types...>&& __v)
    {
      static_assert(_Np < sizeof...(_Types),
      "The index must be in [0, number of alternatives)");
      if (__v.index() != _Np)
 __throw_bad_variant_access(__v.valueless_by_exception());
      return __detail::__variant::__get<_Np>(std::move(__v));
    }


  template<typename _Result_type, typename _Visitor, typename... _Variants>
    constexpr decltype(auto)
    __do_visit(_Visitor&& __visitor, _Variants&&... __variants)
    {

      if constexpr (sizeof...(_Variants) == 0)
 {
   if constexpr (is_void_v<_Result_type>)
     return (void) std::forward<_Visitor>(__visitor)();
   else
     return std::forward<_Visitor>(__visitor)();
 }
      else
 {
   constexpr size_t __max = 11;


   using _V0 = typename _Nth_type<0, _Variants...>::type;

   constexpr auto __n = variant_size_v<remove_reference_t<_V0>>;

   if constexpr (sizeof...(_Variants) > 1 || __n > __max)
     {

       constexpr auto& __vtable = __detail::__variant::__gen_vtable<
  _Result_type, _Visitor&&, _Variants&&...>::_S_vtable;

       auto __func_ptr = __vtable._M_access(__variants.index()...);
       return (*__func_ptr)(std::forward<_Visitor>(__visitor),
       std::forward<_Variants>(__variants)...);
     }
   else
     {

       _V0& __v0
  = [](_V0& __v, ...) -> _V0& { return __v; }(__variants...);

       using __detail::__variant::_Multi_array;
       using __detail::__variant::__gen_vtable_impl;
       using _Ma = _Multi_array<_Result_type (*)(_Visitor&&, _V0&&)>;




#define _GLIBCXX_VISIT_UNREACHABLE __builtin_unreachable


#define _GLIBCXX_VISIT_CASE(N) case N: { if constexpr (N < __n) { return __gen_vtable_impl<_Ma, index_sequence<N>>:: __visit_invoke(std::forward<_Visitor>(__visitor), std::forward<_V0>(__v0)); } else _GLIBCXX_VISIT_UNREACHABLE(); }
# 1889 "/usr/include/c++/15.1.1/variant" 3
       switch (__v0.index())
  {
    case 0: { if constexpr (0 < __n) { return __gen_vtable_impl<_Ma, index_sequence<0>>:: __visit_invoke(std::forward<_Visitor>(__visitor), std::forward<_V0>(__v0)); } else __builtin_unreachable(); }
    case 1: { if constexpr (1 < __n) { return __gen_vtable_impl<_Ma, index_sequence<1>>:: __visit_invoke(std::forward<_Visitor>(__visitor), std::forward<_V0>(__v0)); } else __builtin_unreachable(); }
    case 2: { if constexpr (2 < __n) { return __gen_vtable_impl<_Ma, index_sequence<2>>:: __visit_invoke(std::forward<_Visitor>(__visitor), std::forward<_V0>(__v0)); } else __builtin_unreachable(); }
    case 3: { if constexpr (3 < __n) { return __gen_vtable_impl<_Ma, index_sequence<3>>:: __visit_invoke(std::forward<_Visitor>(__visitor), std::forward<_V0>(__v0)); } else __builtin_unreachable(); }
    case 4: { if constexpr (4 < __n) { return __gen_vtable_impl<_Ma, index_sequence<4>>:: __visit_invoke(std::forward<_Visitor>(__visitor), std::forward<_V0>(__v0)); } else __builtin_unreachable(); }
    case 5: { if constexpr (5 < __n) { return __gen_vtable_impl<_Ma, index_sequence<5>>:: __visit_invoke(std::forward<_Visitor>(__visitor), std::forward<_V0>(__v0)); } else __builtin_unreachable(); }
    case 6: { if constexpr (6 < __n) { return __gen_vtable_impl<_Ma, index_sequence<6>>:: __visit_invoke(std::forward<_Visitor>(__visitor), std::forward<_V0>(__v0)); } else __builtin_unreachable(); }
    case 7: { if constexpr (7 < __n) { return __gen_vtable_impl<_Ma, index_sequence<7>>:: __visit_invoke(std::forward<_Visitor>(__visitor), std::forward<_V0>(__v0)); } else __builtin_unreachable(); }
    case 8: { if constexpr (8 < __n) { return __gen_vtable_impl<_Ma, index_sequence<8>>:: __visit_invoke(std::forward<_Visitor>(__visitor), std::forward<_V0>(__v0)); } else __builtin_unreachable(); }
    case 9: { if constexpr (9 < __n) { return __gen_vtable_impl<_Ma, index_sequence<9>>:: __visit_invoke(std::forward<_Visitor>(__visitor), std::forward<_V0>(__v0)); } else __builtin_unreachable(); }
    case 10: { if constexpr (10 < __n) { return __gen_vtable_impl<_Ma, index_sequence<10>>:: __visit_invoke(std::forward<_Visitor>(__visitor), std::forward<_V0>(__v0)); } else __builtin_unreachable(); }
  case variant_npos:
    using __detail::__variant::__variant_idx_cookie;
    using __detail::__variant::__variant_cookie;
    if constexpr (is_same_v<_Result_type, __variant_idx_cookie>
    || is_same_v<_Result_type, __variant_cookie>)
      {
        using _Npos = index_sequence<variant_npos>;
        return __gen_vtable_impl<_Ma, _Npos>::
   __visit_invoke(std::forward<_Visitor>(__visitor),
           std::forward<_V0>(__v0));
      }
    else
      __builtin_unreachable();
  default:
    __builtin_unreachable();
  }
#undef _GLIBCXX_VISIT_CASE
#undef _GLIBCXX_VISIT_UNREACHABLE
     }
 }
    }


  template<typename _Visitor, typename... _Variants>
    constexpr __detail::__variant::__visit_result_t<_Visitor, _Variants...>
    visit(_Visitor&& __visitor, _Variants&&... __variants)
    {
      namespace __variant = std::__detail::__variant;

      if ((__variant::__as(__variants).valueless_by_exception() || ...))
 __throw_bad_variant_access(2);

      using _Result_type
 = __detail::__variant::__visit_result_t<_Visitor, _Variants...>;

      using _Tag = __detail::__variant::__deduce_visit_result<_Result_type>;

      if constexpr (sizeof...(_Variants) == 1)
 {
   using _Vp = decltype(__variant::__as(std::declval<_Variants>()...));

   constexpr bool __visit_rettypes_match = __detail::__variant::
     __check_visitor_results<_Visitor, _Vp>(
       make_index_sequence<variant_size_v<remove_reference_t<_Vp>>>());
   if constexpr (!__visit_rettypes_match)
     {
       static_assert(__visit_rettypes_match,
     "std::visit requires the visitor to have the same "
     "return type for all alternatives of a variant");
       return;
     }
   else
     return std::__do_visit<_Tag>(
       std::forward<_Visitor>(__visitor),
       static_cast<_Vp>(__variants)...);
 }
      else
 return std::__do_visit<_Tag>(
   std::forward<_Visitor>(__visitor),
   __variant::__as(std::forward<_Variants>(__variants))...);
    }
# 1980 "/usr/include/c++/15.1.1/variant" 3
  template<typename... _Types>
    struct __variant_hash
    {

      using result_type [[__deprecated__]] = size_t;
      using argument_type [[__deprecated__]] = variant<_Types...>;


      size_t
      operator()(const variant<_Types...>& __t) const
      noexcept((is_nothrow_invocable_v<hash<decay_t<_Types>>, _Types> && ...))
      {
 size_t __ret;
 __detail::__variant::__raw_visit(
   [&__t, &__ret](auto&& __t_mem) mutable
   {
     using _Type = __remove_cvref_t<decltype(__t_mem)>;
     if constexpr (!is_same_v<_Type,
                __detail::__variant::__variant_cookie>)
       __ret = std::hash<size_t>{}(__t.index())
        + std::hash<_Type>{}(__t_mem);
     else
       __ret = std::hash<size_t>{}(__t.index());
   }, __t);
 return __ret;
      }
    };


  template<typename... _Types>
    struct hash<variant<_Types...>>
    : __conditional_t<(__is_hash_enabled_for<remove_const_t<_Types>> && ...),
        __variant_hash<_Types...>,
        __hash_not_enabled<variant<_Types...>>>

      , __detail::__variant::_Variant_hash_base<variant<_Types...>,
      index_sequence_for<_Types...>>

    { };

  template<typename... _Types>
    struct __is_fast_hash<hash<variant<_Types...>>>
    : bool_constant<(__is_fast_hash<_Types>::value && ...)>
    { };


}
# 23 "emc/sterp/sterp.cc" 2

# 1 "hal/hal.h" 1

#define HAL_H 
# 126 "hal/hal.h"
# 1 "rtapi/rtapi.h" 1

#define RTAPI_H 
# 69 "rtapi/rtapi.h"
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 1 3 4
# 70 "rtapi/rtapi.h" 2


#define RTAPI_NAME_LEN 31


#define RTAPI_BEGIN_DECLS extern "C" {
#define RTAPI_END_DECLS }






# 82 "rtapi/rtapi.h"
extern "C" {
# 101 "rtapi/rtapi.h"
    extern int rtapi_init(const char *modname);
# 113 "rtapi/rtapi.h"
    extern int rtapi_exit(int module_id);
# 124 "rtapi/rtapi.h"
    extern int rtapi_snprintf(char *buf, unsigned long int size,
 const char *fmt, ...)
     __attribute__((format(printf,3,4)));
# 137 "rtapi/rtapi.h"
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stdarg.h" 1 3 4
# 31 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stdarg.h" 3 4
#define _STDARG_H 
#define _ANSI_STDARG_H_ 

#undef __need___va_list
# 50 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stdarg.h" 3 4
#define va_start(v,l) __builtin_va_start(v,l)

#define va_end(v) __builtin_va_end(v)
#define va_arg(v,l) __builtin_va_arg(v,l)


#define va_copy(d,s) __builtin_va_copy(d,s)

#define __va_copy(d,s) __builtin_va_copy(d,s)
# 109 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stdarg.h" 3 4
#define _VA_LIST_ 


#define _VA_LIST 





#define _VA_LIST_T_H 


#define __va_list__ 
# 138 "rtapi/rtapi.h" 2
    extern int rtapi_vsnprintf(char *buf, unsigned long size,
 const char *fmt, va_list ap);
# 154 "rtapi/rtapi.h"
    extern void rtapi_print(const char *fmt, ...)
     __attribute__((format(printf,1,2)));






    typedef enum {
 RTAPI_MSG_NONE = 0,
 RTAPI_MSG_ERR,
 RTAPI_MSG_WARN,
 RTAPI_MSG_INFO,
 RTAPI_MSG_DBG,
 RTAPI_MSG_ALL
    } msg_level_t;

    extern void rtapi_print_msg(msg_level_t level, const char *fmt, ...)
     __attribute__((format(printf,2,3)));






    extern int rtapi_set_msg_level(int level);

    extern int rtapi_get_msg_level(void);
# 192 "rtapi/rtapi.h"
    typedef void(*rtapi_msg_handler_t)(msg_level_t level, const char *fmt, va_list ap);
# 238 "rtapi/rtapi.h"
    extern void rtapi_delay(long int nsec);
    extern long int rtapi_delay_max(void);
# 266 "rtapi/rtapi.h"
    extern long long int rtapi_get_time(void);
# 293 "rtapi/rtapi.h"
    extern long long int rtapi_get_clocks(void);
# 463 "rtapi/rtapi.h"
    extern int rtapi_shmem_new(int key, int module_id,
 unsigned long int size);






    extern int rtapi_shmem_delete(int shmem_id, int module_id);





    extern int rtapi_shmem_getptr(int shmem_id, void **ptr);
# 552 "rtapi/rtapi.h"
    extern int rtapi_fifo_new(int key, int module_id,
 unsigned long int size, char mode);






    extern int rtapi_fifo_delete(int fifo_id, int module_id);
# 602 "rtapi/rtapi.h"
    extern int rtapi_fifo_read(int fifo_id, char *buf,
 unsigned long int size);
# 622 "rtapi/rtapi.h"
    extern int rtapi_fifo_write(int fifo_id, char *buf,
 unsigned long int size);
# 674 "rtapi/rtapi.h"
    extern void rtapi_outb(unsigned char byte, unsigned int port);






    extern unsigned char rtapi_inb(unsigned int port);
# 710 "rtapi/rtapi.h"
#define rtapi_request_region(base,size,name) ((void*)-1)
#define rtapi_release_region(base,size) ((void)0)
# 835 "rtapi/rtapi.h"
extern long int simple_strtol(const char *nptr, char **endptr, int base);

# 1 "/usr/include/spawn.h" 1 3 4
# 20 "/usr/include/spawn.h" 3 4
#define _SPAWN_H 1
# 29 "/usr/include/spawn.h" 3 4

# 29 "/usr/include/spawn.h" 3 4
typedef struct
{
  short int __flags;
  pid_t __pgrp;
  sigset_t __sd;
  sigset_t __ss;
  struct sched_param __sp;
  int __policy;
  int __cgroup;
  int __pad[15];
} posix_spawnattr_t;




typedef struct
{
  int __allocated;
  int __used;
  struct __spawn_action *__actions;
  int __pad[16];
} posix_spawn_file_actions_t;



#define POSIX_SPAWN_RESETIDS 0x01
#define POSIX_SPAWN_SETPGROUP 0x02
#define POSIX_SPAWN_SETSIGDEF 0x04
#define POSIX_SPAWN_SETSIGMASK 0x08
#define POSIX_SPAWN_SETSCHEDPARAM 0x10
#define POSIX_SPAWN_SETSCHEDULER 0x20

#define POSIX_SPAWN_USEVFORK 0x40
#define POSIX_SPAWN_SETSID 0x80
#define POSIX_SPAWN_SETCGROUP 0x100



extern "C" {






extern int posix_spawn (pid_t *__restrict __pid,
   const char *__restrict __path,
   const posix_spawn_file_actions_t *__restrict
   __file_actions,
   const posix_spawnattr_t *__restrict __attrp,
   char *const __argv[],
   char *const __envp[])
    __attribute__ ((__nonnull__ (2, 5)));





extern int posix_spawnp (pid_t *__pid, const char *__file,
    const posix_spawn_file_actions_t *__file_actions,
    const posix_spawnattr_t *__attrp,
    char *const __argv[], char *const __envp[])
    __attribute__ ((__nonnull__ (2, 5)));



extern int posix_spawnattr_init (posix_spawnattr_t *__attr)
    noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int posix_spawnattr_destroy (posix_spawnattr_t *__attr)
    noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int posix_spawnattr_getsigdefault (const posix_spawnattr_t *
       __restrict __attr,
       sigset_t *__restrict __sigdefault)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int posix_spawnattr_setsigdefault (posix_spawnattr_t *__restrict __attr,
       const sigset_t *__restrict
       __sigdefault)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int posix_spawnattr_getsigmask (const posix_spawnattr_t *__restrict
           __attr,
           sigset_t *__restrict __sigmask)
    noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int posix_spawnattr_setsigmask (posix_spawnattr_t *__restrict __attr,
           const sigset_t *__restrict __sigmask)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int posix_spawnattr_getflags (const posix_spawnattr_t *__restrict
         __attr,
         short int *__restrict __flags)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int posix_spawnattr_setflags (posix_spawnattr_t *_attr,
         short int __flags)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int posix_spawnattr_getpgroup (const posix_spawnattr_t *__restrict
          __attr, pid_t *__restrict __pgroup)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int posix_spawnattr_setpgroup (posix_spawnattr_t *__attr,
          pid_t __pgroup)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int posix_spawnattr_getschedpolicy (const posix_spawnattr_t *
        __restrict __attr,
        int *__restrict __schedpolicy)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int posix_spawnattr_setschedpolicy (posix_spawnattr_t *__attr,
        int __schedpolicy)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int posix_spawnattr_getschedparam (const posix_spawnattr_t *
       __restrict __attr,
       struct sched_param *__restrict
       __schedparam)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int posix_spawnattr_setschedparam (posix_spawnattr_t *__restrict __attr,
       const struct sched_param *
       __restrict __schedparam)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int posix_spawn_file_actions_init (posix_spawn_file_actions_t *
       __file_actions)
     noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int posix_spawn_file_actions_destroy (posix_spawn_file_actions_t *
          __file_actions)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int posix_spawn_file_actions_addopen (posix_spawn_file_actions_t *
          __restrict __file_actions,
          int __fd,
          const char *__restrict __path,
          int __oflag, mode_t __mode)
     noexcept (true) __attribute__ ((__nonnull__ (1, 3)));



extern int posix_spawn_file_actions_addclose (posix_spawn_file_actions_t *
           __file_actions, int __fd)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int posix_spawn_file_actions_adddup2 (posix_spawn_file_actions_t *
          __file_actions,
          int __fd, int __newfd)
     noexcept (true) __attribute__ ((__nonnull__ (1)));




extern int posix_spawn_file_actions_addchdir_np (posix_spawn_file_actions_t *
       __restrict __actions,
       const char *__restrict __path)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));




extern int posix_spawn_file_actions_addfchdir_np (posix_spawn_file_actions_t *,
        int __fd)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int
posix_spawn_file_actions_addclosefrom_np (posix_spawn_file_actions_t *,
       int __from)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int
posix_spawn_file_actions_addtcsetpgrp_np (posix_spawn_file_actions_t *,
       int __tcfd)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



}

# 1 "/usr/include/bits/spawn_ext.h" 1 3 4
# 23 "/usr/include/bits/spawn_ext.h" 3 4
extern "C" {




extern int posix_spawnattr_getcgroup_np (const posix_spawnattr_t *
      __restrict __attr,
      int *__restrict __cgroup)
     noexcept (true) __attribute__ ((__nonnull__ (1, 2)));


extern int posix_spawnattr_setcgroup_np (posix_spawnattr_t *__attr,
      int __cgroup)
     noexcept (true) __attribute__ ((__nonnull__ (1)));
# 45 "/usr/include/bits/spawn_ext.h" 3 4
extern int pidfd_spawn (int *__restrict __pidfd,
   const char *__restrict __path,
   const posix_spawn_file_actions_t *__restrict __facts,
   const posix_spawnattr_t *__restrict __attrp,
   char *const __argv[],
   char *const __envp[])
    __attribute__ ((__nonnull__ (2, 5)));





extern int pidfd_spawnp (int *__restrict __pidfd,
    const char *__restrict __file,
    const posix_spawn_file_actions_t *__restrict __facts,
    const posix_spawnattr_t *__restrict __attrp,
    char *const __argv[],
    char *const __envp[])
    __attribute__ ((__nonnull__ (1, 2, 5)));



}
# 237 "/usr/include/spawn.h" 2 3 4
# 838 "rtapi/rtapi.h" 2


# 839 "rtapi/rtapi.h"
int rtapi_spawn_as_root(pid_t *pid, const char *path,
    const posix_spawn_file_actions_t *file_actions,
    const posix_spawnattr_t *attrp,
    char *const argv[], char *const envp[]);

int rtapi_spawnp_as_root(pid_t *pid, const char *path,
    const posix_spawn_file_actions_t *file_actions,
    const posix_spawnattr_t *attrp,
    char *const argv[], char *const envp[]);


extern int rtapi_is_kernelspace(void);
extern int rtapi_is_realtime(void);

int rtapi_open_as_root(const char *filename, int mode);

}
# 127 "hal/hal.h" 2
extern "C" {






# 1 "/usr/include/signal.h" 1 3 4
# 23 "/usr/include/signal.h" 3 4
#define _SIGNAL_H 




# 27 "/usr/include/signal.h" 3 4
extern "C" {


# 1 "/usr/include/bits/signum-generic.h" 1 3 4
# 20 "/usr/include/bits/signum-generic.h" 3 4
#define _BITS_SIGNUM_GENERIC_H 1







#define SIG_ERR ((__sighandler_t) -1)
#define SIG_DFL ((__sighandler_t) 0)
#define SIG_IGN ((__sighandler_t) 1)


#define SIG_HOLD ((__sighandler_t) 2)
# 48 "/usr/include/bits/signum-generic.h" 3 4
#define SIGINT 2
#define SIGILL 4
#define SIGABRT 6
#define SIGFPE 8
#define SIGSEGV 11
#define SIGTERM 15


#define SIGHUP 1
#define SIGQUIT 3
#define SIGTRAP 5
#define SIGKILL 9
#define SIGPIPE 13
#define SIGALRM 14


#define SIGIO SIGPOLL
#define SIGIOT SIGABRT
#define SIGCLD SIGCHLD
# 76 "/usr/include/bits/signum-generic.h" 3 4
# 1 "/usr/include/bits/signum-arch.h" 1 3 4
# 20 "/usr/include/bits/signum-arch.h" 3 4
#define _BITS_SIGNUM_ARCH_H 1
# 29 "/usr/include/bits/signum-arch.h" 3 4
#define SIGSTKFLT 16
#define SIGPWR 30


#define SIGBUS 7
#define SIGSYS 31


#define SIGURG 23
#define SIGSTOP 19
#define SIGTSTP 20
#define SIGCONT 18
#define SIGCHLD 17
#define SIGTTIN 21
#define SIGTTOU 22
#define SIGPOLL 29
#define SIGXFSZ 25
#define SIGXCPU 24
#define SIGVTALRM 26
#define SIGPROF 27
#define SIGUSR1 10
#define SIGUSR2 12



#define SIGWINCH 28


#define SIGIO SIGPOLL
#define SIGIOT SIGABRT
#define SIGCLD SIGCHLD

#define __SIGRTMIN 32
#define __SIGRTMAX 64
# 77 "/usr/include/bits/signum-generic.h" 2 3 4


#define _NSIG (__SIGRTMAX + 1)
# 31 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/bits/types/sig_atomic_t.h" 1 3 4

#define __sig_atomic_t_defined 1





typedef __sig_atomic_t sig_atomic_t;
# 33 "/usr/include/signal.h" 2 3 4
# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/bits/types/siginfo_t.h" 1 3 4

#define __siginfo_t_defined 1

# 1 "/usr/include/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64






#define __WORDSIZE_TIME64_COMPAT32 1



#define __SYSCALL_WORDSIZE 64
# 5 "/usr/include/bits/types/siginfo_t.h" 2 3 4

# 1 "/usr/include/bits/types/__sigval_t.h" 1 3 4
# 20 "/usr/include/bits/types/__sigval_t.h" 3 4
#define ____sigval_t_defined 



union sigval
{
  int sival_int;
  void *sival_ptr;
};

typedef union sigval __sigval_t;
# 7 "/usr/include/bits/types/siginfo_t.h" 2 3 4

#define __SI_MAX_SIZE 128

#define __SI_PAD_SIZE ((__SI_MAX_SIZE / sizeof (int)) - 4)





# 1 "/usr/include/bits/siginfo-arch.h" 1 3 4


#define _BITS_SIGINFO_ARCH_H 1
# 17 "/usr/include/bits/types/siginfo_t.h" 2 3 4

#define __SI_ALIGNMENT 


#define __SI_BAND_TYPE long int


#define __SI_CLOCK_T __clock_t


#define __SI_ERRNO_THEN_CODE 1


#define __SI_HAVE_SIGSYS 1


#define __SI_SIGFAULT_ADDL 


typedef struct
  {
    int si_signo;

    int si_errno;

    int si_code;





    int __pad0;


    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     __sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     __sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
    
     short int si_addr_lsb;
     union
       {

  struct
    {
      void *_lower;
      void *_upper;
    } _addr_bnd;

  __uint32_t _pkey;
       } _bounds;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;



 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;

      } _sifields;
  } siginfo_t ;



#define si_pid _sifields._kill.si_pid
#define si_uid _sifields._kill.si_uid
#define si_timerid _sifields._timer.si_tid
#define si_overrun _sifields._timer.si_overrun
#define si_status _sifields._sigchld.si_status
#define si_utime _sifields._sigchld.si_utime
#define si_stime _sifields._sigchld.si_stime
#define si_value _sifields._rt.si_sigval
#define si_int _sifields._rt.si_sigval.sival_int
#define si_ptr _sifields._rt.si_sigval.sival_ptr
#define si_addr _sifields._sigfault.si_addr
#define si_addr_lsb _sifields._sigfault.si_addr_lsb
#define si_lower _sifields._sigfault._bounds._addr_bnd._lower
#define si_upper _sifields._sigfault._bounds._addr_bnd._upper
#define si_pkey _sifields._sigfault._bounds._pkey
#define si_band _sifields._sigpoll.si_band
#define si_fd _sifields._sigpoll.si_fd

#define si_call_addr _sifields._sigsys._call_addr
#define si_syscall _sifields._sigsys._syscall
#define si_arch _sifields._sigsys._arch
# 58 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/bits/siginfo-consts.h" 1 3 4
# 20 "/usr/include/bits/siginfo-consts.h" 3 4
#define _BITS_SIGINFO_CONSTS_H 1
# 30 "/usr/include/bits/siginfo-consts.h" 3 4
#define __SI_ASYNCIO_AFTER_SIGIO 1




enum
{
  SI_ASYNCNL = -60,
  SI_DETHREAD = -7,

  SI_TKILL,
  SI_SIGIO,

  SI_ASYNCIO,
  SI_MESGQ,
  SI_TIMER,





  SI_QUEUE,
  SI_USER,
  SI_KERNEL = 0x80

#define SI_ASYNCNL SI_ASYNCNL
#define SI_DETHREAD SI_DETHREAD
#define SI_TKILL SI_TKILL
#define SI_SIGIO SI_SIGIO
#define SI_ASYNCIO SI_ASYNCIO
#define SI_MESGQ SI_MESGQ
#define SI_TIMER SI_TIMER
#define SI_ASYNCIO SI_ASYNCIO
#define SI_QUEUE SI_QUEUE
#define SI_USER SI_USER
#define SI_KERNEL SI_KERNEL
};




enum
{
  ILL_ILLOPC = 1,
#define ILL_ILLOPC ILL_ILLOPC
  ILL_ILLOPN,
#define ILL_ILLOPN ILL_ILLOPN
  ILL_ILLADR,
#define ILL_ILLADR ILL_ILLADR
  ILL_ILLTRP,
#define ILL_ILLTRP ILL_ILLTRP
  ILL_PRVOPC,
#define ILL_PRVOPC ILL_PRVOPC
  ILL_PRVREG,
#define ILL_PRVREG ILL_PRVREG
  ILL_COPROC,
#define ILL_COPROC ILL_COPROC
  ILL_BADSTK,
#define ILL_BADSTK ILL_BADSTK
  ILL_BADIADDR
#define ILL_BADIADDR ILL_BADIADDR
};


enum
{
  FPE_INTDIV = 1,
#define FPE_INTDIV FPE_INTDIV
  FPE_INTOVF,
#define FPE_INTOVF FPE_INTOVF
  FPE_FLTDIV,
#define FPE_FLTDIV FPE_FLTDIV
  FPE_FLTOVF,
#define FPE_FLTOVF FPE_FLTOVF
  FPE_FLTUND,
#define FPE_FLTUND FPE_FLTUND
  FPE_FLTRES,
#define FPE_FLTRES FPE_FLTRES
  FPE_FLTINV,
#define FPE_FLTINV FPE_FLTINV
  FPE_FLTSUB,
#define FPE_FLTSUB FPE_FLTSUB
  FPE_FLTUNK = 14,
#define FPE_FLTUNK FPE_FLTUNK
  FPE_CONDTRAP
#define FPE_CONDTRAP FPE_CONDTRAP
};


enum
{
  SEGV_MAPERR = 1,
#define SEGV_MAPERR SEGV_MAPERR
  SEGV_ACCERR,
#define SEGV_ACCERR SEGV_ACCERR
  SEGV_BNDERR,
#define SEGV_BNDERR SEGV_BNDERR
  SEGV_PKUERR,
#define SEGV_PKUERR SEGV_PKUERR
  SEGV_ACCADI,
#define SEGV_ACCADI SEGV_ACCADI
  SEGV_ADIDERR,
#define SEGV_ADIDERR SEGV_ADIDERR
  SEGV_ADIPERR,
#define SEGV_ADIPERR SEGV_ADIPERR
  SEGV_MTEAERR,
#define SEGV_MTEAERR SEGV_MTEAERR
  SEGV_MTESERR,
#define SEGV_MTESERR SEGV_MTESERR
  SEGV_CPERR
#define SEGV_CPERR SEGV_CPERR
};


enum
{
  BUS_ADRALN = 1,
#define BUS_ADRALN BUS_ADRALN
  BUS_ADRERR,
#define BUS_ADRERR BUS_ADRERR
  BUS_OBJERR,
#define BUS_OBJERR BUS_OBJERR
  BUS_MCEERR_AR,
#define BUS_MCEERR_AR BUS_MCEERR_AR
  BUS_MCEERR_AO
#define BUS_MCEERR_AO BUS_MCEERR_AO
};




enum
{
  TRAP_BRKPT = 1,
#define TRAP_BRKPT TRAP_BRKPT
  TRAP_TRACE,
#define TRAP_TRACE TRAP_TRACE
  TRAP_BRANCH,
#define TRAP_BRANCH TRAP_BRANCH
  TRAP_HWBKPT,
#define TRAP_HWBKPT TRAP_HWBKPT
  TRAP_UNK
#define TRAP_UNK TRAP_UNK
};




enum
{
  CLD_EXITED = 1,
#define CLD_EXITED CLD_EXITED
  CLD_KILLED,
#define CLD_KILLED CLD_KILLED
  CLD_DUMPED,
#define CLD_DUMPED CLD_DUMPED
  CLD_TRAPPED,
#define CLD_TRAPPED CLD_TRAPPED
  CLD_STOPPED,
#define CLD_STOPPED CLD_STOPPED
  CLD_CONTINUED
#define CLD_CONTINUED CLD_CONTINUED
};


enum
{
  POLL_IN = 1,
#define POLL_IN POLL_IN
  POLL_OUT,
#define POLL_OUT POLL_OUT
  POLL_MSG,
#define POLL_MSG POLL_MSG
  POLL_ERR,
#define POLL_ERR POLL_ERR
  POLL_PRI,
#define POLL_PRI POLL_PRI
  POLL_HUP
#define POLL_HUP POLL_HUP
};





# 1 "/usr/include/bits/siginfo-consts-arch.h" 1 3 4


#define _BITS_SIGINFO_CONSTS_ARCH_H 1
# 216 "/usr/include/bits/siginfo-consts.h" 2 3 4
# 59 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/bits/types/sigval_t.h" 1 3 4

#define __sigval_t_defined 
# 16 "/usr/include/bits/types/sigval_t.h" 3 4
typedef __sigval_t sigval_t;
# 63 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/bits/types/sigevent_t.h" 1 3 4

#define __sigevent_t_defined 1

# 1 "/usr/include/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64






#define __WORDSIZE_TIME64_COMPAT32 1



#define __SYSCALL_WORDSIZE 64
# 5 "/usr/include/bits/types/sigevent_t.h" 2 3 4



#define __SIGEV_MAX_SIZE 64

#define __SIGEV_PAD_SIZE ((__SIGEV_MAX_SIZE / sizeof (int)) - 4)
# 22 "/usr/include/bits/types/sigevent_t.h" 3 4
typedef struct sigevent
  {
    __sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (__sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;


#define sigev_notify_function _sigev_un._sigev_thread._function
#define sigev_notify_attributes _sigev_un._sigev_thread._attribute
# 67 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/bits/sigevent-consts.h" 1 3 4
# 20 "/usr/include/bits/sigevent-consts.h" 3 4
#define _BITS_SIGEVENT_CONSTS_H 1






enum
{
  SIGEV_SIGNAL = 0,
#define SIGEV_SIGNAL SIGEV_SIGNAL
  SIGEV_NONE,
#define SIGEV_NONE SIGEV_NONE
  SIGEV_THREAD,
#define SIGEV_THREAD SIGEV_THREAD

  SIGEV_THREAD_ID = 4

#define SIGEV_THREAD_ID SIGEV_THREAD_ID
};
# 68 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     noexcept (true);

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     noexcept (true);






extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     noexcept (true);
# 112 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) noexcept (true);






extern int killpg (__pid_t __pgrp, int __sig) noexcept (true);



extern int raise (int __sig) noexcept (true);



extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     noexcept (true);
extern int gsignal (int __sig) noexcept (true);




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 151 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause")
  __attribute__ ((__deprecated__ ("Use the sigsuspend function instead")));
# 168 "/usr/include/signal.h" 3 4
#define sigmask(sig) __glibc_macro_warning ("sigmask is deprecated") ((int)(1u << ((sig) - 1)))




extern int sigblock (int __mask) noexcept (true) __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) noexcept (true) __attribute__ ((__deprecated__));


extern int siggetmask (void) noexcept (true) __attribute__ ((__deprecated__));




#define NSIG _NSIG



typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     noexcept (true) __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (const sigset_t *__set) noexcept (true) __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, const sigset_t *__left,
        const sigset_t *__right) noexcept (true) __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, const sigset_t *__left,
       const sigset_t *__right) noexcept (true) __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/bits/sigaction.h" 1 3 4
# 20 "/usr/include/bits/sigaction.h" 3 4
#define _BITS_SIGACTION_H 1






struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;
#define sa_handler __sigaction_handler.sa_handler
#define sa_sigaction __sigaction_handler.sa_sigaction





    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };


#define SA_NOCLDSTOP 1
#define SA_NOCLDWAIT 2
#define SA_SIGINFO 4


#define SA_ONSTACK 0x08000000


#define SA_RESTART 0x10000000
#define SA_NODEFER 0x40000000

#define SA_RESETHAND 0x80000000


#define SA_INTERRUPT 0x20000000


#define SA_NOMASK SA_NODEFER
#define SA_ONESHOT SA_RESETHAND
#define SA_STACK SA_ONSTACK



#define SIG_BLOCK 0
#define SIG_UNBLOCK 1
#define SIG_SETMASK 2
# 230 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) noexcept (true);






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) noexcept (true);


extern int sigpending (sigset_t *__set) noexcept (true) __attribute__ ((__nonnull__ (1)));







extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));







extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));







extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));
# 292 "/usr/include/signal.h" 3 4
extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     noexcept (true);







# 1 "/usr/include/bits/sigcontext.h" 1 3 4
# 19 "/usr/include/bits/sigcontext.h" 3 4
#define _BITS_SIGCONTEXT_H 1







#define FP_XSTATE_MAGIC1 0x46505853U
#define FP_XSTATE_MAGIC2 0x46505845U
#define FP_XSTATE_MAGIC2_SIZE sizeof (FP_XSTATE_MAGIC2)

struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t __glibc_reserved1[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short __glibc_reserved1[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 123 "/usr/include/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t __glibc_reserved1[2];
  __uint64_t __glibc_reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 302 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) noexcept (true);





#define __need_size_t 
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 1 3 4
# 173 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 252 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_size_t
# 364 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_wchar_t
# 414 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef NULL

#define NULL __null
# 425 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_NULL




#undef offsetof
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 312 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/bits/types/stack_t.h" 1 3 4
# 20 "/usr/include/bits/types/stack_t.h" 3 4
#define __stack_t_defined 1

#define __need_size_t 
# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 1 3 4
# 173 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_ptrdiff_t
# 252 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_size_t
# 364 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_wchar_t
# 414 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef NULL

#define NULL __null
# 425 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stddef.h" 3 4
#undef __need_NULL




#undef offsetof
#define offsetof(TYPE,MEMBER) __builtin_offsetof (TYPE, MEMBER)
# 24 "/usr/include/bits/types/stack_t.h" 2 3 4


typedef struct
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 314 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/sys/ucontext.h" 1 3 4
# 19 "/usr/include/sys/ucontext.h" 3 4
#define _SYS_UCONTEXT_H 1
# 29 "/usr/include/sys/ucontext.h" 3 4
#define __ctx(fld) fld







__extension__ typedef long long int greg_t;


#define __NGREG 23

#define NGREG __NGREG



typedef greg_t gregset_t[23];



enum
{
  REG_R8 = 0,
#define REG_R8 REG_R8
  REG_R9,
#define REG_R9 REG_R9
  REG_R10,
#define REG_R10 REG_R10
  REG_R11,
#define REG_R11 REG_R11
  REG_R12,
#define REG_R12 REG_R12
  REG_R13,
#define REG_R13 REG_R13
  REG_R14,
#define REG_R14 REG_R14
  REG_R15,
#define REG_R15 REG_R15
  REG_RDI,
#define REG_RDI REG_RDI
  REG_RSI,
#define REG_RSI REG_RSI
  REG_RBP,
#define REG_RBP REG_RBP
  REG_RBX,
#define REG_RBX REG_RBX
  REG_RDX,
#define REG_RDX REG_RDX
  REG_RAX,
#define REG_RAX REG_RAX
  REG_RCX,
#define REG_RCX REG_RCX
  REG_RSP,
#define REG_RSP REG_RSP
  REG_RIP,
#define REG_RIP REG_RIP
  REG_EFL,
#define REG_EFL REG_EFL
  REG_CSGSFS,
#define REG_CSGSFS REG_CSGSFS
  REG_ERR,
#define REG_ERR REG_ERR
  REG_TRAPNO,
#define REG_TRAPNO REG_TRAPNO
  REG_OLDMASK,
#define REG_OLDMASK REG_OLDMASK
  REG_CR2
#define REG_CR2 REG_CR2
};


struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int __glibc_reserved1[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext_t
  {
    unsigned long int uc_flags;
    struct ucontext_t *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
    __extension__ unsigned long long int __ssp[4];
  } ucontext_t;
# 260 "/usr/include/sys/ucontext.h" 3 4
#undef __ctx
# 317 "/usr/include/signal.h" 2 3 4







extern int siginterrupt (int __sig, int __interrupt) noexcept (true)
  __attribute__ ((__deprecated__ ("Use sigaction with SA_RESTART instead")));

# 1 "/usr/include/bits/sigstack.h" 1 3 4
# 20 "/usr/include/bits/sigstack.h" 3 4
#define _BITS_SIGSTACK_H 1






#define MINSIGSTKSZ 2048


#define SIGSTKSZ 8192
# 328 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/bits/sigstksz.h" 1 3 4
# 27 "/usr/include/bits/sigstksz.h" 3 4
#undef SIGSTKSZ
#define SIGSTKSZ sysconf (_SC_SIGSTKSZ)


#undef MINSIGSTKSZ
#define MINSIGSTKSZ SIGSTKSZ
# 329 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/bits/ss_flags.h" 1 3 4
# 20 "/usr/include/bits/ss_flags.h" 3 4
#define _BITS_SS_FLAGS_H 1






enum
{
  SS_ONSTACK = 1,
#define SS_ONSTACK SS_ONSTACK
  SS_DISABLE
#define SS_DISABLE SS_DISABLE
};
# 330 "/usr/include/signal.h" 2 3 4



extern int sigaltstack (const stack_t *__restrict __ss,
   stack_t *__restrict __oss) noexcept (true);




# 1 "/usr/include/bits/types/struct_sigstack.h" 1 3 4
# 20 "/usr/include/bits/types/struct_sigstack.h" 3 4
#define __sigstack_defined 1


struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };
# 340 "/usr/include/signal.h" 2 3 4







extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     noexcept (true) __attribute__ ((__deprecated__));






extern int sighold (int __sig) noexcept (true)
  __attribute__ ((__deprecated__ ("Use the sigprocmask function instead")));


extern int sigrelse (int __sig) noexcept (true)
  __attribute__ ((__deprecated__ ("Use the sigprocmask function instead")));


extern int sigignore (int __sig) noexcept (true)
  __attribute__ ((__deprecated__ ("Use the signal function instead")));


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) noexcept (true)
  __attribute__ ((__deprecated__ ("Use the signal and sigprocmask functions instead")))
                                                        ;






# 1 "/usr/include/bits/sigthread.h" 1 3 4
# 20 "/usr/include/bits/sigthread.h" 3 4
#define _BITS_SIGTHREAD_H 1
# 31 "/usr/include/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)noexcept (true);


extern int pthread_kill (pthread_t __threadid, int __signo) noexcept (true);



extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) noexcept (true);
# 377 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) noexcept (true);

extern int __libc_current_sigrtmax (void) noexcept (true);

#define SIGRTMIN (__libc_current_sigrtmin ())
#define SIGRTMAX (__libc_current_sigrtmax ())


# 1 "/usr/include/bits/signal_ext.h" 1 3 4
# 29 "/usr/include/bits/signal_ext.h" 3 4
extern int tgkill (__pid_t __tgid, __pid_t __tid, int __signal);
# 392 "/usr/include/signal.h" 2 3 4

}
# 135 "hal/hal.h" 2


# 1 "rtapi/rtapi_errno.h" 1
# 138 "hal/hal.h" 2

#define HAL_NAME_LEN 47




#define HAL_LOCK_NONE 0
#define HAL_LOCK_LOAD 1
#define HAL_LOCK_CONFIG 2
#define HAL_LOCK_PARAMS 4
#define HAL_LOCK_RUN 8


#define HAL_LOCK_TUNE (HAL_LOCK_LOAD | HAL_LOCK_CONFIG)

#define HAL_LOCK_ALL 255
# 174 "hal/hal.h"

# 174 "hal/hal.h"
extern int hal_init(const char *name);
# 193 "hal/hal.h"
extern int hal_exit(int comp_id);
# 212 "hal/hal.h"
extern void *hal_malloc(long int size);





extern int hal_ready(int comp_id);







extern int hal_set_unready(int comp_id);





extern int hal_unready(int comp_id);





extern char* hal_comp_name(int comp_id);
# 275 "hal/hal.h"
typedef enum {
    HAL_TYPE_UNSPECIFIED = -1,
    HAL_TYPE_UNINITIALIZED = 0,
    HAL_BIT = 1,
    HAL_FLOAT = 2,
    HAL_S32 = 3,
    HAL_U32 = 4,
    HAL_PORT = 5
} hal_type_t;
# 293 "hal/hal.h"
typedef enum {
    HAL_DIR_UNSPECIFIED = -1,
    HAL_IN = 16,
    HAL_OUT = 32,
    HAL_IO = (HAL_IN | HAL_OUT),
} hal_pin_dir_t;







typedef enum {
    HAL_RO = 64,
    HAL_RW = HAL_RO | 128 ,
} hal_param_dir_t;



# 1 "rtapi/rtapi_bool.h" 1
# 314 "hal/hal.h" 2
# 1 "rtapi/rtapi_stdint.h" 1
# 17 "rtapi/rtapi_stdint.h"
#define RTAPI_STDINT_H 
# 48 "rtapi/rtapi_stdint.h"
# 1 "/usr/include/inttypes.h" 1 3 4
# 23 "/usr/include/inttypes.h" 3 4
#define _INTTYPES_H 1



# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stdint.h" 1 3 4



#undef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 
#undef __STDC_CONSTANT_MACROS
#define __STDC_CONSTANT_MACROS 

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
# 1 "/usr/include/stdint.h" 1 3 4
# 23 "/usr/include/stdint.h" 3 4
#define _STDINT_H 1

#define __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION 
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 31 "/usr/include/bits/libc-header-start.h" 3 4
#undef __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION





#undef __GLIBC_USE_LIB_EXT2


#define __GLIBC_USE_LIB_EXT2 1
# 67 "/usr/include/bits/libc-header-start.h" 3 4
#undef __GLIBC_USE_IEC_60559_BFP_EXT

#define __GLIBC_USE_IEC_60559_BFP_EXT 1



#undef __GLIBC_USE_IEC_60559_BFP_EXT_C23

#define __GLIBC_USE_IEC_60559_BFP_EXT_C23 1



#undef __GLIBC_USE_IEC_60559_EXT

#define __GLIBC_USE_IEC_60559_EXT 1
# 90 "/usr/include/bits/libc-header-start.h" 3 4
#undef __GLIBC_USE_IEC_60559_FUNCS_EXT

#define __GLIBC_USE_IEC_60559_FUNCS_EXT 1



#undef __GLIBC_USE_IEC_60559_FUNCS_EXT_C23

#define __GLIBC_USE_IEC_60559_FUNCS_EXT_C23 1






#undef __GLIBC_USE_IEC_60559_TYPES_EXT

#define __GLIBC_USE_IEC_60559_TYPES_EXT 1
# 27 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/bits/wordsize.h" 1 3 4



#define __WORDSIZE 64






#define __WORDSIZE_TIME64_COMPAT32 1



#define __SYSCALL_WORDSIZE 64
# 30 "/usr/include/stdint.h" 2 3 4







# 1 "/usr/include/bits/stdint-uintn.h" 1 3 4
# 20 "/usr/include/bits/stdint-uintn.h" 3 4
#define _BITS_STDINT_UINTN_H 1



typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4



# 1 "/usr/include/bits/stdint-least.h" 1 3 4
# 20 "/usr/include/bits/stdint-least.h" 3 4
#define _BITS_STDINT_LEAST_H 1




typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;
# 42 "/usr/include/stdint.h" 2 3 4





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 60 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 79 "/usr/include/stdint.h" 3 4
typedef unsigned long int uintptr_t;
# 90 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;



#define __INT64_C(c) c ## L
#define __UINT64_C(c) c ## UL
# 105 "/usr/include/stdint.h" 3 4
#define INT8_MIN (-128)
#define INT16_MIN (-32767-1)
#define INT32_MIN (-2147483647-1)
#define INT64_MIN (-__INT64_C(9223372036854775807)-1)

#define INT8_MAX (127)
#define INT16_MAX (32767)
#define INT32_MAX (2147483647)
#define INT64_MAX (__INT64_C(9223372036854775807))


#define UINT8_MAX (255)
#define UINT16_MAX (65535)
#define UINT32_MAX (4294967295U)
#define UINT64_MAX (__UINT64_C(18446744073709551615))



#define INT_LEAST8_MIN (-128)
#define INT_LEAST16_MIN (-32767-1)
#define INT_LEAST32_MIN (-2147483647-1)
#define INT_LEAST64_MIN (-__INT64_C(9223372036854775807)-1)

#define INT_LEAST8_MAX (127)
#define INT_LEAST16_MAX (32767)
#define INT_LEAST32_MAX (2147483647)
#define INT_LEAST64_MAX (__INT64_C(9223372036854775807))


#define UINT_LEAST8_MAX (255)
#define UINT_LEAST16_MAX (65535)
#define UINT_LEAST32_MAX (4294967295U)
#define UINT_LEAST64_MAX (__UINT64_C(18446744073709551615))



#define INT_FAST8_MIN (-128)

#define INT_FAST16_MIN (-9223372036854775807L-1)
#define INT_FAST32_MIN (-9223372036854775807L-1)




#define INT_FAST64_MIN (-__INT64_C(9223372036854775807)-1)

#define INT_FAST8_MAX (127)

#define INT_FAST16_MAX (9223372036854775807L)
#define INT_FAST32_MAX (9223372036854775807L)




#define INT_FAST64_MAX (__INT64_C(9223372036854775807))


#define UINT_FAST8_MAX (255)

#define UINT_FAST16_MAX (18446744073709551615UL)
#define UINT_FAST32_MAX (18446744073709551615UL)




#define UINT_FAST64_MAX (__UINT64_C(18446744073709551615))




#define INTPTR_MIN (-9223372036854775807L-1)
#define INTPTR_MAX (9223372036854775807L)
#define UINTPTR_MAX (18446744073709551615UL)
# 186 "/usr/include/stdint.h" 3 4
#define INTMAX_MIN (-__INT64_C(9223372036854775807)-1)

#define INTMAX_MAX (__INT64_C(9223372036854775807))


#define UINTMAX_MAX (__UINT64_C(18446744073709551615))






#define PTRDIFF_MIN (-9223372036854775807L-1)
#define PTRDIFF_MAX (9223372036854775807L)
# 211 "/usr/include/stdint.h" 3 4
#define SIG_ATOMIC_MIN (-2147483647-1)
#define SIG_ATOMIC_MAX (2147483647)



#define SIZE_MAX (18446744073709551615UL)
# 233 "/usr/include/stdint.h" 3 4
#define WINT_MIN (0u)
#define WINT_MAX (4294967295u)


#define INT8_C(c) c
#define INT16_C(c) c
#define INT32_C(c) c

#define INT64_C(c) c ## L





#define UINT8_C(c) c
#define UINT16_C(c) c
#define UINT32_C(c) c ## U

#define UINT64_C(c) c ## UL






#define INTMAX_C(c) c ## L
#define UINTMAX_C(c) c ## UL







#define INT8_WIDTH 8
#define UINT8_WIDTH 8
#define INT16_WIDTH 16
#define UINT16_WIDTH 16
#define INT32_WIDTH 32
#define UINT32_WIDTH 32
#define INT64_WIDTH 64
#define UINT64_WIDTH 64

#define INT_LEAST8_WIDTH 8
#define UINT_LEAST8_WIDTH 8
#define INT_LEAST16_WIDTH 16
#define UINT_LEAST16_WIDTH 16
#define INT_LEAST32_WIDTH 32
#define UINT_LEAST32_WIDTH 32
#define INT_LEAST64_WIDTH 64
#define UINT_LEAST64_WIDTH 64

#define INT_FAST8_WIDTH 8
#define UINT_FAST8_WIDTH 8
#define INT_FAST16_WIDTH __WORDSIZE
#define UINT_FAST16_WIDTH __WORDSIZE
#define INT_FAST32_WIDTH __WORDSIZE
#define UINT_FAST32_WIDTH __WORDSIZE
#define INT_FAST64_WIDTH 64
#define UINT_FAST64_WIDTH 64

#define INTPTR_WIDTH __WORDSIZE
#define UINTPTR_WIDTH __WORDSIZE

#define INTMAX_WIDTH 64
#define UINTMAX_WIDTH 64

#define PTRDIFF_WIDTH __WORDSIZE
#define SIG_ATOMIC_WIDTH 32
#define SIZE_WIDTH __WORDSIZE
#define WCHAR_WIDTH 32
#define WINT_WIDTH 32
# 12 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/stdint.h" 2 3 4
#pragma GCC diagnostic pop



#define _GCC_WRAP_STDINT_H 
# 28 "/usr/include/inttypes.h" 2 3 4




#define __gwchar_t wchar_t







#define ____gwchar_t_defined 1



#define __PRI64_PREFIX "l"
#define __PRIPTR_PREFIX "l"
# 54 "/usr/include/inttypes.h" 3 4
#define PRId8 "d"
#define PRId16 "d"
#define PRId32 "d"
#define PRId64 __PRI64_PREFIX "d"

#define PRIdLEAST8 "d"
#define PRIdLEAST16 "d"
#define PRIdLEAST32 "d"
#define PRIdLEAST64 __PRI64_PREFIX "d"

#define PRIdFAST8 "d"
#define PRIdFAST16 __PRIPTR_PREFIX "d"
#define PRIdFAST32 __PRIPTR_PREFIX "d"
#define PRIdFAST64 __PRI64_PREFIX "d"


#define PRIi8 "i"
#define PRIi16 "i"
#define PRIi32 "i"
#define PRIi64 __PRI64_PREFIX "i"

#define PRIiLEAST8 "i"
#define PRIiLEAST16 "i"
#define PRIiLEAST32 "i"
#define PRIiLEAST64 __PRI64_PREFIX "i"

#define PRIiFAST8 "i"
#define PRIiFAST16 __PRIPTR_PREFIX "i"
#define PRIiFAST32 __PRIPTR_PREFIX "i"
#define PRIiFAST64 __PRI64_PREFIX "i"


#define PRIo8 "o"
#define PRIo16 "o"
#define PRIo32 "o"
#define PRIo64 __PRI64_PREFIX "o"

#define PRIoLEAST8 "o"
#define PRIoLEAST16 "o"
#define PRIoLEAST32 "o"
#define PRIoLEAST64 __PRI64_PREFIX "o"

#define PRIoFAST8 "o"
#define PRIoFAST16 __PRIPTR_PREFIX "o"
#define PRIoFAST32 __PRIPTR_PREFIX "o"
#define PRIoFAST64 __PRI64_PREFIX "o"


#define PRIu8 "u"
#define PRIu16 "u"
#define PRIu32 "u"
#define PRIu64 __PRI64_PREFIX "u"

#define PRIuLEAST8 "u"
#define PRIuLEAST16 "u"
#define PRIuLEAST32 "u"
#define PRIuLEAST64 __PRI64_PREFIX "u"

#define PRIuFAST8 "u"
#define PRIuFAST16 __PRIPTR_PREFIX "u"
#define PRIuFAST32 __PRIPTR_PREFIX "u"
#define PRIuFAST64 __PRI64_PREFIX "u"


#define PRIx8 "x"
#define PRIx16 "x"
#define PRIx32 "x"
#define PRIx64 __PRI64_PREFIX "x"

#define PRIxLEAST8 "x"
#define PRIxLEAST16 "x"
#define PRIxLEAST32 "x"
#define PRIxLEAST64 __PRI64_PREFIX "x"

#define PRIxFAST8 "x"
#define PRIxFAST16 __PRIPTR_PREFIX "x"
#define PRIxFAST32 __PRIPTR_PREFIX "x"
#define PRIxFAST64 __PRI64_PREFIX "x"


#define PRIX8 "X"
#define PRIX16 "X"
#define PRIX32 "X"
#define PRIX64 __PRI64_PREFIX "X"

#define PRIXLEAST8 "X"
#define PRIXLEAST16 "X"
#define PRIXLEAST32 "X"
#define PRIXLEAST64 __PRI64_PREFIX "X"

#define PRIXFAST8 "X"
#define PRIXFAST16 __PRIPTR_PREFIX "X"
#define PRIXFAST32 __PRIPTR_PREFIX "X"
#define PRIXFAST64 __PRI64_PREFIX "X"



#define PRIdMAX __PRI64_PREFIX "d"
#define PRIiMAX __PRI64_PREFIX "i"
#define PRIoMAX __PRI64_PREFIX "o"
#define PRIuMAX __PRI64_PREFIX "u"
#define PRIxMAX __PRI64_PREFIX "x"
#define PRIXMAX __PRI64_PREFIX "X"



#define PRIdPTR __PRIPTR_PREFIX "d"
#define PRIiPTR __PRIPTR_PREFIX "i"
#define PRIoPTR __PRIPTR_PREFIX "o"
#define PRIuPTR __PRIPTR_PREFIX "u"
#define PRIxPTR __PRIPTR_PREFIX "x"
#define PRIXPTR __PRIPTR_PREFIX "X"



#define PRIb8 "b"
#define PRIb16 "b"
#define PRIb32 "b"
#define PRIb64 __PRI64_PREFIX "b"

#define PRIbLEAST8 "b"
#define PRIbLEAST16 "b"
#define PRIbLEAST32 "b"
#define PRIbLEAST64 __PRI64_PREFIX "b"

#define PRIbFAST8 "b"
#define PRIbFAST16 __PRIPTR_PREFIX "b"
#define PRIbFAST32 __PRIPTR_PREFIX "b"
#define PRIbFAST64 __PRI64_PREFIX "b"

#define PRIbMAX __PRI64_PREFIX "b"
#define PRIbPTR __PRIPTR_PREFIX "b"

#define PRIB8 "B"
#define PRIB16 "B"
#define PRIB32 "B"
#define PRIB64 __PRI64_PREFIX "B"

#define PRIBLEAST8 "B"
#define PRIBLEAST16 "B"
#define PRIBLEAST32 "B"
#define PRIBLEAST64 __PRI64_PREFIX "B"

#define PRIBFAST8 "B"
#define PRIBFAST16 __PRIPTR_PREFIX "B"
#define PRIBFAST32 __PRIPTR_PREFIX "B"
#define PRIBFAST64 __PRI64_PREFIX "B"

#define PRIBMAX __PRI64_PREFIX "B"
#define PRIBPTR __PRIPTR_PREFIX "B"






#define SCNd8 "hhd"
#define SCNd16 "hd"
#define SCNd32 "d"
#define SCNd64 __PRI64_PREFIX "d"

#define SCNdLEAST8 "hhd"
#define SCNdLEAST16 "hd"
#define SCNdLEAST32 "d"
#define SCNdLEAST64 __PRI64_PREFIX "d"

#define SCNdFAST8 "hhd"
#define SCNdFAST16 __PRIPTR_PREFIX "d"
#define SCNdFAST32 __PRIPTR_PREFIX "d"
#define SCNdFAST64 __PRI64_PREFIX "d"


#define SCNi8 "hhi"
#define SCNi16 "hi"
#define SCNi32 "i"
#define SCNi64 __PRI64_PREFIX "i"

#define SCNiLEAST8 "hhi"
#define SCNiLEAST16 "hi"
#define SCNiLEAST32 "i"
#define SCNiLEAST64 __PRI64_PREFIX "i"

#define SCNiFAST8 "hhi"
#define SCNiFAST16 __PRIPTR_PREFIX "i"
#define SCNiFAST32 __PRIPTR_PREFIX "i"
#define SCNiFAST64 __PRI64_PREFIX "i"


#define SCNu8 "hhu"
#define SCNu16 "hu"
#define SCNu32 "u"
#define SCNu64 __PRI64_PREFIX "u"

#define SCNuLEAST8 "hhu"
#define SCNuLEAST16 "hu"
#define SCNuLEAST32 "u"
#define SCNuLEAST64 __PRI64_PREFIX "u"

#define SCNuFAST8 "hhu"
#define SCNuFAST16 __PRIPTR_PREFIX "u"
#define SCNuFAST32 __PRIPTR_PREFIX "u"
#define SCNuFAST64 __PRI64_PREFIX "u"


#define SCNo8 "hho"
#define SCNo16 "ho"
#define SCNo32 "o"
#define SCNo64 __PRI64_PREFIX "o"

#define SCNoLEAST8 "hho"
#define SCNoLEAST16 "ho"
#define SCNoLEAST32 "o"
#define SCNoLEAST64 __PRI64_PREFIX "o"

#define SCNoFAST8 "hho"
#define SCNoFAST16 __PRIPTR_PREFIX "o"
#define SCNoFAST32 __PRIPTR_PREFIX "o"
#define SCNoFAST64 __PRI64_PREFIX "o"


#define SCNx8 "hhx"
#define SCNx16 "hx"
#define SCNx32 "x"
#define SCNx64 __PRI64_PREFIX "x"

#define SCNxLEAST8 "hhx"
#define SCNxLEAST16 "hx"
#define SCNxLEAST32 "x"
#define SCNxLEAST64 __PRI64_PREFIX "x"

#define SCNxFAST8 "hhx"
#define SCNxFAST16 __PRIPTR_PREFIX "x"
#define SCNxFAST32 __PRIPTR_PREFIX "x"
#define SCNxFAST64 __PRI64_PREFIX "x"



#define SCNdMAX __PRI64_PREFIX "d"
#define SCNiMAX __PRI64_PREFIX "i"
#define SCNoMAX __PRI64_PREFIX "o"
#define SCNuMAX __PRI64_PREFIX "u"
#define SCNxMAX __PRI64_PREFIX "x"


#define SCNdPTR __PRIPTR_PREFIX "d"
#define SCNiPTR __PRIPTR_PREFIX "i"
#define SCNoPTR __PRIPTR_PREFIX "o"
#define SCNuPTR __PRIPTR_PREFIX "u"
#define SCNxPTR __PRIPTR_PREFIX "x"




#define SCNb8 "hhb"
#define SCNb16 "hb"
#define SCNb32 "b"
#define SCNb64 __PRI64_PREFIX "b"

#define SCNbLEAST8 "hhb"
#define SCNbLEAST16 "hb"
#define SCNbLEAST32 "b"
#define SCNbLEAST64 __PRI64_PREFIX "b"

#define SCNbFAST8 "hhb"
#define SCNbFAST16 __PRIPTR_PREFIX "b"
#define SCNbFAST32 __PRIPTR_PREFIX "b"
#define SCNbFAST64 __PRI64_PREFIX "b"

#define SCNbMAX __PRI64_PREFIX "b"
#define SCNbPTR __PRIPTR_PREFIX "b"



extern "C" {




typedef struct
  {
    long int quot;
    long int rem;
  } imaxdiv_t;
# 351 "/usr/include/inttypes.h" 3 4
extern intmax_t imaxabs (intmax_t __n) noexcept (true) __attribute__ ((__const__));


extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      noexcept (true) __attribute__ ((__const__));


extern intmax_t strtoimax (const char *__restrict __nptr,
      char **__restrict __endptr, int __base) noexcept (true);


extern uintmax_t strtoumax (const char *__restrict __nptr,
       char ** __restrict __endptr, int __base) noexcept (true);


extern intmax_t wcstoimax (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     noexcept (true);


extern uintmax_t wcstoumax (const wchar_t *__restrict __nptr,
       wchar_t ** __restrict __endptr, int __base)
     noexcept (true);





extern intmax_t strtoimax (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoimax")

                                         ;
extern uintmax_t strtoumax (const char *__restrict __nptr, char **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_strtoumax")

                                          ;
extern intmax_t wcstoimax (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_wcstoimax")


                       ;
extern uintmax_t wcstoumax (const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr, int __base) noexcept (true) __asm__ ("" "__isoc23_wcstoumax")


                        ;
# 415 "/usr/include/inttypes.h" 3 4
}
# 49 "rtapi/rtapi_stdint.h" 2


# 50 "rtapi/rtapi_stdint.h"
typedef int8_t rtapi_s8;
typedef int16_t rtapi_s16;
typedef int32_t rtapi_s32;
typedef int64_t rtapi_s64;
typedef intptr_t rtapi_intptr_t;
typedef uint8_t rtapi_u8;
typedef uint16_t rtapi_u16;
typedef uint32_t rtapi_u32;
typedef uint64_t rtapi_u64;
typedef uintptr_t rtapi_uintptr_t;

#define RTAPI_INT8_MAX INT8_MAX
#define RTAPI_INT8_MIN INT8_MIN
#define RTAPI_UINT8_MAX UINT8_MAX

#define RTAPI_INT16_MAX INT16_MAX
#define RTAPI_INT16_MIN INT16_MIN
#define RTAPI_UINT16_MAX UINT16_MAX

#define RTAPI_INT32_MAX INT32_MAX
#define RTAPI_INT32_MIN INT32_MIN
#define RTAPI_UINT32_MAX UINT32_MAX

#define RTAPI_INT64_MAX INT64_MAX
#define RTAPI_INT64_MIN INT64_MIN
#define RTAPI_UINT64_MAX UINT64_MAX
# 315 "hal/hal.h" 2
typedef volatile bool hal_bit_t;
typedef volatile rtapi_u32 hal_u32_t;
typedef volatile rtapi_s32 hal_s32_t;
typedef volatile int hal_port_t;
typedef double real_t __attribute__((aligned(8)));
typedef rtapi_u64 ireal_t __attribute__((aligned(8)));

#define hal_float_t volatile real_t




typedef union {
    hal_bit_t b;
    hal_s32_t s;
    hal_u32_t u;
    volatile real_t f;
    hal_port_t p;
} hal_data_u;

typedef struct {
    volatile unsigned int read;
    volatile unsigned int write;
    unsigned int size;
    char buff[];
} hal_port_shm_t;
# 351 "hal/hal.h"
extern int hal_set_lock(unsigned char lock_type);
# 360 "hal/hal.h"
extern unsigned char hal_get_lock(void);
# 394 "hal/hal.h"
extern int hal_pin_bit_new(const char *name, hal_pin_dir_t dir,
    hal_bit_t ** data_ptr_addr, int comp_id);
extern int hal_pin_float_new(const char *name, hal_pin_dir_t dir,
    volatile real_t ** data_ptr_addr, int comp_id);
extern int hal_pin_u32_new(const char *name, hal_pin_dir_t dir,
    hal_u32_t ** data_ptr_addr, int comp_id);
extern int hal_pin_s32_new(const char *name, hal_pin_dir_t dir,
    hal_s32_t ** data_ptr_addr, int comp_id);
extern int hal_pin_port_new(const char *name, hal_pin_dir_t dir,
    hal_port_t ** data_ptr_addr, int comp_id);
# 412 "hal/hal.h"
extern int hal_pin_bit_newf(hal_pin_dir_t dir,
    hal_bit_t ** data_ptr_addr, int comp_id, const char *fmt, ...)
 __attribute__((format(printf,4,5)));
extern int hal_pin_float_newf(hal_pin_dir_t dir,
    volatile real_t ** data_ptr_addr, int comp_id, const char *fmt, ...)
 __attribute__((format(printf,4,5)));
extern int hal_pin_u32_newf(hal_pin_dir_t dir,
    hal_u32_t ** data_ptr_addr, int comp_id, const char *fmt, ...)
 __attribute__((format(printf,4,5)));
extern int hal_pin_s32_newf(hal_pin_dir_t dir,
    hal_s32_t ** data_ptr_addr, int comp_id, const char *fmt, ...)
 __attribute__((format(printf,4,5)));
extern int hal_pin_port_newf(hal_pin_dir_t dir,
    hal_port_t** data_ptr_addr, int comp_id, const char *fmt, ...)
 __attribute__((format(printf,4,5)));
# 444 "hal/hal.h"
extern int hal_pin_new(const char *name, hal_type_t type, hal_pin_dir_t dir,
    void **data_ptr_addr, int comp_id);
# 458 "hal/hal.h"
extern int hal_pin_alias(const char *pin_name, const char *alias);
# 482 "hal/hal.h"
extern int hal_signal_new(const char *name, hal_type_t type);







extern int hal_signal_delete(const char *name);
# 503 "hal/hal.h"
extern int hal_link(const char *pin_name, const char *sig_name);






extern int hal_unlink(const char *pin_name);
# 548 "hal/hal.h"
extern int hal_param_bit_new(const char *name, hal_param_dir_t dir,
    hal_bit_t * data_addr, int comp_id);
extern int hal_param_float_new(const char *name, hal_param_dir_t dir,
    volatile real_t * data_addr, int comp_id);
extern int hal_param_u32_new(const char *name, hal_param_dir_t dir,
    hal_u32_t * data_addr, int comp_id);
extern int hal_param_s32_new(const char *name, hal_param_dir_t dir,
    hal_s32_t * data_addr, int comp_id);


extern int hal_param_bit_newf(hal_param_dir_t dir,
    hal_bit_t * data_addr, int comp_id, const char *fmt, ...)
 __attribute__((format(printf,4,5)));
extern int hal_param_float_newf(hal_param_dir_t dir,
    volatile real_t * data_addr, int comp_id, const char *fmt, ...)
 __attribute__((format(printf,4,5)));
extern int hal_param_u32_newf(hal_param_dir_t dir,
    hal_u32_t * data_addr, int comp_id, const char *fmt, ...)
 __attribute__((format(printf,4,5)));
extern int hal_param_s32_newf(hal_param_dir_t dir,
    hal_s32_t * data_addr, int comp_id, const char *fmt, ...)
 __attribute__((format(printf,4,5)));
# 591 "hal/hal.h"
extern int hal_param_new(const char *name, hal_type_t type, hal_param_dir_t dir,
    void *data_addr, int comp_id);
# 608 "hal/hal.h"
extern int hal_param_bit_set(const char *name, int value);
extern int hal_param_float_set(const char *name, double value);
extern int hal_param_u32_set(const char *name, unsigned long value);
extern int hal_param_s32_set(const char *name, signed long value);






extern int hal_param_alias(const char *pin_name, const char *alias);
# 635 "hal/hal.h"
extern int hal_param_set(const char *name, hal_type_t type, void *value_addr);
# 649 "hal/hal.h"
extern int hal_get_pin_value_by_name(
    const char *name, hal_type_t *type, hal_data_u **data, bool *connected);
# 660 "hal/hal.h"
extern int hal_get_signal_value_by_name(
    const char *name, hal_type_t *type, hal_data_u **data, bool *has_writers);
# 670 "hal/hal.h"
extern int hal_get_param_value_by_name(
    const char *name, hal_type_t *type, hal_data_u **data);
# 770 "hal/hal.h"
extern int hal_add_funct_to_thread(const char *funct_name, const char *thread_name,
    int position);
# 782 "hal/hal.h"
extern int hal_del_funct_from_thread(const char *funct_name, const char *thread_name);






extern int hal_start_threads(void);







extern int hal_stop_threads(void);






typedef int(*constructor)(char *prefix, char *arg);



extern int hal_set_constructor(int comp_id, constructor make);
# 832 "hal/hal.h"
extern bool hal_port_read(hal_port_t port, char* dest, unsigned count);
# 842 "hal/hal.h"
extern bool hal_port_peek(hal_port_t port, char* dest, unsigned count);
# 853 "hal/hal.h"
extern bool hal_port_peek_commit(hal_port_t port, unsigned count);
# 863 "hal/hal.h"
extern bool hal_port_write(hal_port_t port, const char* src, unsigned count);




extern unsigned hal_port_readable(hal_port_t port);




extern unsigned hal_port_writable(hal_port_t port);




extern unsigned hal_port_buffer_size(hal_port_t port);





extern void hal_port_clear(hal_port_t port);






extern void hal_port_wait_readable(hal_port_t** port, unsigned count, sig_atomic_t* stop);




extern void hal_port_wait_writable(hal_port_t** port, unsigned count, sig_atomic_t* stop);







union hal_stream_data {
    real_t f;
    bool b;
    int32_t s;
    uint32_t u;
};

typedef struct {
    int comp_id, shmem_id;
    struct hal_stream_shm *fifo;
} hal_stream_t;
# 923 "hal/hal.h"
#define HAL_STREAM_MAX_PINS (21)

extern int hal_stream_create(hal_stream_t *stream, int comp, int key, int depth, const char *typestring);

extern void hal_stream_destroy(hal_stream_t *stream);


extern int hal_stream_attach(hal_stream_t *stream, int comp, int key, const char *typestring);

extern int hal_stream_detach(hal_stream_t *stream);


extern int hal_stream_element_count(hal_stream_t *stream);
extern hal_type_t hal_stream_element_type(hal_stream_t *stream, int idx);


extern int hal_stream_read(hal_stream_t *stream, union hal_stream_data *buf, unsigned *sampleno);
extern bool hal_stream_readable(hal_stream_t *stream);
extern int hal_stream_depth(hal_stream_t *stream);
extern int hal_stream_maxdepth(hal_stream_t *stream);
extern int hal_stream_num_underruns(hal_stream_t *stream);
extern int hal_stream_num_overruns(hal_stream_t *stream);

extern void hal_stream_wait_readable(hal_stream_t *stream, sig_atomic_t *stop);


extern int hal_stream_write(hal_stream_t *stream, union hal_stream_data *buf);
extern bool hal_stream_writable(hal_stream_t *stream);

extern void hal_stream_wait_writable(hal_stream_t *stream, sig_atomic_t *stop);


}
# 25 "emc/sterp/sterp.cc" 2
# 1 "rtapi/rtapi_mutex.h" 1

#define RTAPI_MUTEX_H 
# 29 "rtapi/rtapi_mutex.h"
# 1 "rtapi/rtapi_bitops.h" 1
# 17 "rtapi/rtapi_bitops.h"
#define RTAPI_BITOPS_H 



# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/limits.h" 1 3 4
# 22 "rtapi/rtapi_bitops.h" 2
#define RTAPI_LONG_BIT (CHAR_BIT * sizeof(unsigned long))
static __inline__ void set_bit(int nr, volatile void *addr) {
    size_t loff = nr / (8 
# 24 "rtapi/rtapi_bitops.h"
                      * sizeof(unsigned long));
    size_t boff = nr % (8 
# 25 "rtapi/rtapi_bitops.h"
                      * sizeof(unsigned long));
    unsigned long *laddr = (unsigned long*)addr;
    __sync_fetch_and_or(laddr + loff, 1lu << boff);
}

static __inline__ int test_bit(int nr, const volatile void *addr) {
    size_t loff = nr / (8 
# 31 "rtapi/rtapi_bitops.h"
                      * sizeof(unsigned long));
    size_t boff = nr % (8 
# 32 "rtapi/rtapi_bitops.h"
                      * sizeof(unsigned long));
    unsigned long *laddr = (unsigned long*)addr;
    return (laddr[loff] & (1lu << boff)) != 0;
}

static __inline__ void clear_bit(int nr, volatile void *addr) {
    size_t loff = nr / (8 
# 38 "rtapi/rtapi_bitops.h"
                      * sizeof(unsigned long));
    size_t boff = nr % (8 
# 39 "rtapi/rtapi_bitops.h"
                      * sizeof(unsigned long));
    unsigned long *laddr = (unsigned long*)addr;
    __sync_fetch_and_and(laddr + loff, ~(1lu << boff));
}

static __inline__ long test_and_set_bit(int nr, volatile void *addr) {
    size_t loff = nr / (8 
# 45 "rtapi/rtapi_bitops.h"
                      * sizeof(unsigned long));
    size_t boff = nr % (8 
# 46 "rtapi/rtapi_bitops.h"
                      * sizeof(unsigned long));
    unsigned long *laddr = (unsigned long*)addr;
    unsigned long oldval = __sync_fetch_and_or(laddr + loff, 1lu << boff);
    return (oldval & (1lu << boff)) != 0;
}

static __inline__ long test_and_clear_bit(int nr, volatile void *addr) {
    size_t loff = nr / (8 
# 53 "rtapi/rtapi_bitops.h"
                      * sizeof(unsigned long));
    size_t boff = nr % (8 
# 54 "rtapi/rtapi_bitops.h"
                      * sizeof(unsigned long));
    unsigned long *laddr = (unsigned long*)addr;
    unsigned long oldval = __sync_fetch_and_and(laddr + loff, ~(1lu << boff));
    return (oldval & (1lu << boff)) != 0;
}
# 30 "rtapi/rtapi_mutex.h" 2

typedef unsigned long rtapi_mutex_t;
# 47 "rtapi/rtapi_mutex.h"
    static __inline__ void rtapi_mutex_give(unsigned long *mutex) {
 test_and_clear_bit(0, mutex);
    }
# 59 "rtapi/rtapi_mutex.h"
   static __inline__ int rtapi_mutex_try(unsigned long *mutex) {
 return test_and_set_bit(0, mutex);
    }






    static __inline__ void rtapi_mutex_get(unsigned long *mutex) {
 while (test_and_set_bit(0, mutex)) {



     sched_yield();

 }
    }
# 26 "emc/sterp/sterp.cc" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/bytecode.hpp" 1

#define smv_gpp_bytecode_hpp 

# 1 "/usr/include/c++/15.1.1/cmath" 1 3
# 40 "/usr/include/c++/15.1.1/cmath" 3
#define _GLIBCXX_CMATH 1
# 52 "/usr/include/c++/15.1.1/cmath" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#define _GLIBCXX_INCLUDE_NEXT_C_HEADERS 
# 1 "/usr/include/math.h" 1 3 4
# 24 "/usr/include/math.h" 3 4
#define _MATH_H 1

#define __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION 
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 31 "/usr/include/bits/libc-header-start.h" 3 4
#undef __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION





#undef __GLIBC_USE_LIB_EXT2


#define __GLIBC_USE_LIB_EXT2 1
# 67 "/usr/include/bits/libc-header-start.h" 3 4
#undef __GLIBC_USE_IEC_60559_BFP_EXT

#define __GLIBC_USE_IEC_60559_BFP_EXT 1



#undef __GLIBC_USE_IEC_60559_BFP_EXT_C23

#define __GLIBC_USE_IEC_60559_BFP_EXT_C23 1



#undef __GLIBC_USE_IEC_60559_EXT

#define __GLIBC_USE_IEC_60559_EXT 1
# 90 "/usr/include/bits/libc-header-start.h" 3 4
#undef __GLIBC_USE_IEC_60559_FUNCS_EXT

#define __GLIBC_USE_IEC_60559_FUNCS_EXT 1



#undef __GLIBC_USE_IEC_60559_FUNCS_EXT_C23

#define __GLIBC_USE_IEC_60559_FUNCS_EXT_C23 1






#undef __GLIBC_USE_IEC_60559_TYPES_EXT

#define __GLIBC_USE_IEC_60559_TYPES_EXT 1
# 28 "/usr/include/math.h" 2 3 4






extern "C" {





# 1 "/usr/include/bits/math-vector.h" 1 3 4
# 25 "/usr/include/bits/math-vector.h" 3 4
# 1 "/usr/include/bits/libm-simd-decl-stubs.h" 1 3 4
# 34 "/usr/include/bits/libm-simd-decl-stubs.h" 3 4
#define _BITS_LIBM_SIMD_DECL_STUBS_H 1

#define __DECL_SIMD_cos 
#define __DECL_SIMD_cosf 
#define __DECL_SIMD_cosl 
#define __DECL_SIMD_cosf16 
#define __DECL_SIMD_cosf32 
#define __DECL_SIMD_cosf64 
#define __DECL_SIMD_cosf128 
#define __DECL_SIMD_cosf32x 
#define __DECL_SIMD_cosf64x 
#define __DECL_SIMD_cosf128x 

#define __DECL_SIMD_sin 
#define __DECL_SIMD_sinf 
#define __DECL_SIMD_sinl 
#define __DECL_SIMD_sinf16 
#define __DECL_SIMD_sinf32 
#define __DECL_SIMD_sinf64 
#define __DECL_SIMD_sinf128 
#define __DECL_SIMD_sinf32x 
#define __DECL_SIMD_sinf64x 
#define __DECL_SIMD_sinf128x 

#define __DECL_SIMD_sincos 
#define __DECL_SIMD_sincosf 
#define __DECL_SIMD_sincosl 
#define __DECL_SIMD_sincosf16 
#define __DECL_SIMD_sincosf32 
#define __DECL_SIMD_sincosf64 
#define __DECL_SIMD_sincosf128 
#define __DECL_SIMD_sincosf32x 
#define __DECL_SIMD_sincosf64x 
#define __DECL_SIMD_sincosf128x 

#define __DECL_SIMD_log 
#define __DECL_SIMD_logf 
#define __DECL_SIMD_logl 
#define __DECL_SIMD_logf16 
#define __DECL_SIMD_logf32 
#define __DECL_SIMD_logf64 
#define __DECL_SIMD_logf128 
#define __DECL_SIMD_logf32x 
#define __DECL_SIMD_logf64x 
#define __DECL_SIMD_logf128x 

#define __DECL_SIMD_exp 
#define __DECL_SIMD_expf 
#define __DECL_SIMD_expl 
#define __DECL_SIMD_expf16 
#define __DECL_SIMD_expf32 
#define __DECL_SIMD_expf64 
#define __DECL_SIMD_expf128 
#define __DECL_SIMD_expf32x 
#define __DECL_SIMD_expf64x 
#define __DECL_SIMD_expf128x 

#define __DECL_SIMD_pow 
#define __DECL_SIMD_powf 
#define __DECL_SIMD_powl 
#define __DECL_SIMD_powf16 
#define __DECL_SIMD_powf32 
#define __DECL_SIMD_powf64 
#define __DECL_SIMD_powf128 
#define __DECL_SIMD_powf32x 
#define __DECL_SIMD_powf64x 
#define __DECL_SIMD_powf128x 

#define __DECL_SIMD_acos 
#define __DECL_SIMD_acosf 
#define __DECL_SIMD_acosl 
#define __DECL_SIMD_acosf16 
#define __DECL_SIMD_acosf32 
#define __DECL_SIMD_acosf64 
#define __DECL_SIMD_acosf128 
#define __DECL_SIMD_acosf32x 
#define __DECL_SIMD_acosf64x 
#define __DECL_SIMD_acosf128x 

#define __DECL_SIMD_atan 
#define __DECL_SIMD_atanf 
#define __DECL_SIMD_atanl 
#define __DECL_SIMD_atanf16 
#define __DECL_SIMD_atanf32 
#define __DECL_SIMD_atanf64 
#define __DECL_SIMD_atanf128 
#define __DECL_SIMD_atanf32x 
#define __DECL_SIMD_atanf64x 
#define __DECL_SIMD_atanf128x 

#define __DECL_SIMD_asin 
#define __DECL_SIMD_asinf 
#define __DECL_SIMD_asinl 
#define __DECL_SIMD_asinf16 
#define __DECL_SIMD_asinf32 
#define __DECL_SIMD_asinf64 
#define __DECL_SIMD_asinf128 
#define __DECL_SIMD_asinf32x 
#define __DECL_SIMD_asinf64x 
#define __DECL_SIMD_asinf128x 

#define __DECL_SIMD_hypot 
#define __DECL_SIMD_hypotf 
#define __DECL_SIMD_hypotl 
#define __DECL_SIMD_hypotf16 
#define __DECL_SIMD_hypotf32 
#define __DECL_SIMD_hypotf64 
#define __DECL_SIMD_hypotf128 
#define __DECL_SIMD_hypotf32x 
#define __DECL_SIMD_hypotf64x 
#define __DECL_SIMD_hypotf128x 

#define __DECL_SIMD_exp2 
#define __DECL_SIMD_exp2f 
#define __DECL_SIMD_exp2l 
#define __DECL_SIMD_exp2f16 
#define __DECL_SIMD_exp2f32 
#define __DECL_SIMD_exp2f64 
#define __DECL_SIMD_exp2f128 
#define __DECL_SIMD_exp2f32x 
#define __DECL_SIMD_exp2f64x 
#define __DECL_SIMD_exp2f128x 

#define __DECL_SIMD_exp10 
#define __DECL_SIMD_exp10f 
#define __DECL_SIMD_exp10l 
#define __DECL_SIMD_exp10f16 
#define __DECL_SIMD_exp10f32 
#define __DECL_SIMD_exp10f64 
#define __DECL_SIMD_exp10f128 
#define __DECL_SIMD_exp10f32x 
#define __DECL_SIMD_exp10f64x 
#define __DECL_SIMD_exp10f128x 

#define __DECL_SIMD_cosh 
#define __DECL_SIMD_coshf 
#define __DECL_SIMD_coshl 
#define __DECL_SIMD_coshf16 
#define __DECL_SIMD_coshf32 
#define __DECL_SIMD_coshf64 
#define __DECL_SIMD_coshf128 
#define __DECL_SIMD_coshf32x 
#define __DECL_SIMD_coshf64x 
#define __DECL_SIMD_coshf128x 

#define __DECL_SIMD_expm1 
#define __DECL_SIMD_expm1f 
#define __DECL_SIMD_expm1l 
#define __DECL_SIMD_expm1f16 
#define __DECL_SIMD_expm1f32 
#define __DECL_SIMD_expm1f64 
#define __DECL_SIMD_expm1f128 
#define __DECL_SIMD_expm1f32x 
#define __DECL_SIMD_expm1f64x 
#define __DECL_SIMD_expm1f128x 

#define __DECL_SIMD_sinh 
#define __DECL_SIMD_sinhf 
#define __DECL_SIMD_sinhl 
#define __DECL_SIMD_sinhf16 
#define __DECL_SIMD_sinhf32 
#define __DECL_SIMD_sinhf64 
#define __DECL_SIMD_sinhf128 
#define __DECL_SIMD_sinhf32x 
#define __DECL_SIMD_sinhf64x 
#define __DECL_SIMD_sinhf128x 

#define __DECL_SIMD_cbrt 
#define __DECL_SIMD_cbrtf 
#define __DECL_SIMD_cbrtl 
#define __DECL_SIMD_cbrtf16 
#define __DECL_SIMD_cbrtf32 
#define __DECL_SIMD_cbrtf64 
#define __DECL_SIMD_cbrtf128 
#define __DECL_SIMD_cbrtf32x 
#define __DECL_SIMD_cbrtf64x 
#define __DECL_SIMD_cbrtf128x 

#define __DECL_SIMD_atan2 
#define __DECL_SIMD_atan2f 
#define __DECL_SIMD_atan2l 
#define __DECL_SIMD_atan2f16 
#define __DECL_SIMD_atan2f32 
#define __DECL_SIMD_atan2f64 
#define __DECL_SIMD_atan2f128 
#define __DECL_SIMD_atan2f32x 
#define __DECL_SIMD_atan2f64x 
#define __DECL_SIMD_atan2f128x 

#define __DECL_SIMD_log10 
#define __DECL_SIMD_log10f 
#define __DECL_SIMD_log10l 
#define __DECL_SIMD_log10f16 
#define __DECL_SIMD_log10f32 
#define __DECL_SIMD_log10f64 
#define __DECL_SIMD_log10f128 
#define __DECL_SIMD_log10f32x 
#define __DECL_SIMD_log10f64x 
#define __DECL_SIMD_log10f128x 

#define __DECL_SIMD_log2 
#define __DECL_SIMD_log2f 
#define __DECL_SIMD_log2l 
#define __DECL_SIMD_log2f16 
#define __DECL_SIMD_log2f32 
#define __DECL_SIMD_log2f64 
#define __DECL_SIMD_log2f128 
#define __DECL_SIMD_log2f32x 
#define __DECL_SIMD_log2f64x 
#define __DECL_SIMD_log2f128x 

#define __DECL_SIMD_log1p 
#define __DECL_SIMD_log1pf 
#define __DECL_SIMD_log1pl 
#define __DECL_SIMD_log1pf16 
#define __DECL_SIMD_log1pf32 
#define __DECL_SIMD_log1pf64 
#define __DECL_SIMD_log1pf128 
#define __DECL_SIMD_log1pf32x 
#define __DECL_SIMD_log1pf64x 
#define __DECL_SIMD_log1pf128x 

#define __DECL_SIMD_logp1 
#define __DECL_SIMD_logp1f 
#define __DECL_SIMD_logp1l 
#define __DECL_SIMD_logp1f16 
#define __DECL_SIMD_logp1f32 
#define __DECL_SIMD_logp1f64 
#define __DECL_SIMD_logp1f128 
#define __DECL_SIMD_logp1f32x 
#define __DECL_SIMD_logp1f64x 
#define __DECL_SIMD_logp1f128x 

#define __DECL_SIMD_atanh 
#define __DECL_SIMD_atanhf 
#define __DECL_SIMD_atanhl 
#define __DECL_SIMD_atanhf16 
#define __DECL_SIMD_atanhf32 
#define __DECL_SIMD_atanhf64 
#define __DECL_SIMD_atanhf128 
#define __DECL_SIMD_atanhf32x 
#define __DECL_SIMD_atanhf64x 
#define __DECL_SIMD_atanhf128x 

#define __DECL_SIMD_acosh 
#define __DECL_SIMD_acoshf 
#define __DECL_SIMD_acoshl 
#define __DECL_SIMD_acoshf16 
#define __DECL_SIMD_acoshf32 
#define __DECL_SIMD_acoshf64 
#define __DECL_SIMD_acoshf128 
#define __DECL_SIMD_acoshf32x 
#define __DECL_SIMD_acoshf64x 
#define __DECL_SIMD_acoshf128x 

#define __DECL_SIMD_erf 
#define __DECL_SIMD_erff 
#define __DECL_SIMD_erfl 
#define __DECL_SIMD_erff16 
#define __DECL_SIMD_erff32 
#define __DECL_SIMD_erff64 
#define __DECL_SIMD_erff128 
#define __DECL_SIMD_erff32x 
#define __DECL_SIMD_erff64x 
#define __DECL_SIMD_erff128x 

#define __DECL_SIMD_tanh 
#define __DECL_SIMD_tanhf 
#define __DECL_SIMD_tanhl 
#define __DECL_SIMD_tanhf16 
#define __DECL_SIMD_tanhf32 
#define __DECL_SIMD_tanhf64 
#define __DECL_SIMD_tanhf128 
#define __DECL_SIMD_tanhf32x 
#define __DECL_SIMD_tanhf64x 
#define __DECL_SIMD_tanhf128x 

#define __DECL_SIMD_asinh 
#define __DECL_SIMD_asinhf 
#define __DECL_SIMD_asinhl 
#define __DECL_SIMD_asinhf16 
#define __DECL_SIMD_asinhf32 
#define __DECL_SIMD_asinhf64 
#define __DECL_SIMD_asinhf128 
#define __DECL_SIMD_asinhf32x 
#define __DECL_SIMD_asinhf64x 
#define __DECL_SIMD_asinhf128x 

#define __DECL_SIMD_erfc 
#define __DECL_SIMD_erfcf 
#define __DECL_SIMD_erfcl 
#define __DECL_SIMD_erfcf16 
#define __DECL_SIMD_erfcf32 
#define __DECL_SIMD_erfcf64 
#define __DECL_SIMD_erfcf128 
#define __DECL_SIMD_erfcf32x 
#define __DECL_SIMD_erfcf64x 
#define __DECL_SIMD_erfcf128x 

#define __DECL_SIMD_tan 
#define __DECL_SIMD_tanf 
#define __DECL_SIMD_tanl 
#define __DECL_SIMD_tanf16 
#define __DECL_SIMD_tanf32 
#define __DECL_SIMD_tanf64 
#define __DECL_SIMD_tanf128 
#define __DECL_SIMD_tanf32x 
#define __DECL_SIMD_tanf64x 
#define __DECL_SIMD_tanf128x 

#define __DECL_SIMD_sinpi 
#define __DECL_SIMD_sinpif 
#define __DECL_SIMD_sinpil 
#define __DECL_SIMD_sinpif16 
#define __DECL_SIMD_sinpif32 
#define __DECL_SIMD_sinpif64 
#define __DECL_SIMD_sinpif128 
#define __DECL_SIMD_sinpif32x 
#define __DECL_SIMD_sinpif64x 
#define __DECL_SIMD_sinpif128x 

#define __DECL_SIMD_cospi 
#define __DECL_SIMD_cospif 
#define __DECL_SIMD_cospil 
#define __DECL_SIMD_cospif16 
#define __DECL_SIMD_cospif32 
#define __DECL_SIMD_cospif64 
#define __DECL_SIMD_cospif128 
#define __DECL_SIMD_cospif32x 
#define __DECL_SIMD_cospif64x 
#define __DECL_SIMD_cospif128x 

#define __DECL_SIMD_tanpi 
#define __DECL_SIMD_tanpif 
#define __DECL_SIMD_tanpil 
#define __DECL_SIMD_tanpif16 
#define __DECL_SIMD_tanpif32 
#define __DECL_SIMD_tanpif64 
#define __DECL_SIMD_tanpif128 
#define __DECL_SIMD_tanpif32x 
#define __DECL_SIMD_tanpif64x 
#define __DECL_SIMD_tanpif128x 
# 26 "/usr/include/bits/math-vector.h" 2 3 4
# 41 "/usr/include/math.h" 2 3 4







#define HUGE_VAL (__builtin_huge_val ())
# 59 "/usr/include/math.h" 3 4
#define HUGE_VALF (__builtin_huge_valf ())
#define HUGE_VALL (__builtin_huge_vall ())
# 70 "/usr/include/math.h" 3 4
#define HUGE_VAL_F32 (__builtin_huge_valf32 ())


#define HUGE_VAL_F64 (__builtin_huge_valf64 ())


#define HUGE_VAL_F128 (__builtin_huge_valf128 ())


#define HUGE_VAL_F32X (__builtin_huge_valf32x ())


#define HUGE_VAL_F64X (__builtin_huge_valf64x ())
# 92 "/usr/include/math.h" 3 4
#define INFINITY (__builtin_inff ())
# 101 "/usr/include/math.h" 3 4
#define NAN (__builtin_nanf (""))
# 114 "/usr/include/math.h" 3 4
#define SNANF (__builtin_nansf (""))
#define SNAN (__builtin_nans (""))
#define SNANL (__builtin_nansl (""))
# 127 "/usr/include/math.h" 3 4
#define SNANF32 (__builtin_nansf32 (""))




#define SNANF64 (__builtin_nansf64 (""))




#define SNANF128 (__builtin_nansf128 (""))




#define SNANF32X (__builtin_nansf32x (""))




#define SNANF64X (__builtin_nansf64x (""))
# 156 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/flt-eval-method.h" 1 3 4
# 27 "/usr/include/bits/flt-eval-method.h" 3 4
#define __GLIBC_FLT_EVAL_METHOD __FLT_EVAL_METHOD__
# 157 "/usr/include/math.h" 2 3 4
# 167 "/usr/include/math.h" 3 4
typedef float float_t;
typedef double double_t;
# 208 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/fp-logb.h" 1 3 4
# 23 "/usr/include/bits/fp-logb.h" 3 4
#define __FP_LOGB0_IS_MIN 1
#define __FP_LOGBNAN_IS_MIN 1
# 209 "/usr/include/math.h" 2 3 4


#define FP_ILOGB0 (-2147483647 - 1)




#define FP_ILOGBNAN (-2147483647 - 1)
# 225 "/usr/include/math.h" 3 4
#define __FP_LONG_MAX 0x7fffffffffffffffL


#define FP_LLOGB0 (-__FP_LONG_MAX - 1)




#define FP_LLOGBNAN (-__FP_LONG_MAX - 1)
# 251 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/fp-fast.h" 1 3 4
# 252 "/usr/include/math.h" 2 3 4



enum
  {
    FP_INT_UPWARD =
#define FP_INT_UPWARD 0
      0,
    FP_INT_DOWNWARD =
#define FP_INT_DOWNWARD 1
      1,
    FP_INT_TOWARDZERO =
#define FP_INT_TOWARDZERO 2
      2,
    FP_INT_TONEARESTFROMZERO =
#define FP_INT_TONEARESTFROMZERO 3
      3,
    FP_INT_TONEAREST =
#define FP_INT_TONEAREST 4
      4,
  };


# 1 "/usr/include/bits/mathcalls-macros.h" 1 3 4
# 19 "/usr/include/bits/mathcalls-macros.h" 3 4
#define __SIMD_DECL(function) __CONCAT (__DECL_SIMD_, function)

#define __MATHCALL_VEC(function,suffix,args) __SIMD_DECL (__MATH_PRECNAME (function, suffix)) __MATHCALL (function, suffix, args)



#define __MATHDECL_VEC(type,function,suffix,args) __SIMD_DECL (__MATH_PRECNAME (function, suffix)) __MATHDECL(type, function,suffix, args)



#define __MATHCALL(function,suffix,args) __MATHDECL (_Mdouble_,function,suffix, args)

#define __MATHDECL(type,function,suffix,args) __MATHDECL_1(type, function,suffix, args); __MATHDECL_1(type, __CONCAT(__,function),suffix, args)


#define __MATHCALLX(function,suffix,args,attrib) __MATHDECLX (_Mdouble_,function,suffix, args, attrib)

#define __MATHDECLX(type,function,suffix,args,attrib) __MATHDECL_1(type, function,suffix, args) __attribute__ (attrib)

#define __MATHDECL_1_IMPL(type,function,suffix,args) extern type __MATH_PRECNAME(function,suffix) args __THROW

#define __MATHDECL_1(type,function,suffix,args) __MATHDECL_1_IMPL(type, function, suffix, args)



#define __MATHDECL_ALIAS(type,function,suffix,args,alias) __MATHDECL_1(type, function, suffix, args)


#define __MATHREDIR(type,function,suffix,args,to) extern type __REDIRECT_NTH (__MATH_PRECNAME (function, suffix), args, to)
# 276 "/usr/include/math.h" 2 3 4

#define _Mdouble_ double
#define __MATH_PRECNAME(name,r) __CONCAT(name,r)
#define __MATH_DECLARING_DOUBLE 1
#define __MATH_DECLARING_FLOATN 0
# 1 "/usr/include/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassify (double __value) noexcept (true)
     __attribute__ ((__const__));


extern int __signbit (double __value) noexcept (true)
     __attribute__ ((__const__));



extern int __isinf (double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __finite (double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __isnan (double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __iseqsig (double __x, double __y) noexcept (true);


extern int __issignaling (double __value) noexcept (true)
     __attribute__ ((__const__));
# 282 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
 extern double acos (double __x) noexcept (true); extern double __acos (double __x) noexcept (true);

 extern double asin (double __x) noexcept (true); extern double __asin (double __x) noexcept (true);

 extern double atan (double __x) noexcept (true); extern double __atan (double __x) noexcept (true);

 extern double atan2 (double __y, double __x) noexcept (true); extern double __atan2 (double __y, double __x) noexcept (true);


 extern double cos (double __x) noexcept (true); extern double __cos (double __x) noexcept (true);

 extern double sin (double __x) noexcept (true); extern double __sin (double __x) noexcept (true);

 extern double tan (double __x) noexcept (true); extern double __tan (double __x) noexcept (true);



extern double acospi (double __x) noexcept (true); extern double __acospi (double __x) noexcept (true);

extern double asinpi (double __x) noexcept (true); extern double __asinpi (double __x) noexcept (true);

extern double atanpi (double __x) noexcept (true); extern double __atanpi (double __x) noexcept (true);

extern double atan2pi (double __y, double __x) noexcept (true); extern double __atan2pi (double __y, double __x) noexcept (true);


 extern double cospi (double __x) noexcept (true); extern double __cospi (double __x) noexcept (true);

 extern double sinpi (double __x) noexcept (true); extern double __sinpi (double __x) noexcept (true);

 extern double tanpi (double __x) noexcept (true); extern double __tanpi (double __x) noexcept (true);





 extern double cosh (double __x) noexcept (true); extern double __cosh (double __x) noexcept (true);

 extern double sinh (double __x) noexcept (true); extern double __sinh (double __x) noexcept (true);

 extern double tanh (double __x) noexcept (true); extern double __tanh (double __x) noexcept (true);



 extern void sincos (double __x, double *__sinx, double *__cosx) noexcept (true); extern void __sincos (double __x, double *__sinx, double *__cosx) noexcept (true)
                                                        ;




 extern double acosh (double __x) noexcept (true); extern double __acosh (double __x) noexcept (true);

 extern double asinh (double __x) noexcept (true); extern double __asinh (double __x) noexcept (true);

 extern double atanh (double __x) noexcept (true); extern double __atanh (double __x) noexcept (true);





 extern double exp (double __x) noexcept (true); extern double __exp (double __x) noexcept (true);


extern double frexp (double __x, int *__exponent) noexcept (true); extern double __frexp (double __x, int *__exponent) noexcept (true);


extern double ldexp (double __x, int __exponent) noexcept (true); extern double __ldexp (double __x, int __exponent) noexcept (true);


 extern double log (double __x) noexcept (true); extern double __log (double __x) noexcept (true);


 extern double log10 (double __x) noexcept (true); extern double __log10 (double __x) noexcept (true);


extern double modf (double __x, double *__iptr) noexcept (true); extern double __modf (double __x, double *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern double exp10 (double __x) noexcept (true); extern double __exp10 (double __x) noexcept (true);


extern double exp2m1 (double __x) noexcept (true); extern double __exp2m1 (double __x) noexcept (true);


extern double exp10m1 (double __x) noexcept (true); extern double __exp10m1 (double __x) noexcept (true);


extern double log2p1 (double __x) noexcept (true); extern double __log2p1 (double __x) noexcept (true);


extern double log10p1 (double __x) noexcept (true); extern double __log10p1 (double __x) noexcept (true);


 extern double logp1 (double __x) noexcept (true); extern double __logp1 (double __x) noexcept (true);




 extern double expm1 (double __x) noexcept (true); extern double __expm1 (double __x) noexcept (true);


 extern double log1p (double __x) noexcept (true); extern double __log1p (double __x) noexcept (true);


extern double logb (double __x) noexcept (true); extern double __logb (double __x) noexcept (true);




 extern double exp2 (double __x) noexcept (true); extern double __exp2 (double __x) noexcept (true);


 extern double log2 (double __x) noexcept (true); extern double __log2 (double __x) noexcept (true);






 extern double pow (double __x, double __y) noexcept (true); extern double __pow (double __x, double __y) noexcept (true);


extern double sqrt (double __x) noexcept (true); extern double __sqrt (double __x) noexcept (true);



 extern double hypot (double __x, double __y) noexcept (true); extern double __hypot (double __x, double __y) noexcept (true);




 extern double cbrt (double __x) noexcept (true); extern double __cbrt (double __x) noexcept (true);






extern double ceil (double __x) noexcept (true) __attribute__ ((__const__));


extern double fabs (double __x) noexcept (true) __attribute__ ((__const__));


extern double floor (double __x) noexcept (true) __attribute__ ((__const__));


extern double fmod (double __x, double __y) noexcept (true); extern double __fmod (double __x, double __y) noexcept (true);
# 216 "/usr/include/bits/mathcalls.h" 3 4
extern int finite (double __value) noexcept (true)
  __attribute__ ((__const__));


extern double drem (double __x, double __y) noexcept (true); extern double __drem (double __x, double __y) noexcept (true);



extern double significand (double __x) noexcept (true); extern double __significand (double __x) noexcept (true);






extern double copysign (double __x, double __y) noexcept (true) __attribute__ ((__const__));




extern double nan (const char *__tagb) noexcept (true); extern double __nan (const char *__tagb) noexcept (true);
# 253 "/usr/include/bits/mathcalls.h" 3 4
extern double j0 (double) noexcept (true); extern double __j0 (double) noexcept (true);
extern double j1 (double) noexcept (true); extern double __j1 (double) noexcept (true);
extern double jn (int, double) noexcept (true); extern double __jn (int, double) noexcept (true);
extern double y0 (double) noexcept (true); extern double __y0 (double) noexcept (true);
extern double y1 (double) noexcept (true); extern double __y1 (double) noexcept (true);
extern double yn (int, double) noexcept (true); extern double __yn (int, double) noexcept (true);





 extern double erf (double) noexcept (true); extern double __erf (double) noexcept (true);
 extern double erfc (double) noexcept (true); extern double __erfc (double) noexcept (true);
extern double lgamma (double) noexcept (true); extern double __lgamma (double) noexcept (true);




extern double tgamma (double) noexcept (true); extern double __tgamma (double) noexcept (true);





extern double gamma (double) noexcept (true); extern double __gamma (double) noexcept (true);







extern double lgamma_r (double, int *__signgamp) noexcept (true); extern double __lgamma_r (double, int *__signgamp) noexcept (true);






extern double rint (double __x) noexcept (true); extern double __rint (double __x) noexcept (true);


extern double nextafter (double __x, double __y) noexcept (true); extern double __nextafter (double __x, double __y) noexcept (true);

extern double nexttoward (double __x, long double __y) noexcept (true); extern double __nexttoward (double __x, long double __y) noexcept (true);




extern double nextdown (double __x) noexcept (true); extern double __nextdown (double __x) noexcept (true);

extern double nextup (double __x) noexcept (true); extern double __nextup (double __x) noexcept (true);



extern double remainder (double __x, double __y) noexcept (true); extern double __remainder (double __x, double __y) noexcept (true);



extern double scalbn (double __x, int __n) noexcept (true); extern double __scalbn (double __x, int __n) noexcept (true);



extern int ilogb (double __x) noexcept (true); extern int __ilogb (double __x) noexcept (true);




extern long int llogb (double __x) noexcept (true); extern long int __llogb (double __x) noexcept (true);




extern double scalbln (double __x, long int __n) noexcept (true); extern double __scalbln (double __x, long int __n) noexcept (true);



extern double nearbyint (double __x) noexcept (true); extern double __nearbyint (double __x) noexcept (true);



extern double round (double __x) noexcept (true) __attribute__ ((__const__));



extern double trunc (double __x) noexcept (true) __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) noexcept (true); extern double __remquo (double __x, double __y, int *__quo) noexcept (true);






extern long int lrint (double __x) noexcept (true); extern long int __lrint (double __x) noexcept (true);
__extension__
extern long long int llrint (double __x) noexcept (true); extern long long int __llrint (double __x) noexcept (true);



extern long int lround (double __x) noexcept (true); extern long int __lround (double __x) noexcept (true);
__extension__
extern long long int llround (double __x) noexcept (true); extern long long int __llround (double __x) noexcept (true);



extern double fdim (double __x, double __y) noexcept (true); extern double __fdim (double __x, double __y) noexcept (true);



extern double fmax (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fmin (double __x, double __y) noexcept (true) __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) noexcept (true); extern double __fma (double __x, double __y, double __z) noexcept (true);




extern double roundeven (double __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfp (double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfp (double __x, int __round, unsigned int __width) noexcept (true)
                            ;



extern __uintmax_t ufromfp (double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfp (double __x, int __round, unsigned int __width) noexcept (true)
                              ;




extern __intmax_t fromfpx (double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpx (double __x, int __round, unsigned int __width) noexcept (true)
                             ;




extern __uintmax_t ufromfpx (double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpx (double __x, int __round, unsigned int __width) noexcept (true)
                               ;


extern int canonicalize (double *__cx, const double *__x) noexcept (true);






extern double fmaxmag (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminmag (double __x, double __y) noexcept (true) __attribute__ ((__const__));




extern double fmaximum (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminimum (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fmaximum_num (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminimum_num (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fmaximum_mag (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminimum_mag (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fmaximum_mag_num (double __x, double __y) noexcept (true) __attribute__ ((__const__));


extern double fminimum_mag_num (double __x, double __y) noexcept (true) __attribute__ ((__const__));




extern int totalorder (const double *__x, const double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermag (const double *__x, const double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern double getpayload (const double *__x) noexcept (true); extern double __getpayload (const double *__x) noexcept (true);


extern int setpayload (double *__x, double __payload) noexcept (true);


extern int setpayloadsig (double *__x, double __payload) noexcept (true);







extern double scalb (double __x, double __n) noexcept (true); extern double __scalb (double __x, double __n) noexcept (true);
# 283 "/usr/include/math.h" 2 3 4
#undef _Mdouble_
#undef __MATH_PRECNAME
#undef __MATH_DECLARING_DOUBLE
#undef __MATH_DECLARING_FLOATN







#define _Mdouble_ float
#define __MATH_PRECNAME(name,r) name ##f ##r
#define __MATH_DECLARING_DOUBLE 0
#define __MATH_DECLARING_FLOATN 0
# 1 "/usr/include/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf (float __value) noexcept (true)
     __attribute__ ((__const__));


extern int __signbitf (float __value) noexcept (true)
     __attribute__ ((__const__));



extern int __isinff (float __value) noexcept (true)
  __attribute__ ((__const__));


extern int __finitef (float __value) noexcept (true)
  __attribute__ ((__const__));


extern int __isnanf (float __value) noexcept (true)
  __attribute__ ((__const__));


extern int __iseqsigf (float __x, float __y) noexcept (true);


extern int __issignalingf (float __value) noexcept (true)
     __attribute__ ((__const__));
# 299 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
 extern float acosf (float __x) noexcept (true); extern float __acosf (float __x) noexcept (true);

 extern float asinf (float __x) noexcept (true); extern float __asinf (float __x) noexcept (true);

 extern float atanf (float __x) noexcept (true); extern float __atanf (float __x) noexcept (true);

 extern float atan2f (float __y, float __x) noexcept (true); extern float __atan2f (float __y, float __x) noexcept (true);


 extern float cosf (float __x) noexcept (true); extern float __cosf (float __x) noexcept (true);

 extern float sinf (float __x) noexcept (true); extern float __sinf (float __x) noexcept (true);

 extern float tanf (float __x) noexcept (true); extern float __tanf (float __x) noexcept (true);



extern float acospif (float __x) noexcept (true); extern float __acospif (float __x) noexcept (true);

extern float asinpif (float __x) noexcept (true); extern float __asinpif (float __x) noexcept (true);

extern float atanpif (float __x) noexcept (true); extern float __atanpif (float __x) noexcept (true);

extern float atan2pif (float __y, float __x) noexcept (true); extern float __atan2pif (float __y, float __x) noexcept (true);


 extern float cospif (float __x) noexcept (true); extern float __cospif (float __x) noexcept (true);

 extern float sinpif (float __x) noexcept (true); extern float __sinpif (float __x) noexcept (true);

 extern float tanpif (float __x) noexcept (true); extern float __tanpif (float __x) noexcept (true);





 extern float coshf (float __x) noexcept (true); extern float __coshf (float __x) noexcept (true);

 extern float sinhf (float __x) noexcept (true); extern float __sinhf (float __x) noexcept (true);

 extern float tanhf (float __x) noexcept (true); extern float __tanhf (float __x) noexcept (true);



 extern void sincosf (float __x, float *__sinx, float *__cosx) noexcept (true); extern void __sincosf (float __x, float *__sinx, float *__cosx) noexcept (true)
                                                        ;




 extern float acoshf (float __x) noexcept (true); extern float __acoshf (float __x) noexcept (true);

 extern float asinhf (float __x) noexcept (true); extern float __asinhf (float __x) noexcept (true);

 extern float atanhf (float __x) noexcept (true); extern float __atanhf (float __x) noexcept (true);





 extern float expf (float __x) noexcept (true); extern float __expf (float __x) noexcept (true);


extern float frexpf (float __x, int *__exponent) noexcept (true); extern float __frexpf (float __x, int *__exponent) noexcept (true);


extern float ldexpf (float __x, int __exponent) noexcept (true); extern float __ldexpf (float __x, int __exponent) noexcept (true);


 extern float logf (float __x) noexcept (true); extern float __logf (float __x) noexcept (true);


 extern float log10f (float __x) noexcept (true); extern float __log10f (float __x) noexcept (true);


extern float modff (float __x, float *__iptr) noexcept (true); extern float __modff (float __x, float *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern float exp10f (float __x) noexcept (true); extern float __exp10f (float __x) noexcept (true);


extern float exp2m1f (float __x) noexcept (true); extern float __exp2m1f (float __x) noexcept (true);


extern float exp10m1f (float __x) noexcept (true); extern float __exp10m1f (float __x) noexcept (true);


extern float log2p1f (float __x) noexcept (true); extern float __log2p1f (float __x) noexcept (true);


extern float log10p1f (float __x) noexcept (true); extern float __log10p1f (float __x) noexcept (true);


 extern float logp1f (float __x) noexcept (true); extern float __logp1f (float __x) noexcept (true);




 extern float expm1f (float __x) noexcept (true); extern float __expm1f (float __x) noexcept (true);


 extern float log1pf (float __x) noexcept (true); extern float __log1pf (float __x) noexcept (true);


extern float logbf (float __x) noexcept (true); extern float __logbf (float __x) noexcept (true);




 extern float exp2f (float __x) noexcept (true); extern float __exp2f (float __x) noexcept (true);


 extern float log2f (float __x) noexcept (true); extern float __log2f (float __x) noexcept (true);






 extern float powf (float __x, float __y) noexcept (true); extern float __powf (float __x, float __y) noexcept (true);


extern float sqrtf (float __x) noexcept (true); extern float __sqrtf (float __x) noexcept (true);



 extern float hypotf (float __x, float __y) noexcept (true); extern float __hypotf (float __x, float __y) noexcept (true);




 extern float cbrtf (float __x) noexcept (true); extern float __cbrtf (float __x) noexcept (true);






extern float ceilf (float __x) noexcept (true) __attribute__ ((__const__));


extern float fabsf (float __x) noexcept (true) __attribute__ ((__const__));


extern float floorf (float __x) noexcept (true) __attribute__ ((__const__));


extern float fmodf (float __x, float __y) noexcept (true); extern float __fmodf (float __x, float __y) noexcept (true);
# 210 "/usr/include/bits/mathcalls.h" 3 4
extern int isinff (float __value) noexcept (true)
  __attribute__ ((__const__));




extern int finitef (float __value) noexcept (true)
  __attribute__ ((__const__));


extern float dremf (float __x, float __y) noexcept (true); extern float __dremf (float __x, float __y) noexcept (true);



extern float significandf (float __x) noexcept (true); extern float __significandf (float __x) noexcept (true);






extern float copysignf (float __x, float __y) noexcept (true) __attribute__ ((__const__));




extern float nanf (const char *__tagb) noexcept (true); extern float __nanf (const char *__tagb) noexcept (true);
# 246 "/usr/include/bits/mathcalls.h" 3 4
extern int isnanf (float __value) noexcept (true)
  __attribute__ ((__const__));





extern float j0f (float) noexcept (true); extern float __j0f (float) noexcept (true);
extern float j1f (float) noexcept (true); extern float __j1f (float) noexcept (true);
extern float jnf (int, float) noexcept (true); extern float __jnf (int, float) noexcept (true);
extern float y0f (float) noexcept (true); extern float __y0f (float) noexcept (true);
extern float y1f (float) noexcept (true); extern float __y1f (float) noexcept (true);
extern float ynf (int, float) noexcept (true); extern float __ynf (int, float) noexcept (true);





 extern float erff (float) noexcept (true); extern float __erff (float) noexcept (true);
 extern float erfcf (float) noexcept (true); extern float __erfcf (float) noexcept (true);
extern float lgammaf (float) noexcept (true); extern float __lgammaf (float) noexcept (true);




extern float tgammaf (float) noexcept (true); extern float __tgammaf (float) noexcept (true);





extern float gammaf (float) noexcept (true); extern float __gammaf (float) noexcept (true);







extern float lgammaf_r (float, int *__signgamp) noexcept (true); extern float __lgammaf_r (float, int *__signgamp) noexcept (true);






extern float rintf (float __x) noexcept (true); extern float __rintf (float __x) noexcept (true);


extern float nextafterf (float __x, float __y) noexcept (true); extern float __nextafterf (float __x, float __y) noexcept (true);

extern float nexttowardf (float __x, long double __y) noexcept (true); extern float __nexttowardf (float __x, long double __y) noexcept (true);




extern float nextdownf (float __x) noexcept (true); extern float __nextdownf (float __x) noexcept (true);

extern float nextupf (float __x) noexcept (true); extern float __nextupf (float __x) noexcept (true);



extern float remainderf (float __x, float __y) noexcept (true); extern float __remainderf (float __x, float __y) noexcept (true);



extern float scalbnf (float __x, int __n) noexcept (true); extern float __scalbnf (float __x, int __n) noexcept (true);



extern int ilogbf (float __x) noexcept (true); extern int __ilogbf (float __x) noexcept (true);




extern long int llogbf (float __x) noexcept (true); extern long int __llogbf (float __x) noexcept (true);




extern float scalblnf (float __x, long int __n) noexcept (true); extern float __scalblnf (float __x, long int __n) noexcept (true);



extern float nearbyintf (float __x) noexcept (true); extern float __nearbyintf (float __x) noexcept (true);



extern float roundf (float __x) noexcept (true) __attribute__ ((__const__));



extern float truncf (float __x) noexcept (true) __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) noexcept (true); extern float __remquof (float __x, float __y, int *__quo) noexcept (true);






extern long int lrintf (float __x) noexcept (true); extern long int __lrintf (float __x) noexcept (true);
__extension__
extern long long int llrintf (float __x) noexcept (true); extern long long int __llrintf (float __x) noexcept (true);



extern long int lroundf (float __x) noexcept (true); extern long int __lroundf (float __x) noexcept (true);
__extension__
extern long long int llroundf (float __x) noexcept (true); extern long long int __llroundf (float __x) noexcept (true);



extern float fdimf (float __x, float __y) noexcept (true); extern float __fdimf (float __x, float __y) noexcept (true);



extern float fmaxf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminf (float __x, float __y) noexcept (true) __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) noexcept (true); extern float __fmaf (float __x, float __y, float __z) noexcept (true);




extern float roundevenf (float __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf (float __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf (float __x, int __round, unsigned int __width) noexcept (true)
                            ;



extern __uintmax_t ufromfpf (float __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf (float __x, int __round, unsigned int __width) noexcept (true)
                              ;




extern __intmax_t fromfpxf (float __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf (float __x, int __round, unsigned int __width) noexcept (true)
                             ;




extern __uintmax_t ufromfpxf (float __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf (float __x, int __round, unsigned int __width) noexcept (true)
                               ;


extern int canonicalizef (float *__cx, const float *__x) noexcept (true);






extern float fmaxmagf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminmagf (float __x, float __y) noexcept (true) __attribute__ ((__const__));




extern float fmaximumf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminimumf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fmaximum_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminimum_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fmaximum_magf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminimum_magf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fmaximum_mag_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__));


extern float fminimum_mag_numf (float __x, float __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf (const float *__x, const float *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf (const float *__x, const float *__y) noexcept (true)

     __attribute__ ((__pure__));


extern float getpayloadf (const float *__x) noexcept (true); extern float __getpayloadf (const float *__x) noexcept (true);


extern int setpayloadf (float *__x, float __payload) noexcept (true);


extern int setpayloadsigf (float *__x, float __payload) noexcept (true);







extern float scalbf (float __x, float __n) noexcept (true); extern float __scalbf (float __x, float __n) noexcept (true);
# 300 "/usr/include/math.h" 2 3 4
#undef _Mdouble_
#undef __MATH_PRECNAME
#undef __MATH_DECLARING_DOUBLE
#undef __MATH_DECLARING_FLOATN
# 362 "/usr/include/math.h" 3 4
#define _Mdouble_ long double
#define __MATH_PRECNAME(name,r) name ##l ##r
#define __MATH_DECLARING_DOUBLE 0
#define __MATH_DECLARING_FLOATN 0
#define __MATH_DECLARE_LDOUBLE 1
# 1 "/usr/include/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyl (long double __value) noexcept (true)
     __attribute__ ((__const__));


extern int __signbitl (long double __value) noexcept (true)
     __attribute__ ((__const__));



extern int __isinfl (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __finitel (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __isnanl (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern int __iseqsigl (long double __x, long double __y) noexcept (true);


extern int __issignalingl (long double __value) noexcept (true)
     __attribute__ ((__const__));
# 368 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
 extern long double acosl (long double __x) noexcept (true); extern long double __acosl (long double __x) noexcept (true);

 extern long double asinl (long double __x) noexcept (true); extern long double __asinl (long double __x) noexcept (true);

 extern long double atanl (long double __x) noexcept (true); extern long double __atanl (long double __x) noexcept (true);

 extern long double atan2l (long double __y, long double __x) noexcept (true); extern long double __atan2l (long double __y, long double __x) noexcept (true);


 extern long double cosl (long double __x) noexcept (true); extern long double __cosl (long double __x) noexcept (true);

 extern long double sinl (long double __x) noexcept (true); extern long double __sinl (long double __x) noexcept (true);

 extern long double tanl (long double __x) noexcept (true); extern long double __tanl (long double __x) noexcept (true);



extern long double acospil (long double __x) noexcept (true); extern long double __acospil (long double __x) noexcept (true);

extern long double asinpil (long double __x) noexcept (true); extern long double __asinpil (long double __x) noexcept (true);

extern long double atanpil (long double __x) noexcept (true); extern long double __atanpil (long double __x) noexcept (true);

extern long double atan2pil (long double __y, long double __x) noexcept (true); extern long double __atan2pil (long double __y, long double __x) noexcept (true);


 extern long double cospil (long double __x) noexcept (true); extern long double __cospil (long double __x) noexcept (true);

 extern long double sinpil (long double __x) noexcept (true); extern long double __sinpil (long double __x) noexcept (true);

 extern long double tanpil (long double __x) noexcept (true); extern long double __tanpil (long double __x) noexcept (true);





 extern long double coshl (long double __x) noexcept (true); extern long double __coshl (long double __x) noexcept (true);

 extern long double sinhl (long double __x) noexcept (true); extern long double __sinhl (long double __x) noexcept (true);

 extern long double tanhl (long double __x) noexcept (true); extern long double __tanhl (long double __x) noexcept (true);



 extern void sincosl (long double __x, long double *__sinx, long double *__cosx) noexcept (true); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) noexcept (true)
                                                        ;




 extern long double acoshl (long double __x) noexcept (true); extern long double __acoshl (long double __x) noexcept (true);

 extern long double asinhl (long double __x) noexcept (true); extern long double __asinhl (long double __x) noexcept (true);

 extern long double atanhl (long double __x) noexcept (true); extern long double __atanhl (long double __x) noexcept (true);





 extern long double expl (long double __x) noexcept (true); extern long double __expl (long double __x) noexcept (true);


extern long double frexpl (long double __x, int *__exponent) noexcept (true); extern long double __frexpl (long double __x, int *__exponent) noexcept (true);


extern long double ldexpl (long double __x, int __exponent) noexcept (true); extern long double __ldexpl (long double __x, int __exponent) noexcept (true);


 extern long double logl (long double __x) noexcept (true); extern long double __logl (long double __x) noexcept (true);


 extern long double log10l (long double __x) noexcept (true); extern long double __log10l (long double __x) noexcept (true);


extern long double modfl (long double __x, long double *__iptr) noexcept (true); extern long double __modfl (long double __x, long double *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern long double exp10l (long double __x) noexcept (true); extern long double __exp10l (long double __x) noexcept (true);


extern long double exp2m1l (long double __x) noexcept (true); extern long double __exp2m1l (long double __x) noexcept (true);


extern long double exp10m1l (long double __x) noexcept (true); extern long double __exp10m1l (long double __x) noexcept (true);


extern long double log2p1l (long double __x) noexcept (true); extern long double __log2p1l (long double __x) noexcept (true);


extern long double log10p1l (long double __x) noexcept (true); extern long double __log10p1l (long double __x) noexcept (true);


 extern long double logp1l (long double __x) noexcept (true); extern long double __logp1l (long double __x) noexcept (true);




 extern long double expm1l (long double __x) noexcept (true); extern long double __expm1l (long double __x) noexcept (true);


 extern long double log1pl (long double __x) noexcept (true); extern long double __log1pl (long double __x) noexcept (true);


extern long double logbl (long double __x) noexcept (true); extern long double __logbl (long double __x) noexcept (true);




 extern long double exp2l (long double __x) noexcept (true); extern long double __exp2l (long double __x) noexcept (true);


 extern long double log2l (long double __x) noexcept (true); extern long double __log2l (long double __x) noexcept (true);






 extern long double powl (long double __x, long double __y) noexcept (true); extern long double __powl (long double __x, long double __y) noexcept (true);


extern long double sqrtl (long double __x) noexcept (true); extern long double __sqrtl (long double __x) noexcept (true);



 extern long double hypotl (long double __x, long double __y) noexcept (true); extern long double __hypotl (long double __x, long double __y) noexcept (true);




 extern long double cbrtl (long double __x) noexcept (true); extern long double __cbrtl (long double __x) noexcept (true);






extern long double ceill (long double __x) noexcept (true) __attribute__ ((__const__));


extern long double fabsl (long double __x) noexcept (true) __attribute__ ((__const__));


extern long double floorl (long double __x) noexcept (true) __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) noexcept (true); extern long double __fmodl (long double __x, long double __y) noexcept (true);
# 210 "/usr/include/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) noexcept (true)
  __attribute__ ((__const__));




extern int finitel (long double __value) noexcept (true)
  __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) noexcept (true); extern long double __dreml (long double __x, long double __y) noexcept (true);



extern long double significandl (long double __x) noexcept (true); extern long double __significandl (long double __x) noexcept (true);






extern long double copysignl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));




extern long double nanl (const char *__tagb) noexcept (true); extern long double __nanl (const char *__tagb) noexcept (true);
# 246 "/usr/include/bits/mathcalls.h" 3 4
extern int isnanl (long double __value) noexcept (true)
  __attribute__ ((__const__));





extern long double j0l (long double) noexcept (true); extern long double __j0l (long double) noexcept (true);
extern long double j1l (long double) noexcept (true); extern long double __j1l (long double) noexcept (true);
extern long double jnl (int, long double) noexcept (true); extern long double __jnl (int, long double) noexcept (true);
extern long double y0l (long double) noexcept (true); extern long double __y0l (long double) noexcept (true);
extern long double y1l (long double) noexcept (true); extern long double __y1l (long double) noexcept (true);
extern long double ynl (int, long double) noexcept (true); extern long double __ynl (int, long double) noexcept (true);





 extern long double erfl (long double) noexcept (true); extern long double __erfl (long double) noexcept (true);
 extern long double erfcl (long double) noexcept (true); extern long double __erfcl (long double) noexcept (true);
extern long double lgammal (long double) noexcept (true); extern long double __lgammal (long double) noexcept (true);




extern long double tgammal (long double) noexcept (true); extern long double __tgammal (long double) noexcept (true);





extern long double gammal (long double) noexcept (true); extern long double __gammal (long double) noexcept (true);







extern long double lgammal_r (long double, int *__signgamp) noexcept (true); extern long double __lgammal_r (long double, int *__signgamp) noexcept (true);






extern long double rintl (long double __x) noexcept (true); extern long double __rintl (long double __x) noexcept (true);


extern long double nextafterl (long double __x, long double __y) noexcept (true); extern long double __nextafterl (long double __x, long double __y) noexcept (true);

extern long double nexttowardl (long double __x, long double __y) noexcept (true); extern long double __nexttowardl (long double __x, long double __y) noexcept (true);




extern long double nextdownl (long double __x) noexcept (true); extern long double __nextdownl (long double __x) noexcept (true);

extern long double nextupl (long double __x) noexcept (true); extern long double __nextupl (long double __x) noexcept (true);



extern long double remainderl (long double __x, long double __y) noexcept (true); extern long double __remainderl (long double __x, long double __y) noexcept (true);



extern long double scalbnl (long double __x, int __n) noexcept (true); extern long double __scalbnl (long double __x, int __n) noexcept (true);



extern int ilogbl (long double __x) noexcept (true); extern int __ilogbl (long double __x) noexcept (true);




extern long int llogbl (long double __x) noexcept (true); extern long int __llogbl (long double __x) noexcept (true);




extern long double scalblnl (long double __x, long int __n) noexcept (true); extern long double __scalblnl (long double __x, long int __n) noexcept (true);



extern long double nearbyintl (long double __x) noexcept (true); extern long double __nearbyintl (long double __x) noexcept (true);



extern long double roundl (long double __x) noexcept (true) __attribute__ ((__const__));



extern long double truncl (long double __x) noexcept (true) __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) noexcept (true); extern long double __remquol (long double __x, long double __y, int *__quo) noexcept (true);






extern long int lrintl (long double __x) noexcept (true); extern long int __lrintl (long double __x) noexcept (true);
__extension__
extern long long int llrintl (long double __x) noexcept (true); extern long long int __llrintl (long double __x) noexcept (true);



extern long int lroundl (long double __x) noexcept (true); extern long int __lroundl (long double __x) noexcept (true);
__extension__
extern long long int llroundl (long double __x) noexcept (true); extern long long int __llroundl (long double __x) noexcept (true);



extern long double fdiml (long double __x, long double __y) noexcept (true); extern long double __fdiml (long double __x, long double __y) noexcept (true);



extern long double fmaxl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) noexcept (true); extern long double __fmal (long double __x, long double __y, long double __z) noexcept (true);




extern long double roundevenl (long double __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpl (long double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpl (long double __x, int __round, unsigned int __width) noexcept (true)
                            ;



extern __uintmax_t ufromfpl (long double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpl (long double __x, int __round, unsigned int __width) noexcept (true)
                              ;




extern __intmax_t fromfpxl (long double __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxl (long double __x, int __round, unsigned int __width) noexcept (true)
                             ;




extern __uintmax_t ufromfpxl (long double __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxl (long double __x, int __round, unsigned int __width) noexcept (true)
                               ;


extern int canonicalizel (long double *__cx, const long double *__x) noexcept (true);






extern long double fmaxmagl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminmagl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));




extern long double fmaximuml (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminimuml (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fmaximum_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminimum_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fmaximum_magl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminimum_magl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fmaximum_mag_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));


extern long double fminimum_mag_numl (long double __x, long double __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderl (const long double *__x, const long double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagl (const long double *__x, const long double *__y) noexcept (true)

     __attribute__ ((__pure__));


extern long double getpayloadl (const long double *__x) noexcept (true); extern long double __getpayloadl (const long double *__x) noexcept (true);


extern int setpayloadl (long double *__x, long double __payload) noexcept (true);


extern int setpayloadsigl (long double *__x, long double __payload) noexcept (true);







extern long double scalbl (long double __x, long double __n) noexcept (true); extern long double __scalbl (long double __x, long double __n) noexcept (true);
# 369 "/usr/include/math.h" 2 3 4

#undef _Mdouble_
#undef __MATH_PRECNAME
#undef __MATH_DECLARING_DOUBLE
#undef __MATH_DECLARING_FLOATN
# 411 "/usr/include/math.h" 3 4
#define _Mdouble_ _Float32
#define __MATH_PRECNAME(name,r) name ##f32 ##r
#define __MATH_DECLARING_DOUBLE 0
#define __MATH_DECLARING_FLOATN 1




# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
 extern _Float32 acosf32 (_Float32 __x) noexcept (true); extern _Float32 __acosf32 (_Float32 __x) noexcept (true);

 extern _Float32 asinf32 (_Float32 __x) noexcept (true); extern _Float32 __asinf32 (_Float32 __x) noexcept (true);

 extern _Float32 atanf32 (_Float32 __x) noexcept (true); extern _Float32 __atanf32 (_Float32 __x) noexcept (true);

 extern _Float32 atan2f32 (_Float32 __y, _Float32 __x) noexcept (true); extern _Float32 __atan2f32 (_Float32 __y, _Float32 __x) noexcept (true);


 extern _Float32 cosf32 (_Float32 __x) noexcept (true); extern _Float32 __cosf32 (_Float32 __x) noexcept (true);

 extern _Float32 sinf32 (_Float32 __x) noexcept (true); extern _Float32 __sinf32 (_Float32 __x) noexcept (true);

 extern _Float32 tanf32 (_Float32 __x) noexcept (true); extern _Float32 __tanf32 (_Float32 __x) noexcept (true);



extern _Float32 acospif32 (_Float32 __x) noexcept (true); extern _Float32 __acospif32 (_Float32 __x) noexcept (true);

extern _Float32 asinpif32 (_Float32 __x) noexcept (true); extern _Float32 __asinpif32 (_Float32 __x) noexcept (true);

extern _Float32 atanpif32 (_Float32 __x) noexcept (true); extern _Float32 __atanpif32 (_Float32 __x) noexcept (true);

extern _Float32 atan2pif32 (_Float32 __y, _Float32 __x) noexcept (true); extern _Float32 __atan2pif32 (_Float32 __y, _Float32 __x) noexcept (true);


 extern _Float32 cospif32 (_Float32 __x) noexcept (true); extern _Float32 __cospif32 (_Float32 __x) noexcept (true);

 extern _Float32 sinpif32 (_Float32 __x) noexcept (true); extern _Float32 __sinpif32 (_Float32 __x) noexcept (true);

 extern _Float32 tanpif32 (_Float32 __x) noexcept (true); extern _Float32 __tanpif32 (_Float32 __x) noexcept (true);





 extern _Float32 coshf32 (_Float32 __x) noexcept (true); extern _Float32 __coshf32 (_Float32 __x) noexcept (true);

 extern _Float32 sinhf32 (_Float32 __x) noexcept (true); extern _Float32 __sinhf32 (_Float32 __x) noexcept (true);

 extern _Float32 tanhf32 (_Float32 __x) noexcept (true); extern _Float32 __tanhf32 (_Float32 __x) noexcept (true);



 extern void sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) noexcept (true); extern void __sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) noexcept (true)
                                                        ;




 extern _Float32 acoshf32 (_Float32 __x) noexcept (true); extern _Float32 __acoshf32 (_Float32 __x) noexcept (true);

 extern _Float32 asinhf32 (_Float32 __x) noexcept (true); extern _Float32 __asinhf32 (_Float32 __x) noexcept (true);

 extern _Float32 atanhf32 (_Float32 __x) noexcept (true); extern _Float32 __atanhf32 (_Float32 __x) noexcept (true);





 extern _Float32 expf32 (_Float32 __x) noexcept (true); extern _Float32 __expf32 (_Float32 __x) noexcept (true);


extern _Float32 frexpf32 (_Float32 __x, int *__exponent) noexcept (true); extern _Float32 __frexpf32 (_Float32 __x, int *__exponent) noexcept (true);


extern _Float32 ldexpf32 (_Float32 __x, int __exponent) noexcept (true); extern _Float32 __ldexpf32 (_Float32 __x, int __exponent) noexcept (true);


 extern _Float32 logf32 (_Float32 __x) noexcept (true); extern _Float32 __logf32 (_Float32 __x) noexcept (true);


 extern _Float32 log10f32 (_Float32 __x) noexcept (true); extern _Float32 __log10f32 (_Float32 __x) noexcept (true);


extern _Float32 modff32 (_Float32 __x, _Float32 *__iptr) noexcept (true); extern _Float32 __modff32 (_Float32 __x, _Float32 *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern _Float32 exp10f32 (_Float32 __x) noexcept (true); extern _Float32 __exp10f32 (_Float32 __x) noexcept (true);


extern _Float32 exp2m1f32 (_Float32 __x) noexcept (true); extern _Float32 __exp2m1f32 (_Float32 __x) noexcept (true);


extern _Float32 exp10m1f32 (_Float32 __x) noexcept (true); extern _Float32 __exp10m1f32 (_Float32 __x) noexcept (true);


extern _Float32 log2p1f32 (_Float32 __x) noexcept (true); extern _Float32 __log2p1f32 (_Float32 __x) noexcept (true);


extern _Float32 log10p1f32 (_Float32 __x) noexcept (true); extern _Float32 __log10p1f32 (_Float32 __x) noexcept (true);


 extern _Float32 logp1f32 (_Float32 __x) noexcept (true); extern _Float32 __logp1f32 (_Float32 __x) noexcept (true);




 extern _Float32 expm1f32 (_Float32 __x) noexcept (true); extern _Float32 __expm1f32 (_Float32 __x) noexcept (true);


 extern _Float32 log1pf32 (_Float32 __x) noexcept (true); extern _Float32 __log1pf32 (_Float32 __x) noexcept (true);


extern _Float32 logbf32 (_Float32 __x) noexcept (true); extern _Float32 __logbf32 (_Float32 __x) noexcept (true);




 extern _Float32 exp2f32 (_Float32 __x) noexcept (true); extern _Float32 __exp2f32 (_Float32 __x) noexcept (true);


 extern _Float32 log2f32 (_Float32 __x) noexcept (true); extern _Float32 __log2f32 (_Float32 __x) noexcept (true);






 extern _Float32 powf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __powf32 (_Float32 __x, _Float32 __y) noexcept (true);


extern _Float32 sqrtf32 (_Float32 __x) noexcept (true); extern _Float32 __sqrtf32 (_Float32 __x) noexcept (true);



 extern _Float32 hypotf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __hypotf32 (_Float32 __x, _Float32 __y) noexcept (true);




 extern _Float32 cbrtf32 (_Float32 __x) noexcept (true); extern _Float32 __cbrtf32 (_Float32 __x) noexcept (true);






extern _Float32 ceilf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));


extern _Float32 fabsf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));


extern _Float32 floorf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));


extern _Float32 fmodf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __fmodf32 (_Float32 __x, _Float32 __y) noexcept (true);
# 231 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32 copysignf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));




extern _Float32 nanf32 (const char *__tagb) noexcept (true); extern _Float32 __nanf32 (const char *__tagb) noexcept (true);
# 253 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32 j0f32 (_Float32) noexcept (true); extern _Float32 __j0f32 (_Float32) noexcept (true);
extern _Float32 j1f32 (_Float32) noexcept (true); extern _Float32 __j1f32 (_Float32) noexcept (true);
extern _Float32 jnf32 (int, _Float32) noexcept (true); extern _Float32 __jnf32 (int, _Float32) noexcept (true);
extern _Float32 y0f32 (_Float32) noexcept (true); extern _Float32 __y0f32 (_Float32) noexcept (true);
extern _Float32 y1f32 (_Float32) noexcept (true); extern _Float32 __y1f32 (_Float32) noexcept (true);
extern _Float32 ynf32 (int, _Float32) noexcept (true); extern _Float32 __ynf32 (int, _Float32) noexcept (true);





 extern _Float32 erff32 (_Float32) noexcept (true); extern _Float32 __erff32 (_Float32) noexcept (true);
 extern _Float32 erfcf32 (_Float32) noexcept (true); extern _Float32 __erfcf32 (_Float32) noexcept (true);
extern _Float32 lgammaf32 (_Float32) noexcept (true); extern _Float32 __lgammaf32 (_Float32) noexcept (true);




extern _Float32 tgammaf32 (_Float32) noexcept (true); extern _Float32 __tgammaf32 (_Float32) noexcept (true);
# 285 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32 lgammaf32_r (_Float32, int *__signgamp) noexcept (true); extern _Float32 __lgammaf32_r (_Float32, int *__signgamp) noexcept (true);






extern _Float32 rintf32 (_Float32 __x) noexcept (true); extern _Float32 __rintf32 (_Float32 __x) noexcept (true);


extern _Float32 nextafterf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __nextafterf32 (_Float32 __x, _Float32 __y) noexcept (true);






extern _Float32 nextdownf32 (_Float32 __x) noexcept (true); extern _Float32 __nextdownf32 (_Float32 __x) noexcept (true);

extern _Float32 nextupf32 (_Float32 __x) noexcept (true); extern _Float32 __nextupf32 (_Float32 __x) noexcept (true);



extern _Float32 remainderf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __remainderf32 (_Float32 __x, _Float32 __y) noexcept (true);



extern _Float32 scalbnf32 (_Float32 __x, int __n) noexcept (true); extern _Float32 __scalbnf32 (_Float32 __x, int __n) noexcept (true);



extern int ilogbf32 (_Float32 __x) noexcept (true); extern int __ilogbf32 (_Float32 __x) noexcept (true);




extern long int llogbf32 (_Float32 __x) noexcept (true); extern long int __llogbf32 (_Float32 __x) noexcept (true);




extern _Float32 scalblnf32 (_Float32 __x, long int __n) noexcept (true); extern _Float32 __scalblnf32 (_Float32 __x, long int __n) noexcept (true);



extern _Float32 nearbyintf32 (_Float32 __x) noexcept (true); extern _Float32 __nearbyintf32 (_Float32 __x) noexcept (true);



extern _Float32 roundf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));



extern _Float32 truncf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));




extern _Float32 remquof32 (_Float32 __x, _Float32 __y, int *__quo) noexcept (true); extern _Float32 __remquof32 (_Float32 __x, _Float32 __y, int *__quo) noexcept (true);






extern long int lrintf32 (_Float32 __x) noexcept (true); extern long int __lrintf32 (_Float32 __x) noexcept (true);
__extension__
extern long long int llrintf32 (_Float32 __x) noexcept (true); extern long long int __llrintf32 (_Float32 __x) noexcept (true);



extern long int lroundf32 (_Float32 __x) noexcept (true); extern long int __lroundf32 (_Float32 __x) noexcept (true);
__extension__
extern long long int llroundf32 (_Float32 __x) noexcept (true); extern long long int __llroundf32 (_Float32 __x) noexcept (true);



extern _Float32 fdimf32 (_Float32 __x, _Float32 __y) noexcept (true); extern _Float32 __fdimf32 (_Float32 __x, _Float32 __y) noexcept (true);



extern _Float32 fmaxf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));



extern _Float32 fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) noexcept (true); extern _Float32 __fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) noexcept (true);




extern _Float32 roundevenf32 (_Float32 __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true)
                            ;



extern __uintmax_t ufromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true)
                              ;




extern __intmax_t fromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true)
                             ;




extern __uintmax_t ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) noexcept (true)
                               ;


extern int canonicalizef32 (_Float32 *__cx, const _Float32 *__x) noexcept (true);






extern _Float32 fmaxmagf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminmagf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));




extern _Float32 fmaximumf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminimumf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fmaximum_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminimum_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fmaximum_magf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminimum_magf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fmaximum_mag_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));


extern _Float32 fminimum_mag_numf32 (_Float32 __x, _Float32 __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf32 (const _Float32 *__x, const _Float32 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf32 (const _Float32 *__x, const _Float32 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float32 getpayloadf32 (const _Float32 *__x) noexcept (true); extern _Float32 __getpayloadf32 (const _Float32 *__x) noexcept (true);


extern int setpayloadf32 (_Float32 *__x, _Float32 __payload) noexcept (true);


extern int setpayloadsigf32 (_Float32 *__x, _Float32 __payload) noexcept (true);
# 420 "/usr/include/math.h" 2 3 4

#undef _Mdouble_
#undef __MATH_PRECNAME
#undef __MATH_DECLARING_DOUBLE
#undef __MATH_DECLARING_FLOATN



#define _Mdouble_ _Float64
#define __MATH_PRECNAME(name,r) name ##f64 ##r
#define __MATH_DECLARING_DOUBLE 0
#define __MATH_DECLARING_FLOATN 1




# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
 extern _Float64 acosf64 (_Float64 __x) noexcept (true); extern _Float64 __acosf64 (_Float64 __x) noexcept (true);

 extern _Float64 asinf64 (_Float64 __x) noexcept (true); extern _Float64 __asinf64 (_Float64 __x) noexcept (true);

 extern _Float64 atanf64 (_Float64 __x) noexcept (true); extern _Float64 __atanf64 (_Float64 __x) noexcept (true);

 extern _Float64 atan2f64 (_Float64 __y, _Float64 __x) noexcept (true); extern _Float64 __atan2f64 (_Float64 __y, _Float64 __x) noexcept (true);


 extern _Float64 cosf64 (_Float64 __x) noexcept (true); extern _Float64 __cosf64 (_Float64 __x) noexcept (true);

 extern _Float64 sinf64 (_Float64 __x) noexcept (true); extern _Float64 __sinf64 (_Float64 __x) noexcept (true);

 extern _Float64 tanf64 (_Float64 __x) noexcept (true); extern _Float64 __tanf64 (_Float64 __x) noexcept (true);



extern _Float64 acospif64 (_Float64 __x) noexcept (true); extern _Float64 __acospif64 (_Float64 __x) noexcept (true);

extern _Float64 asinpif64 (_Float64 __x) noexcept (true); extern _Float64 __asinpif64 (_Float64 __x) noexcept (true);

extern _Float64 atanpif64 (_Float64 __x) noexcept (true); extern _Float64 __atanpif64 (_Float64 __x) noexcept (true);

extern _Float64 atan2pif64 (_Float64 __y, _Float64 __x) noexcept (true); extern _Float64 __atan2pif64 (_Float64 __y, _Float64 __x) noexcept (true);


 extern _Float64 cospif64 (_Float64 __x) noexcept (true); extern _Float64 __cospif64 (_Float64 __x) noexcept (true);

 extern _Float64 sinpif64 (_Float64 __x) noexcept (true); extern _Float64 __sinpif64 (_Float64 __x) noexcept (true);

 extern _Float64 tanpif64 (_Float64 __x) noexcept (true); extern _Float64 __tanpif64 (_Float64 __x) noexcept (true);





 extern _Float64 coshf64 (_Float64 __x) noexcept (true); extern _Float64 __coshf64 (_Float64 __x) noexcept (true);

 extern _Float64 sinhf64 (_Float64 __x) noexcept (true); extern _Float64 __sinhf64 (_Float64 __x) noexcept (true);

 extern _Float64 tanhf64 (_Float64 __x) noexcept (true); extern _Float64 __tanhf64 (_Float64 __x) noexcept (true);



 extern void sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) noexcept (true); extern void __sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) noexcept (true)
                                                        ;




 extern _Float64 acoshf64 (_Float64 __x) noexcept (true); extern _Float64 __acoshf64 (_Float64 __x) noexcept (true);

 extern _Float64 asinhf64 (_Float64 __x) noexcept (true); extern _Float64 __asinhf64 (_Float64 __x) noexcept (true);

 extern _Float64 atanhf64 (_Float64 __x) noexcept (true); extern _Float64 __atanhf64 (_Float64 __x) noexcept (true);





 extern _Float64 expf64 (_Float64 __x) noexcept (true); extern _Float64 __expf64 (_Float64 __x) noexcept (true);


extern _Float64 frexpf64 (_Float64 __x, int *__exponent) noexcept (true); extern _Float64 __frexpf64 (_Float64 __x, int *__exponent) noexcept (true);


extern _Float64 ldexpf64 (_Float64 __x, int __exponent) noexcept (true); extern _Float64 __ldexpf64 (_Float64 __x, int __exponent) noexcept (true);


 extern _Float64 logf64 (_Float64 __x) noexcept (true); extern _Float64 __logf64 (_Float64 __x) noexcept (true);


 extern _Float64 log10f64 (_Float64 __x) noexcept (true); extern _Float64 __log10f64 (_Float64 __x) noexcept (true);


extern _Float64 modff64 (_Float64 __x, _Float64 *__iptr) noexcept (true); extern _Float64 __modff64 (_Float64 __x, _Float64 *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern _Float64 exp10f64 (_Float64 __x) noexcept (true); extern _Float64 __exp10f64 (_Float64 __x) noexcept (true);


extern _Float64 exp2m1f64 (_Float64 __x) noexcept (true); extern _Float64 __exp2m1f64 (_Float64 __x) noexcept (true);


extern _Float64 exp10m1f64 (_Float64 __x) noexcept (true); extern _Float64 __exp10m1f64 (_Float64 __x) noexcept (true);


extern _Float64 log2p1f64 (_Float64 __x) noexcept (true); extern _Float64 __log2p1f64 (_Float64 __x) noexcept (true);


extern _Float64 log10p1f64 (_Float64 __x) noexcept (true); extern _Float64 __log10p1f64 (_Float64 __x) noexcept (true);


 extern _Float64 logp1f64 (_Float64 __x) noexcept (true); extern _Float64 __logp1f64 (_Float64 __x) noexcept (true);




 extern _Float64 expm1f64 (_Float64 __x) noexcept (true); extern _Float64 __expm1f64 (_Float64 __x) noexcept (true);


 extern _Float64 log1pf64 (_Float64 __x) noexcept (true); extern _Float64 __log1pf64 (_Float64 __x) noexcept (true);


extern _Float64 logbf64 (_Float64 __x) noexcept (true); extern _Float64 __logbf64 (_Float64 __x) noexcept (true);




 extern _Float64 exp2f64 (_Float64 __x) noexcept (true); extern _Float64 __exp2f64 (_Float64 __x) noexcept (true);


 extern _Float64 log2f64 (_Float64 __x) noexcept (true); extern _Float64 __log2f64 (_Float64 __x) noexcept (true);






 extern _Float64 powf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __powf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float64 sqrtf64 (_Float64 __x) noexcept (true); extern _Float64 __sqrtf64 (_Float64 __x) noexcept (true);



 extern _Float64 hypotf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __hypotf64 (_Float64 __x, _Float64 __y) noexcept (true);




 extern _Float64 cbrtf64 (_Float64 __x) noexcept (true); extern _Float64 __cbrtf64 (_Float64 __x) noexcept (true);






extern _Float64 ceilf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));


extern _Float64 fabsf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));


extern _Float64 floorf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));


extern _Float64 fmodf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __fmodf64 (_Float64 __x, _Float64 __y) noexcept (true);
# 231 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64 copysignf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));




extern _Float64 nanf64 (const char *__tagb) noexcept (true); extern _Float64 __nanf64 (const char *__tagb) noexcept (true);
# 253 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64 j0f64 (_Float64) noexcept (true); extern _Float64 __j0f64 (_Float64) noexcept (true);
extern _Float64 j1f64 (_Float64) noexcept (true); extern _Float64 __j1f64 (_Float64) noexcept (true);
extern _Float64 jnf64 (int, _Float64) noexcept (true); extern _Float64 __jnf64 (int, _Float64) noexcept (true);
extern _Float64 y0f64 (_Float64) noexcept (true); extern _Float64 __y0f64 (_Float64) noexcept (true);
extern _Float64 y1f64 (_Float64) noexcept (true); extern _Float64 __y1f64 (_Float64) noexcept (true);
extern _Float64 ynf64 (int, _Float64) noexcept (true); extern _Float64 __ynf64 (int, _Float64) noexcept (true);





 extern _Float64 erff64 (_Float64) noexcept (true); extern _Float64 __erff64 (_Float64) noexcept (true);
 extern _Float64 erfcf64 (_Float64) noexcept (true); extern _Float64 __erfcf64 (_Float64) noexcept (true);
extern _Float64 lgammaf64 (_Float64) noexcept (true); extern _Float64 __lgammaf64 (_Float64) noexcept (true);




extern _Float64 tgammaf64 (_Float64) noexcept (true); extern _Float64 __tgammaf64 (_Float64) noexcept (true);
# 285 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64 lgammaf64_r (_Float64, int *__signgamp) noexcept (true); extern _Float64 __lgammaf64_r (_Float64, int *__signgamp) noexcept (true);






extern _Float64 rintf64 (_Float64 __x) noexcept (true); extern _Float64 __rintf64 (_Float64 __x) noexcept (true);


extern _Float64 nextafterf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __nextafterf64 (_Float64 __x, _Float64 __y) noexcept (true);






extern _Float64 nextdownf64 (_Float64 __x) noexcept (true); extern _Float64 __nextdownf64 (_Float64 __x) noexcept (true);

extern _Float64 nextupf64 (_Float64 __x) noexcept (true); extern _Float64 __nextupf64 (_Float64 __x) noexcept (true);



extern _Float64 remainderf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __remainderf64 (_Float64 __x, _Float64 __y) noexcept (true);



extern _Float64 scalbnf64 (_Float64 __x, int __n) noexcept (true); extern _Float64 __scalbnf64 (_Float64 __x, int __n) noexcept (true);



extern int ilogbf64 (_Float64 __x) noexcept (true); extern int __ilogbf64 (_Float64 __x) noexcept (true);




extern long int llogbf64 (_Float64 __x) noexcept (true); extern long int __llogbf64 (_Float64 __x) noexcept (true);




extern _Float64 scalblnf64 (_Float64 __x, long int __n) noexcept (true); extern _Float64 __scalblnf64 (_Float64 __x, long int __n) noexcept (true);



extern _Float64 nearbyintf64 (_Float64 __x) noexcept (true); extern _Float64 __nearbyintf64 (_Float64 __x) noexcept (true);



extern _Float64 roundf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));



extern _Float64 truncf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));




extern _Float64 remquof64 (_Float64 __x, _Float64 __y, int *__quo) noexcept (true); extern _Float64 __remquof64 (_Float64 __x, _Float64 __y, int *__quo) noexcept (true);






extern long int lrintf64 (_Float64 __x) noexcept (true); extern long int __lrintf64 (_Float64 __x) noexcept (true);
__extension__
extern long long int llrintf64 (_Float64 __x) noexcept (true); extern long long int __llrintf64 (_Float64 __x) noexcept (true);



extern long int lroundf64 (_Float64 __x) noexcept (true); extern long int __lroundf64 (_Float64 __x) noexcept (true);
__extension__
extern long long int llroundf64 (_Float64 __x) noexcept (true); extern long long int __llroundf64 (_Float64 __x) noexcept (true);



extern _Float64 fdimf64 (_Float64 __x, _Float64 __y) noexcept (true); extern _Float64 __fdimf64 (_Float64 __x, _Float64 __y) noexcept (true);



extern _Float64 fmaxf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));



extern _Float64 fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) noexcept (true); extern _Float64 __fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) noexcept (true);




extern _Float64 roundevenf64 (_Float64 __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true)
                            ;



extern __uintmax_t ufromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true)
                              ;




extern __intmax_t fromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true)
                             ;




extern __uintmax_t ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) noexcept (true)
                               ;


extern int canonicalizef64 (_Float64 *__cx, const _Float64 *__x) noexcept (true);






extern _Float64 fmaxmagf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminmagf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));




extern _Float64 fmaximumf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminimumf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fmaximum_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminimum_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fmaximum_magf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminimum_magf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fmaximum_mag_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));


extern _Float64 fminimum_mag_numf64 (_Float64 __x, _Float64 __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf64 (const _Float64 *__x, const _Float64 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf64 (const _Float64 *__x, const _Float64 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float64 getpayloadf64 (const _Float64 *__x) noexcept (true); extern _Float64 __getpayloadf64 (const _Float64 *__x) noexcept (true);


extern int setpayloadf64 (_Float64 *__x, _Float64 __payload) noexcept (true);


extern int setpayloadsigf64 (_Float64 *__x, _Float64 __payload) noexcept (true);
# 437 "/usr/include/math.h" 2 3 4

#undef _Mdouble_
#undef __MATH_PRECNAME
#undef __MATH_DECLARING_DOUBLE
#undef __MATH_DECLARING_FLOATN



#define _Mdouble_ _Float128
#define __MATH_PRECNAME(name,r) name ##f128 ##r
#define __MATH_DECLARING_DOUBLE 0
#define __MATH_DECLARING_FLOATN 1

# 1 "/usr/include/bits/mathcalls-helper-functions.h" 1 3 4
# 20 "/usr/include/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf128 (_Float128 __value) noexcept (true)
     __attribute__ ((__const__));


extern int __signbitf128 (_Float128 __value) noexcept (true)
     __attribute__ ((__const__));



extern int __isinff128 (_Float128 __value) noexcept (true)
  __attribute__ ((__const__));


extern int __finitef128 (_Float128 __value) noexcept (true)
  __attribute__ ((__const__));


extern int __isnanf128 (_Float128 __value) noexcept (true)
  __attribute__ ((__const__));


extern int __iseqsigf128 (_Float128 __x, _Float128 __y) noexcept (true);


extern int __issignalingf128 (_Float128 __value) noexcept (true)
     __attribute__ ((__const__));
# 451 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
 extern _Float128 acosf128 (_Float128 __x) noexcept (true); extern _Float128 __acosf128 (_Float128 __x) noexcept (true);

 extern _Float128 asinf128 (_Float128 __x) noexcept (true); extern _Float128 __asinf128 (_Float128 __x) noexcept (true);

 extern _Float128 atanf128 (_Float128 __x) noexcept (true); extern _Float128 __atanf128 (_Float128 __x) noexcept (true);

 extern _Float128 atan2f128 (_Float128 __y, _Float128 __x) noexcept (true); extern _Float128 __atan2f128 (_Float128 __y, _Float128 __x) noexcept (true);


 extern _Float128 cosf128 (_Float128 __x) noexcept (true); extern _Float128 __cosf128 (_Float128 __x) noexcept (true);

 extern _Float128 sinf128 (_Float128 __x) noexcept (true); extern _Float128 __sinf128 (_Float128 __x) noexcept (true);

 extern _Float128 tanf128 (_Float128 __x) noexcept (true); extern _Float128 __tanf128 (_Float128 __x) noexcept (true);



extern _Float128 acospif128 (_Float128 __x) noexcept (true); extern _Float128 __acospif128 (_Float128 __x) noexcept (true);

extern _Float128 asinpif128 (_Float128 __x) noexcept (true); extern _Float128 __asinpif128 (_Float128 __x) noexcept (true);

extern _Float128 atanpif128 (_Float128 __x) noexcept (true); extern _Float128 __atanpif128 (_Float128 __x) noexcept (true);

extern _Float128 atan2pif128 (_Float128 __y, _Float128 __x) noexcept (true); extern _Float128 __atan2pif128 (_Float128 __y, _Float128 __x) noexcept (true);


 extern _Float128 cospif128 (_Float128 __x) noexcept (true); extern _Float128 __cospif128 (_Float128 __x) noexcept (true);

 extern _Float128 sinpif128 (_Float128 __x) noexcept (true); extern _Float128 __sinpif128 (_Float128 __x) noexcept (true);

 extern _Float128 tanpif128 (_Float128 __x) noexcept (true); extern _Float128 __tanpif128 (_Float128 __x) noexcept (true);





 extern _Float128 coshf128 (_Float128 __x) noexcept (true); extern _Float128 __coshf128 (_Float128 __x) noexcept (true);

 extern _Float128 sinhf128 (_Float128 __x) noexcept (true); extern _Float128 __sinhf128 (_Float128 __x) noexcept (true);

 extern _Float128 tanhf128 (_Float128 __x) noexcept (true); extern _Float128 __tanhf128 (_Float128 __x) noexcept (true);



 extern void sincosf128 (_Float128 __x, _Float128 *__sinx, _Float128 *__cosx) noexcept (true); extern void __sincosf128 (_Float128 __x, _Float128 *__sinx, _Float128 *__cosx) noexcept (true)
                                                        ;




 extern _Float128 acoshf128 (_Float128 __x) noexcept (true); extern _Float128 __acoshf128 (_Float128 __x) noexcept (true);

 extern _Float128 asinhf128 (_Float128 __x) noexcept (true); extern _Float128 __asinhf128 (_Float128 __x) noexcept (true);

 extern _Float128 atanhf128 (_Float128 __x) noexcept (true); extern _Float128 __atanhf128 (_Float128 __x) noexcept (true);





 extern _Float128 expf128 (_Float128 __x) noexcept (true); extern _Float128 __expf128 (_Float128 __x) noexcept (true);


extern _Float128 frexpf128 (_Float128 __x, int *__exponent) noexcept (true); extern _Float128 __frexpf128 (_Float128 __x, int *__exponent) noexcept (true);


extern _Float128 ldexpf128 (_Float128 __x, int __exponent) noexcept (true); extern _Float128 __ldexpf128 (_Float128 __x, int __exponent) noexcept (true);


 extern _Float128 logf128 (_Float128 __x) noexcept (true); extern _Float128 __logf128 (_Float128 __x) noexcept (true);


 extern _Float128 log10f128 (_Float128 __x) noexcept (true); extern _Float128 __log10f128 (_Float128 __x) noexcept (true);


extern _Float128 modff128 (_Float128 __x, _Float128 *__iptr) noexcept (true); extern _Float128 __modff128 (_Float128 __x, _Float128 *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern _Float128 exp10f128 (_Float128 __x) noexcept (true); extern _Float128 __exp10f128 (_Float128 __x) noexcept (true);


extern _Float128 exp2m1f128 (_Float128 __x) noexcept (true); extern _Float128 __exp2m1f128 (_Float128 __x) noexcept (true);


extern _Float128 exp10m1f128 (_Float128 __x) noexcept (true); extern _Float128 __exp10m1f128 (_Float128 __x) noexcept (true);


extern _Float128 log2p1f128 (_Float128 __x) noexcept (true); extern _Float128 __log2p1f128 (_Float128 __x) noexcept (true);


extern _Float128 log10p1f128 (_Float128 __x) noexcept (true); extern _Float128 __log10p1f128 (_Float128 __x) noexcept (true);


 extern _Float128 logp1f128 (_Float128 __x) noexcept (true); extern _Float128 __logp1f128 (_Float128 __x) noexcept (true);




 extern _Float128 expm1f128 (_Float128 __x) noexcept (true); extern _Float128 __expm1f128 (_Float128 __x) noexcept (true);


 extern _Float128 log1pf128 (_Float128 __x) noexcept (true); extern _Float128 __log1pf128 (_Float128 __x) noexcept (true);


extern _Float128 logbf128 (_Float128 __x) noexcept (true); extern _Float128 __logbf128 (_Float128 __x) noexcept (true);




 extern _Float128 exp2f128 (_Float128 __x) noexcept (true); extern _Float128 __exp2f128 (_Float128 __x) noexcept (true);


 extern _Float128 log2f128 (_Float128 __x) noexcept (true); extern _Float128 __log2f128 (_Float128 __x) noexcept (true);






 extern _Float128 powf128 (_Float128 __x, _Float128 __y) noexcept (true); extern _Float128 __powf128 (_Float128 __x, _Float128 __y) noexcept (true);


extern _Float128 sqrtf128 (_Float128 __x) noexcept (true); extern _Float128 __sqrtf128 (_Float128 __x) noexcept (true);



 extern _Float128 hypotf128 (_Float128 __x, _Float128 __y) noexcept (true); extern _Float128 __hypotf128 (_Float128 __x, _Float128 __y) noexcept (true);




 extern _Float128 cbrtf128 (_Float128 __x) noexcept (true); extern _Float128 __cbrtf128 (_Float128 __x) noexcept (true);






extern _Float128 ceilf128 (_Float128 __x) noexcept (true) __attribute__ ((__const__));


extern _Float128 fabsf128 (_Float128 __x) noexcept (true) __attribute__ ((__const__));


extern _Float128 floorf128 (_Float128 __x) noexcept (true) __attribute__ ((__const__));


extern _Float128 fmodf128 (_Float128 __x, _Float128 __y) noexcept (true); extern _Float128 __fmodf128 (_Float128 __x, _Float128 __y) noexcept (true);
# 231 "/usr/include/bits/mathcalls.h" 3 4
extern _Float128 copysignf128 (_Float128 __x, _Float128 __y) noexcept (true) __attribute__ ((__const__));




extern _Float128 nanf128 (const char *__tagb) noexcept (true); extern _Float128 __nanf128 (const char *__tagb) noexcept (true);
# 253 "/usr/include/bits/mathcalls.h" 3 4
extern _Float128 j0f128 (_Float128) noexcept (true); extern _Float128 __j0f128 (_Float128) noexcept (true);
extern _Float128 j1f128 (_Float128) noexcept (true); extern _Float128 __j1f128 (_Float128) noexcept (true);
extern _Float128 jnf128 (int, _Float128) noexcept (true); extern _Float128 __jnf128 (int, _Float128) noexcept (true);
extern _Float128 y0f128 (_Float128) noexcept (true); extern _Float128 __y0f128 (_Float128) noexcept (true);
extern _Float128 y1f128 (_Float128) noexcept (true); extern _Float128 __y1f128 (_Float128) noexcept (true);
extern _Float128 ynf128 (int, _Float128) noexcept (true); extern _Float128 __ynf128 (int, _Float128) noexcept (true);





 extern _Float128 erff128 (_Float128) noexcept (true); extern _Float128 __erff128 (_Float128) noexcept (true);
 extern _Float128 erfcf128 (_Float128) noexcept (true); extern _Float128 __erfcf128 (_Float128) noexcept (true);
extern _Float128 lgammaf128 (_Float128) noexcept (true); extern _Float128 __lgammaf128 (_Float128) noexcept (true);




extern _Float128 tgammaf128 (_Float128) noexcept (true); extern _Float128 __tgammaf128 (_Float128) noexcept (true);
# 285 "/usr/include/bits/mathcalls.h" 3 4
extern _Float128 lgammaf128_r (_Float128, int *__signgamp) noexcept (true); extern _Float128 __lgammaf128_r (_Float128, int *__signgamp) noexcept (true);






extern _Float128 rintf128 (_Float128 __x) noexcept (true); extern _Float128 __rintf128 (_Float128 __x) noexcept (true);


extern _Float128 nextafterf128 (_Float128 __x, _Float128 __y) noexcept (true); extern _Float128 __nextafterf128 (_Float128 __x, _Float128 __y) noexcept (true);






extern _Float128 nextdownf128 (_Float128 __x) noexcept (true); extern _Float128 __nextdownf128 (_Float128 __x) noexcept (true);

extern _Float128 nextupf128 (_Float128 __x) noexcept (true); extern _Float128 __nextupf128 (_Float128 __x) noexcept (true);



extern _Float128 remainderf128 (_Float128 __x, _Float128 __y) noexcept (true); extern _Float128 __remainderf128 (_Float128 __x, _Float128 __y) noexcept (true);



extern _Float128 scalbnf128 (_Float128 __x, int __n) noexcept (true); extern _Float128 __scalbnf128 (_Float128 __x, int __n) noexcept (true);



extern int ilogbf128 (_Float128 __x) noexcept (true); extern int __ilogbf128 (_Float128 __x) noexcept (true);




extern long int llogbf128 (_Float128 __x) noexcept (true); extern long int __llogbf128 (_Float128 __x) noexcept (true);




extern _Float128 scalblnf128 (_Float128 __x, long int __n) noexcept (true); extern _Float128 __scalblnf128 (_Float128 __x, long int __n) noexcept (true);



extern _Float128 nearbyintf128 (_Float128 __x) noexcept (true); extern _Float128 __nearbyintf128 (_Float128 __x) noexcept (true);



extern _Float128 roundf128 (_Float128 __x) noexcept (true) __attribute__ ((__const__));



extern _Float128 truncf128 (_Float128 __x) noexcept (true) __attribute__ ((__const__));




extern _Float128 remquof128 (_Float128 __x, _Float128 __y, int *__quo) noexcept (true); extern _Float128 __remquof128 (_Float128 __x, _Float128 __y, int *__quo) noexcept (true);






extern long int lrintf128 (_Float128 __x) noexcept (true); extern long int __lrintf128 (_Float128 __x) noexcept (true);
__extension__
extern long long int llrintf128 (_Float128 __x) noexcept (true); extern long long int __llrintf128 (_Float128 __x) noexcept (true);



extern long int lroundf128 (_Float128 __x) noexcept (true); extern long int __lroundf128 (_Float128 __x) noexcept (true);
__extension__
extern long long int llroundf128 (_Float128 __x) noexcept (true); extern long long int __llroundf128 (_Float128 __x) noexcept (true);



extern _Float128 fdimf128 (_Float128 __x, _Float128 __y) noexcept (true); extern _Float128 __fdimf128 (_Float128 __x, _Float128 __y) noexcept (true);



extern _Float128 fmaxf128 (_Float128 __x, _Float128 __y) noexcept (true) __attribute__ ((__const__));


extern _Float128 fminf128 (_Float128 __x, _Float128 __y) noexcept (true) __attribute__ ((__const__));



extern _Float128 fmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) noexcept (true); extern _Float128 __fmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) noexcept (true);




extern _Float128 roundevenf128 (_Float128 __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf128 (_Float128 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf128 (_Float128 __x, int __round, unsigned int __width) noexcept (true)
                            ;



extern __uintmax_t ufromfpf128 (_Float128 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf128 (_Float128 __x, int __round, unsigned int __width) noexcept (true)
                              ;




extern __intmax_t fromfpxf128 (_Float128 __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf128 (_Float128 __x, int __round, unsigned int __width) noexcept (true)
                             ;




extern __uintmax_t ufromfpxf128 (_Float128 __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf128 (_Float128 __x, int __round, unsigned int __width) noexcept (true)
                               ;


extern int canonicalizef128 (_Float128 *__cx, const _Float128 *__x) noexcept (true);






extern _Float128 fmaxmagf128 (_Float128 __x, _Float128 __y) noexcept (true) __attribute__ ((__const__));


extern _Float128 fminmagf128 (_Float128 __x, _Float128 __y) noexcept (true) __attribute__ ((__const__));




extern _Float128 fmaximumf128 (_Float128 __x, _Float128 __y) noexcept (true) __attribute__ ((__const__));


extern _Float128 fminimumf128 (_Float128 __x, _Float128 __y) noexcept (true) __attribute__ ((__const__));


extern _Float128 fmaximum_numf128 (_Float128 __x, _Float128 __y) noexcept (true) __attribute__ ((__const__));


extern _Float128 fminimum_numf128 (_Float128 __x, _Float128 __y) noexcept (true) __attribute__ ((__const__));


extern _Float128 fmaximum_magf128 (_Float128 __x, _Float128 __y) noexcept (true) __attribute__ ((__const__));


extern _Float128 fminimum_magf128 (_Float128 __x, _Float128 __y) noexcept (true) __attribute__ ((__const__));


extern _Float128 fmaximum_mag_numf128 (_Float128 __x, _Float128 __y) noexcept (true) __attribute__ ((__const__));


extern _Float128 fminimum_mag_numf128 (_Float128 __x, _Float128 __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf128 (const _Float128 *__x, const _Float128 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf128 (const _Float128 *__x, const _Float128 *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float128 getpayloadf128 (const _Float128 *__x) noexcept (true); extern _Float128 __getpayloadf128 (const _Float128 *__x) noexcept (true);


extern int setpayloadf128 (_Float128 *__x, _Float128 __payload) noexcept (true);


extern int setpayloadsigf128 (_Float128 *__x, _Float128 __payload) noexcept (true);
# 454 "/usr/include/math.h" 2 3 4

#undef _Mdouble_
#undef __MATH_PRECNAME
#undef __MATH_DECLARING_DOUBLE
#undef __MATH_DECLARING_FLOATN



#define _Mdouble_ _Float32x
#define __MATH_PRECNAME(name,r) name ##f32x ##r
#define __MATH_DECLARING_DOUBLE 0
#define __MATH_DECLARING_FLOATN 1




# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
 extern _Float32x acosf32x (_Float32x __x) noexcept (true); extern _Float32x __acosf32x (_Float32x __x) noexcept (true);

 extern _Float32x asinf32x (_Float32x __x) noexcept (true); extern _Float32x __asinf32x (_Float32x __x) noexcept (true);

 extern _Float32x atanf32x (_Float32x __x) noexcept (true); extern _Float32x __atanf32x (_Float32x __x) noexcept (true);

 extern _Float32x atan2f32x (_Float32x __y, _Float32x __x) noexcept (true); extern _Float32x __atan2f32x (_Float32x __y, _Float32x __x) noexcept (true);


 extern _Float32x cosf32x (_Float32x __x) noexcept (true); extern _Float32x __cosf32x (_Float32x __x) noexcept (true);

 extern _Float32x sinf32x (_Float32x __x) noexcept (true); extern _Float32x __sinf32x (_Float32x __x) noexcept (true);

 extern _Float32x tanf32x (_Float32x __x) noexcept (true); extern _Float32x __tanf32x (_Float32x __x) noexcept (true);



extern _Float32x acospif32x (_Float32x __x) noexcept (true); extern _Float32x __acospif32x (_Float32x __x) noexcept (true);

extern _Float32x asinpif32x (_Float32x __x) noexcept (true); extern _Float32x __asinpif32x (_Float32x __x) noexcept (true);

extern _Float32x atanpif32x (_Float32x __x) noexcept (true); extern _Float32x __atanpif32x (_Float32x __x) noexcept (true);

extern _Float32x atan2pif32x (_Float32x __y, _Float32x __x) noexcept (true); extern _Float32x __atan2pif32x (_Float32x __y, _Float32x __x) noexcept (true);


 extern _Float32x cospif32x (_Float32x __x) noexcept (true); extern _Float32x __cospif32x (_Float32x __x) noexcept (true);

 extern _Float32x sinpif32x (_Float32x __x) noexcept (true); extern _Float32x __sinpif32x (_Float32x __x) noexcept (true);

 extern _Float32x tanpif32x (_Float32x __x) noexcept (true); extern _Float32x __tanpif32x (_Float32x __x) noexcept (true);





 extern _Float32x coshf32x (_Float32x __x) noexcept (true); extern _Float32x __coshf32x (_Float32x __x) noexcept (true);

 extern _Float32x sinhf32x (_Float32x __x) noexcept (true); extern _Float32x __sinhf32x (_Float32x __x) noexcept (true);

 extern _Float32x tanhf32x (_Float32x __x) noexcept (true); extern _Float32x __tanhf32x (_Float32x __x) noexcept (true);



 extern void sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) noexcept (true); extern void __sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) noexcept (true)
                                                        ;




 extern _Float32x acoshf32x (_Float32x __x) noexcept (true); extern _Float32x __acoshf32x (_Float32x __x) noexcept (true);

 extern _Float32x asinhf32x (_Float32x __x) noexcept (true); extern _Float32x __asinhf32x (_Float32x __x) noexcept (true);

 extern _Float32x atanhf32x (_Float32x __x) noexcept (true); extern _Float32x __atanhf32x (_Float32x __x) noexcept (true);





 extern _Float32x expf32x (_Float32x __x) noexcept (true); extern _Float32x __expf32x (_Float32x __x) noexcept (true);


extern _Float32x frexpf32x (_Float32x __x, int *__exponent) noexcept (true); extern _Float32x __frexpf32x (_Float32x __x, int *__exponent) noexcept (true);


extern _Float32x ldexpf32x (_Float32x __x, int __exponent) noexcept (true); extern _Float32x __ldexpf32x (_Float32x __x, int __exponent) noexcept (true);


 extern _Float32x logf32x (_Float32x __x) noexcept (true); extern _Float32x __logf32x (_Float32x __x) noexcept (true);


 extern _Float32x log10f32x (_Float32x __x) noexcept (true); extern _Float32x __log10f32x (_Float32x __x) noexcept (true);


extern _Float32x modff32x (_Float32x __x, _Float32x *__iptr) noexcept (true); extern _Float32x __modff32x (_Float32x __x, _Float32x *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern _Float32x exp10f32x (_Float32x __x) noexcept (true); extern _Float32x __exp10f32x (_Float32x __x) noexcept (true);


extern _Float32x exp2m1f32x (_Float32x __x) noexcept (true); extern _Float32x __exp2m1f32x (_Float32x __x) noexcept (true);


extern _Float32x exp10m1f32x (_Float32x __x) noexcept (true); extern _Float32x __exp10m1f32x (_Float32x __x) noexcept (true);


extern _Float32x log2p1f32x (_Float32x __x) noexcept (true); extern _Float32x __log2p1f32x (_Float32x __x) noexcept (true);


extern _Float32x log10p1f32x (_Float32x __x) noexcept (true); extern _Float32x __log10p1f32x (_Float32x __x) noexcept (true);


 extern _Float32x logp1f32x (_Float32x __x) noexcept (true); extern _Float32x __logp1f32x (_Float32x __x) noexcept (true);




 extern _Float32x expm1f32x (_Float32x __x) noexcept (true); extern _Float32x __expm1f32x (_Float32x __x) noexcept (true);


 extern _Float32x log1pf32x (_Float32x __x) noexcept (true); extern _Float32x __log1pf32x (_Float32x __x) noexcept (true);


extern _Float32x logbf32x (_Float32x __x) noexcept (true); extern _Float32x __logbf32x (_Float32x __x) noexcept (true);




 extern _Float32x exp2f32x (_Float32x __x) noexcept (true); extern _Float32x __exp2f32x (_Float32x __x) noexcept (true);


 extern _Float32x log2f32x (_Float32x __x) noexcept (true); extern _Float32x __log2f32x (_Float32x __x) noexcept (true);






 extern _Float32x powf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __powf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32x sqrtf32x (_Float32x __x) noexcept (true); extern _Float32x __sqrtf32x (_Float32x __x) noexcept (true);



 extern _Float32x hypotf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __hypotf32x (_Float32x __x, _Float32x __y) noexcept (true);




 extern _Float32x cbrtf32x (_Float32x __x) noexcept (true); extern _Float32x __cbrtf32x (_Float32x __x) noexcept (true);






extern _Float32x ceilf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));


extern _Float32x fabsf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));


extern _Float32x floorf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));


extern _Float32x fmodf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __fmodf32x (_Float32x __x, _Float32x __y) noexcept (true);
# 231 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32x copysignf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));




extern _Float32x nanf32x (const char *__tagb) noexcept (true); extern _Float32x __nanf32x (const char *__tagb) noexcept (true);
# 253 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32x j0f32x (_Float32x) noexcept (true); extern _Float32x __j0f32x (_Float32x) noexcept (true);
extern _Float32x j1f32x (_Float32x) noexcept (true); extern _Float32x __j1f32x (_Float32x) noexcept (true);
extern _Float32x jnf32x (int, _Float32x) noexcept (true); extern _Float32x __jnf32x (int, _Float32x) noexcept (true);
extern _Float32x y0f32x (_Float32x) noexcept (true); extern _Float32x __y0f32x (_Float32x) noexcept (true);
extern _Float32x y1f32x (_Float32x) noexcept (true); extern _Float32x __y1f32x (_Float32x) noexcept (true);
extern _Float32x ynf32x (int, _Float32x) noexcept (true); extern _Float32x __ynf32x (int, _Float32x) noexcept (true);





 extern _Float32x erff32x (_Float32x) noexcept (true); extern _Float32x __erff32x (_Float32x) noexcept (true);
 extern _Float32x erfcf32x (_Float32x) noexcept (true); extern _Float32x __erfcf32x (_Float32x) noexcept (true);
extern _Float32x lgammaf32x (_Float32x) noexcept (true); extern _Float32x __lgammaf32x (_Float32x) noexcept (true);




extern _Float32x tgammaf32x (_Float32x) noexcept (true); extern _Float32x __tgammaf32x (_Float32x) noexcept (true);
# 285 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32x lgammaf32x_r (_Float32x, int *__signgamp) noexcept (true); extern _Float32x __lgammaf32x_r (_Float32x, int *__signgamp) noexcept (true);






extern _Float32x rintf32x (_Float32x __x) noexcept (true); extern _Float32x __rintf32x (_Float32x __x) noexcept (true);


extern _Float32x nextafterf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __nextafterf32x (_Float32x __x, _Float32x __y) noexcept (true);






extern _Float32x nextdownf32x (_Float32x __x) noexcept (true); extern _Float32x __nextdownf32x (_Float32x __x) noexcept (true);

extern _Float32x nextupf32x (_Float32x __x) noexcept (true); extern _Float32x __nextupf32x (_Float32x __x) noexcept (true);



extern _Float32x remainderf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __remainderf32x (_Float32x __x, _Float32x __y) noexcept (true);



extern _Float32x scalbnf32x (_Float32x __x, int __n) noexcept (true); extern _Float32x __scalbnf32x (_Float32x __x, int __n) noexcept (true);



extern int ilogbf32x (_Float32x __x) noexcept (true); extern int __ilogbf32x (_Float32x __x) noexcept (true);




extern long int llogbf32x (_Float32x __x) noexcept (true); extern long int __llogbf32x (_Float32x __x) noexcept (true);




extern _Float32x scalblnf32x (_Float32x __x, long int __n) noexcept (true); extern _Float32x __scalblnf32x (_Float32x __x, long int __n) noexcept (true);



extern _Float32x nearbyintf32x (_Float32x __x) noexcept (true); extern _Float32x __nearbyintf32x (_Float32x __x) noexcept (true);



extern _Float32x roundf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));



extern _Float32x truncf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));




extern _Float32x remquof32x (_Float32x __x, _Float32x __y, int *__quo) noexcept (true); extern _Float32x __remquof32x (_Float32x __x, _Float32x __y, int *__quo) noexcept (true);






extern long int lrintf32x (_Float32x __x) noexcept (true); extern long int __lrintf32x (_Float32x __x) noexcept (true);
__extension__
extern long long int llrintf32x (_Float32x __x) noexcept (true); extern long long int __llrintf32x (_Float32x __x) noexcept (true);



extern long int lroundf32x (_Float32x __x) noexcept (true); extern long int __lroundf32x (_Float32x __x) noexcept (true);
__extension__
extern long long int llroundf32x (_Float32x __x) noexcept (true); extern long long int __llroundf32x (_Float32x __x) noexcept (true);



extern _Float32x fdimf32x (_Float32x __x, _Float32x __y) noexcept (true); extern _Float32x __fdimf32x (_Float32x __x, _Float32x __y) noexcept (true);



extern _Float32x fmaxf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));



extern _Float32x fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) noexcept (true); extern _Float32x __fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) noexcept (true);




extern _Float32x roundevenf32x (_Float32x __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true)
                            ;



extern __uintmax_t ufromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true)
                              ;




extern __intmax_t fromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true)
                             ;




extern __uintmax_t ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) noexcept (true)
                               ;


extern int canonicalizef32x (_Float32x *__cx, const _Float32x *__x) noexcept (true);






extern _Float32x fmaxmagf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminmagf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));




extern _Float32x fmaximumf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminimumf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fmaximum_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminimum_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fmaximum_magf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminimum_magf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fmaximum_mag_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));


extern _Float32x fminimum_mag_numf32x (_Float32x __x, _Float32x __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf32x (const _Float32x *__x, const _Float32x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf32x (const _Float32x *__x, const _Float32x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float32x getpayloadf32x (const _Float32x *__x) noexcept (true); extern _Float32x __getpayloadf32x (const _Float32x *__x) noexcept (true);


extern int setpayloadf32x (_Float32x *__x, _Float32x __payload) noexcept (true);


extern int setpayloadsigf32x (_Float32x *__x, _Float32x __payload) noexcept (true);
# 471 "/usr/include/math.h" 2 3 4

#undef _Mdouble_
#undef __MATH_PRECNAME
#undef __MATH_DECLARING_DOUBLE
#undef __MATH_DECLARING_FLOATN



#define _Mdouble_ _Float64x
#define __MATH_PRECNAME(name,r) name ##f64x ##r
#define __MATH_DECLARING_DOUBLE 0
#define __MATH_DECLARING_FLOATN 1




# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
 extern _Float64x acosf64x (_Float64x __x) noexcept (true); extern _Float64x __acosf64x (_Float64x __x) noexcept (true);

 extern _Float64x asinf64x (_Float64x __x) noexcept (true); extern _Float64x __asinf64x (_Float64x __x) noexcept (true);

 extern _Float64x atanf64x (_Float64x __x) noexcept (true); extern _Float64x __atanf64x (_Float64x __x) noexcept (true);

 extern _Float64x atan2f64x (_Float64x __y, _Float64x __x) noexcept (true); extern _Float64x __atan2f64x (_Float64x __y, _Float64x __x) noexcept (true);


 extern _Float64x cosf64x (_Float64x __x) noexcept (true); extern _Float64x __cosf64x (_Float64x __x) noexcept (true);

 extern _Float64x sinf64x (_Float64x __x) noexcept (true); extern _Float64x __sinf64x (_Float64x __x) noexcept (true);

 extern _Float64x tanf64x (_Float64x __x) noexcept (true); extern _Float64x __tanf64x (_Float64x __x) noexcept (true);



extern _Float64x acospif64x (_Float64x __x) noexcept (true); extern _Float64x __acospif64x (_Float64x __x) noexcept (true);

extern _Float64x asinpif64x (_Float64x __x) noexcept (true); extern _Float64x __asinpif64x (_Float64x __x) noexcept (true);

extern _Float64x atanpif64x (_Float64x __x) noexcept (true); extern _Float64x __atanpif64x (_Float64x __x) noexcept (true);

extern _Float64x atan2pif64x (_Float64x __y, _Float64x __x) noexcept (true); extern _Float64x __atan2pif64x (_Float64x __y, _Float64x __x) noexcept (true);


 extern _Float64x cospif64x (_Float64x __x) noexcept (true); extern _Float64x __cospif64x (_Float64x __x) noexcept (true);

 extern _Float64x sinpif64x (_Float64x __x) noexcept (true); extern _Float64x __sinpif64x (_Float64x __x) noexcept (true);

 extern _Float64x tanpif64x (_Float64x __x) noexcept (true); extern _Float64x __tanpif64x (_Float64x __x) noexcept (true);





 extern _Float64x coshf64x (_Float64x __x) noexcept (true); extern _Float64x __coshf64x (_Float64x __x) noexcept (true);

 extern _Float64x sinhf64x (_Float64x __x) noexcept (true); extern _Float64x __sinhf64x (_Float64x __x) noexcept (true);

 extern _Float64x tanhf64x (_Float64x __x) noexcept (true); extern _Float64x __tanhf64x (_Float64x __x) noexcept (true);



 extern void sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) noexcept (true); extern void __sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) noexcept (true)
                                                        ;




 extern _Float64x acoshf64x (_Float64x __x) noexcept (true); extern _Float64x __acoshf64x (_Float64x __x) noexcept (true);

 extern _Float64x asinhf64x (_Float64x __x) noexcept (true); extern _Float64x __asinhf64x (_Float64x __x) noexcept (true);

 extern _Float64x atanhf64x (_Float64x __x) noexcept (true); extern _Float64x __atanhf64x (_Float64x __x) noexcept (true);





 extern _Float64x expf64x (_Float64x __x) noexcept (true); extern _Float64x __expf64x (_Float64x __x) noexcept (true);


extern _Float64x frexpf64x (_Float64x __x, int *__exponent) noexcept (true); extern _Float64x __frexpf64x (_Float64x __x, int *__exponent) noexcept (true);


extern _Float64x ldexpf64x (_Float64x __x, int __exponent) noexcept (true); extern _Float64x __ldexpf64x (_Float64x __x, int __exponent) noexcept (true);


 extern _Float64x logf64x (_Float64x __x) noexcept (true); extern _Float64x __logf64x (_Float64x __x) noexcept (true);


 extern _Float64x log10f64x (_Float64x __x) noexcept (true); extern _Float64x __log10f64x (_Float64x __x) noexcept (true);


extern _Float64x modff64x (_Float64x __x, _Float64x *__iptr) noexcept (true); extern _Float64x __modff64x (_Float64x __x, _Float64x *__iptr) noexcept (true) __attribute__ ((__nonnull__ (2)));



 extern _Float64x exp10f64x (_Float64x __x) noexcept (true); extern _Float64x __exp10f64x (_Float64x __x) noexcept (true);


extern _Float64x exp2m1f64x (_Float64x __x) noexcept (true); extern _Float64x __exp2m1f64x (_Float64x __x) noexcept (true);


extern _Float64x exp10m1f64x (_Float64x __x) noexcept (true); extern _Float64x __exp10m1f64x (_Float64x __x) noexcept (true);


extern _Float64x log2p1f64x (_Float64x __x) noexcept (true); extern _Float64x __log2p1f64x (_Float64x __x) noexcept (true);


extern _Float64x log10p1f64x (_Float64x __x) noexcept (true); extern _Float64x __log10p1f64x (_Float64x __x) noexcept (true);


 extern _Float64x logp1f64x (_Float64x __x) noexcept (true); extern _Float64x __logp1f64x (_Float64x __x) noexcept (true);




 extern _Float64x expm1f64x (_Float64x __x) noexcept (true); extern _Float64x __expm1f64x (_Float64x __x) noexcept (true);


 extern _Float64x log1pf64x (_Float64x __x) noexcept (true); extern _Float64x __log1pf64x (_Float64x __x) noexcept (true);


extern _Float64x logbf64x (_Float64x __x) noexcept (true); extern _Float64x __logbf64x (_Float64x __x) noexcept (true);




 extern _Float64x exp2f64x (_Float64x __x) noexcept (true); extern _Float64x __exp2f64x (_Float64x __x) noexcept (true);


 extern _Float64x log2f64x (_Float64x __x) noexcept (true); extern _Float64x __log2f64x (_Float64x __x) noexcept (true);






 extern _Float64x powf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __powf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64x sqrtf64x (_Float64x __x) noexcept (true); extern _Float64x __sqrtf64x (_Float64x __x) noexcept (true);



 extern _Float64x hypotf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __hypotf64x (_Float64x __x, _Float64x __y) noexcept (true);




 extern _Float64x cbrtf64x (_Float64x __x) noexcept (true); extern _Float64x __cbrtf64x (_Float64x __x) noexcept (true);






extern _Float64x ceilf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));


extern _Float64x fabsf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));


extern _Float64x floorf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));


extern _Float64x fmodf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __fmodf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 231 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64x copysignf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));




extern _Float64x nanf64x (const char *__tagb) noexcept (true); extern _Float64x __nanf64x (const char *__tagb) noexcept (true);
# 253 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64x j0f64x (_Float64x) noexcept (true); extern _Float64x __j0f64x (_Float64x) noexcept (true);
extern _Float64x j1f64x (_Float64x) noexcept (true); extern _Float64x __j1f64x (_Float64x) noexcept (true);
extern _Float64x jnf64x (int, _Float64x) noexcept (true); extern _Float64x __jnf64x (int, _Float64x) noexcept (true);
extern _Float64x y0f64x (_Float64x) noexcept (true); extern _Float64x __y0f64x (_Float64x) noexcept (true);
extern _Float64x y1f64x (_Float64x) noexcept (true); extern _Float64x __y1f64x (_Float64x) noexcept (true);
extern _Float64x ynf64x (int, _Float64x) noexcept (true); extern _Float64x __ynf64x (int, _Float64x) noexcept (true);





 extern _Float64x erff64x (_Float64x) noexcept (true); extern _Float64x __erff64x (_Float64x) noexcept (true);
 extern _Float64x erfcf64x (_Float64x) noexcept (true); extern _Float64x __erfcf64x (_Float64x) noexcept (true);
extern _Float64x lgammaf64x (_Float64x) noexcept (true); extern _Float64x __lgammaf64x (_Float64x) noexcept (true);




extern _Float64x tgammaf64x (_Float64x) noexcept (true); extern _Float64x __tgammaf64x (_Float64x) noexcept (true);
# 285 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64x lgammaf64x_r (_Float64x, int *__signgamp) noexcept (true); extern _Float64x __lgammaf64x_r (_Float64x, int *__signgamp) noexcept (true);






extern _Float64x rintf64x (_Float64x __x) noexcept (true); extern _Float64x __rintf64x (_Float64x __x) noexcept (true);


extern _Float64x nextafterf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __nextafterf64x (_Float64x __x, _Float64x __y) noexcept (true);






extern _Float64x nextdownf64x (_Float64x __x) noexcept (true); extern _Float64x __nextdownf64x (_Float64x __x) noexcept (true);

extern _Float64x nextupf64x (_Float64x __x) noexcept (true); extern _Float64x __nextupf64x (_Float64x __x) noexcept (true);



extern _Float64x remainderf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __remainderf64x (_Float64x __x, _Float64x __y) noexcept (true);



extern _Float64x scalbnf64x (_Float64x __x, int __n) noexcept (true); extern _Float64x __scalbnf64x (_Float64x __x, int __n) noexcept (true);



extern int ilogbf64x (_Float64x __x) noexcept (true); extern int __ilogbf64x (_Float64x __x) noexcept (true);




extern long int llogbf64x (_Float64x __x) noexcept (true); extern long int __llogbf64x (_Float64x __x) noexcept (true);




extern _Float64x scalblnf64x (_Float64x __x, long int __n) noexcept (true); extern _Float64x __scalblnf64x (_Float64x __x, long int __n) noexcept (true);



extern _Float64x nearbyintf64x (_Float64x __x) noexcept (true); extern _Float64x __nearbyintf64x (_Float64x __x) noexcept (true);



extern _Float64x roundf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));



extern _Float64x truncf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));




extern _Float64x remquof64x (_Float64x __x, _Float64x __y, int *__quo) noexcept (true); extern _Float64x __remquof64x (_Float64x __x, _Float64x __y, int *__quo) noexcept (true);






extern long int lrintf64x (_Float64x __x) noexcept (true); extern long int __lrintf64x (_Float64x __x) noexcept (true);
__extension__
extern long long int llrintf64x (_Float64x __x) noexcept (true); extern long long int __llrintf64x (_Float64x __x) noexcept (true);



extern long int lroundf64x (_Float64x __x) noexcept (true); extern long int __lroundf64x (_Float64x __x) noexcept (true);
__extension__
extern long long int llroundf64x (_Float64x __x) noexcept (true); extern long long int __llroundf64x (_Float64x __x) noexcept (true);



extern _Float64x fdimf64x (_Float64x __x, _Float64x __y) noexcept (true); extern _Float64x __fdimf64x (_Float64x __x, _Float64x __y) noexcept (true);



extern _Float64x fmaxf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));



extern _Float64x fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true); extern _Float64x __fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true);




extern _Float64x roundevenf64x (_Float64x __x) noexcept (true) __attribute__ ((__const__));



extern __intmax_t fromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true)
                            ;



extern __uintmax_t ufromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true)
                              ;




extern __intmax_t fromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __intmax_t __fromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true)
                             ;




extern __uintmax_t ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true); extern __uintmax_t __ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) noexcept (true)
                               ;


extern int canonicalizef64x (_Float64x *__cx, const _Float64x *__x) noexcept (true);






extern _Float64x fmaxmagf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminmagf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));




extern _Float64x fmaximumf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminimumf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fmaximum_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminimum_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fmaximum_magf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminimum_magf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fmaximum_mag_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));


extern _Float64x fminimum_mag_numf64x (_Float64x __x, _Float64x __y) noexcept (true) __attribute__ ((__const__));




extern int totalorderf64x (const _Float64x *__x, const _Float64x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern int totalordermagf64x (const _Float64x *__x, const _Float64x *__y) noexcept (true)

     __attribute__ ((__pure__));


extern _Float64x getpayloadf64x (const _Float64x *__x) noexcept (true); extern _Float64x __getpayloadf64x (const _Float64x *__x) noexcept (true);


extern int setpayloadf64x (_Float64x *__x, _Float64x __payload) noexcept (true);


extern int setpayloadsigf64x (_Float64x *__x, _Float64x __payload) noexcept (true);
# 488 "/usr/include/math.h" 2 3 4

#undef _Mdouble_
#undef __MATH_PRECNAME
#undef __MATH_DECLARING_DOUBLE
#undef __MATH_DECLARING_FLOATN
# 512 "/usr/include/math.h" 3 4
#undef __MATHDECL_1_IMPL
#undef __MATHDECL_1
#undef __MATHDECL_ALIAS
#undef __MATHDECL
#undef __MATHCALL


#define __MATHCALL_NARROW_ARGS_1 (_Marg_ __x)
#define __MATHCALL_NARROW_ARGS_2 (_Marg_ __x, _Marg_ __y)
#define __MATHCALL_NARROW_ARGS_3 (_Marg_ __x, _Marg_ __y, _Marg_ __z)
#define __MATHCALL_NARROW_NORMAL(func,nargs) extern _Mret_ func __MATHCALL_NARROW_ARGS_ ## nargs __THROW

#define __MATHCALL_NARROW_REDIR(func,redir,nargs) extern _Mret_ __REDIRECT_NTH (func, __MATHCALL_NARROW_ARGS_ ## nargs, redir)


#define __MATHCALL_NARROW(func,redir,nargs) __MATHCALL_NARROW_NORMAL (func, nargs)




#define _Mret_ float
#define _Marg_ double
#define __MATHCALL_NAME(name) f ## name
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern float fadd (double __x, double __y) noexcept (true);


extern float fdiv (double __x, double __y) noexcept (true);


extern float ffma (double __x, double __y, double __z) noexcept (true);


extern float fmul (double __x, double __y) noexcept (true);


extern float fsqrt (double __x) noexcept (true);


extern float fsub (double __x, double __y) noexcept (true);
# 536 "/usr/include/math.h" 2 3 4
#undef _Mret_
#undef _Marg_
#undef __MATHCALL_NAME

#define _Mret_ float
#define _Marg_ long double
#define __MATHCALL_NAME(name) f ## name ## l
# 556 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern float faddl (long double __x, long double __y) noexcept (true);


extern float fdivl (long double __x, long double __y) noexcept (true);


extern float ffmal (long double __x, long double __y, long double __z) noexcept (true);


extern float fmull (long double __x, long double __y) noexcept (true);


extern float fsqrtl (long double __x) noexcept (true);


extern float fsubl (long double __x, long double __y) noexcept (true);
# 557 "/usr/include/math.h" 2 3 4
#undef _Mret_
#undef _Marg_
#undef __MATHCALL_NAME
# 569 "/usr/include/math.h" 3 4
#define _Mret_ double
#define _Marg_ long double
#define __MATHCALL_NAME(name) d ## name ## l
# 585 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern double daddl (long double __x, long double __y) noexcept (true);


extern double ddivl (long double __x, long double __y) noexcept (true);


extern double dfmal (long double __x, long double __y, long double __z) noexcept (true);


extern double dmull (long double __x, long double __y) noexcept (true);


extern double dsqrtl (long double __x) noexcept (true);


extern double dsubl (long double __x, long double __y) noexcept (true);
# 586 "/usr/include/math.h" 2 3 4
#undef _Mret_
#undef _Marg_
#undef __MATHCALL_NAME
# 663 "/usr/include/math.h" 3 4
#define _Mret_ _Float32
#define _Marg_ _Float32x
#define __MATHCALL_NAME(name) f32 ## name ## f32x
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32 f32divf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32 f32fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) noexcept (true);


extern _Float32 f32mulf32x (_Float32x __x, _Float32x __y) noexcept (true);


extern _Float32 f32sqrtf32x (_Float32x __x) noexcept (true);


extern _Float32 f32subf32x (_Float32x __x, _Float32x __y) noexcept (true);
# 667 "/usr/include/math.h" 2 3 4
#undef _Mret_
#undef _Marg_
#undef __MATHCALL_NAME



#define _Mret_ _Float32
#define _Marg_ _Float64
#define __MATHCALL_NAME(name) f32 ## name ## f64
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32 f32divf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32 f32fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) noexcept (true);


extern _Float32 f32mulf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32 f32sqrtf64 (_Float64 __x) noexcept (true);


extern _Float32 f32subf64 (_Float64 __x, _Float64 __y) noexcept (true);
# 677 "/usr/include/math.h" 2 3 4
#undef _Mret_
#undef _Marg_
#undef __MATHCALL_NAME



#define _Mret_ _Float32
#define _Marg_ _Float64x
#define __MATHCALL_NAME(name) f32 ## name ## f64x
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32 f32divf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32 f32fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true);


extern _Float32 f32mulf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32 f32sqrtf64x (_Float64x __x) noexcept (true);


extern _Float32 f32subf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 687 "/usr/include/math.h" 2 3 4
#undef _Mret_
#undef _Marg_
#undef __MATHCALL_NAME



#define _Mret_ _Float32
#define _Marg_ _Float128
#define __MATHCALL_NAME(name) f32 ## name ## f128
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf128 (_Float128 __x, _Float128 __y) noexcept (true);


extern _Float32 f32divf128 (_Float128 __x, _Float128 __y) noexcept (true);


extern _Float32 f32fmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) noexcept (true);


extern _Float32 f32mulf128 (_Float128 __x, _Float128 __y) noexcept (true);


extern _Float32 f32sqrtf128 (_Float128 __x) noexcept (true);


extern _Float32 f32subf128 (_Float128 __x, _Float128 __y) noexcept (true);
# 697 "/usr/include/math.h" 2 3 4
#undef _Mret_
#undef _Marg_
#undef __MATHCALL_NAME
# 713 "/usr/include/math.h" 3 4
#define _Mret_ _Float32x
#define _Marg_ _Float64
#define __MATHCALL_NAME(name) f32x ## name ## f64
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32x f32xdivf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32x f32xfmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) noexcept (true);


extern _Float32x f32xmulf64 (_Float64 __x, _Float64 __y) noexcept (true);


extern _Float32x f32xsqrtf64 (_Float64 __x) noexcept (true);


extern _Float32x f32xsubf64 (_Float64 __x, _Float64 __y) noexcept (true);
# 717 "/usr/include/math.h" 2 3 4
#undef _Mret_
#undef _Marg_
#undef __MATHCALL_NAME



#define _Mret_ _Float32x
#define _Marg_ _Float64x
#define __MATHCALL_NAME(name) f32x ## name ## f64x
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32x f32xdivf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32x f32xfmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true);


extern _Float32x f32xmulf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float32x f32xsqrtf64x (_Float64x __x) noexcept (true);


extern _Float32x f32xsubf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 727 "/usr/include/math.h" 2 3 4
#undef _Mret_
#undef _Marg_
#undef __MATHCALL_NAME



#define _Mret_ _Float32x
#define _Marg_ _Float128
#define __MATHCALL_NAME(name) f32x ## name ## f128
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf128 (_Float128 __x, _Float128 __y) noexcept (true);


extern _Float32x f32xdivf128 (_Float128 __x, _Float128 __y) noexcept (true);


extern _Float32x f32xfmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) noexcept (true);


extern _Float32x f32xmulf128 (_Float128 __x, _Float128 __y) noexcept (true);


extern _Float32x f32xsqrtf128 (_Float128 __x) noexcept (true);


extern _Float32x f32xsubf128 (_Float128 __x, _Float128 __y) noexcept (true);
# 737 "/usr/include/math.h" 2 3 4
#undef _Mret_
#undef _Marg_
#undef __MATHCALL_NAME
# 753 "/usr/include/math.h" 3 4
#define _Mret_ _Float64
#define _Marg_ _Float64x
#define __MATHCALL_NAME(name) f64 ## name ## f64x
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float64 f64addf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64 f64divf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64 f64fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) noexcept (true);


extern _Float64 f64mulf64x (_Float64x __x, _Float64x __y) noexcept (true);


extern _Float64 f64sqrtf64x (_Float64x __x) noexcept (true);


extern _Float64 f64subf64x (_Float64x __x, _Float64x __y) noexcept (true);
# 757 "/usr/include/math.h" 2 3 4
#undef _Mret_
#undef _Marg_
#undef __MATHCALL_NAME



#define _Mret_ _Float64
#define _Marg_ _Float128
#define __MATHCALL_NAME(name) f64 ## name ## f128
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float64 f64addf128 (_Float128 __x, _Float128 __y) noexcept (true);


extern _Float64 f64divf128 (_Float128 __x, _Float128 __y) noexcept (true);


extern _Float64 f64fmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) noexcept (true);


extern _Float64 f64mulf128 (_Float128 __x, _Float128 __y) noexcept (true);


extern _Float64 f64sqrtf128 (_Float128 __x) noexcept (true);


extern _Float64 f64subf128 (_Float128 __x, _Float128 __y) noexcept (true);
# 767 "/usr/include/math.h" 2 3 4
#undef _Mret_
#undef _Marg_
#undef __MATHCALL_NAME
# 783 "/usr/include/math.h" 3 4
#define _Mret_ _Float64x
#define _Marg_ _Float128
#define __MATHCALL_NAME(name) f64x ## name ## f128
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float64x f64xaddf128 (_Float128 __x, _Float128 __y) noexcept (true);


extern _Float64x f64xdivf128 (_Float128 __x, _Float128 __y) noexcept (true);


extern _Float64x f64xfmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) noexcept (true);


extern _Float64x f64xmulf128 (_Float128 __x, _Float128 __y) noexcept (true);


extern _Float64x f64xsqrtf128 (_Float128 __x) noexcept (true);


extern _Float64x f64xsubf128 (_Float128 __x, _Float128 __y) noexcept (true);
# 787 "/usr/include/math.h" 2 3 4
#undef _Mret_
#undef _Marg_
#undef __MATHCALL_NAME
# 814 "/usr/include/math.h" 3 4
#undef __MATHCALL_NARROW_ARGS_1
#undef __MATHCALL_NARROW_ARGS_2
#undef __MATHCALL_NARROW_ARGS_3
#undef __MATHCALL_NARROW_NORMAL
#undef __MATHCALL_NARROW_REDIR
#undef __MATHCALL_NARROW



extern int signgam;
# 878 "/usr/include/math.h" 3 4
#define __MATH_TG(TG_ARG,FUNC,ARGS) __builtin_choose_expr (__builtin_types_compatible_p (__typeof (TG_ARG), float), FUNC ## f ARGS, __builtin_choose_expr (__builtin_types_compatible_p (__typeof (TG_ARG), double), FUNC ARGS, __builtin_choose_expr (__builtin_types_compatible_p (__typeof (TG_ARG), long double), FUNC ## l ARGS, FUNC ## f128 ARGS)))
# 903 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =
#define FP_NAN 0
      0,
    FP_INFINITE =
#define FP_INFINITE 1
      1,
    FP_ZERO =
#define FP_ZERO 2
      2,
    FP_SUBNORMAL =
#define FP_SUBNORMAL 3
      3,
    FP_NORMAL =
#define FP_NORMAL 4
      4
  };
# 936 "/usr/include/math.h" 3 4
#define fpclassify(x) __builtin_fpclassify (FP_NAN, FP_INFINITE, FP_NORMAL, FP_SUBNORMAL, FP_ZERO, x)







#define signbit(x) __builtin_signbit (x)
# 963 "/usr/include/math.h" 3 4
#define isfinite(x) __builtin_isfinite (x)







#define isnormal(x) __builtin_isnormal (x)
# 980 "/usr/include/math.h" 3 4
#define isnan(x) __builtin_isnan (x)
# 999 "/usr/include/math.h" 3 4
#define isinf(x) __builtin_isinf_sign (x)





#define MATH_ERRNO 1
#define MATH_ERREXCEPT 2
# 1018 "/usr/include/math.h" 3 4
#define math_errhandling (MATH_ERRNO | MATH_ERREXCEPT)





# 1 "/usr/include/bits/iscanonical.h" 1 3 4
# 23 "/usr/include/bits/iscanonical.h" 3 4
extern int __iscanonicall (long double __x)
     noexcept (true) __attribute__ ((__const__));
#define __iscanonicalf(x) ((void) (__typeof (x)) (x), 1)
#define __iscanonical(x) ((void) (__typeof (x)) (x), 1)

#define __iscanonicalf128(x) ((void) (__typeof (x)) (x), 1)
# 46 "/usr/include/bits/iscanonical.h" 3 4
extern "C++" {
inline int iscanonical (float __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (double __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (long double __val) { return __iscanonicall (__val); }

inline int iscanonical (_Float128 __val) { return ((void) (__typeof (__val)) (__val), 1); }

}
# 1025 "/usr/include/math.h" 2 3 4
# 1036 "/usr/include/math.h" 3 4
extern "C++" {
inline int issignaling (float __val) { return __issignalingf (__val); }
inline int issignaling (double __val) { return __issignaling (__val); }
inline int
issignaling (long double __val)
{



  return __issignalingl (__val);

}



inline int issignaling (_Float128 __val) { return __issignalingf128 (__val); }

}



#define issubnormal(x) (fpclassify (x) == FP_SUBNORMAL)
# 1067 "/usr/include/math.h" 3 4
extern "C++" {
# 1098 "/usr/include/math.h" 3 4
template <class __T> inline bool
iszero (__T __val)
{
  return __val == 0;
}

}





#define MAXFLOAT 3.40282347e+38F





#define M_E 2.7182818284590452354
#define M_LOG2E 1.4426950408889634074
#define M_LOG10E 0.43429448190325182765
#define M_LN2 0.69314718055994530942
#define M_LN10 2.30258509299404568402
#define M_PI 3.14159265358979323846
#define M_PI_2 1.57079632679489661923
#define M_PI_4 0.78539816339744830962
#define M_1_PI 0.31830988618379067154
#define M_2_PI 0.63661977236758134308
#define M_2_SQRTPI 1.12837916709551257390
#define M_SQRT2 1.41421356237309504880
#define M_SQRT1_2 0.70710678118654752440




#define M_Ef 2.7182818284590452354f
#define M_LOG2Ef 1.4426950408889634074f
#define M_LOG10Ef 0.43429448190325182765f
#define M_LN2f 0.69314718055994530942f
#define M_LN10f 2.30258509299404568402f
#define M_PIf 3.14159265358979323846f
#define M_PI_2f 1.57079632679489661923f
#define M_PI_4f 0.78539816339744830962f
#define M_1_PIf 0.31830988618379067154f
#define M_2_PIf 0.63661977236758134308f
#define M_2_SQRTPIf 1.12837916709551257390f
#define M_SQRT2f 1.41421356237309504880f
#define M_SQRT1_2f 0.70710678118654752440f






#define M_El 2.718281828459045235360287471352662498L
#define M_LOG2El 1.442695040888963407359924681001892137L
#define M_LOG10El 0.434294481903251827651128918916605082L
#define M_LN2l 0.693147180559945309417232121458176568L
#define M_LN10l 2.302585092994045684017991454684364208L
#define M_PIl 3.141592653589793238462643383279502884L
#define M_PI_2l 1.570796326794896619231321691639751442L
#define M_PI_4l 0.785398163397448309615660845819875721L
#define M_1_PIl 0.318309886183790671537767526745028724L
#define M_2_PIl 0.636619772367581343075535053490057448L
#define M_2_SQRTPIl 1.128379167095512573896158903121545172L
#define M_SQRT2l 1.414213562373095048801688724209698079L
#define M_SQRT1_2l 0.707106781186547524400844362104849039L
# 1184 "/usr/include/math.h" 3 4
#define M_Ef32 __f32 (2.718281828459045235360287471352662498)
#define M_LOG2Ef32 __f32 (1.442695040888963407359924681001892137)
#define M_LOG10Ef32 __f32 (0.434294481903251827651128918916605082)
#define M_LN2f32 __f32 (0.693147180559945309417232121458176568)
#define M_LN10f32 __f32 (2.302585092994045684017991454684364208)
#define M_PIf32 __f32 (3.141592653589793238462643383279502884)
#define M_PI_2f32 __f32 (1.570796326794896619231321691639751442)
#define M_PI_4f32 __f32 (0.785398163397448309615660845819875721)
#define M_1_PIf32 __f32 (0.318309886183790671537767526745028724)
#define M_2_PIf32 __f32 (0.636619772367581343075535053490057448)
#define M_2_SQRTPIf32 __f32 (1.128379167095512573896158903121545172)
#define M_SQRT2f32 __f32 (1.414213562373095048801688724209698079)
#define M_SQRT1_2f32 __f32 (0.707106781186547524400844362104849039)



#define M_Ef64 __f64 (2.718281828459045235360287471352662498)
#define M_LOG2Ef64 __f64 (1.442695040888963407359924681001892137)
#define M_LOG10Ef64 __f64 (0.434294481903251827651128918916605082)
#define M_LN2f64 __f64 (0.693147180559945309417232121458176568)
#define M_LN10f64 __f64 (2.302585092994045684017991454684364208)
#define M_PIf64 __f64 (3.141592653589793238462643383279502884)
#define M_PI_2f64 __f64 (1.570796326794896619231321691639751442)
#define M_PI_4f64 __f64 (0.785398163397448309615660845819875721)
#define M_1_PIf64 __f64 (0.318309886183790671537767526745028724)
#define M_2_PIf64 __f64 (0.636619772367581343075535053490057448)
#define M_2_SQRTPIf64 __f64 (1.128379167095512573896158903121545172)
#define M_SQRT2f64 __f64 (1.414213562373095048801688724209698079)
#define M_SQRT1_2f64 __f64 (0.707106781186547524400844362104849039)



#define M_Ef128 __f128 (2.718281828459045235360287471352662498)
#define M_LOG2Ef128 __f128 (1.442695040888963407359924681001892137)
#define M_LOG10Ef128 __f128 (0.434294481903251827651128918916605082)
#define M_LN2f128 __f128 (0.693147180559945309417232121458176568)
#define M_LN10f128 __f128 (2.302585092994045684017991454684364208)
#define M_PIf128 __f128 (3.141592653589793238462643383279502884)
#define M_PI_2f128 __f128 (1.570796326794896619231321691639751442)
#define M_PI_4f128 __f128 (0.785398163397448309615660845819875721)
#define M_1_PIf128 __f128 (0.318309886183790671537767526745028724)
#define M_2_PIf128 __f128 (0.636619772367581343075535053490057448)
#define M_2_SQRTPIf128 __f128 (1.128379167095512573896158903121545172)
#define M_SQRT2f128 __f128 (1.414213562373095048801688724209698079)
#define M_SQRT1_2f128 __f128 (0.707106781186547524400844362104849039)



#define M_Ef32x __f32x (2.718281828459045235360287471352662498)
#define M_LOG2Ef32x __f32x (1.442695040888963407359924681001892137)
#define M_LOG10Ef32x __f32x (0.434294481903251827651128918916605082)
#define M_LN2f32x __f32x (0.693147180559945309417232121458176568)
#define M_LN10f32x __f32x (2.302585092994045684017991454684364208)
#define M_PIf32x __f32x (3.141592653589793238462643383279502884)
#define M_PI_2f32x __f32x (1.570796326794896619231321691639751442)
#define M_PI_4f32x __f32x (0.785398163397448309615660845819875721)
#define M_1_PIf32x __f32x (0.318309886183790671537767526745028724)
#define M_2_PIf32x __f32x (0.636619772367581343075535053490057448)
#define M_2_SQRTPIf32x __f32x (1.128379167095512573896158903121545172)
#define M_SQRT2f32x __f32x (1.414213562373095048801688724209698079)
#define M_SQRT1_2f32x __f32x (0.707106781186547524400844362104849039)



#define M_Ef64x __f64x (2.718281828459045235360287471352662498)
#define M_LOG2Ef64x __f64x (1.442695040888963407359924681001892137)
#define M_LOG10Ef64x __f64x (0.434294481903251827651128918916605082)
#define M_LN2f64x __f64x (0.693147180559945309417232121458176568)
#define M_LN10f64x __f64x (2.302585092994045684017991454684364208)
#define M_PIf64x __f64x (3.141592653589793238462643383279502884)
#define M_PI_2f64x __f64x (1.570796326794896619231321691639751442)
#define M_PI_4f64x __f64x (0.785398163397448309615660845819875721)
#define M_1_PIf64x __f64x (0.318309886183790671537767526745028724)
#define M_2_PIf64x __f64x (0.636619772367581343075535053490057448)
#define M_2_SQRTPIf64x __f64x (1.128379167095512573896158903121545172)
#define M_SQRT2f64x __f64x (1.414213562373095048801688724209698079)
#define M_SQRT1_2f64x __f64x (0.707106781186547524400844362104849039)
# 1275 "/usr/include/math.h" 3 4
#define isgreater(x,y) __builtin_isgreater(x, y)
#define isgreaterequal(x,y) __builtin_isgreaterequal(x, y)
#define isless(x,y) __builtin_isless(x, y)
#define islessequal(x,y) __builtin_islessequal(x, y)
#define islessgreater(x,y) __builtin_islessgreater(x, y)
#define isunordered(x,y) __builtin_isunordered(x, y)
# 1312 "/usr/include/math.h" 3 4
#define __MATH_EVAL_FMT2(x,y) ((x) + (y) + 0.0f)
# 1333 "/usr/include/math.h" 3 4
extern "C++" {
template<typename> struct __iseqsig_type;

template<> struct __iseqsig_type<float>
{
  static int __call (float __x, float __y) throw ()
  {
    return __iseqsigf (__x, __y);
  }
};

template<> struct __iseqsig_type<double>
{
  static int __call (double __x, double __y) throw ()
  {
    return __iseqsig (__x, __y);
  }
};

template<> struct __iseqsig_type<long double>
{
  static int __call (long double __x, long double __y) throw ()
  {

    return __iseqsigl (__x, __y);



  }
};


template<> struct __iseqsig_type<_Float32>
{
  static int __call (_Float32 __x, _Float32 __y) throw ()
  {
    return __iseqsigf (__x, __y);
  }
};



template<> struct __iseqsig_type<_Float64>
{
  static int __call (_Float64 __x, _Float64 __y) throw ()
  {
    return __iseqsig (__x, __y);
  }
};





template<> struct __iseqsig_type<_Float128>
{
  static int __call (_Float128 __x, _Float128 __y) throw ()
  {

    return __iseqsigf128 (__x, __y);



  }
};



template<> struct __iseqsig_type<_Float32x>
{
  static int __call (_Float32x __x, _Float32x __y) throw ()
  {
    return __iseqsig (__x, __y);
  }
};



template<> struct __iseqsig_type<_Float64x>
{
  static int __call (_Float64x __x, _Float64x __y) throw ()
  {

    return __iseqsigl (__x, __y);



  }
};


template<typename _T1, typename _T2>
inline int
iseqsig (_T1 __x, _T2 __y) throw ()
{

  typedef decltype (((__x) + (__y) + 0.0f)) _T3;



  return __iseqsig_type<_T3>::__call (__x, __y);
}

}




}
# 56 "/usr/include/c++/15.1.1/cmath" 2 3
#undef _GLIBCXX_INCLUDE_NEXT_C_HEADERS
 
# 57 "/usr/include/c++/15.1.1/cmath" 3
#pragma GCC diagnostic pop



#define __glibcxx_want_hypot 
#define __glibcxx_want_interpolate 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 64 "/usr/include/c++/15.1.1/cmath" 2 3


#undef div
#undef acos
#undef asin
#undef atan
#undef atan2
#undef ceil
#undef cos
#undef cosh
#undef exp
#undef fabs
#undef floor
#undef fmod
#undef frexp
#undef ldexp
#undef log
#undef log10
#undef modf
#undef pow
#undef sin
#undef sinh
#undef sqrt
#undef tan
#undef tanh

extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 407 "/usr/include/c++/15.1.1/cmath" 3
  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }
# 1060 "/usr/include/c++/15.1.1/cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }





#undef fpclassify
#undef isfinite
#undef isinf
#undef isnan
#undef isnormal
#undef signbit
#undef isgreater
#undef isgreaterequal
#undef isless
#undef islessequal
#undef islessgreater
#undef isunordered




  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 4 : 2; }



  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp)
    { return true; }



  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }





  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }


  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp)
    { return false; }



  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }





  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }


  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp)
    { return false; }



  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }




  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }



  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }



  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }



  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }



  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 1781 "/usr/include/c++/15.1.1/cmath" 3
#undef acosf
#undef acosl
#undef asinf
#undef asinl
#undef atanf
#undef atanl
#undef atan2f
#undef atan2l
#undef ceilf
#undef ceill
#undef cosf
#undef cosl
#undef coshf
#undef coshl
#undef expf
#undef expl
#undef fabsf
#undef fabsl
#undef floorf
#undef floorl
#undef fmodf
#undef fmodl
#undef frexpf
#undef frexpl
#undef ldexpf
#undef ldexpl
#undef logf
#undef logl
#undef log10f
#undef log10l
#undef modff
#undef modfl
#undef powf
#undef powl
#undef sinf
#undef sinl
#undef sinhf
#undef sinhl
#undef sqrtf
#undef sqrtl
#undef tanf
#undef tanl
#undef tanhf
#undef tanhl


  using ::acosf;


  using ::acosl;



  using ::asinf;


  using ::asinl;



  using ::atanf;


  using ::atanl;



  using ::atan2f;


  using ::atan2l;



  using ::ceilf;


  using ::ceill;



  using ::cosf;


  using ::cosl;



  using ::coshf;


  using ::coshl;



  using ::expf;


  using ::expl;



  using ::fabsf;


  using ::fabsl;



  using ::floorf;


  using ::floorl;



  using ::fmodf;


  using ::fmodl;



  using ::frexpf;


  using ::frexpl;



  using ::ldexpf;


  using ::ldexpl;



  using ::logf;


  using ::logl;



  using ::log10f;


  using ::log10l;



  using ::modff;


  using ::modfl;



  using ::powf;


  using ::powl;



  using ::sinf;


  using ::sinl;



  using ::sinhf;


  using ::sinhl;



  using ::sqrtf;


  using ::sqrtl;



  using ::tanf;


  using ::tanl;



  using ::tanhf;


  using ::tanhl;




#undef acosh
#undef acoshf
#undef acoshl
#undef asinh
#undef asinhf
#undef asinhl
#undef atanh
#undef atanhf
#undef atanhl
#undef cbrt
#undef cbrtf
#undef cbrtl
#undef copysign
#undef copysignf
#undef copysignl
#undef erf
#undef erff
#undef erfl
#undef erfc
#undef erfcf
#undef erfcl
#undef exp2
#undef exp2f
#undef exp2l
#undef expm1
#undef expm1f
#undef expm1l
#undef fdim
#undef fdimf
#undef fdiml
#undef fma
#undef fmaf
#undef fmal
#undef fmax
#undef fmaxf
#undef fmaxl
#undef fmin
#undef fminf
#undef fminl
#undef hypot
#undef hypotf
#undef hypotl
#undef ilogb
#undef ilogbf
#undef ilogbl
#undef lgamma
#undef lgammaf
#undef lgammal

#undef llrint
#undef llrintf
#undef llrintl
#undef llround
#undef llroundf
#undef llroundl

#undef log1p
#undef log1pf
#undef log1pl
#undef log2
#undef log2f
#undef log2l
#undef logb
#undef logbf
#undef logbl
#undef lrint
#undef lrintf
#undef lrintl
#undef lround
#undef lroundf
#undef lroundl
#undef nan
#undef nanf
#undef nanl
#undef nearbyint
#undef nearbyintf
#undef nearbyintl
#undef nextafter
#undef nextafterf
#undef nextafterl
#undef nexttoward
#undef nexttowardf
#undef nexttowardl
#undef remainder
#undef remainderf
#undef remainderl
#undef remquo
#undef remquof
#undef remquol
#undef rint
#undef rintf
#undef rintl
#undef round
#undef roundf
#undef roundl
#undef scalbln
#undef scalblnf
#undef scalblnl
#undef scalbn
#undef scalbnf
#undef scalbnl
#undef tgamma
#undef tgammaf
#undef tgammal
#undef trunc
#undef truncf
#undef truncl



  using ::double_t;
  using ::float_t;



  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;


  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;


  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;



  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }



  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }



  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }



  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }



  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }



  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }



  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }



  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }



  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }



  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }



  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }



  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }



  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }



  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }



  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }



  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }



  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }



  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }



  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }



  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }




  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }



  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }



  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }



  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }



  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }



  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }



  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }



  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }



  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }



  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }



  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }



  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }



  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }



  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }



  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }
# 3689 "/usr/include/c++/15.1.1/cmath" 3
  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }

  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }

  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }

  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }

  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }

  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }

  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }

  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }







  template<typename _Tp>
    inline _Tp
    __hypot3(_Tp __x, _Tp __y, _Tp __z)
    {
      __x = std::abs(__x);
      __y = std::abs(__y);
      __z = std::abs(__z);
      if (_Tp __a = __x < __y ? __y < __z ? __z : __y : __x < __z ? __z : __x)
 return __a * std::sqrt((__x / __a) * (__x / __a)
          + (__y / __a) * (__y / __a)
          + (__z / __a) * (__z / __a));
      else
 return {};
    }

  inline float
  hypot(float __x, float __y, float __z)
  { return std::__hypot3<float>(__x, __y, __z); }

  inline double
  hypot(double __x, double __y, double __z)
  { return std::__hypot3<double>(__x, __y, __z); }

  inline long double
  hypot(long double __x, long double __y, long double __z)
  { return std::__hypot3<long double>(__x, __y, __z); }

  template<typename _Tp, typename _Up, typename _Vp>
    __gnu_cxx::__promoted_t<_Tp, _Up, _Vp>
    hypot(_Tp __x, _Up __y, _Vp __z)
    {
      using __type = __gnu_cxx::__promoted_t<_Tp, _Up, _Vp>;
      return std::__hypot3<__type>(__x, __y, __z);
    }
# 3909 "/usr/include/c++/15.1.1/cmath" 3

}


# 1 "/usr/include/c++/15.1.1/bits/specfun.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/specfun.h" 3
#define _GLIBCXX_BITS_SPECFUN_H 1



#define __glibcxx_want_math_spec_funcs 
#define __glibcxx_want_math_special_functions 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L

#define __STDCPP_MATH_SPEC_FUNCS__ 201003L



#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 38 "/usr/include/c++/15.1.1/bits/specfun.h" 2 3






# 1 "/usr/include/c++/15.1.1/limits" 1 3
# 38 "/usr/include/c++/15.1.1/limits" 3
#define _GLIBCXX_NUMERIC_LIMITS 1





#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#pragma GCC diagnostic ignored "-Wlong-long"
#pragma GCC diagnostic ignored "-Wc++23-extensions"
# 87 "/usr/include/c++/15.1.1/limits" 3
#define __glibcxx_integral_traps true
# 96 "/usr/include/c++/15.1.1/limits" 3
#define __glibcxx_float_has_denorm_loss false


#define __glibcxx_float_traps false


#define __glibcxx_float_tinyness_before false







#define __glibcxx_double_has_denorm_loss false


#define __glibcxx_double_traps false


#define __glibcxx_double_tinyness_before false







#define __glibcxx_long_double_has_denorm_loss false


#define __glibcxx_long_double_traps false


#define __glibcxx_long_double_tinyness_before false




#define __glibcxx_signed_b(T,B) ((T)(-1) < 0)

#define __glibcxx_min_b(T,B) (__glibcxx_signed_b (T,B) ? -__glibcxx_max_b (T,B) - 1 : (T)0)


#define __glibcxx_max_b(T,B) (__glibcxx_signed_b (T,B) ? (((((T)1 << (__glibcxx_digits_b (T,B) - 1)) - 1) << 1) + 1) : ~(T)0)



#define __glibcxx_digits_b(T,B) (B - __glibcxx_signed_b (T,B))



#define __glibcxx_digits10_b(T,B) (__glibcxx_digits_b (T,B) * 643L / 2136)


#define __glibcxx_signed(T) __glibcxx_signed_b (T, sizeof(T) * __CHAR_BIT__)

#define __glibcxx_min(T) __glibcxx_min_b (T, sizeof(T) * __CHAR_BIT__)

#define __glibcxx_max(T) __glibcxx_max_b (T, sizeof(T) * __CHAR_BIT__)

#define __glibcxx_digits(T) __glibcxx_digits_b (T, sizeof(T) * __CHAR_BIT__)

#define __glibcxx_digits10(T) __glibcxx_digits10_b (T, sizeof(T) * __CHAR_BIT__)


#define __glibcxx_max_digits10(T) (2 + (T) * 643L / 2136)


namespace std __attribute__ ((__visibility__ ("default")))
{







  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };







  enum float_denorm_style
  {

    denorm_indeterminate = -1,

    denorm_absent = 0,

    denorm_present = 1
  };
# 209 "/usr/include/c++/15.1.1/limits" 3
  struct __numeric_limits_base
  {


    static constexpr bool is_specialized = false;




    static constexpr int digits = 0;


    static constexpr int digits10 = 0;




    static constexpr int max_digits10 = 0;



    static constexpr bool is_signed = false;


    static constexpr bool is_integer = false;




    static constexpr bool is_exact = false;



    static constexpr int radix = 0;



    static constexpr int min_exponent = 0;



    static constexpr int min_exponent10 = 0;




    static constexpr int max_exponent = 0;



    static constexpr int max_exponent10 = 0;


    static constexpr bool has_infinity = false;



    static constexpr bool has_quiet_NaN = false;



    static constexpr bool has_signaling_NaN = false;


    static constexpr float_denorm_style has_denorm = denorm_absent;



    static constexpr bool has_denorm_loss = false;



    static constexpr bool is_iec559 = false;




    static constexpr bool is_bounded = false;
# 295 "/usr/include/c++/15.1.1/limits" 3
    static constexpr bool is_modulo = false;


    static constexpr bool traps = false;


    static constexpr bool tinyness_before = false;




    static constexpr float_round_style round_style =
          round_toward_zero;
  };
# 318 "/usr/include/c++/15.1.1/limits" 3
  template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {


      static constexpr _Tp
      min() noexcept { return _Tp(); }


      static constexpr _Tp
      max() noexcept { return _Tp(); }




      static constexpr _Tp
      lowest() noexcept { return _Tp(); }




      static constexpr _Tp
      epsilon() noexcept { return _Tp(); }


      static constexpr _Tp
      round_error() noexcept { return _Tp(); }


      static constexpr _Tp
      infinity() noexcept { return _Tp(); }



      static constexpr _Tp
      quiet_NaN() noexcept { return _Tp(); }



      static constexpr _Tp
      signaling_NaN() noexcept { return _Tp(); }




      static constexpr _Tp
      denorm_min() noexcept { return _Tp(); }
    };




  template<typename _Tp>
    struct numeric_limits<const _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<volatile _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<const volatile _Tp>
    : public numeric_limits<_Tp> { };
# 390 "/usr/include/c++/15.1.1/limits" 3
  template<>
    struct numeric_limits<bool>
    {
      static constexpr bool is_specialized = true;

      static constexpr bool
      min() noexcept { return false; }

      static constexpr bool
      max() noexcept { return true; }


      static constexpr bool
      lowest() noexcept { return min(); }

      static constexpr int digits = 1;
      static constexpr int digits10 = 0;

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr bool
      epsilon() noexcept { return false; }

      static constexpr bool
      round_error() noexcept { return false; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr bool
      infinity() noexcept { return false; }

      static constexpr bool
      quiet_NaN() noexcept { return false; }

      static constexpr bool
      signaling_NaN() noexcept { return false; }

      static constexpr bool
      denorm_min() noexcept { return false; }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;




      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char>
    {
      static constexpr bool is_specialized = true;

      static constexpr char
      min() noexcept { return (((char)(-1) < 0) ? -(((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0) - 1 : (char)0); }

      static constexpr char
      max() noexcept { return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0); }


      static constexpr char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((char)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char
      epsilon() noexcept { return 0; }

      static constexpr char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr
      char infinity() noexcept { return char(); }

      static constexpr char
      quiet_NaN() noexcept { return char(); }

      static constexpr char
      signaling_NaN() noexcept { return char(); }

      static constexpr char
      denorm_min() noexcept { return static_cast<char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<signed char>
    {
      static constexpr bool is_specialized = true;

      static constexpr signed char
      min() noexcept { return -0x7f - 1; }

      static constexpr signed char
      max() noexcept { return 0x7f; }


      static constexpr signed char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr signed char
      epsilon() noexcept { return 0; }

      static constexpr signed char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr signed char
      infinity() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      quiet_NaN() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      signaling_NaN() noexcept
      { return static_cast<signed char>(0); }

      static constexpr signed char
      denorm_min() noexcept
      { return static_cast<signed char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned char>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned char
      min() noexcept { return 0; }

      static constexpr unsigned char
      max() noexcept { return 0x7f * 2U + 1; }


      static constexpr unsigned char
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned char
      epsilon() noexcept { return 0; }

      static constexpr unsigned char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned char
      infinity() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      quiet_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      signaling_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      denorm_min() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<wchar_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr wchar_t
      min() noexcept { return (((wchar_t)(-1) < 0) ? -(((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0) - 1 : (wchar_t)0); }

      static constexpr wchar_t
      max() noexcept { return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0); }


      static constexpr wchar_t
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((wchar_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr wchar_t
      epsilon() noexcept { return 0; }

      static constexpr wchar_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr wchar_t
      infinity() noexcept { return wchar_t(); }

      static constexpr wchar_t
      quiet_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      signaling_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      denorm_min() noexcept { return wchar_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };
# 803 "/usr/include/c++/15.1.1/limits" 3
  template<>
    struct numeric_limits<char16_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char16_t
      min() noexcept { return (((char16_t)(-1) < 0) ? -(((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0) - 1 : (char16_t)0); }

      static constexpr char16_t
      max() noexcept { return (((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0); }

      static constexpr char16_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char16_t) * 8 - ((char16_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char16_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char16_t
      epsilon() noexcept { return 0; }

      static constexpr char16_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char16_t
      infinity() noexcept { return char16_t(); }

      static constexpr char16_t
      quiet_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      signaling_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      denorm_min() noexcept { return char16_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<char32_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char32_t
      min() noexcept { return (((char32_t)(-1) < 0) ? -(((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0) - 1 : (char32_t)0); }

      static constexpr char32_t
      max() noexcept { return (((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0); }

      static constexpr char32_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char32_t) * 8 - ((char32_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char32_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char32_t
      epsilon() noexcept { return 0; }

      static constexpr char32_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char32_t
      infinity() noexcept { return char32_t(); }

      static constexpr char32_t
      quiet_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      signaling_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      denorm_min() noexcept { return char32_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };



  template<>
    struct numeric_limits<short>
    {
      static constexpr bool is_specialized = true;

      static constexpr short
      min() noexcept { return -0x7fff - 1; }

      static constexpr short
      max() noexcept { return 0x7fff; }


      static constexpr short
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static constexpr int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr short
      epsilon() noexcept { return 0; }

      static constexpr short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr short
      infinity() noexcept { return short(); }

      static constexpr short
      quiet_NaN() noexcept { return short(); }

      static constexpr short
      signaling_NaN() noexcept { return short(); }

      static constexpr short
      denorm_min() noexcept { return short(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned short>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned short
      min() noexcept { return 0; }

      static constexpr unsigned short
      max() noexcept { return 0x7fff * 2U + 1; }


      static constexpr unsigned short
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned short
      epsilon() noexcept { return 0; }

      static constexpr unsigned short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned short
      infinity() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      quiet_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      signaling_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      denorm_min() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<int>
    {
      static constexpr bool is_specialized = true;

      static constexpr int
      min() noexcept { return -0x7fffffff - 1; }

      static constexpr int
      max() noexcept { return 0x7fffffff; }


      static constexpr int
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static constexpr int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr int
      epsilon() noexcept { return 0; }

      static constexpr int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr int
      infinity() noexcept { return static_cast<int>(0); }

      static constexpr int
      quiet_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      signaling_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      denorm_min() noexcept { return static_cast<int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned int>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned int
      min() noexcept { return 0; }

      static constexpr unsigned int
      max() noexcept { return 0x7fffffff * 2U + 1; }


      static constexpr unsigned int
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned int
      epsilon() noexcept { return 0; }

      static constexpr unsigned int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned int
      infinity() noexcept { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      quiet_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      signaling_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      denorm_min() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long
      min() noexcept { return -0x7fffffffffffffffL - 1; }

      static constexpr long
      max() noexcept { return 0x7fffffffffffffffL; }


      static constexpr long
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static constexpr int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long
      epsilon() noexcept { return 0; }

      static constexpr long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long
      infinity() noexcept { return static_cast<long>(0); }

      static constexpr long
      quiet_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      signaling_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      denorm_min() noexcept { return static_cast<long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long
      min() noexcept { return 0; }

      static constexpr unsigned long
      max() noexcept { return 0x7fffffffffffffffL * 2UL + 1; }


      static constexpr unsigned long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long
      infinity() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      quiet_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      signaling_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      denorm_min() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long long
      min() noexcept { return -0x7fffffffffffffffLL - 1; }

      static constexpr long long
      max() noexcept { return 0x7fffffffffffffffLL; }


      static constexpr long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long long
      epsilon() noexcept { return 0; }

      static constexpr long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long long
      infinity() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      quiet_NaN() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      signaling_NaN() noexcept
      { return static_cast<long long>(0); }

      static constexpr long long
      denorm_min() noexcept { return static_cast<long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long long
      min() noexcept { return 0; }

      static constexpr unsigned long long
      max() noexcept { return 0x7fffffffffffffffLL * 2ULL + 1; }


      static constexpr unsigned long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long long
      infinity() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      quiet_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      signaling_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      denorm_min() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };

#define __INT_N(TYPE,BITSIZE,EXT,UEXT) __extension__ template<> struct numeric_limits<TYPE> { static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true; static _GLIBCXX_CONSTEXPR TYPE min() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_min_b (TYPE, BITSIZE); } static _GLIBCXX_CONSTEXPR TYPE max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max_b (TYPE, BITSIZE); } static _GLIBCXX_USE_CONSTEXPR int digits = BITSIZE - 1; static _GLIBCXX_USE_CONSTEXPR int digits10 = (BITSIZE - 1) * 643L / 2136; static _GLIBCXX_USE_CONSTEXPR bool is_signed = true; static _GLIBCXX_USE_CONSTEXPR bool is_integer = true; static _GLIBCXX_USE_CONSTEXPR bool is_exact = true; static _GLIBCXX_USE_CONSTEXPR int radix = 2; static _GLIBCXX_CONSTEXPR TYPE epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; } static _GLIBCXX_CONSTEXPR TYPE round_error() _GLIBCXX_USE_NOEXCEPT { return 0; } EXT static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0; static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0; static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0; static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0; static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false; static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false; static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false; static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm = denorm_absent; static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false; static _GLIBCXX_CONSTEXPR TYPE infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<TYPE>(0); } static _GLIBCXX_CONSTEXPR TYPE quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<TYPE>(0); } static _GLIBCXX_CONSTEXPR TYPE signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<TYPE>(0); } static _GLIBCXX_CONSTEXPR TYPE denorm_min() _GLIBCXX_USE_NOEXCEPT { return static_cast<TYPE>(0); } static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false; static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true; static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false; static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps; static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false; static _GLIBCXX_USE_CONSTEXPR float_round_style round_style = round_toward_zero; }; __extension__ template<> struct numeric_limits<unsigned TYPE> { static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true; static _GLIBCXX_CONSTEXPR unsigned TYPE min() _GLIBCXX_USE_NOEXCEPT { return 0; } static _GLIBCXX_CONSTEXPR unsigned TYPE max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_max_b (unsigned TYPE, BITSIZE); } UEXT static _GLIBCXX_USE_CONSTEXPR int digits = BITSIZE; static _GLIBCXX_USE_CONSTEXPR int digits10 = BITSIZE * 643L / 2136; static _GLIBCXX_USE_CONSTEXPR bool is_signed = false; static _GLIBCXX_USE_CONSTEXPR bool is_integer = true; static _GLIBCXX_USE_CONSTEXPR bool is_exact = true; static _GLIBCXX_USE_CONSTEXPR int radix = 2; static _GLIBCXX_CONSTEXPR unsigned TYPE epsilon() _GLIBCXX_USE_NOEXCEPT { return 0; } static _GLIBCXX_CONSTEXPR unsigned TYPE round_error() _GLIBCXX_USE_NOEXCEPT { return 0; } static _GLIBCXX_USE_CONSTEXPR int min_exponent = 0; static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = 0; static _GLIBCXX_USE_CONSTEXPR int max_exponent = 0; static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = 0; static _GLIBCXX_USE_CONSTEXPR bool has_infinity = false; static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = false; static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = false; static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm = denorm_absent; static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false; static _GLIBCXX_CONSTEXPR unsigned TYPE infinity() _GLIBCXX_USE_NOEXCEPT { return static_cast<unsigned TYPE>(0); } static _GLIBCXX_CONSTEXPR unsigned TYPE quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<unsigned TYPE>(0); } static _GLIBCXX_CONSTEXPR unsigned TYPE signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return static_cast<unsigned TYPE>(0); } static _GLIBCXX_CONSTEXPR unsigned TYPE denorm_min() _GLIBCXX_USE_NOEXCEPT { return static_cast<unsigned TYPE>(0); } static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = false; static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true; static _GLIBCXX_USE_CONSTEXPR bool is_modulo = true; static _GLIBCXX_USE_CONSTEXPR bool traps = __glibcxx_integral_traps; static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false; static _GLIBCXX_USE_CONSTEXPR float_round_style round_style = round_toward_zero; };
# 1627 "/usr/include/c++/15.1.1/limits" 3
#define __INT_N_201103(TYPE) static constexpr TYPE lowest() noexcept { return min(); } static constexpr int max_digits10 = 0;




#define __INT_N_U201103(TYPE) static constexpr unsigned TYPE lowest() noexcept { return min(); } static constexpr int max_digits10 = 0;
# 1644 "/usr/include/c++/15.1.1/limits" 3
  __extension__ template<> struct numeric_limits<__int128> { static constexpr bool is_specialized = true; static constexpr __int128 min() noexcept { return (((__int128)(-1) < 0) ? -(((__int128)(-1) < 0) ? (((((__int128)1 << ((128 - ((__int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(__int128)0) - 1 : (__int128)0); } static constexpr __int128 max() noexcept { return (((__int128)(-1) < 0) ? (((((__int128)1 << ((128 - ((__int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(__int128)0); } static constexpr int digits = 128 - 1; static constexpr int digits10 = (128 - 1) * 643L / 2136; static constexpr bool is_signed = true; static constexpr bool is_integer = true; static constexpr bool is_exact = true; static constexpr int radix = 2; static constexpr __int128 epsilon() noexcept { return 0; } static constexpr __int128 round_error() noexcept { return 0; } static constexpr __int128 lowest() noexcept { return min(); } static constexpr int max_digits10 = 0; static constexpr int min_exponent = 0; static constexpr int min_exponent10 = 0; static constexpr int max_exponent = 0; static constexpr int max_exponent10 = 0; static constexpr bool has_infinity = false; static constexpr bool has_quiet_NaN = false; static constexpr bool has_signaling_NaN = false; static constexpr float_denorm_style has_denorm = denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr __int128 infinity() noexcept { return static_cast<__int128>(0); } static constexpr __int128 quiet_NaN() noexcept { return static_cast<__int128>(0); } static constexpr __int128 signaling_NaN() noexcept { return static_cast<__int128>(0); } static constexpr __int128 denorm_min() noexcept { return static_cast<__int128>(0); } static constexpr bool is_iec559 = false; static constexpr bool is_bounded = true; static constexpr bool is_modulo = false; static constexpr bool traps = true; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_toward_zero; }; __extension__ template<> struct numeric_limits<unsigned __int128> { static constexpr bool is_specialized = true; static constexpr unsigned __int128 min() noexcept { return 0; } static constexpr unsigned __int128 max() noexcept { return (((unsigned __int128)(-1) < 0) ? (((((unsigned __int128)1 << ((128 - ((unsigned __int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(unsigned __int128)0); } static constexpr unsigned __int128 lowest() noexcept { return min(); } static constexpr int max_digits10 = 0; static constexpr int digits = 128; static constexpr int digits10 = 128 * 643L / 2136; static constexpr bool is_signed = false; static constexpr bool is_integer = true; static constexpr bool is_exact = true; static constexpr int radix = 2; static constexpr unsigned __int128 epsilon() noexcept { return 0; } static constexpr unsigned __int128 round_error() noexcept { return 0; } static constexpr int min_exponent = 0; static constexpr int min_exponent10 = 0; static constexpr int max_exponent = 0; static constexpr int max_exponent10 = 0; static constexpr bool has_infinity = false; static constexpr bool has_quiet_NaN = false; static constexpr bool has_signaling_NaN = false; static constexpr float_denorm_style has_denorm = denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr unsigned __int128 infinity() noexcept { return static_cast<unsigned __int128>(0); } static constexpr unsigned __int128 quiet_NaN() noexcept { return static_cast<unsigned __int128>(0); } static constexpr unsigned __int128 signaling_NaN() noexcept { return static_cast<unsigned __int128>(0); } static constexpr unsigned __int128 denorm_min() noexcept { return static_cast<unsigned __int128>(0); } static constexpr bool is_iec559 = false; static constexpr bool is_bounded = true; static constexpr bool is_modulo = true; static constexpr bool traps = true; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_toward_zero; };
# 1670 "/usr/include/c++/15.1.1/limits" 3
#undef __INT_N
#undef __INT_N_201103
#undef __INT_N_U201103



  template<>
    struct numeric_limits<float>
    {
      static constexpr bool is_specialized = true;

      static constexpr float
      min() noexcept { return 1.17549435082228750796873653722224568e-38F; }

      static constexpr float
      max() noexcept { return 3.40282346638528859811704183484516925e+38F; }


      static constexpr float
      lowest() noexcept { return -3.40282346638528859811704183484516925e+38F; }


      static constexpr int digits = 24;
      static constexpr int digits10 = 6;

      static constexpr int max_digits10
  = (2 + (24) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr float
      epsilon() noexcept { return 1.19209289550781250000000000000000000e-7F; }

      static constexpr float
      round_error() noexcept { return 0.5F; }

      static constexpr int min_exponent = (-125);
      static constexpr int min_exponent10 = (-37);
      static constexpr int max_exponent = 128;
      static constexpr int max_exponent10 = 38;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
       = false;

      static constexpr float
      infinity() noexcept { return __builtin_huge_valf(); }

      static constexpr float
      quiet_NaN() noexcept { return __builtin_nanf(""); }

      static constexpr float
      signaling_NaN() noexcept { return __builtin_nansf(""); }

      static constexpr float
      denorm_min() noexcept { return 1.40129846432481707092372958328991613e-45F; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };

#undef __glibcxx_float_has_denorm_loss
#undef __glibcxx_float_traps
#undef __glibcxx_float_tinyness_before


  template<>
    struct numeric_limits<double>
    {
      static constexpr bool is_specialized = true;

      static constexpr double
      min() noexcept { return double(2.22507385850720138309023271733240406e-308L); }

      static constexpr double
      max() noexcept { return double(1.79769313486231570814527423731704357e+308L); }


      static constexpr double
      lowest() noexcept { return -double(1.79769313486231570814527423731704357e+308L); }


      static constexpr int digits = 53;
      static constexpr int digits10 = 15;

      static constexpr int max_digits10
  = (2 + (53) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr double
      epsilon() noexcept { return double(2.22044604925031308084726333618164062e-16L); }

      static constexpr double
      round_error() noexcept { return 0.5; }

      static constexpr int min_exponent = (-1021);
      static constexpr int min_exponent10 = (-307);
      static constexpr int max_exponent = 1024;
      static constexpr int max_exponent10 = 308;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
        = false;

      static constexpr double
      infinity() noexcept { return __builtin_huge_val(); }

      static constexpr double
      quiet_NaN() noexcept { return __builtin_nan(""); }

      static constexpr double
      signaling_NaN() noexcept { return __builtin_nans(""); }

      static constexpr double
      denorm_min() noexcept { return double(4.94065645841246544176568792868221372e-324L); }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };

#undef __glibcxx_double_has_denorm_loss
#undef __glibcxx_double_traps
#undef __glibcxx_double_tinyness_before


  template<>
    struct numeric_limits<long double>
    {
      static constexpr bool is_specialized = true;

      static constexpr long double
      min() noexcept { return 3.36210314311209350626267781732175260e-4932L; }

      static constexpr long double
      max() noexcept { return 1.18973149535723176502126385303097021e+4932L; }


      static constexpr long double
      lowest() noexcept { return -1.18973149535723176502126385303097021e+4932L; }


      static constexpr int digits = 64;
      static constexpr int digits10 = 18;

      static constexpr int max_digits10
  = (2 + (64) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr long double
      epsilon() noexcept { return 1.08420217248550443400745280086994171e-19L; }

      static constexpr long double
      round_error() noexcept { return 0.5L; }

      static constexpr int min_exponent = (-16381);
      static constexpr int min_exponent10 = (-4931);
      static constexpr int max_exponent = 16384;
      static constexpr int max_exponent10 = 4932;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
 = false;

      static constexpr long double
      infinity() noexcept { return __builtin_huge_vall(); }

      static constexpr long double
      quiet_NaN() noexcept { return __builtin_nanl(""); }

      static constexpr long double
      signaling_NaN() noexcept { return __builtin_nansl(""); }

      static constexpr long double
      denorm_min() noexcept { return 3.64519953188247460252840593361941982e-4951L; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before =
      false;
      static constexpr float_round_style round_style =
            round_to_nearest;
    };

#undef __glibcxx_long_double_has_denorm_loss
#undef __glibcxx_long_double_traps
#undef __glibcxx_long_double_tinyness_before

#define __glibcxx_concat3_(P,M,S) P ## M ## S
#define __glibcxx_concat3(P,M,S) __glibcxx_concat3_ (P,M,S)


#define __max_digits10 max_digits10


#define __glibcxx_float_n(BITSIZE) __extension__ template<> struct numeric_limits<_Float ##BITSIZE> { static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true; static _GLIBCXX_CONSTEXPR _Float ##BITSIZE min() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_concat3 (__FLT, BITSIZE, _MIN__); } static _GLIBCXX_CONSTEXPR _Float ##BITSIZE max() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_concat3 (__FLT, BITSIZE, _MAX__); } static _GLIBCXX_CONSTEXPR _Float ##BITSIZE lowest() _GLIBCXX_USE_NOEXCEPT { return -__glibcxx_concat3 (__FLT, BITSIZE, _MAX__); } static _GLIBCXX_USE_CONSTEXPR int digits = __glibcxx_concat3 (__FLT, BITSIZE, _MANT_DIG__); static _GLIBCXX_USE_CONSTEXPR int digits10 = __glibcxx_concat3 (__FLT, BITSIZE, _DIG__); static _GLIBCXX_USE_CONSTEXPR int __max_digits10 = __glibcxx_max_digits10 (__glibcxx_concat3 (__FLT, BITSIZE, _MANT_DIG__)); static _GLIBCXX_USE_CONSTEXPR bool is_signed = true; static _GLIBCXX_USE_CONSTEXPR bool is_integer = false; static _GLIBCXX_USE_CONSTEXPR bool is_exact = false; static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__; static _GLIBCXX_CONSTEXPR _Float ##BITSIZE epsilon() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_concat3 (__FLT, BITSIZE, _EPSILON__); } static _GLIBCXX_CONSTEXPR _Float ##BITSIZE round_error() _GLIBCXX_USE_NOEXCEPT { return 0.5F ##BITSIZE; } static _GLIBCXX_USE_CONSTEXPR int min_exponent = __glibcxx_concat3 (__FLT, BITSIZE, _MIN_EXP__); static _GLIBCXX_USE_CONSTEXPR int min_exponent10 = __glibcxx_concat3 (__FLT, BITSIZE, _MIN_10_EXP__); static _GLIBCXX_USE_CONSTEXPR int max_exponent = __glibcxx_concat3 (__FLT, BITSIZE, _MAX_EXP__); static _GLIBCXX_USE_CONSTEXPR int max_exponent10 = __glibcxx_concat3 (__FLT, BITSIZE, _MAX_10_EXP__); static _GLIBCXX_USE_CONSTEXPR bool has_infinity = __glibcxx_concat3 (__FLT, BITSIZE, _HAS_INFINITY__); static _GLIBCXX_USE_CONSTEXPR bool has_quiet_NaN = __glibcxx_concat3 (__FLT, BITSIZE, _HAS_QUIET_NAN__); static _GLIBCXX_USE_CONSTEXPR bool has_signaling_NaN = has_quiet_NaN; static _GLIBCXX_USE_CONSTEXPR float_denorm_style has_denorm = bool(__glibcxx_concat3 (__FLT, BITSIZE, _HAS_DENORM__)) ? denorm_present : denorm_absent; static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss = false; static _GLIBCXX_CONSTEXPR _Float ##BITSIZE infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf ##BITSIZE(); } static _GLIBCXX_CONSTEXPR _Float ##BITSIZE quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return __builtin_nanf ##BITSIZE(""); } static _GLIBCXX_CONSTEXPR _Float ##BITSIZE signaling_NaN() _GLIBCXX_USE_NOEXCEPT { return __builtin_nansf ##BITSIZE(""); } static _GLIBCXX_CONSTEXPR _Float ##BITSIZE denorm_min() _GLIBCXX_USE_NOEXCEPT { return __glibcxx_concat3 (__FLT, BITSIZE, _DENORM_MIN__); } static _GLIBCXX_USE_CONSTEXPR bool is_iec559 = has_infinity && has_quiet_NaN && has_denorm == denorm_present; static _GLIBCXX_USE_CONSTEXPR bool is_bounded = true; static _GLIBCXX_USE_CONSTEXPR bool is_modulo = false; static _GLIBCXX_USE_CONSTEXPR bool traps = false; static _GLIBCXX_USE_CONSTEXPR bool tinyness_before = false; static _GLIBCXX_USE_CONSTEXPR float_round_style round_style = round_to_nearest; };
# 1996 "/usr/include/c++/15.1.1/limits" 3
__extension__ template<> struct numeric_limits<_Float32> { static constexpr bool is_specialized = true; static constexpr _Float32 min() noexcept { return 1.17549435082228750796873653722224568e-38F32; } static constexpr _Float32 max() noexcept { return 3.40282346638528859811704183484516925e+38F32; } static constexpr _Float32 lowest() noexcept { return -3.40282346638528859811704183484516925e+38F32; } static constexpr int digits = 24; static constexpr int digits10 = 6; static constexpr int max_digits10 = (2 + (24) * 643L / 2136); static constexpr bool is_signed = true; static constexpr bool is_integer = false; static constexpr bool is_exact = false; static constexpr int radix = 2; static constexpr _Float32 epsilon() noexcept { return 1.19209289550781250000000000000000000e-7F32; } static constexpr _Float32 round_error() noexcept { return 0.5F32; } static constexpr int min_exponent = (-125); static constexpr int min_exponent10 = (-37); static constexpr int max_exponent = 128; static constexpr int max_exponent10 = 38; static constexpr bool has_infinity = 1; static constexpr bool has_quiet_NaN = 1; static constexpr bool has_signaling_NaN = has_quiet_NaN; static constexpr float_denorm_style has_denorm = bool(1) ? denorm_present : denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr _Float32 infinity() noexcept { return __builtin_huge_valf32(); } static constexpr _Float32 quiet_NaN() noexcept { return __builtin_nanf32(""); } static constexpr _Float32 signaling_NaN() noexcept { return __builtin_nansf32(""); } static constexpr _Float32 denorm_min() noexcept { return 1.40129846432481707092372958328991613e-45F32; } static constexpr bool is_iec559 = has_infinity && has_quiet_NaN && has_denorm == denorm_present; static constexpr bool is_bounded = true; static constexpr bool is_modulo = false; static constexpr bool traps = false; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_to_nearest; };


__extension__ template<> struct numeric_limits<_Float64> { static constexpr bool is_specialized = true; static constexpr _Float64 min() noexcept { return 2.22507385850720138309023271733240406e-308F64; } static constexpr _Float64 max() noexcept { return 1.79769313486231570814527423731704357e+308F64; } static constexpr _Float64 lowest() noexcept { return -1.79769313486231570814527423731704357e+308F64; } static constexpr int digits = 53; static constexpr int digits10 = 15; static constexpr int max_digits10 = (2 + (53) * 643L / 2136); static constexpr bool is_signed = true; static constexpr bool is_integer = false; static constexpr bool is_exact = false; static constexpr int radix = 2; static constexpr _Float64 epsilon() noexcept { return 2.22044604925031308084726333618164062e-16F64; } static constexpr _Float64 round_error() noexcept { return 0.5F64; } static constexpr int min_exponent = (-1021); static constexpr int min_exponent10 = (-307); static constexpr int max_exponent = 1024; static constexpr int max_exponent10 = 308; static constexpr bool has_infinity = 1; static constexpr bool has_quiet_NaN = 1; static constexpr bool has_signaling_NaN = has_quiet_NaN; static constexpr float_denorm_style has_denorm = bool(1) ? denorm_present : denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr _Float64 infinity() noexcept { return __builtin_huge_valf64(); } static constexpr _Float64 quiet_NaN() noexcept { return __builtin_nanf64(""); } static constexpr _Float64 signaling_NaN() noexcept { return __builtin_nansf64(""); } static constexpr _Float64 denorm_min() noexcept { return 4.94065645841246544176568792868221372e-324F64; } static constexpr bool is_iec559 = has_infinity && has_quiet_NaN && has_denorm == denorm_present; static constexpr bool is_bounded = true; static constexpr bool is_modulo = false; static constexpr bool traps = false; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_to_nearest; };


__extension__ template<> struct numeric_limits<_Float128> { static constexpr bool is_specialized = true; static constexpr _Float128 min() noexcept { return 3.36210314311209350626267781732175260e-4932F128; } static constexpr _Float128 max() noexcept { return 1.18973149535723176508575932662800702e+4932F128; } static constexpr _Float128 lowest() noexcept { return -1.18973149535723176508575932662800702e+4932F128; } static constexpr int digits = 113; static constexpr int digits10 = 33; static constexpr int max_digits10 = (2 + (113) * 643L / 2136); static constexpr bool is_signed = true; static constexpr bool is_integer = false; static constexpr bool is_exact = false; static constexpr int radix = 2; static constexpr _Float128 epsilon() noexcept { return 1.92592994438723585305597794258492732e-34F128; } static constexpr _Float128 round_error() noexcept { return 0.5F128; } static constexpr int min_exponent = (-16381); static constexpr int min_exponent10 = (-4931); static constexpr int max_exponent = 16384; static constexpr int max_exponent10 = 4932; static constexpr bool has_infinity = 1; static constexpr bool has_quiet_NaN = 1; static constexpr bool has_signaling_NaN = has_quiet_NaN; static constexpr float_denorm_style has_denorm = bool(1) ? denorm_present : denorm_absent; static constexpr bool has_denorm_loss = false; static constexpr _Float128 infinity() noexcept { return __builtin_huge_valf128(); } static constexpr _Float128 quiet_NaN() noexcept { return __builtin_nanf128(""); } static constexpr _Float128 signaling_NaN() noexcept { return __builtin_nansf128(""); } static constexpr _Float128 denorm_min() noexcept { return 6.47517511943802511092443895822764655e-4966F128; } static constexpr bool is_iec559 = has_infinity && has_quiet_NaN && has_denorm == denorm_present; static constexpr bool is_bounded = true; static constexpr bool is_modulo = false; static constexpr bool traps = false; static constexpr bool tinyness_before = false; static constexpr float_round_style round_style = round_to_nearest; };

#undef __glibcxx_float_n
#undef __glibcxx_concat3
#undef __glibcxx_concat3_


#undef __max_digits10
# 2094 "/usr/include/c++/15.1.1/limits" 3
  __extension__
  template<>
    struct numeric_limits<__float128>
    {
      static constexpr bool is_specialized = true;

      static constexpr __float128
      min() noexcept
      {




 return __extension__ 0x1.0p-16382Q;

      }

      static constexpr __float128
      max() noexcept
      {







 return __extension__ 0x1.ffffffffffffffffffffffffffffp+16383Q;

      }

      static constexpr __float128
      lowest() noexcept
      { return -max(); }

      static constexpr int digits = 113;
      static constexpr int digits10 = 33;

      static constexpr int max_digits10 = 35;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr __float128
      epsilon() noexcept
      { return double(1.9259299443872359e-34); }

      static constexpr __float128
      round_error() noexcept { return 0.5; }

      static constexpr int min_exponent = -16381;
      static constexpr int min_exponent10 = -4931;
      static constexpr int max_exponent = 16384;
      static constexpr int max_exponent10 = 4932;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;


      static constexpr bool has_signaling_NaN = true;



      static constexpr float_denorm_style has_denorm
 = denorm_present;
      static constexpr bool has_denorm_loss = false;

      static constexpr __float128
      infinity() noexcept
      { return __builtin_huge_val(); }

      static constexpr __float128
      quiet_NaN() noexcept
      { return __builtin_nan(""); }

      static constexpr __float128
      signaling_NaN() noexcept
      {

 return __builtin_nansq("");





      }

      static constexpr __float128
      denorm_min() noexcept
      {




 return __extension__ 0x1.0p-16494Q;

      }

      static constexpr bool is_iec559 = has_signaling_NaN;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
 = round_to_nearest;
# 2225 "/usr/include/c++/15.1.1/limits" 3
    };




}

#undef __glibcxx_signed
#undef __glibcxx_min
#undef __glibcxx_max
#undef __glibcxx_digits
#undef __glibcxx_digits10
#undef __glibcxx_max_digits10

#pragma GCC diagnostic pop
# 45 "/usr/include/c++/15.1.1/bits/specfun.h" 2 3


# 1 "/usr/include/c++/15.1.1/tr1/gamma.tcc" 1 3
# 47 "/usr/include/c++/15.1.1/tr1/gamma.tcc" 3
#define _GLIBCXX_TR1_GAMMA_TCC 1

# 1 "/usr/include/c++/15.1.1/tr1/special_function_util.h" 1 3
# 37 "/usr/include/c++/15.1.1/tr1/special_function_util.h" 3
#define _GLIBCXX_TR1_SPECIAL_FUNCTION_UTIL_H 1

namespace std __attribute__ ((__visibility__ ("default")))
{

# 50 "/usr/include/c++/15.1.1/tr1/special_function_util.h" 3
  namespace __detail
  {



    template<typename _Tp>
    struct __floating_point_constant
    {
      static const _Tp __value;
    };



    template<typename _Tp>
      struct __numeric_constants
      {

        static _Tp __pi() throw()
        { return static_cast<_Tp>(3.1415926535897932384626433832795029L); }

        static _Tp __pi_2() throw()
        { return static_cast<_Tp>(1.5707963267948966192313216916397514L); }

        static _Tp __pi_3() throw()
        { return static_cast<_Tp>(1.0471975511965977461542144610931676L); }

        static _Tp __pi_4() throw()
        { return static_cast<_Tp>(0.7853981633974483096156608458198757L); }

        static _Tp __1_pi() throw()
        { return static_cast<_Tp>(0.3183098861837906715377675267450287L); }

        static _Tp __2_sqrtpi() throw()
        { return static_cast<_Tp>(1.1283791670955125738961589031215452L); }

        static _Tp __sqrt2() throw()
        { return static_cast<_Tp>(1.4142135623730950488016887242096981L); }

        static _Tp __sqrt3() throw()
        { return static_cast<_Tp>(1.7320508075688772935274463415058723L); }

        static _Tp __sqrtpio2() throw()
        { return static_cast<_Tp>(1.2533141373155002512078826424055226L); }

        static _Tp __sqrt1_2() throw()
        { return static_cast<_Tp>(0.7071067811865475244008443621048490L); }

        static _Tp __lnpi() throw()
        { return static_cast<_Tp>(1.1447298858494001741434273513530587L); }

        static _Tp __gamma_e() throw()
        { return static_cast<_Tp>(0.5772156649015328606065120900824024L); }

        static _Tp __euler() throw()
        { return static_cast<_Tp>(2.7182818284590452353602874713526625L); }
      };
# 114 "/usr/include/c++/15.1.1/tr1/special_function_util.h" 3
    template<typename _Tp>
    inline bool __isnan(_Tp __x)
    { return std::isnan(__x); }
# 133 "/usr/include/c++/15.1.1/tr1/special_function_util.h" 3
  }





}
# 50 "/usr/include/c++/15.1.1/tr1/gamma.tcc" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



#define _GLIBCXX_MATH_NS ::std
# 65 "/usr/include/c++/15.1.1/tr1/gamma.tcc" 3
  namespace __detail
  {
# 76 "/usr/include/c++/15.1.1/tr1/gamma.tcc" 3
    template <typename _Tp>
    _Tp
    __bernoulli_series(unsigned int __n)
    {

      static const _Tp __num[28] = {
        _Tp(1UL), -_Tp(1UL) / _Tp(2UL),
        _Tp(1UL) / _Tp(6UL), _Tp(0UL),
        -_Tp(1UL) / _Tp(30UL), _Tp(0UL),
        _Tp(1UL) / _Tp(42UL), _Tp(0UL),
        -_Tp(1UL) / _Tp(30UL), _Tp(0UL),
        _Tp(5UL) / _Tp(66UL), _Tp(0UL),
        -_Tp(691UL) / _Tp(2730UL), _Tp(0UL),
        _Tp(7UL) / _Tp(6UL), _Tp(0UL),
        -_Tp(3617UL) / _Tp(510UL), _Tp(0UL),
        _Tp(43867UL) / _Tp(798UL), _Tp(0UL),
        -_Tp(174611) / _Tp(330UL), _Tp(0UL),
        _Tp(854513UL) / _Tp(138UL), _Tp(0UL),
        -_Tp(236364091UL) / _Tp(2730UL), _Tp(0UL),
        _Tp(8553103UL) / _Tp(6UL), _Tp(0UL)
      };

      if (__n == 0)
        return _Tp(1);

      if (__n == 1)
        return -_Tp(1) / _Tp(2);


      if (__n % 2 == 1)
        return _Tp(0);


      if (__n < 28)
        return __num[__n];


      _Tp __fact = _Tp(1);
      if ((__n / 2) % 2 == 0)
        __fact *= _Tp(-1);
      for (unsigned int __k = 1; __k <= __n; ++__k)
        __fact *= __k / (_Tp(2) * __numeric_constants<_Tp>::__pi());
      __fact *= _Tp(2);

      _Tp __sum = _Tp(0);
      for (unsigned int __i = 1; __i < 1000; ++__i)
        {
          _Tp __term = std::pow(_Tp(__i), -_Tp(__n));
          if (__term < std::numeric_limits<_Tp>::epsilon())
            break;
          __sum += __term;
        }

      return __fact * __sum;
    }
# 139 "/usr/include/c++/15.1.1/tr1/gamma.tcc" 3
    template<typename _Tp>
    inline _Tp
    __bernoulli(int __n)
    { return __bernoulli_series<_Tp>(__n); }
# 153 "/usr/include/c++/15.1.1/tr1/gamma.tcc" 3
    template<typename _Tp>
    _Tp
    __log_gamma_bernoulli(_Tp __x)
    {
      _Tp __lg = (__x - _Tp(0.5L)) * std::log(__x) - __x
               + _Tp(0.5L) * std::log(_Tp(2)
               * __numeric_constants<_Tp>::__pi());

      const _Tp __xx = __x * __x;
      _Tp __help = _Tp(1) / __x;
      for ( unsigned int __i = 1; __i < 20; ++__i )
        {
          const _Tp __2i = _Tp(2 * __i);
          __help /= __2i * (__2i - _Tp(1)) * __xx;
          __lg += __bernoulli<_Tp>(2 * __i) * __help;
        }

      return __lg;
    }
# 181 "/usr/include/c++/15.1.1/tr1/gamma.tcc" 3
    template<typename _Tp>
    _Tp
    __log_gamma_lanczos(_Tp __x)
    {
      const _Tp __xm1 = __x - _Tp(1);

      static const _Tp __lanczos_cheb_7[9] = {
       _Tp( 0.99999999999980993227684700473478L),
       _Tp( 676.520368121885098567009190444019L),
       _Tp(-1259.13921672240287047156078755283L),
       _Tp( 771.3234287776530788486528258894L),
       _Tp(-176.61502916214059906584551354L),
       _Tp( 12.507343278686904814458936853L),
       _Tp(-0.13857109526572011689554707L),
       _Tp( 9.984369578019570859563e-6L),
       _Tp( 1.50563273514931155834e-7L)
      };

      static const _Tp __LOGROOT2PI
          = _Tp(0.9189385332046727417803297364056176L);

      _Tp __sum = __lanczos_cheb_7[0];
      for(unsigned int __k = 1; __k < 9; ++__k)
        __sum += __lanczos_cheb_7[__k] / (__xm1 + __k);

      const _Tp __term1 = (__xm1 + _Tp(0.5L))
                        * std::log((__xm1 + _Tp(7.5L))
                       / __numeric_constants<_Tp>::__euler());
      const _Tp __term2 = __LOGROOT2PI + std::log(__sum);
      const _Tp __result = __term1 + (__term2 - _Tp(7));

      return __result;
    }
# 225 "/usr/include/c++/15.1.1/tr1/gamma.tcc" 3
    template<typename _Tp>
    _Tp
    __log_gamma(_Tp __x)
    {
      if (__x > _Tp(0.5L))
        return __log_gamma_lanczos(__x);
      else
        {
          const _Tp __sin_fact
                 = std::abs(std::sin(__numeric_constants<_Tp>::__pi() * __x));
          if (__sin_fact == _Tp(0))
            std::__throw_domain_error(("Argument is nonpositive integer " "in __log_gamma")
                                                           );
          return __numeric_constants<_Tp>::__lnpi()
                     - std::log(__sin_fact)
                     - __log_gamma_lanczos(_Tp(1) - __x);
        }
    }
# 252 "/usr/include/c++/15.1.1/tr1/gamma.tcc" 3
    template<typename _Tp>
    _Tp
    __log_gamma_sign(_Tp __x)
    {
      if (__x > _Tp(0))
        return _Tp(1);
      else
        {
          const _Tp __sin_fact
                  = std::sin(__numeric_constants<_Tp>::__pi() * __x);
          if (__sin_fact > _Tp(0))
            return (1);
          else if (__sin_fact < _Tp(0))
            return -_Tp(1);
          else
            return _Tp(0);
        }
    }
# 283 "/usr/include/c++/15.1.1/tr1/gamma.tcc" 3
    template<typename _Tp>
    _Tp
    __log_bincoef(unsigned int __n, unsigned int __k)
    {

      static const _Tp __max_bincoeff
                      = std::numeric_limits<_Tp>::max_exponent10
                      * std::log(_Tp(10)) - _Tp(1);

      _Tp __coeff = ::std::lgamma(_Tp(1 + __n))
                  - ::std::lgamma(_Tp(1 + __k))
                  - ::std::lgamma(_Tp(1 + __n - __k));





    }
# 314 "/usr/include/c++/15.1.1/tr1/gamma.tcc" 3
    template<typename _Tp>
    _Tp
    __bincoef(unsigned int __n, unsigned int __k)
    {

      static const _Tp __max_bincoeff
                      = std::numeric_limits<_Tp>::max_exponent10
                      * std::log(_Tp(10)) - _Tp(1);

      const _Tp __log_coeff = __log_bincoef<_Tp>(__n, __k);
      if (__log_coeff > __max_bincoeff)
        return std::numeric_limits<_Tp>::quiet_NaN();
      else
        return std::exp(__log_coeff);
    }
# 337 "/usr/include/c++/15.1.1/tr1/gamma.tcc" 3
    template<typename _Tp>
    inline _Tp
    __gamma(_Tp __x)
    { return std::exp(__log_gamma(__x)); }
# 356 "/usr/include/c++/15.1.1/tr1/gamma.tcc" 3
    template<typename _Tp>
    _Tp
    __psi_series(_Tp __x)
    {
      _Tp __sum = -__numeric_constants<_Tp>::__gamma_e() - _Tp(1) / __x;
      const unsigned int __max_iter = 100000;
      for (unsigned int __k = 1; __k < __max_iter; ++__k)
        {
          const _Tp __term = __x / (__k * (__k + __x));
          __sum += __term;
          if (std::abs(__term / __sum) < std::numeric_limits<_Tp>::epsilon())
            break;
        }
      return __sum;
    }
# 386 "/usr/include/c++/15.1.1/tr1/gamma.tcc" 3
    template<typename _Tp>
    _Tp
    __psi_asymp(_Tp __x)
    {
      _Tp __sum = std::log(__x) - _Tp(0.5L) / __x;
      const _Tp __xx = __x * __x;
      _Tp __xp = __xx;
      const unsigned int __max_iter = 100;
      for (unsigned int __k = 1; __k < __max_iter; ++__k)
        {
          const _Tp __term = __bernoulli<_Tp>(2 * __k) / (2 * __k * __xp);
          __sum -= __term;
          if (std::abs(__term / __sum) < std::numeric_limits<_Tp>::epsilon())
            break;
          __xp *= __xx;
        }
      return __sum;
    }
# 417 "/usr/include/c++/15.1.1/tr1/gamma.tcc" 3
    template<typename _Tp>
    _Tp
    __psi(_Tp __x)
    {
      const int __n = static_cast<int>(__x + 0.5L);
      const _Tp __eps = _Tp(4) * std::numeric_limits<_Tp>::epsilon();
      if (__n <= 0 && std::abs(__x - _Tp(__n)) < __eps)
        return std::numeric_limits<_Tp>::quiet_NaN();
      else if (__x < _Tp(0))
        {
          const _Tp __pi = __numeric_constants<_Tp>::__pi();
          return __psi(_Tp(1) - __x)
               - __pi * std::cos(__pi * __x) / std::sin(__pi * __x);
        }
      else if (__x > _Tp(100))
        return __psi_asymp(__x);
      else
        return __psi_series(__x);
    }
# 446 "/usr/include/c++/15.1.1/tr1/gamma.tcc" 3
    template<typename _Tp>
    _Tp
    __psi(unsigned int __n, _Tp __x)
    {
      if (__x <= _Tp(0))
        std::__throw_domain_error(("Argument out of range " "in __psi")
                                                 );
      else if (__n == 0)
        return __psi(__x);
      else
        {
          const _Tp __hzeta = __hurwitz_zeta(_Tp(__n + 1), __x);

          const _Tp __ln_nfact = ::std::lgamma(_Tp(__n + 1));



          _Tp __result = std::exp(__ln_nfact) * __hzeta;
          if (__n % 2 == 1)
            __result = -__result;
          return __result;
        }
    }
  }
#undef _GLIBCXX_MATH_NS





}
# 48 "/usr/include/c++/15.1.1/bits/specfun.h" 2 3
# 1 "/usr/include/c++/15.1.1/tr1/bessel_function.tcc" 1 3
# 51 "/usr/include/c++/15.1.1/tr1/bessel_function.tcc" 3
#define _GLIBCXX_TR1_BESSEL_FUNCTION_TCC 1



namespace std __attribute__ ((__visibility__ ("default")))
{



#define _GLIBCXX_MATH_NS ::std
# 71 "/usr/include/c++/15.1.1/tr1/bessel_function.tcc" 3
  namespace __detail
  {
# 98 "/usr/include/c++/15.1.1/tr1/bessel_function.tcc" 3
    template <typename _Tp>
    void
    __gamma_temme(_Tp __mu,
                  _Tp & __gam1, _Tp & __gam2, _Tp & __gampl, _Tp & __gammi)
    {

      __gampl = _Tp(1) / ::std::tgamma(_Tp(1) + __mu);
      __gammi = _Tp(1) / ::std::tgamma(_Tp(1) - __mu);





      if (std::abs(__mu) < std::numeric_limits<_Tp>::epsilon())
        __gam1 = -_Tp(__numeric_constants<_Tp>::__gamma_e());
      else
        __gam1 = (__gammi - __gampl) / (_Tp(2) * __mu);

      __gam2 = (__gammi + __gampl) / (_Tp(2));

      return;
    }
# 136 "/usr/include/c++/15.1.1/tr1/bessel_function.tcc" 3
    template <typename _Tp>
    void
    __bessel_jn(_Tp __nu, _Tp __x,
                _Tp & __Jnu, _Tp & __Nnu, _Tp & __Jpnu, _Tp & __Npnu)
    {
      if (__x == _Tp(0))
        {
          if (__nu == _Tp(0))
            {
              __Jnu = _Tp(1);
              __Jpnu = _Tp(0);
            }
          else if (__nu == _Tp(1))
            {
              __Jnu = _Tp(0);
              __Jpnu = _Tp(0.5L);
            }
          else
            {
              __Jnu = _Tp(0);
              __Jpnu = _Tp(0);
            }
          __Nnu = -std::numeric_limits<_Tp>::infinity();
          __Npnu = std::numeric_limits<_Tp>::infinity();
          return;
        }

      const _Tp __eps = std::numeric_limits<_Tp>::epsilon();




      const _Tp __fp_min = std::sqrt(std::numeric_limits<_Tp>::min());
      const int __max_iter = 15000;
      const _Tp __x_min = _Tp(2);

      const int __nl = (__x < __x_min
                    ? static_cast<int>(__nu + _Tp(0.5L))
                    : std::max(0, static_cast<int>(__nu - __x + _Tp(1.5L))));

      const _Tp __mu = __nu - __nl;
      const _Tp __mu2 = __mu * __mu;
      const _Tp __xi = _Tp(1) / __x;
      const _Tp __xi2 = _Tp(2) * __xi;
      _Tp __w = __xi2 / __numeric_constants<_Tp>::__pi();
      int __isign = 1;
      _Tp __h = __nu * __xi;
      if (__h < __fp_min)
        __h = __fp_min;
      _Tp __b = __xi2 * __nu;
      _Tp __d = _Tp(0);
      _Tp __c = __h;
      int __i;
      for (__i = 1; __i <= __max_iter; ++__i)
        {
          __b += __xi2;
          __d = __b - __d;
          if (std::abs(__d) < __fp_min)
            __d = __fp_min;
          __c = __b - _Tp(1) / __c;
          if (std::abs(__c) < __fp_min)
            __c = __fp_min;
          __d = _Tp(1) / __d;
          const _Tp __del = __c * __d;
          __h *= __del;
          if (__d < _Tp(0))
            __isign = -__isign;
          if (std::abs(__del - _Tp(1)) < __eps)
            break;
        }
      if (__i > __max_iter)
        std::__throw_runtime_error(("Argument x too large in __bessel_jn; " "try asymptotic expansion.")
                                                                   );
      _Tp __Jnul = __isign * __fp_min;
      _Tp __Jpnul = __h * __Jnul;
      _Tp __Jnul1 = __Jnul;
      _Tp __Jpnu1 = __Jpnul;
      _Tp __fact = __nu * __xi;
      for ( int __l = __nl; __l >= 1; --__l )
        {
          const _Tp __Jnutemp = __fact * __Jnul + __Jpnul;
          __fact -= __xi;
          __Jpnul = __fact * __Jnutemp - __Jnul;
          __Jnul = __Jnutemp;
        }
      if (__Jnul == _Tp(0))
        __Jnul = __eps;
      _Tp __f= __Jpnul / __Jnul;
      _Tp __Nmu, __Nnu1, __Npmu, __Jmu;
      if (__x < __x_min)
        {
          const _Tp __x2 = __x / _Tp(2);
          const _Tp __pimu = __numeric_constants<_Tp>::__pi() * __mu;
          _Tp __fact = (std::abs(__pimu) < __eps
                      ? _Tp(1) : __pimu / std::sin(__pimu));
          _Tp __d = -std::log(__x2);
          _Tp __e = __mu * __d;
          _Tp __fact2 = (std::abs(__e) < __eps
                       ? _Tp(1) : std::sinh(__e) / __e);
          _Tp __gam1, __gam2, __gampl, __gammi;
          __gamma_temme(__mu, __gam1, __gam2, __gampl, __gammi);
          _Tp __ff = (_Tp(2) / __numeric_constants<_Tp>::__pi())
                   * __fact * (__gam1 * std::cosh(__e) + __gam2 * __fact2 * __d);
          __e = std::exp(__e);
          _Tp __p = __e / (__numeric_constants<_Tp>::__pi() * __gampl);
          _Tp __q = _Tp(1) / (__e * __numeric_constants<_Tp>::__pi() * __gammi);
          const _Tp __pimu2 = __pimu / _Tp(2);
          _Tp __fact3 = (std::abs(__pimu2) < __eps
                       ? _Tp(1) : std::sin(__pimu2) / __pimu2 );
          _Tp __r = __numeric_constants<_Tp>::__pi() * __pimu2 * __fact3 * __fact3;
          _Tp __c = _Tp(1);
          __d = -__x2 * __x2;
          _Tp __sum = __ff + __r * __q;
          _Tp __sum1 = __p;
          for (__i = 1; __i <= __max_iter; ++__i)
            {
              __ff = (__i * __ff + __p + __q) / (__i * __i - __mu2);
              __c *= __d / _Tp(__i);
              __p /= _Tp(__i) - __mu;
              __q /= _Tp(__i) + __mu;
              const _Tp __del = __c * (__ff + __r * __q);
              __sum += __del;
              const _Tp __del1 = __c * __p - __i * __del;
              __sum1 += __del1;
              if ( std::abs(__del) < __eps * (_Tp(1) + std::abs(__sum)) )
                break;
            }
          if ( __i > __max_iter )
            std::__throw_runtime_error(("Bessel y series failed to converge " "in __bessel_jn.")
                                                             );
          __Nmu = -__sum;
          __Nnu1 = -__sum1 * __xi2;
          __Npmu = __mu * __xi * __Nmu - __Nnu1;
          __Jmu = __w / (__Npmu - __f * __Nmu);
        }
      else
        {
          _Tp __a = _Tp(0.25L) - __mu2;
          _Tp __q = _Tp(1);
          _Tp __p = -__xi / _Tp(2);
          _Tp __br = _Tp(2) * __x;
          _Tp __bi = _Tp(2);
          _Tp __fact = __a * __xi / (__p * __p + __q * __q);
          _Tp __cr = __br + __q * __fact;
          _Tp __ci = __bi + __p * __fact;
          _Tp __den = __br * __br + __bi * __bi;
          _Tp __dr = __br / __den;
          _Tp __di = -__bi / __den;
          _Tp __dlr = __cr * __dr - __ci * __di;
          _Tp __dli = __cr * __di + __ci * __dr;
          _Tp __temp = __p * __dlr - __q * __dli;
          __q = __p * __dli + __q * __dlr;
          __p = __temp;
          int __i;
          for (__i = 2; __i <= __max_iter; ++__i)
            {
              __a += _Tp(2 * (__i - 1));
              __bi += _Tp(2);
              __dr = __a * __dr + __br;
              __di = __a * __di + __bi;
              if (std::abs(__dr) + std::abs(__di) < __fp_min)
                __dr = __fp_min;
              __fact = __a / (__cr * __cr + __ci * __ci);
              __cr = __br + __cr * __fact;
              __ci = __bi - __ci * __fact;
              if (std::abs(__cr) + std::abs(__ci) < __fp_min)
                __cr = __fp_min;
              __den = __dr * __dr + __di * __di;
              __dr /= __den;
              __di /= -__den;
              __dlr = __cr * __dr - __ci * __di;
              __dli = __cr * __di + __ci * __dr;
              __temp = __p * __dlr - __q * __dli;
              __q = __p * __dli + __q * __dlr;
              __p = __temp;
              if (std::abs(__dlr - _Tp(1)) + std::abs(__dli) < __eps)
                break;
          }
          if (__i > __max_iter)
            std::__throw_runtime_error(("Lentz's method failed " "in __bessel_jn.")
                                                             );
          const _Tp __gam = (__p - __f) / __q;
          __Jmu = std::sqrt(__w / ((__p - __f) * __gam + __q));

          __Jmu = ::std::copysign(__Jmu, __Jnul);




          __Nmu = __gam * __Jmu;
          __Npmu = (__p + __q / __gam) * __Nmu;
          __Nnu1 = __mu * __xi * __Nmu - __Npmu;
      }
      __fact = __Jmu / __Jnul;
      __Jnu = __fact * __Jnul1;
      __Jpnu = __fact * __Jpnu1;
      for (__i = 1; __i <= __nl; ++__i)
        {
          const _Tp __Nnutemp = (__mu + __i) * __xi2 * __Nnu1 - __Nmu;
          __Nmu = __Nnu1;
          __Nnu1 = __Nnutemp;
        }
      __Nnu = __Nmu;
      __Npnu = __nu * __xi * __Nmu - __Nnu1;

      return;
    }
# 361 "/usr/include/c++/15.1.1/tr1/bessel_function.tcc" 3
    template <typename _Tp>
    void
    __cyl_bessel_jn_asymp(_Tp __nu, _Tp __x, _Tp & __Jnu, _Tp & __Nnu)
    {
      const _Tp __mu = _Tp(4) * __nu * __nu;
      const _Tp __8x = _Tp(8) * __x;

      _Tp __P = _Tp(0);
      _Tp __Q = _Tp(0);

      _Tp __k = _Tp(0);
      _Tp __term = _Tp(1);

      int __epsP = 0;
      int __epsQ = 0;

      _Tp __eps = std::numeric_limits<_Tp>::epsilon();

      do
        {
          __term *= (__k == 0
                     ? _Tp(1)
                     : -(__mu - (2 * __k - 1) * (2 * __k - 1)) / (__k * __8x));

          __epsP = std::abs(__term) < __eps * std::abs(__P);
          __P += __term;

          __k++;

          __term *= (__mu - (2 * __k - 1) * (2 * __k - 1)) / (__k * __8x);
          __epsQ = std::abs(__term) < __eps * std::abs(__Q);
          __Q += __term;

          if (__epsP && __epsQ && __k > (__nu / 2.))
            break;

          __k++;
        }
      while (__k < 1000);

      const _Tp __chi = __x - (__nu + _Tp(0.5L))
                             * __numeric_constants<_Tp>::__pi_2();

      const _Tp __c = std::cos(__chi);
      const _Tp __s = std::sin(__chi);

      const _Tp __coef = std::sqrt(_Tp(2)
                             / (__numeric_constants<_Tp>::__pi() * __x));

      __Jnu = __coef * (__c * __P - __s * __Q);
      __Nnu = __coef * (__s * __P + __c * __Q);

      return;
    }
# 444 "/usr/include/c++/15.1.1/tr1/bessel_function.tcc" 3
    template <typename _Tp>
    _Tp
    __cyl_bessel_ij_series(_Tp __nu, _Tp __x, _Tp __sgn,
                           unsigned int __max_iter)
    {
      if (__x == _Tp(0))
 return __nu == _Tp(0) ? _Tp(1) : _Tp(0);

      const _Tp __x2 = __x / _Tp(2);
      _Tp __fact = __nu * std::log(__x2);

      __fact -= ::std::lgamma(__nu + _Tp(1));



      __fact = std::exp(__fact);
      const _Tp __xx4 = __sgn * __x2 * __x2;
      _Tp __Jn = _Tp(1);
      _Tp __term = _Tp(1);

      for (unsigned int __i = 1; __i < __max_iter; ++__i)
        {
          __term *= __xx4 / (_Tp(__i) * (__nu + _Tp(__i)));
          __Jn += __term;
          if (std::abs(__term / __Jn) < std::numeric_limits<_Tp>::epsilon())
            break;
        }

      return __fact * __Jn;
    }
# 490 "/usr/include/c++/15.1.1/tr1/bessel_function.tcc" 3
    template<typename _Tp>
    _Tp
    __cyl_bessel_j(_Tp __nu, _Tp __x)
    {
      if (__nu < _Tp(0) || __x < _Tp(0))
        std::__throw_domain_error(("Bad argument " "in __cyl_bessel_j.")
                                                           );
      else if (__isnan(__nu) || __isnan(__x))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else if (__x * __x < _Tp(10) * (__nu + _Tp(1)))
        return __cyl_bessel_ij_series(__nu, __x, -_Tp(1), 200);
      else if (__x > _Tp(1000))
        {
          _Tp __J_nu, __N_nu;
          __cyl_bessel_jn_asymp(__nu, __x, __J_nu, __N_nu);
          return __J_nu;
        }
      else
        {
          _Tp __J_nu, __N_nu, __Jp_nu, __Np_nu;
          __bessel_jn(__nu, __x, __J_nu, __N_nu, __Jp_nu, __Np_nu);
          return __J_nu;
        }
    }
# 532 "/usr/include/c++/15.1.1/tr1/bessel_function.tcc" 3
    template<typename _Tp>
    _Tp
    __cyl_neumann_n(_Tp __nu, _Tp __x)
    {
      if (__nu < _Tp(0) || __x < _Tp(0))
        std::__throw_domain_error(("Bad argument " "in __cyl_neumann_n.")
                                                            );
      else if (__isnan(__nu) || __isnan(__x))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else if (__x > _Tp(1000))
        {
          _Tp __J_nu, __N_nu;
          __cyl_bessel_jn_asymp(__nu, __x, __J_nu, __N_nu);
          return __N_nu;
        }
      else
        {
          _Tp __J_nu, __N_nu, __Jp_nu, __Np_nu;
          __bessel_jn(__nu, __x, __J_nu, __N_nu, __Jp_nu, __Np_nu);
          return __N_nu;
        }
    }
# 569 "/usr/include/c++/15.1.1/tr1/bessel_function.tcc" 3
    template <typename _Tp>
    void
    __sph_bessel_jn(unsigned int __n, _Tp __x,
                    _Tp & __j_n, _Tp & __n_n, _Tp & __jp_n, _Tp & __np_n)
    {
      const _Tp __nu = _Tp(__n) + _Tp(0.5L);

      _Tp __J_nu, __N_nu, __Jp_nu, __Np_nu;
      __bessel_jn(__nu, __x, __J_nu, __N_nu, __Jp_nu, __Np_nu);

      const _Tp __factor = __numeric_constants<_Tp>::__sqrtpio2()
                         / std::sqrt(__x);

      __j_n = __factor * __J_nu;
      __n_n = __factor * __N_nu;
      __jp_n = __factor * __Jp_nu - __j_n / (_Tp(2) * __x);
      __np_n = __factor * __Np_nu - __n_n / (_Tp(2) * __x);

      return;
    }
# 604 "/usr/include/c++/15.1.1/tr1/bessel_function.tcc" 3
    template <typename _Tp>
    _Tp
    __sph_bessel(unsigned int __n, _Tp __x)
    {
      if (__x < _Tp(0))
        std::__throw_domain_error(("Bad argument " "in __sph_bessel.")
                                                         );
      else if (__isnan(__x))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else if (__x == _Tp(0))
        {
          if (__n == 0)
            return _Tp(1);
          else
            return _Tp(0);
        }
      else
        {
          _Tp __j_n, __n_n, __jp_n, __np_n;
          __sph_bessel_jn(__n, __x, __j_n, __n_n, __jp_n, __np_n);
          return __j_n;
        }
    }
# 642 "/usr/include/c++/15.1.1/tr1/bessel_function.tcc" 3
    template <typename _Tp>
    _Tp
    __sph_neumann(unsigned int __n, _Tp __x)
    {
      if (__x < _Tp(0))
        std::__throw_domain_error(("Bad argument " "in __sph_neumann.")
                                                          );
      else if (__isnan(__x))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else if (__x == _Tp(0))
        return -std::numeric_limits<_Tp>::infinity();
      else
        {
          _Tp __j_n, __n_n, __jp_n, __np_n;
          __sph_bessel_jn(__n, __x, __j_n, __n_n, __jp_n, __np_n);
          return __n_n;
        }
    }
  }
#undef _GLIBCXX_MATH_NS





}
# 49 "/usr/include/c++/15.1.1/bits/specfun.h" 2 3
# 1 "/usr/include/c++/15.1.1/tr1/beta_function.tcc" 1 3
# 47 "/usr/include/c++/15.1.1/tr1/beta_function.tcc" 3
#define _GLIBCXX_TR1_BETA_FUNCTION_TCC 1

namespace std __attribute__ ((__visibility__ ("default")))
{



#define _GLIBCXX_MATH_NS ::std
# 65 "/usr/include/c++/15.1.1/tr1/beta_function.tcc" 3
  namespace __detail
  {
# 79 "/usr/include/c++/15.1.1/tr1/beta_function.tcc" 3
    template<typename _Tp>
    _Tp
    __beta_gamma(_Tp __x, _Tp __y)
    {

      _Tp __bet;

      if (__x > __y)
        {
          __bet = ::std::tgamma(__x)
                / ::std::tgamma(__x + __y);
          __bet *= ::std::tgamma(__y);
        }
      else
        {
          __bet = ::std::tgamma(__y)
                / ::std::tgamma(__x + __y);
          __bet *= ::std::tgamma(__x);
        }
# 111 "/usr/include/c++/15.1.1/tr1/beta_function.tcc" 3
      return __bet;
    }
# 127 "/usr/include/c++/15.1.1/tr1/beta_function.tcc" 3
    template<typename _Tp>
    _Tp
    __beta_lgamma(_Tp __x, _Tp __y)
    {

      _Tp __bet = ::std::lgamma(__x)
                + ::std::lgamma(__y)
                - ::std::lgamma(__x + __y);





      __bet = std::exp(__bet);
      return __bet;
    }
# 158 "/usr/include/c++/15.1.1/tr1/beta_function.tcc" 3
    template<typename _Tp>
    _Tp
    __beta_product(_Tp __x, _Tp __y)
    {

      _Tp __bet = (__x + __y) / (__x * __y);

      unsigned int __max_iter = 1000000;
      for (unsigned int __k = 1; __k < __max_iter; ++__k)
        {
          _Tp __term = (_Tp(1) + (__x + __y) / __k)
                     / ((_Tp(1) + __x / __k) * (_Tp(1) + __y / __k));
          __bet *= __term;
        }

      return __bet;
    }
# 189 "/usr/include/c++/15.1.1/tr1/beta_function.tcc" 3
    template<typename _Tp>
    inline _Tp
    __beta(_Tp __x, _Tp __y)
    {
      if (__isnan(__x) || __isnan(__y))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else
        return __beta_lgamma(__x, __y);
    }
  }
#undef _GLIBCXX_MATH_NS





}
# 50 "/usr/include/c++/15.1.1/bits/specfun.h" 2 3
# 1 "/usr/include/c++/15.1.1/tr1/ell_integral.tcc" 1 3
# 43 "/usr/include/c++/15.1.1/tr1/ell_integral.tcc" 3
#define _GLIBCXX_TR1_ELL_INTEGRAL_TCC 1

namespace std __attribute__ ((__visibility__ ("default")))
{

# 59 "/usr/include/c++/15.1.1/tr1/ell_integral.tcc" 3
  namespace __detail
  {
# 76 "/usr/include/c++/15.1.1/tr1/ell_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __ellint_rf(_Tp __x, _Tp __y, _Tp __z)
    {
      const _Tp __min = std::numeric_limits<_Tp>::min();
      const _Tp __lolim = _Tp(5) * __min;

      if (__x < _Tp(0) || __y < _Tp(0) || __z < _Tp(0))
        std::__throw_domain_error(("Argument less than zero " "in __ellint_rf.")
                                                        );
      else if (__x + __y < __lolim || __x + __z < __lolim
            || __y + __z < __lolim)
        std::__throw_domain_error(("Argument too small in __ellint_rf"));
      else
        {
          const _Tp __c0 = _Tp(1) / _Tp(4);
          const _Tp __c1 = _Tp(1) / _Tp(24);
          const _Tp __c2 = _Tp(1) / _Tp(10);
          const _Tp __c3 = _Tp(3) / _Tp(44);
          const _Tp __c4 = _Tp(1) / _Tp(14);

          _Tp __xn = __x;
          _Tp __yn = __y;
          _Tp __zn = __z;

          const _Tp __eps = std::numeric_limits<_Tp>::epsilon();
          const _Tp __errtol = std::pow(__eps, _Tp(1) / _Tp(6));
          _Tp __mu;
          _Tp __xndev, __yndev, __zndev;

          const unsigned int __max_iter = 100;
          for (unsigned int __iter = 0; __iter < __max_iter; ++__iter)
            {
              __mu = (__xn + __yn + __zn) / _Tp(3);
              __xndev = 2 - (__mu + __xn) / __mu;
              __yndev = 2 - (__mu + __yn) / __mu;
              __zndev = 2 - (__mu + __zn) / __mu;
              _Tp __epsilon = std::max(std::abs(__xndev), std::abs(__yndev));
              __epsilon = std::max(__epsilon, std::abs(__zndev));
              if (__epsilon < __errtol)
                break;
              const _Tp __xnroot = std::sqrt(__xn);
              const _Tp __ynroot = std::sqrt(__yn);
              const _Tp __znroot = std::sqrt(__zn);
              const _Tp __lambda = __xnroot * (__ynroot + __znroot)
                                 + __ynroot * __znroot;
              __xn = __c0 * (__xn + __lambda);
              __yn = __c0 * (__yn + __lambda);
              __zn = __c0 * (__zn + __lambda);
            }

          const _Tp __e2 = __xndev * __yndev - __zndev * __zndev;
          const _Tp __e3 = __xndev * __yndev * __zndev;
          const _Tp __s = _Tp(1) + (__c1 * __e2 - __c2 - __c3 * __e3) * __e2
                   + __c4 * __e3;

          return __s / std::sqrt(__mu);
        }
    }
# 153 "/usr/include/c++/15.1.1/tr1/ell_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __comp_ellint_1_series(_Tp __k)
    {

      const _Tp __kk = __k * __k;

      _Tp __term = __kk / _Tp(4);
      _Tp __sum = _Tp(1) + __term;

      const unsigned int __max_iter = 1000;
      for (unsigned int __i = 2; __i < __max_iter; ++__i)
        {
          __term *= (2 * __i - 1) * __kk / (2 * __i);
          if (__term < std::numeric_limits<_Tp>::epsilon())
            break;
          __sum += __term;
        }

      return __numeric_constants<_Tp>::__pi_2() * __sum;
    }
# 191 "/usr/include/c++/15.1.1/tr1/ell_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __comp_ellint_1(_Tp __k)
    {

      if (__isnan(__k))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else if (std::abs(__k) >= _Tp(1))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else
        return __ellint_rf(_Tp(0), _Tp(1) - __k * __k, _Tp(1));
    }
# 219 "/usr/include/c++/15.1.1/tr1/ell_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __ellint_1(_Tp __k, _Tp __phi)
    {

      if (__isnan(__k) || __isnan(__phi))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else if (std::abs(__k) > _Tp(1))
        std::__throw_domain_error(("Bad argument in __ellint_1."));
      else
        {

          const int __n = std::floor(__phi / __numeric_constants<_Tp>::__pi()
                                   + _Tp(0.5L));
          const _Tp __phi_red = __phi
                              - __n * __numeric_constants<_Tp>::__pi();

          const _Tp __s = std::sin(__phi_red);
          const _Tp __c = std::cos(__phi_red);

          const _Tp __F = __s
                        * __ellint_rf(__c * __c,
                                _Tp(1) - __k * __k * __s * __s, _Tp(1));

          if (__n == 0)
            return __F;
          else
            return __F + _Tp(2) * __n * __comp_ellint_1(__k);
        }
    }
# 266 "/usr/include/c++/15.1.1/tr1/ell_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __comp_ellint_2_series(_Tp __k)
    {

      const _Tp __kk = __k * __k;

      _Tp __term = __kk;
      _Tp __sum = __term;

      const unsigned int __max_iter = 1000;
      for (unsigned int __i = 2; __i < __max_iter; ++__i)
        {
          const _Tp __i2m = 2 * __i - 1;
          const _Tp __i2 = 2 * __i;
          __term *= __i2m * __i2m * __kk / (__i2 * __i2);
          if (__term < std::numeric_limits<_Tp>::epsilon())
            break;
          __sum += __term / __i2m;
        }

      return __numeric_constants<_Tp>::__pi_2() * (_Tp(1) - __sum);
    }
# 314 "/usr/include/c++/15.1.1/tr1/ell_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __ellint_rd(_Tp __x, _Tp __y, _Tp __z)
    {
      const _Tp __eps = std::numeric_limits<_Tp>::epsilon();
      const _Tp __errtol = std::pow(__eps / _Tp(8), _Tp(1) / _Tp(6));
      const _Tp __max = std::numeric_limits<_Tp>::max();
      const _Tp __lolim = _Tp(2) / std::pow(__max, _Tp(2) / _Tp(3));

      if (__x < _Tp(0) || __y < _Tp(0))
        std::__throw_domain_error(("Argument less than zero " "in __ellint_rd.")
                                                        );
      else if (__x + __y < __lolim || __z < __lolim)
        std::__throw_domain_error(("Argument too small " "in __ellint_rd.")
                                                        );
      else
        {
          const _Tp __c0 = _Tp(1) / _Tp(4);
          const _Tp __c1 = _Tp(3) / _Tp(14);
          const _Tp __c2 = _Tp(1) / _Tp(6);
          const _Tp __c3 = _Tp(9) / _Tp(22);
          const _Tp __c4 = _Tp(3) / _Tp(26);

          _Tp __xn = __x;
          _Tp __yn = __y;
          _Tp __zn = __z;
          _Tp __sigma = _Tp(0);
          _Tp __power4 = _Tp(1);

          _Tp __mu;
          _Tp __xndev, __yndev, __zndev;

          const unsigned int __max_iter = 100;
          for (unsigned int __iter = 0; __iter < __max_iter; ++__iter)
            {
              __mu = (__xn + __yn + _Tp(3) * __zn) / _Tp(5);
              __xndev = (__mu - __xn) / __mu;
              __yndev = (__mu - __yn) / __mu;
              __zndev = (__mu - __zn) / __mu;
              _Tp __epsilon = std::max(std::abs(__xndev), std::abs(__yndev));
              __epsilon = std::max(__epsilon, std::abs(__zndev));
              if (__epsilon < __errtol)
                break;
              _Tp __xnroot = std::sqrt(__xn);
              _Tp __ynroot = std::sqrt(__yn);
              _Tp __znroot = std::sqrt(__zn);
              _Tp __lambda = __xnroot * (__ynroot + __znroot)
                           + __ynroot * __znroot;
              __sigma += __power4 / (__znroot * (__zn + __lambda));
              __power4 *= __c0;
              __xn = __c0 * (__xn + __lambda);
              __yn = __c0 * (__yn + __lambda);
              __zn = __c0 * (__zn + __lambda);
            }

          _Tp __ea = __xndev * __yndev;
          _Tp __eb = __zndev * __zndev;
          _Tp __ec = __ea - __eb;
          _Tp __ed = __ea - _Tp(6) * __eb;
          _Tp __ef = __ed + __ec + __ec;
          _Tp __s1 = __ed * (-__c1 + __c3 * __ed
                                   / _Tp(3) - _Tp(3) * __c4 * __zndev * __ef
                                   / _Tp(2));
          _Tp __s2 = __zndev
                   * (__c2 * __ef
                    + __zndev * (-__c3 * __ec - __zndev * __c4 - __ea));

          return _Tp(3) * __sigma + __power4 * (_Tp(1) + __s1 + __s2)
                                        / (__mu * std::sqrt(__mu));
        }
    }
# 399 "/usr/include/c++/15.1.1/tr1/ell_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __comp_ellint_2(_Tp __k)
    {

      if (__isnan(__k))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else if (std::abs(__k) == 1)
        return _Tp(1);
      else if (std::abs(__k) > _Tp(1))
        std::__throw_domain_error(("Bad argument in __comp_ellint_2."));
      else
        {
          const _Tp __kk = __k * __k;

          return __ellint_rf(_Tp(0), _Tp(1) - __kk, _Tp(1))
               - __kk * __ellint_rd(_Tp(0), _Tp(1) - __kk, _Tp(1)) / _Tp(3);
        }
    }
# 433 "/usr/include/c++/15.1.1/tr1/ell_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __ellint_2(_Tp __k, _Tp __phi)
    {

      if (__isnan(__k) || __isnan(__phi))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else if (std::abs(__k) > _Tp(1))
        std::__throw_domain_error(("Bad argument in __ellint_2."));
      else
        {

          const int __n = std::floor(__phi / __numeric_constants<_Tp>::__pi()
                                   + _Tp(0.5L));
          const _Tp __phi_red = __phi
                              - __n * __numeric_constants<_Tp>::__pi();

          const _Tp __kk = __k * __k;
          const _Tp __s = std::sin(__phi_red);
          const _Tp __ss = __s * __s;
          const _Tp __sss = __ss * __s;
          const _Tp __c = std::cos(__phi_red);
          const _Tp __cc = __c * __c;

          const _Tp __E = __s
                        * __ellint_rf(__cc, _Tp(1) - __kk * __ss, _Tp(1))
                        - __kk * __sss
                        * __ellint_rd(__cc, _Tp(1) - __kk * __ss, _Tp(1))
                        / _Tp(3);

          if (__n == 0)
            return __E;
          else
            return __E + _Tp(2) * __n * __comp_ellint_2(__k);
        }
    }
# 492 "/usr/include/c++/15.1.1/tr1/ell_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __ellint_rc(_Tp __x, _Tp __y)
    {
      const _Tp __min = std::numeric_limits<_Tp>::min();
      const _Tp __lolim = _Tp(5) * __min;

      if (__x < _Tp(0) || __y < _Tp(0) || __x + __y < __lolim)
        std::__throw_domain_error(("Argument less than zero " "in __ellint_rc.")
                                                        );
      else
        {
          const _Tp __c0 = _Tp(1) / _Tp(4);
          const _Tp __c1 = _Tp(1) / _Tp(7);
          const _Tp __c2 = _Tp(9) / _Tp(22);
          const _Tp __c3 = _Tp(3) / _Tp(10);
          const _Tp __c4 = _Tp(3) / _Tp(8);

          _Tp __xn = __x;
          _Tp __yn = __y;

          const _Tp __eps = std::numeric_limits<_Tp>::epsilon();
          const _Tp __errtol = std::pow(__eps / _Tp(30), _Tp(1) / _Tp(6));
          _Tp __mu;
          _Tp __sn;

          const unsigned int __max_iter = 100;
          for (unsigned int __iter = 0; __iter < __max_iter; ++__iter)
            {
              __mu = (__xn + _Tp(2) * __yn) / _Tp(3);
              __sn = (__yn + __mu) / __mu - _Tp(2);
              if (std::abs(__sn) < __errtol)
                break;
              const _Tp __lambda = _Tp(2) * std::sqrt(__xn) * std::sqrt(__yn)
                             + __yn;
              __xn = __c0 * (__xn + __lambda);
              __yn = __c0 * (__yn + __lambda);
            }

          _Tp __s = __sn * __sn
                  * (__c3 + __sn*(__c1 + __sn * (__c4 + __sn * __c2)));

          return (_Tp(1) + __s) / std::sqrt(__mu);
        }
    }
# 561 "/usr/include/c++/15.1.1/tr1/ell_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __ellint_rj(_Tp __x, _Tp __y, _Tp __z, _Tp __p)
    {
      const _Tp __min = std::numeric_limits<_Tp>::min();
      const _Tp __lolim = std::pow(_Tp(5) * __min, _Tp(1)/_Tp(3));

      if (__x < _Tp(0) || __y < _Tp(0) || __z < _Tp(0))
        std::__throw_domain_error(("Argument less than zero " "in __ellint_rj.")
                                                        );
      else if (__x + __y < __lolim || __x + __z < __lolim
            || __y + __z < __lolim || __p < __lolim)
        std::__throw_domain_error(("Argument too small " "in __ellint_rj")
                                                       );
      else
        {
          const _Tp __c0 = _Tp(1) / _Tp(4);
          const _Tp __c1 = _Tp(3) / _Tp(14);
          const _Tp __c2 = _Tp(1) / _Tp(3);
          const _Tp __c3 = _Tp(3) / _Tp(22);
          const _Tp __c4 = _Tp(3) / _Tp(26);

          _Tp __xn = __x;
          _Tp __yn = __y;
          _Tp __zn = __z;
          _Tp __pn = __p;
          _Tp __sigma = _Tp(0);
          _Tp __power4 = _Tp(1);

          const _Tp __eps = std::numeric_limits<_Tp>::epsilon();
          const _Tp __errtol = std::pow(__eps / _Tp(8), _Tp(1) / _Tp(6));

          _Tp __mu;
          _Tp __xndev, __yndev, __zndev, __pndev;

          const unsigned int __max_iter = 100;
          for (unsigned int __iter = 0; __iter < __max_iter; ++__iter)
            {
              __mu = (__xn + __yn + __zn + _Tp(2) * __pn) / _Tp(5);
              __xndev = (__mu - __xn) / __mu;
              __yndev = (__mu - __yn) / __mu;
              __zndev = (__mu - __zn) / __mu;
              __pndev = (__mu - __pn) / __mu;
              _Tp __epsilon = std::max(std::abs(__xndev), std::abs(__yndev));
              __epsilon = std::max(__epsilon, std::abs(__zndev));
              __epsilon = std::max(__epsilon, std::abs(__pndev));
              if (__epsilon < __errtol)
                break;
              const _Tp __xnroot = std::sqrt(__xn);
              const _Tp __ynroot = std::sqrt(__yn);
              const _Tp __znroot = std::sqrt(__zn);
              const _Tp __lambda = __xnroot * (__ynroot + __znroot)
                                 + __ynroot * __znroot;
              const _Tp __alpha1 = __pn * (__xnroot + __ynroot + __znroot)
                                + __xnroot * __ynroot * __znroot;
              const _Tp __alpha2 = __alpha1 * __alpha1;
              const _Tp __beta = __pn * (__pn + __lambda)
                                      * (__pn + __lambda);
              __sigma += __power4 * __ellint_rc(__alpha2, __beta);
              __power4 *= __c0;
              __xn = __c0 * (__xn + __lambda);
              __yn = __c0 * (__yn + __lambda);
              __zn = __c0 * (__zn + __lambda);
              __pn = __c0 * (__pn + __lambda);
            }

          _Tp __ea = __xndev * (__yndev + __zndev) + __yndev * __zndev;
          _Tp __eb = __xndev * __yndev * __zndev;
          _Tp __ec = __pndev * __pndev;
          _Tp __e2 = __ea - _Tp(3) * __ec;
          _Tp __e3 = __eb + _Tp(2) * __pndev * (__ea - __ec);
          _Tp __s1 = _Tp(1) + __e2 * (-__c1 + _Tp(3) * __c3 * __e2 / _Tp(4)
                            - _Tp(3) * __c4 * __e3 / _Tp(2));
          _Tp __s2 = __eb * (__c2 / _Tp(2)
                   + __pndev * (-__c3 - __c3 + __pndev * __c4));
          _Tp __s3 = __pndev * __ea * (__c2 - __pndev * __c3)
                   - __c2 * __pndev * __ec;

          return _Tp(3) * __sigma + __power4 * (__s1 + __s2 + __s3)
                                             / (__mu * std::sqrt(__mu));
        }
    }
# 661 "/usr/include/c++/15.1.1/tr1/ell_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __comp_ellint_3(_Tp __k, _Tp __nu)
    {

      if (__isnan(__k) || __isnan(__nu))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else if (__nu == _Tp(1))
        return std::numeric_limits<_Tp>::infinity();
      else if (std::abs(__k) > _Tp(1))
        std::__throw_domain_error(("Bad argument in __comp_ellint_3."));
      else
        {
          const _Tp __kk = __k * __k;

          return __ellint_rf(_Tp(0), _Tp(1) - __kk, _Tp(1))
               + __nu
               * __ellint_rj(_Tp(0), _Tp(1) - __kk, _Tp(1), _Tp(1) - __nu)
               / _Tp(3);
        }
    }
# 701 "/usr/include/c++/15.1.1/tr1/ell_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __ellint_3(_Tp __k, _Tp __nu, _Tp __phi)
    {

      if (__isnan(__k) || __isnan(__nu) || __isnan(__phi))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else if (std::abs(__k) > _Tp(1))
        std::__throw_domain_error(("Bad argument in __ellint_3."));
      else
        {

          const int __n = std::floor(__phi / __numeric_constants<_Tp>::__pi()
                                   + _Tp(0.5L));
          const _Tp __phi_red = __phi
                              - __n * __numeric_constants<_Tp>::__pi();

          const _Tp __kk = __k * __k;
          const _Tp __s = std::sin(__phi_red);
          const _Tp __ss = __s * __s;
          const _Tp __sss = __ss * __s;
          const _Tp __c = std::cos(__phi_red);
          const _Tp __cc = __c * __c;

          const _Tp __Pi = __s
                         * __ellint_rf(__cc, _Tp(1) - __kk * __ss, _Tp(1))
                         + __nu * __sss
                         * __ellint_rj(__cc, _Tp(1) - __kk * __ss, _Tp(1),
                                       _Tp(1) - __nu * __ss) / _Tp(3);

          if (__n == 0)
            return __Pi;
          else
            return __Pi + _Tp(2) * __n * __comp_ellint_3(__k, __nu);
        }
    }
  }





}
# 51 "/usr/include/c++/15.1.1/bits/specfun.h" 2 3
# 1 "/usr/include/c++/15.1.1/tr1/exp_integral.tcc" 1 3
# 46 "/usr/include/c++/15.1.1/tr1/exp_integral.tcc" 3
#define _GLIBCXX_TR1_EXP_INTEGRAL_TCC 1



namespace std __attribute__ ((__visibility__ ("default")))
{

# 64 "/usr/include/c++/15.1.1/tr1/exp_integral.tcc" 3
  namespace __detail
  {
    template<typename _Tp> _Tp __expint_E1(_Tp);
# 81 "/usr/include/c++/15.1.1/tr1/exp_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __expint_E1_series(_Tp __x)
    {
      const _Tp __eps = std::numeric_limits<_Tp>::epsilon();
      _Tp __term = _Tp(1);
      _Tp __esum = _Tp(0);
      _Tp __osum = _Tp(0);
      const unsigned int __max_iter = 1000;
      for (unsigned int __i = 1; __i < __max_iter; ++__i)
        {
          __term *= - __x / __i;
          if (std::abs(__term) < __eps)
            break;
          if (__term >= _Tp(0))
            __esum += __term / __i;
          else
            __osum += __term / __i;
        }

      return - __esum - __osum
             - __numeric_constants<_Tp>::__gamma_e() - std::log(__x);
    }
# 118 "/usr/include/c++/15.1.1/tr1/exp_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __expint_E1_asymp(_Tp __x)
    {
      _Tp __term = _Tp(1);
      _Tp __esum = _Tp(1);
      _Tp __osum = _Tp(0);
      const unsigned int __max_iter = 1000;
      for (unsigned int __i = 1; __i < __max_iter; ++__i)
        {
          _Tp __prev = __term;
          __term *= - __i / __x;
          if (std::abs(__term) > std::abs(__prev))
            break;
          if (__term >= _Tp(0))
            __esum += __term;
          else
            __osum += __term;
        }

      return std::exp(- __x) * (__esum + __osum) / __x;
    }
# 155 "/usr/include/c++/15.1.1/tr1/exp_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __expint_En_series(unsigned int __n, _Tp __x)
    {
      const unsigned int __max_iter = 1000;
      const _Tp __eps = std::numeric_limits<_Tp>::epsilon();
      const int __nm1 = __n - 1;
      _Tp __ans = (__nm1 != 0
                ? _Tp(1) / __nm1 : -std::log(__x)
                                   - __numeric_constants<_Tp>::__gamma_e());
      _Tp __fact = _Tp(1);
      for (int __i = 1; __i <= __max_iter; ++__i)
        {
          __fact *= -__x / _Tp(__i);
          _Tp __del;
          if ( __i != __nm1 )
            __del = -__fact / _Tp(__i - __nm1);
          else
            {
              _Tp __psi = -__numeric_constants<_Tp>::gamma_e();
              for (int __ii = 1; __ii <= __nm1; ++__ii)
                __psi += _Tp(1) / _Tp(__ii);
              __del = __fact * (__psi - std::log(__x));
            }
          __ans += __del;
          if (std::abs(__del) < __eps * std::abs(__ans))
            return __ans;
        }
      std::__throw_runtime_error(("Series summation failed " "in __expint_En_series.")
                                                              );
    }
# 201 "/usr/include/c++/15.1.1/tr1/exp_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __expint_En_cont_frac(unsigned int __n, _Tp __x)
    {
      const unsigned int __max_iter = 1000;
      const _Tp __eps = std::numeric_limits<_Tp>::epsilon();
      const _Tp __fp_min = std::numeric_limits<_Tp>::min();
      const int __nm1 = __n - 1;
      _Tp __b = __x + _Tp(__n);
      _Tp __c = _Tp(1) / __fp_min;
      _Tp __d = _Tp(1) / __b;
      _Tp __h = __d;
      for ( unsigned int __i = 1; __i <= __max_iter; ++__i )
        {
          _Tp __a = -_Tp(__i * (__nm1 + __i));
          __b += _Tp(2);
          __d = _Tp(1) / (__a * __d + __b);
          __c = __b + __a / __c;
          const _Tp __del = __c * __d;
          __h *= __del;
          if (std::abs(__del - _Tp(1)) < __eps)
            {
              const _Tp __ans = __h * std::exp(-__x);
              return __ans;
            }
        }
      std::__throw_runtime_error(("Continued fraction failed " "in __expint_En_cont_frac.")
                                                                 );
    }
# 246 "/usr/include/c++/15.1.1/tr1/exp_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __expint_En_recursion(unsigned int __n, _Tp __x)
    {
      _Tp __En;
      _Tp __E1 = __expint_E1(__x);
      if (__x < _Tp(__n))
        {

          __En = __E1;
          for (unsigned int __j = 2; __j < __n; ++__j)
            __En = (std::exp(-__x) - __x * __En) / _Tp(__j - 1);
        }
      else
        {

          __En = _Tp(1);
          const int __N = __n + 20;
          _Tp __save = _Tp(0);
          for (int __j = __N; __j > 0; --__j)
            {
              __En = (std::exp(-__x) - __j * __En) / __x;
              if (__j == __n)
                __save = __En;
            }
            _Tp __norm = __En / __E1;
            __En /= __norm;
        }

      return __En;
    }
# 290 "/usr/include/c++/15.1.1/tr1/exp_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __expint_Ei_series(_Tp __x)
    {
      _Tp __term = _Tp(1);
      _Tp __sum = _Tp(0);
      const unsigned int __max_iter = 1000;
      for (unsigned int __i = 1; __i < __max_iter; ++__i)
        {
          __term *= __x / __i;
          __sum += __term / __i;
          if (__term < std::numeric_limits<_Tp>::epsilon() * __sum)
            break;
        }

      return __numeric_constants<_Tp>::__gamma_e() + __sum + std::log(__x);
    }
# 321 "/usr/include/c++/15.1.1/tr1/exp_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __expint_Ei_asymp(_Tp __x)
    {
      _Tp __term = _Tp(1);
      _Tp __sum = _Tp(1);
      const unsigned int __max_iter = 1000;
      for (unsigned int __i = 1; __i < __max_iter; ++__i)
        {
          _Tp __prev = __term;
          __term *= __i / __x;
          if (__term < std::numeric_limits<_Tp>::epsilon())
            break;
          if (__term >= __prev)
            break;
          __sum += __term;
        }

      return std::exp(__x) * __sum / __x;
    }
# 354 "/usr/include/c++/15.1.1/tr1/exp_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __expint_Ei(_Tp __x)
    {
      if (__x < _Tp(0))
        return -__expint_E1(-__x);
      else if (__x < -std::log(std::numeric_limits<_Tp>::epsilon()))
        return __expint_Ei_series(__x);
      else
        return __expint_Ei_asymp(__x);
    }
# 378 "/usr/include/c++/15.1.1/tr1/exp_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __expint_E1(_Tp __x)
    {
      if (__x < _Tp(0))
        return -__expint_Ei(-__x);
      else if (__x < _Tp(1))
        return __expint_E1_series(__x);
      else if (__x < _Tp(100))
        return __expint_En_cont_frac(1, __x);
      else
        return __expint_E1_asymp(__x);
    }
# 408 "/usr/include/c++/15.1.1/tr1/exp_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __expint_asymp(unsigned int __n, _Tp __x)
    {
      _Tp __term = _Tp(1);
      _Tp __sum = _Tp(1);
      for (unsigned int __i = 1; __i <= __n; ++__i)
        {
          _Tp __prev = __term;
          __term *= -(__n - __i + 1) / __x;
          if (std::abs(__term) > std::abs(__prev))
            break;
          __sum += __term;
        }

      return std::exp(-__x) * __sum / __x;
    }
# 442 "/usr/include/c++/15.1.1/tr1/exp_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __expint_large_n(unsigned int __n, _Tp __x)
    {
      const _Tp __xpn = __x + __n;
      const _Tp __xpn2 = __xpn * __xpn;
      _Tp __term = _Tp(1);
      _Tp __sum = _Tp(1);
      for (unsigned int __i = 1; __i <= __n; ++__i)
        {
          _Tp __prev = __term;
          __term *= (__n - 2 * (__i - 1) * __x) / __xpn2;
          if (std::abs(__term) < std::numeric_limits<_Tp>::epsilon())
            break;
          __sum += __term;
        }

      return std::exp(-__x) * __sum / __xpn;
    }
# 476 "/usr/include/c++/15.1.1/tr1/exp_integral.tcc" 3
    template<typename _Tp>
    _Tp
    __expint(unsigned int __n, _Tp __x)
    {

      if (__isnan(__x))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else if (__n <= 1 && __x == _Tp(0))
        return std::numeric_limits<_Tp>::infinity();
      else
        {
          _Tp __E0 = std::exp(__x) / __x;
          if (__n == 0)
            return __E0;

          _Tp __E1 = __expint_E1(__x);
          if (__n == 1)
            return __E1;

          if (__x == _Tp(0))
            return _Tp(1) / static_cast<_Tp>(__n - 1);

          _Tp __En = __expint_En_recursion(__n, __x);

          return __En;
        }
    }
# 516 "/usr/include/c++/15.1.1/tr1/exp_integral.tcc" 3
    template<typename _Tp>
    inline _Tp
    __expint(_Tp __x)
    {
      if (__isnan(__x))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else
        return __expint_Ei(__x);
    }
  }





}
# 52 "/usr/include/c++/15.1.1/bits/specfun.h" 2 3
# 1 "/usr/include/c++/15.1.1/tr1/hypergeometric.tcc" 1 3
# 42 "/usr/include/c++/15.1.1/tr1/hypergeometric.tcc" 3
#define _GLIBCXX_TR1_HYPERGEOMETRIC_TCC 1

namespace std __attribute__ ((__visibility__ ("default")))
{



#define _GLIBCXX_MATH_NS ::std
# 60 "/usr/include/c++/15.1.1/tr1/hypergeometric.tcc" 3
  namespace __detail
  {
# 83 "/usr/include/c++/15.1.1/tr1/hypergeometric.tcc" 3
    template<typename _Tp>
    _Tp
    __conf_hyperg_series(_Tp __a, _Tp __c, _Tp __x)
    {
      const _Tp __eps = std::numeric_limits<_Tp>::epsilon();

      _Tp __term = _Tp(1);
      _Tp __Fac = _Tp(1);
      const unsigned int __max_iter = 100000;
      unsigned int __i;
      for (__i = 0; __i < __max_iter; ++__i)
        {
          __term *= (__a + _Tp(__i)) * __x
                  / ((__c + _Tp(__i)) * _Tp(1 + __i));
          if (std::abs(__term) < __eps)
            {
              break;
            }
          __Fac += __term;
        }
      if (__i == __max_iter)
        std::__throw_runtime_error(("Series failed to converge " "in __conf_hyperg_series.")
                                                                  );

      return __Fac;
    }
# 120 "/usr/include/c++/15.1.1/tr1/hypergeometric.tcc" 3
    template<typename _Tp>
    _Tp
    __conf_hyperg_luke(_Tp __a, _Tp __c, _Tp __xin)
    {
      const _Tp __big = std::pow(std::numeric_limits<_Tp>::max(), _Tp(0.16L));
      const int __nmax = 20000;
      const _Tp __eps = std::numeric_limits<_Tp>::epsilon();
      const _Tp __x = -__xin;
      const _Tp __x3 = __x * __x * __x;
      const _Tp __t0 = __a / __c;
      const _Tp __t1 = (__a + _Tp(1)) / (_Tp(2) * __c);
      const _Tp __t2 = (__a + _Tp(2)) / (_Tp(2) * (__c + _Tp(1)));
      _Tp __F = _Tp(1);
      _Tp __prec;

      _Tp __Bnm3 = _Tp(1);
      _Tp __Bnm2 = _Tp(1) + __t1 * __x;
      _Tp __Bnm1 = _Tp(1) + __t2 * __x * (_Tp(1) + __t1 / _Tp(3) * __x);

      _Tp __Anm3 = _Tp(1);
      _Tp __Anm2 = __Bnm2 - __t0 * __x;
      _Tp __Anm1 = __Bnm1 - __t0 * (_Tp(1) + __t2 * __x) * __x
                 + __t0 * __t1 * (__c / (__c + _Tp(1))) * __x * __x;

      int __n = 3;
      while(1)
        {
          _Tp __npam1 = _Tp(__n - 1) + __a;
          _Tp __npcm1 = _Tp(__n - 1) + __c;
          _Tp __npam2 = _Tp(__n - 2) + __a;
          _Tp __npcm2 = _Tp(__n - 2) + __c;
          _Tp __tnm1 = _Tp(2 * __n - 1);
          _Tp __tnm3 = _Tp(2 * __n - 3);
          _Tp __tnm5 = _Tp(2 * __n - 5);
          _Tp __F1 = (_Tp(__n - 2) - __a) / (_Tp(2) * __tnm3 * __npcm1);
          _Tp __F2 = (_Tp(__n) + __a) * __npam1
                   / (_Tp(4) * __tnm1 * __tnm3 * __npcm2 * __npcm1);
          _Tp __F3 = -__npam2 * __npam1 * (_Tp(__n - 2) - __a)
                   / (_Tp(8) * __tnm3 * __tnm3 * __tnm5
                   * (_Tp(__n - 3) + __c) * __npcm2 * __npcm1);
          _Tp __E = -__npam1 * (_Tp(__n - 1) - __c)
                   / (_Tp(2) * __tnm3 * __npcm2 * __npcm1);

          _Tp __An = (_Tp(1) + __F1 * __x) * __Anm1
                   + (__E + __F2 * __x) * __x * __Anm2 + __F3 * __x3 * __Anm3;
          _Tp __Bn = (_Tp(1) + __F1 * __x) * __Bnm1
                   + (__E + __F2 * __x) * __x * __Bnm2 + __F3 * __x3 * __Bnm3;
          _Tp __r = __An / __Bn;

          __prec = std::abs((__F - __r) / __F);
          __F = __r;

          if (__prec < __eps || __n > __nmax)
            break;

          if (std::abs(__An) > __big || std::abs(__Bn) > __big)
            {
              __An /= __big;
              __Bn /= __big;
              __Anm1 /= __big;
              __Bnm1 /= __big;
              __Anm2 /= __big;
              __Bnm2 /= __big;
              __Anm3 /= __big;
              __Bnm3 /= __big;
            }
          else if (std::abs(__An) < _Tp(1) / __big
                || std::abs(__Bn) < _Tp(1) / __big)
            {
              __An *= __big;
              __Bn *= __big;
              __Anm1 *= __big;
              __Bnm1 *= __big;
              __Anm2 *= __big;
              __Bnm2 *= __big;
              __Anm3 *= __big;
              __Bnm3 *= __big;
            }

          ++__n;
          __Bnm3 = __Bnm2;
          __Bnm2 = __Bnm1;
          __Bnm1 = __Bn;
          __Anm3 = __Anm2;
          __Anm2 = __Anm1;
          __Anm1 = __An;
        }

      if (__n >= __nmax)
        std::__throw_runtime_error(("Iteration failed to converge " "in __conf_hyperg_luke.")
                                                                );

      return __F;
    }
# 227 "/usr/include/c++/15.1.1/tr1/hypergeometric.tcc" 3
    template<typename _Tp>
    _Tp
    __conf_hyperg(_Tp __a, _Tp __c, _Tp __x)
    {

      const _Tp __c_nint = ::std::nearbyint(__c);



      if (__isnan(__a) || __isnan(__c) || __isnan(__x))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else if (__c_nint == __c && __c_nint <= 0)
        return std::numeric_limits<_Tp>::infinity();
      else if (__a == _Tp(0))
        return _Tp(1);
      else if (__c == __a)
        return std::exp(__x);
      else if (__x < _Tp(0))
        return __conf_hyperg_luke(__a, __c, __x);
      else
        return __conf_hyperg_series(__a, __c, __x);
    }
# 271 "/usr/include/c++/15.1.1/tr1/hypergeometric.tcc" 3
    template<typename _Tp>
    _Tp
    __hyperg_series(_Tp __a, _Tp __b, _Tp __c, _Tp __x)
    {
      const _Tp __eps = std::numeric_limits<_Tp>::epsilon();

      _Tp __term = _Tp(1);
      _Tp __Fabc = _Tp(1);
      const unsigned int __max_iter = 100000;
      unsigned int __i;
      for (__i = 0; __i < __max_iter; ++__i)
        {
          __term *= (__a + _Tp(__i)) * (__b + _Tp(__i)) * __x
                  / ((__c + _Tp(__i)) * _Tp(1 + __i));
          if (std::abs(__term) < __eps)
            {
              break;
            }
          __Fabc += __term;
        }
      if (__i == __max_iter)
        std::__throw_runtime_error(("Series failed to converge " "in __hyperg_series.")
                                                             );

      return __Fabc;
    }







    template<typename _Tp>
    _Tp
    __hyperg_luke(_Tp __a, _Tp __b, _Tp __c, _Tp __xin)
    {
      const _Tp __big = std::pow(std::numeric_limits<_Tp>::max(), _Tp(0.16L));
      const int __nmax = 20000;
      const _Tp __eps = std::numeric_limits<_Tp>::epsilon();
      const _Tp __x = -__xin;
      const _Tp __x3 = __x * __x * __x;
      const _Tp __t0 = __a * __b / __c;
      const _Tp __t1 = (__a + _Tp(1)) * (__b + _Tp(1)) / (_Tp(2) * __c);
      const _Tp __t2 = (__a + _Tp(2)) * (__b + _Tp(2))
                     / (_Tp(2) * (__c + _Tp(1)));

      _Tp __F = _Tp(1);

      _Tp __Bnm3 = _Tp(1);
      _Tp __Bnm2 = _Tp(1) + __t1 * __x;
      _Tp __Bnm1 = _Tp(1) + __t2 * __x * (_Tp(1) + __t1 / _Tp(3) * __x);

      _Tp __Anm3 = _Tp(1);
      _Tp __Anm2 = __Bnm2 - __t0 * __x;
      _Tp __Anm1 = __Bnm1 - __t0 * (_Tp(1) + __t2 * __x) * __x
                 + __t0 * __t1 * (__c / (__c + _Tp(1))) * __x * __x;

      int __n = 3;
      while (1)
        {
          const _Tp __npam1 = _Tp(__n - 1) + __a;
          const _Tp __npbm1 = _Tp(__n - 1) + __b;
          const _Tp __npcm1 = _Tp(__n - 1) + __c;
          const _Tp __npam2 = _Tp(__n - 2) + __a;
          const _Tp __npbm2 = _Tp(__n - 2) + __b;
          const _Tp __npcm2 = _Tp(__n - 2) + __c;
          const _Tp __tnm1 = _Tp(2 * __n - 1);
          const _Tp __tnm3 = _Tp(2 * __n - 3);
          const _Tp __tnm5 = _Tp(2 * __n - 5);
          const _Tp __n2 = __n * __n;
          const _Tp __F1 = (_Tp(3) * __n2 + (__a + __b - _Tp(6)) * __n
                         + _Tp(2) - __a * __b - _Tp(2) * (__a + __b))
                         / (_Tp(2) * __tnm3 * __npcm1);
          const _Tp __F2 = -(_Tp(3) * __n2 - (__a + __b + _Tp(6)) * __n
                         + _Tp(2) - __a * __b) * __npam1 * __npbm1
                         / (_Tp(4) * __tnm1 * __tnm3 * __npcm2 * __npcm1);
          const _Tp __F3 = (__npam2 * __npam1 * __npbm2 * __npbm1
                         * (_Tp(__n - 2) - __a) * (_Tp(__n - 2) - __b))
                         / (_Tp(8) * __tnm3 * __tnm3 * __tnm5
                         * (_Tp(__n - 3) + __c) * __npcm2 * __npcm1);
          const _Tp __E = -__npam1 * __npbm1 * (_Tp(__n - 1) - __c)
                         / (_Tp(2) * __tnm3 * __npcm2 * __npcm1);

          _Tp __An = (_Tp(1) + __F1 * __x) * __Anm1
                   + (__E + __F2 * __x) * __x * __Anm2 + __F3 * __x3 * __Anm3;
          _Tp __Bn = (_Tp(1) + __F1 * __x) * __Bnm1
                   + (__E + __F2 * __x) * __x * __Bnm2 + __F3 * __x3 * __Bnm3;
          const _Tp __r = __An / __Bn;

          const _Tp __prec = std::abs((__F - __r) / __F);
          __F = __r;

          if (__prec < __eps || __n > __nmax)
            break;

          if (std::abs(__An) > __big || std::abs(__Bn) > __big)
            {
              __An /= __big;
              __Bn /= __big;
              __Anm1 /= __big;
              __Bnm1 /= __big;
              __Anm2 /= __big;
              __Bnm2 /= __big;
              __Anm3 /= __big;
              __Bnm3 /= __big;
            }
          else if (std::abs(__An) < _Tp(1) / __big
                || std::abs(__Bn) < _Tp(1) / __big)
            {
              __An *= __big;
              __Bn *= __big;
              __Anm1 *= __big;
              __Bnm1 *= __big;
              __Anm2 *= __big;
              __Bnm2 *= __big;
              __Anm3 *= __big;
              __Bnm3 *= __big;
            }

          ++__n;
          __Bnm3 = __Bnm2;
          __Bnm2 = __Bnm1;
          __Bnm1 = __Bn;
          __Anm3 = __Anm2;
          __Anm2 = __Anm1;
          __Anm1 = __An;
        }

      if (__n >= __nmax)
        std::__throw_runtime_error(("Iteration failed to converge " "in __hyperg_luke.")
                                                           );

      return __F;
    }
# 438 "/usr/include/c++/15.1.1/tr1/hypergeometric.tcc" 3
    template<typename _Tp>
    _Tp
    __hyperg_reflect(_Tp __a, _Tp __b, _Tp __c, _Tp __x)
    {
      const _Tp __d = __c - __a - __b;
      const int __intd = std::floor(__d + _Tp(0.5L));
      const _Tp __eps = std::numeric_limits<_Tp>::epsilon();
      const _Tp __toler = _Tp(1000) * __eps;
      const _Tp __log_max = std::log(std::numeric_limits<_Tp>::max());
      const bool __d_integer = (std::abs(__d - __intd) < __toler);

      if (__d_integer)
        {
          const _Tp __ln_omx = std::log(_Tp(1) - __x);
          const _Tp __ad = std::abs(__d);
          _Tp __F1, __F2;

          _Tp __d1, __d2;
          if (__d >= _Tp(0))
            {
              __d1 = __d;
              __d2 = _Tp(0);
            }
          else
            {
              __d1 = _Tp(0);
              __d2 = __d;
            }

          const _Tp __lng_c = __log_gamma(__c);


          if (__ad < __eps)
            {

              __F1 = _Tp(0);
            }
          else
            {

              bool __ok_d1 = true;
              _Tp __lng_ad, __lng_ad1, __lng_bd1;
              try
                {
                  __lng_ad = __log_gamma(__ad);
                  __lng_ad1 = __log_gamma(__a + __d1);
                  __lng_bd1 = __log_gamma(__b + __d1);
                }
              catch(...)
                {
                  __ok_d1 = false;
                }

              if (__ok_d1)
                {



                  _Tp __sum1 = _Tp(1);
                  _Tp __term = _Tp(1);
                  _Tp __ln_pre1 = __lng_ad + __lng_c + __d2 * __ln_omx
                                - __lng_ad1 - __lng_bd1;



                  for (int __i = 1; __i < __ad; ++__i)
                    {
                      const int __j = __i - 1;
                      __term *= (__a + __d2 + __j) * (__b + __d2 + __j)
                              / (_Tp(1) + __d2 + __j) / __i * (_Tp(1) - __x);
                      __sum1 += __term;
                    }

                  if (__ln_pre1 > __log_max)
                    std::__throw_runtime_error(("Overflow of gamma functions" " in __hyperg_luke.")
                                                                        );
                  else
                    __F1 = std::exp(__ln_pre1) * __sum1;
                }
              else
                {


                  __F1 = _Tp(0);
                }
            }


          bool __ok_d2 = true;
          _Tp __lng_ad2, __lng_bd2;
          try
            {
              __lng_ad2 = __log_gamma(__a + __d2);
              __lng_bd2 = __log_gamma(__b + __d2);
            }
          catch(...)
            {
              __ok_d2 = false;
            }

          if (__ok_d2)
            {


              const int __maxiter = 2000;
              const _Tp __psi_1 = -__numeric_constants<_Tp>::__gamma_e();
              const _Tp __psi_1pd = __psi(_Tp(1) + __ad);
              const _Tp __psi_apd1 = __psi(__a + __d1);
              const _Tp __psi_bpd1 = __psi(__b + __d1);

              _Tp __psi_term = __psi_1 + __psi_1pd - __psi_apd1
                             - __psi_bpd1 - __ln_omx;
              _Tp __fact = _Tp(1);
              _Tp __sum2 = __psi_term;
              _Tp __ln_pre2 = __lng_c + __d1 * __ln_omx
                            - __lng_ad2 - __lng_bd2;


              int __j;
              for (__j = 1; __j < __maxiter; ++__j)
                {


                  const _Tp __term1 = _Tp(1) / _Tp(__j)
                                    + _Tp(1) / (__ad + __j);
                  const _Tp __term2 = _Tp(1) / (__a + __d1 + _Tp(__j - 1))
                                    + _Tp(1) / (__b + __d1 + _Tp(__j - 1));
                  __psi_term += __term1 - __term2;
                  __fact *= (__a + __d1 + _Tp(__j - 1))
                          * (__b + __d1 + _Tp(__j - 1))
                          / ((__ad + __j) * __j) * (_Tp(1) - __x);
                  const _Tp __delta = __fact * __psi_term;
                  __sum2 += __delta;
                  if (std::abs(__delta) < __eps * std::abs(__sum2))
                    break;
                }
              if (__j == __maxiter)
                std::__throw_runtime_error(("Sum F2 failed to converge " "in __hyperg_reflect")
                                                                     );

              if (__sum2 == _Tp(0))
                __F2 = _Tp(0);
              else
                __F2 = std::exp(__ln_pre2) * __sum2;
            }
          else
            {


              __F2 = _Tp(0);
            }

          const _Tp __sgn_2 = (__intd % 2 == 1 ? -_Tp(1) : _Tp(1));
          const _Tp __F = __F1 + __sgn_2 * __F2;

          return __F;
        }
      else
        {




          bool __ok1 = true;
          _Tp __sgn_g1ca = _Tp(0), __ln_g1ca = _Tp(0);
          _Tp __sgn_g1cb = _Tp(0), __ln_g1cb = _Tp(0);
          try
            {
              __sgn_g1ca = __log_gamma_sign(__c - __a);
              __ln_g1ca = __log_gamma(__c - __a);
              __sgn_g1cb = __log_gamma_sign(__c - __b);
              __ln_g1cb = __log_gamma(__c - __b);
            }
          catch(...)
            {
              __ok1 = false;
            }

          bool __ok2 = true;
          _Tp __sgn_g2a = _Tp(0), __ln_g2a = _Tp(0);
          _Tp __sgn_g2b = _Tp(0), __ln_g2b = _Tp(0);
          try
            {
              __sgn_g2a = __log_gamma_sign(__a);
              __ln_g2a = __log_gamma(__a);
              __sgn_g2b = __log_gamma_sign(__b);
              __ln_g2b = __log_gamma(__b);
            }
          catch(...)
            {
              __ok2 = false;
            }

          const _Tp __sgn_gc = __log_gamma_sign(__c);
          const _Tp __ln_gc = __log_gamma(__c);
          const _Tp __sgn_gd = __log_gamma_sign(__d);
          const _Tp __ln_gd = __log_gamma(__d);
          const _Tp __sgn_gmd = __log_gamma_sign(-__d);
          const _Tp __ln_gmd = __log_gamma(-__d);

          const _Tp __sgn1 = __sgn_gc * __sgn_gd * __sgn_g1ca * __sgn_g1cb;
          const _Tp __sgn2 = __sgn_gc * __sgn_gmd * __sgn_g2a * __sgn_g2b;

          _Tp __pre1, __pre2;
          if (__ok1 && __ok2)
            {
              _Tp __ln_pre1 = __ln_gc + __ln_gd - __ln_g1ca - __ln_g1cb;
              _Tp __ln_pre2 = __ln_gc + __ln_gmd - __ln_g2a - __ln_g2b
                            + __d * std::log(_Tp(1) - __x);
              if (__ln_pre1 < __log_max && __ln_pre2 < __log_max)
                {
                  __pre1 = std::exp(__ln_pre1);
                  __pre2 = std::exp(__ln_pre2);
                  __pre1 *= __sgn1;
                  __pre2 *= __sgn2;
                }
              else
                {
                  std::__throw_runtime_error(("Overflow of gamma functions " "in __hyperg_reflect")
                                                                       );
                }
            }
          else if (__ok1 && !__ok2)
            {
              _Tp __ln_pre1 = __ln_gc + __ln_gd - __ln_g1ca - __ln_g1cb;
              if (__ln_pre1 < __log_max)
                {
                  __pre1 = std::exp(__ln_pre1);
                  __pre1 *= __sgn1;
                  __pre2 = _Tp(0);
                }
              else
                {
                  std::__throw_runtime_error(("Overflow of gamma functions " "in __hyperg_reflect")
                                                                       );
                }
            }
          else if (!__ok1 && __ok2)
            {
              _Tp __ln_pre2 = __ln_gc + __ln_gmd - __ln_g2a - __ln_g2b
                            + __d * std::log(_Tp(1) - __x);
              if (__ln_pre2 < __log_max)
                {
                  __pre1 = _Tp(0);
                  __pre2 = std::exp(__ln_pre2);
                  __pre2 *= __sgn2;
                }
              else
                {
                  std::__throw_runtime_error(("Overflow of gamma functions " "in __hyperg_reflect")
                                                                       );
                }
            }
          else
            {
              __pre1 = _Tp(0);
              __pre2 = _Tp(0);
              std::__throw_runtime_error(("Underflow of gamma functions " "in __hyperg_reflect")
                                                                   );
            }

          const _Tp __F1 = __hyperg_series(__a, __b, _Tp(1) - __d,
                                           _Tp(1) - __x);
          const _Tp __F2 = __hyperg_series(__c - __a, __c - __b, _Tp(1) + __d,
                                           _Tp(1) - __x);

          const _Tp __F = __pre1 * __F1 + __pre2 * __F2;

          return __F;
        }
    }
# 728 "/usr/include/c++/15.1.1/tr1/hypergeometric.tcc" 3
    template<typename _Tp>
    _Tp
    __hyperg(_Tp __a, _Tp __b, _Tp __c, _Tp __x)
    {

      const _Tp __a_nint = ::std::nearbyint(__a);
      const _Tp __b_nint = ::std::nearbyint(__b);
      const _Tp __c_nint = ::std::nearbyint(__c);





      const _Tp __toler = _Tp(1000) * std::numeric_limits<_Tp>::epsilon();
      if (std::abs(__x) >= _Tp(1))
        std::__throw_domain_error(("Argument outside unit circle " "in __hyperg.")
                                                     );
      else if (__isnan(__a) || __isnan(__b)
            || __isnan(__c) || __isnan(__x))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else if (__c_nint == __c && __c_nint <= _Tp(0))
        return std::numeric_limits<_Tp>::infinity();
      else if (std::abs(__c - __b) < __toler || std::abs(__c - __a) < __toler)
        return std::pow(_Tp(1) - __x, __c - __a - __b);
      else if (__a >= _Tp(0) && __b >= _Tp(0) && __c >= _Tp(0)
            && __x >= _Tp(0) && __x < _Tp(0.995L))
        return __hyperg_series(__a, __b, __c, __x);
      else if (std::abs(__a) < _Tp(10) && std::abs(__b) < _Tp(10))
        {


          if (__a < _Tp(0) && std::abs(__a - __a_nint) < __toler)
            return __hyperg_series(__a_nint, __b, __c, __x);
          else if (__b < _Tp(0) && std::abs(__b - __b_nint) < __toler)
            return __hyperg_series(__a, __b_nint, __c, __x);
          else if (__x < -_Tp(0.25L))
            return __hyperg_luke(__a, __b, __c, __x);
          else if (__x < _Tp(0.5L))
            return __hyperg_series(__a, __b, __c, __x);
          else
            if (std::abs(__c) > _Tp(10))
              return __hyperg_series(__a, __b, __c, __x);
            else
              return __hyperg_reflect(__a, __b, __c, __x);
        }
      else
        return __hyperg_luke(__a, __b, __c, __x);
    }
  }
#undef _GLIBCXX_MATH_NS





}
# 53 "/usr/include/c++/15.1.1/bits/specfun.h" 2 3
# 1 "/usr/include/c++/15.1.1/tr1/legendre_function.tcc" 1 3
# 45 "/usr/include/c++/15.1.1/tr1/legendre_function.tcc" 3
#define _GLIBCXX_TR1_LEGENDRE_FUNCTION_TCC 1



namespace std __attribute__ ((__visibility__ ("default")))
{



#define _GLIBCXX_MATH_NS ::std
# 65 "/usr/include/c++/15.1.1/tr1/legendre_function.tcc" 3
  namespace __detail
  {
# 80 "/usr/include/c++/15.1.1/tr1/legendre_function.tcc" 3
    template<typename _Tp>
    _Tp
    __poly_legendre_p(unsigned int __l, _Tp __x)
    {

      if (__isnan(__x))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else if (__x == +_Tp(1))
        return +_Tp(1);
      else if (__x == -_Tp(1))
        return (__l % 2 == 1 ? -_Tp(1) : +_Tp(1));
      else
        {
          _Tp __p_lm2 = _Tp(1);
          if (__l == 0)
            return __p_lm2;

          _Tp __p_lm1 = __x;
          if (__l == 1)
            return __p_lm1;

          _Tp __p_l = 0;
          for (unsigned int __ll = 2; __ll <= __l; ++__ll)
            {


              __p_l = _Tp(2) * __x * __p_lm1 - __p_lm2
                    - (__x * __p_lm1 - __p_lm2) / _Tp(__ll);
              __p_lm2 = __p_lm1;
              __p_lm1 = __p_l;
            }

          return __p_l;
        }
    }
# 136 "/usr/include/c++/15.1.1/tr1/legendre_function.tcc" 3
    template<typename _Tp>
    _Tp
    __assoc_legendre_p(unsigned int __l, unsigned int __m, _Tp __x,
         _Tp __phase = _Tp(+1))
    {

      if (__m > __l)
        return _Tp(0);
      else if (__isnan(__x))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else if (__m == 0)
        return __poly_legendre_p(__l, __x);
      else
        {
          _Tp __p_mm = _Tp(1);
          if (__m > 0)
            {


              _Tp __root = std::sqrt(_Tp(1) - __x) * std::sqrt(_Tp(1) + __x);
              _Tp __fact = _Tp(1);
              for (unsigned int __i = 1; __i <= __m; ++__i)
                {
                  __p_mm *= __phase * __fact * __root;
                  __fact += _Tp(2);
                }
            }
          if (__l == __m)
            return __p_mm;

          _Tp __p_mp1m = _Tp(2 * __m + 1) * __x * __p_mm;
          if (__l == __m + 1)
            return __p_mp1m;

          _Tp __p_lm2m = __p_mm;
          _Tp __P_lm1m = __p_mp1m;
          _Tp __p_lm = _Tp(0);
          for (unsigned int __j = __m + 2; __j <= __l; ++__j)
            {
              __p_lm = (_Tp(2 * __j - 1) * __x * __P_lm1m
                      - _Tp(__j + __m - 1) * __p_lm2m) / _Tp(__j - __m);
              __p_lm2m = __P_lm1m;
              __P_lm1m = __p_lm;
            }

          return __p_lm;
        }
    }
# 214 "/usr/include/c++/15.1.1/tr1/legendre_function.tcc" 3
    template <typename _Tp>
    _Tp
    __sph_legendre(unsigned int __l, unsigned int __m, _Tp __theta)
    {
      if (__isnan(__theta))
        return std::numeric_limits<_Tp>::quiet_NaN();

      const _Tp __x = std::cos(__theta);

      if (__m > __l)
        return _Tp(0);
      else if (__m == 0)
        {
          _Tp __P = __poly_legendre_p(__l, __x);
          _Tp __fact = std::sqrt(_Tp(2 * __l + 1)
                     / (_Tp(4) * __numeric_constants<_Tp>::__pi()));
          __P *= __fact;
          return __P;
        }
      else if (__x == _Tp(1) || __x == -_Tp(1))
        {

          return _Tp(0);
        }
      else
        {





          const _Tp __sgn = ( __m % 2 == 1 ? -_Tp(1) : _Tp(1));
          const _Tp __y_mp1m_factor = __x * std::sqrt(_Tp(2 * __m + 3));

          const _Tp __lncirc = ::std::log1p(-__x * __x);





          const _Tp __lnpoch = ::std::lgamma(_Tp(__m + _Tp(0.5L)))
                             - ::std::lgamma(_Tp(__m));




          const _Tp __lnpre_val =
                    -_Tp(0.25L) * __numeric_constants<_Tp>::__lnpi()
                    + _Tp(0.5L) * (__lnpoch + __m * __lncirc);
          const _Tp __sr = std::sqrt((_Tp(2) + _Tp(1) / __m)
                         / (_Tp(4) * __numeric_constants<_Tp>::__pi()));
          _Tp __y_mm = __sgn * __sr * std::exp(__lnpre_val);
          _Tp __y_mp1m = __y_mp1m_factor * __y_mm;

          if (__l == __m)
            return __y_mm;
          else if (__l == __m + 1)
            return __y_mp1m;
          else
            {
              _Tp __y_lm = _Tp(0);


              for (unsigned int __ll = __m + 2; __ll <= __l; ++__ll)
                {
                  const _Tp __rat1 = _Tp(__ll - __m) / _Tp(__ll + __m);
                  const _Tp __rat2 = _Tp(__ll - __m - 1) / _Tp(__ll + __m - 1);
                  const _Tp __fact1 = std::sqrt(__rat1 * _Tp(2 * __ll + 1)
                                                       * _Tp(2 * __ll - 1));
                  const _Tp __fact2 = std::sqrt(__rat1 * __rat2 * _Tp(2 * __ll + 1)
                                                                / _Tp(2 * __ll - 3));
                  __y_lm = (__x * __y_mp1m * __fact1
                         - (__ll + __m - 1) * __y_mm * __fact2) / _Tp(__ll - __m);
                  __y_mm = __y_mp1m;
                  __y_mp1m = __y_lm;
                }

              return __y_lm;
            }
        }
    }
  }
#undef _GLIBCXX_MATH_NS





}
# 54 "/usr/include/c++/15.1.1/bits/specfun.h" 2 3
# 1 "/usr/include/c++/15.1.1/tr1/modified_bessel_func.tcc" 1 3
# 47 "/usr/include/c++/15.1.1/tr1/modified_bessel_func.tcc" 3
#define _GLIBCXX_TR1_MODIFIED_BESSEL_FUNC_TCC 1



namespace std __attribute__ ((__visibility__ ("default")))
{

# 65 "/usr/include/c++/15.1.1/tr1/modified_bessel_func.tcc" 3
  namespace __detail
  {
# 83 "/usr/include/c++/15.1.1/tr1/modified_bessel_func.tcc" 3
    template <typename _Tp>
    void
    __bessel_ik(_Tp __nu, _Tp __x,
                _Tp & __Inu, _Tp & __Knu, _Tp & __Ipnu, _Tp & __Kpnu)
    {
      if (__x == _Tp(0))
        {
          if (__nu == _Tp(0))
            {
              __Inu = _Tp(1);
              __Ipnu = _Tp(0);
            }
          else if (__nu == _Tp(1))
            {
              __Inu = _Tp(0);
              __Ipnu = _Tp(0.5L);
            }
          else
            {
              __Inu = _Tp(0);
              __Ipnu = _Tp(0);
            }
          __Knu = std::numeric_limits<_Tp>::infinity();
          __Kpnu = -std::numeric_limits<_Tp>::infinity();
          return;
        }

      const _Tp __eps = std::numeric_limits<_Tp>::epsilon();
      const _Tp __fp_min = _Tp(10) * std::numeric_limits<_Tp>::epsilon();
      const int __max_iter = 15000;
      const _Tp __x_min = _Tp(2);

      const int __nl = static_cast<int>(__nu + _Tp(0.5L));

      const _Tp __mu = __nu - __nl;
      const _Tp __mu2 = __mu * __mu;
      const _Tp __xi = _Tp(1) / __x;
      const _Tp __xi2 = _Tp(2) * __xi;
      _Tp __h = __nu * __xi;
      if ( __h < __fp_min )
        __h = __fp_min;
      _Tp __b = __xi2 * __nu;
      _Tp __d = _Tp(0);
      _Tp __c = __h;
      int __i;
      for ( __i = 1; __i <= __max_iter; ++__i )
        {
          __b += __xi2;
          __d = _Tp(1) / (__b + __d);
          __c = __b + _Tp(1) / __c;
          const _Tp __del = __c * __d;
          __h *= __del;
          if (std::abs(__del - _Tp(1)) < __eps)
            break;
        }
      if (__i > __max_iter)
        std::__throw_runtime_error(("Argument x too large " "in __bessel_ik; " "try asymptotic expansion.")

                                                                   );
      _Tp __Inul = __fp_min;
      _Tp __Ipnul = __h * __Inul;
      _Tp __Inul1 = __Inul;
      _Tp __Ipnu1 = __Ipnul;
      _Tp __fact = __nu * __xi;
      for (int __l = __nl; __l >= 1; --__l)
        {
          const _Tp __Inutemp = __fact * __Inul + __Ipnul;
          __fact -= __xi;
          __Ipnul = __fact * __Inutemp + __Inul;
          __Inul = __Inutemp;
        }
      _Tp __f = __Ipnul / __Inul;
      _Tp __Kmu, __Knu1;
      if (__x < __x_min)
        {
          const _Tp __x2 = __x / _Tp(2);
          const _Tp __pimu = __numeric_constants<_Tp>::__pi() * __mu;
          const _Tp __fact = (std::abs(__pimu) < __eps
                            ? _Tp(1) : __pimu / std::sin(__pimu));
          _Tp __d = -std::log(__x2);
          _Tp __e = __mu * __d;
          const _Tp __fact2 = (std::abs(__e) < __eps
                            ? _Tp(1) : std::sinh(__e) / __e);
          _Tp __gam1, __gam2, __gampl, __gammi;
          __gamma_temme(__mu, __gam1, __gam2, __gampl, __gammi);
          _Tp __ff = __fact
                   * (__gam1 * std::cosh(__e) + __gam2 * __fact2 * __d);
          _Tp __sum = __ff;
          __e = std::exp(__e);
          _Tp __p = __e / (_Tp(2) * __gampl);
          _Tp __q = _Tp(1) / (_Tp(2) * __e * __gammi);
          _Tp __c = _Tp(1);
          __d = __x2 * __x2;
          _Tp __sum1 = __p;
          int __i;
          for (__i = 1; __i <= __max_iter; ++__i)
            {
              __ff = (__i * __ff + __p + __q) / (__i * __i - __mu2);
              __c *= __d / __i;
              __p /= __i - __mu;
              __q /= __i + __mu;
              const _Tp __del = __c * __ff;
              __sum += __del;
              const _Tp __del1 = __c * (__p - __i * __ff);
              __sum1 += __del1;
              if (std::abs(__del) < __eps * std::abs(__sum))
                break;
            }
          if (__i > __max_iter)
            std::__throw_runtime_error(("Bessel k series failed to converge " "in __bessel_ik.")
                                                             );
          __Kmu = __sum;
          __Knu1 = __sum1 * __xi2;
        }
      else
        {
          _Tp __b = _Tp(2) * (_Tp(1) + __x);
          _Tp __d = _Tp(1) / __b;
          _Tp __delh = __d;
          _Tp __h = __delh;
          _Tp __q1 = _Tp(0);
          _Tp __q2 = _Tp(1);
          _Tp __a1 = _Tp(0.25L) - __mu2;
          _Tp __q = __c = __a1;
          _Tp __a = -__a1;
          _Tp __s = _Tp(1) + __q * __delh;
          int __i;
          for (__i = 2; __i <= __max_iter; ++__i)
            {
              __a -= 2 * (__i - 1);
              __c = -__a * __c / __i;
              const _Tp __qnew = (__q1 - __b * __q2) / __a;
              __q1 = __q2;
              __q2 = __qnew;
              __q += __c * __qnew;
              __b += _Tp(2);
              __d = _Tp(1) / (__b + __a * __d);
              __delh = (__b * __d - _Tp(1)) * __delh;
              __h += __delh;
              const _Tp __dels = __q * __delh;
              __s += __dels;
              if ( std::abs(__dels / __s) < __eps )
                break;
            }
          if (__i > __max_iter)
            std::__throw_runtime_error(("Steed's method failed " "in __bessel_ik.")
                                                             );
          __h = __a1 * __h;
          __Kmu = std::sqrt(__numeric_constants<_Tp>::__pi() / (_Tp(2) * __x))
                * std::exp(-__x) / __s;
          __Knu1 = __Kmu * (__mu + __x + _Tp(0.5L) - __h) * __xi;
        }

      _Tp __Kpmu = __mu * __xi * __Kmu - __Knu1;
      _Tp __Inumu = __xi / (__f * __Kmu - __Kpmu);
      __Inu = __Inumu * __Inul1 / __Inul;
      __Ipnu = __Inumu * __Ipnu1 / __Inul;
      for ( __i = 1; __i <= __nl; ++__i )
        {
          const _Tp __Knutemp = (__mu + __i) * __xi2 * __Knu1 + __Kmu;
          __Kmu = __Knu1;
          __Knu1 = __Knutemp;
        }
      __Knu = __Kmu;
      __Kpnu = __nu * __xi * __Kmu - __Knu1;

      return;
    }
# 267 "/usr/include/c++/15.1.1/tr1/modified_bessel_func.tcc" 3
    template<typename _Tp>
    _Tp
    __cyl_bessel_i(_Tp __nu, _Tp __x)
    {
      if (__nu < _Tp(0) || __x < _Tp(0))
        std::__throw_domain_error(("Bad argument " "in __cyl_bessel_i.")
                                                           );
      else if (__isnan(__nu) || __isnan(__x))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else if (__x * __x < _Tp(10) * (__nu + _Tp(1)))
        return __cyl_bessel_ij_series(__nu, __x, +_Tp(1), 200);
      else
        {
          _Tp __I_nu, __K_nu, __Ip_nu, __Kp_nu;
          __bessel_ik(__nu, __x, __I_nu, __K_nu, __Ip_nu, __Kp_nu);
          return __I_nu;
        }
    }
# 303 "/usr/include/c++/15.1.1/tr1/modified_bessel_func.tcc" 3
    template<typename _Tp>
    _Tp
    __cyl_bessel_k(_Tp __nu, _Tp __x)
    {
      if (__nu < _Tp(0) || __x < _Tp(0))
        std::__throw_domain_error(("Bad argument " "in __cyl_bessel_k.")
                                                           );
      else if (__isnan(__nu) || __isnan(__x))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else
        {
          _Tp __I_nu, __K_nu, __Ip_nu, __Kp_nu;
          __bessel_ik(__nu, __x, __I_nu, __K_nu, __Ip_nu, __Kp_nu);
          return __K_nu;
        }
    }
# 337 "/usr/include/c++/15.1.1/tr1/modified_bessel_func.tcc" 3
    template <typename _Tp>
    void
    __sph_bessel_ik(unsigned int __n, _Tp __x,
                    _Tp & __i_n, _Tp & __k_n, _Tp & __ip_n, _Tp & __kp_n)
    {
      const _Tp __nu = _Tp(__n) + _Tp(0.5L);

      _Tp __I_nu, __Ip_nu, __K_nu, __Kp_nu;
      __bessel_ik(__nu, __x, __I_nu, __K_nu, __Ip_nu, __Kp_nu);

      const _Tp __factor = __numeric_constants<_Tp>::__sqrtpio2()
                         / std::sqrt(__x);

      __i_n = __factor * __I_nu;
      __k_n = __factor * __K_nu;
      __ip_n = __factor * __Ip_nu - __i_n / (_Tp(2) * __x);
      __kp_n = __factor * __Kp_nu - __k_n / (_Tp(2) * __x);

      return;
    }
# 373 "/usr/include/c++/15.1.1/tr1/modified_bessel_func.tcc" 3
    template <typename _Tp>
    void
    __airy(_Tp __x, _Tp & __Ai, _Tp & __Bi, _Tp & __Aip, _Tp & __Bip)
    {
      const _Tp __absx = std::abs(__x);
      const _Tp __rootx = std::sqrt(__absx);
      const _Tp __z = _Tp(2) * __absx * __rootx / _Tp(3);
      const _Tp _S_inf = std::numeric_limits<_Tp>::infinity();

      if (__isnan(__x))
        __Bip = __Aip = __Bi = __Ai = std::numeric_limits<_Tp>::quiet_NaN();
      else if (__z == _S_inf)
        {
   __Aip = __Ai = _Tp(0);
   __Bip = __Bi = _S_inf;
 }
      else if (__z == -_S_inf)
 __Bip = __Aip = __Bi = __Ai = _Tp(0);
      else if (__x > _Tp(0))
        {
          _Tp __I_nu, __Ip_nu, __K_nu, __Kp_nu;

          __bessel_ik(_Tp(1) / _Tp(3), __z, __I_nu, __K_nu, __Ip_nu, __Kp_nu);
          __Ai = __rootx * __K_nu
               / (__numeric_constants<_Tp>::__sqrt3()
                * __numeric_constants<_Tp>::__pi());
          __Bi = __rootx * (__K_nu / __numeric_constants<_Tp>::__pi()
                 + _Tp(2) * __I_nu / __numeric_constants<_Tp>::__sqrt3());

          __bessel_ik(_Tp(2) / _Tp(3), __z, __I_nu, __K_nu, __Ip_nu, __Kp_nu);
          __Aip = -__x * __K_nu
                / (__numeric_constants<_Tp>::__sqrt3()
                 * __numeric_constants<_Tp>::__pi());
          __Bip = __x * (__K_nu / __numeric_constants<_Tp>::__pi()
                      + _Tp(2) * __I_nu
                      / __numeric_constants<_Tp>::__sqrt3());
        }
      else if (__x < _Tp(0))
        {
          _Tp __J_nu, __Jp_nu, __N_nu, __Np_nu;

          __bessel_jn(_Tp(1) / _Tp(3), __z, __J_nu, __N_nu, __Jp_nu, __Np_nu);
          __Ai = __rootx * (__J_nu
                    - __N_nu / __numeric_constants<_Tp>::__sqrt3()) / _Tp(2);
          __Bi = -__rootx * (__N_nu
                    + __J_nu / __numeric_constants<_Tp>::__sqrt3()) / _Tp(2);

          __bessel_jn(_Tp(2) / _Tp(3), __z, __J_nu, __N_nu, __Jp_nu, __Np_nu);
          __Aip = __absx * (__N_nu / __numeric_constants<_Tp>::__sqrt3()
                          + __J_nu) / _Tp(2);
          __Bip = __absx * (__J_nu / __numeric_constants<_Tp>::__sqrt3()
                          - __N_nu) / _Tp(2);
        }
      else
        {



          __Ai = _Tp(0.35502805388781723926L);
          __Bi = __Ai * __numeric_constants<_Tp>::__sqrt3();




          __Aip = -_Tp(0.25881940379280679840L);
          __Bip = -__Aip * __numeric_constants<_Tp>::__sqrt3();
        }

      return;
    }
  }





}
# 55 "/usr/include/c++/15.1.1/bits/specfun.h" 2 3
# 1 "/usr/include/c++/15.1.1/tr1/poly_hermite.tcc" 1 3
# 40 "/usr/include/c++/15.1.1/tr1/poly_hermite.tcc" 3
#define _GLIBCXX_TR1_POLY_HERMITE_TCC 1

namespace std __attribute__ ((__visibility__ ("default")))
{

# 56 "/usr/include/c++/15.1.1/tr1/poly_hermite.tcc" 3
  namespace __detail
  {
# 72 "/usr/include/c++/15.1.1/tr1/poly_hermite.tcc" 3
    template<typename _Tp>
    _Tp
    __poly_hermite_recursion(unsigned int __n, _Tp __x)
    {

      _Tp __H_0 = 1;
      if (__n == 0)
        return __H_0;


      _Tp __H_1 = 2 * __x;
      if (__n == 1)
        return __H_1;


      _Tp __H_n, __H_nm1, __H_nm2;
      unsigned int __i;
      for (__H_nm2 = __H_0, __H_nm1 = __H_1, __i = 2; __i <= __n; ++__i)
        {
          __H_n = 2 * (__x * __H_nm1 - (__i - 1) * __H_nm2);
          __H_nm2 = __H_nm1;
          __H_nm1 = __H_n;
        }

      return __H_n;
    }
# 114 "/usr/include/c++/15.1.1/tr1/poly_hermite.tcc" 3
    template<typename _Tp>
    inline _Tp
    __poly_hermite(unsigned int __n, _Tp __x)
    {
      if (__isnan(__x))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else
        return __poly_hermite_recursion(__n, __x);
    }
  }





}
# 56 "/usr/include/c++/15.1.1/bits/specfun.h" 2 3
# 1 "/usr/include/c++/15.1.1/tr1/poly_laguerre.tcc" 1 3
# 42 "/usr/include/c++/15.1.1/tr1/poly_laguerre.tcc" 3
#define _GLIBCXX_TR1_POLY_LAGUERRE_TCC 1

namespace std __attribute__ ((__visibility__ ("default")))
{



#define _GLIBCXX_MATH_NS ::std
# 60 "/usr/include/c++/15.1.1/tr1/poly_laguerre.tcc" 3
  namespace __detail
  {
# 75 "/usr/include/c++/15.1.1/tr1/poly_laguerre.tcc" 3
    template<typename _Tpa, typename _Tp>
    _Tp
    __poly_laguerre_large_n(unsigned __n, _Tpa __alpha1, _Tp __x)
    {
      const _Tp __a = -_Tp(__n);
      const _Tp __b = _Tp(__alpha1) + _Tp(1);
      const _Tp __eta = _Tp(2) * __b - _Tp(4) * __a;
      const _Tp __cos2th = __x / __eta;
      const _Tp __sin2th = _Tp(1) - __cos2th;
      const _Tp __th = std::acos(std::sqrt(__cos2th));
      const _Tp __pre_h = __numeric_constants<_Tp>::__pi_2()
                        * __numeric_constants<_Tp>::__pi_2()
                        * __eta * __eta * __cos2th * __sin2th;


      const _Tp __lg_b = ::std::lgamma(_Tp(__n) + __b);
      const _Tp __lnfact = ::std::lgamma(_Tp(__n + 1));





      _Tp __pre_term1 = _Tp(0.5L) * (_Tp(1) - __b)
                      * std::log(_Tp(0.25L) * __x * __eta);
      _Tp __pre_term2 = _Tp(0.25L) * std::log(__pre_h);
      _Tp __lnpre = __lg_b - __lnfact + _Tp(0.5L) * __x
                      + __pre_term1 - __pre_term2;
      _Tp __ser_term1 = std::sin(__a * __numeric_constants<_Tp>::__pi());
      _Tp __ser_term2 = std::sin(_Tp(0.25L) * __eta
                              * (_Tp(2) * __th
                               - std::sin(_Tp(2) * __th))
                               + __numeric_constants<_Tp>::__pi_4());
      _Tp __ser = __ser_term1 + __ser_term2;

      return std::exp(__lnpre) * __ser;
    }
# 129 "/usr/include/c++/15.1.1/tr1/poly_laguerre.tcc" 3
    template<typename _Tpa, typename _Tp>
    _Tp
    __poly_laguerre_hyperg(unsigned int __n, _Tpa __alpha1, _Tp __x)
    {
      const _Tp __b = _Tp(__alpha1) + _Tp(1);
      const _Tp __mx = -__x;
      const _Tp __tc_sgn = (__x < _Tp(0) ? _Tp(1)
                         : ((__n % 2 == 1) ? -_Tp(1) : _Tp(1)));

      _Tp __tc = _Tp(1);
      const _Tp __ax = std::abs(__x);
      for (unsigned int __k = 1; __k <= __n; ++__k)
        __tc *= (__ax / __k);

      _Tp __term = __tc * __tc_sgn;
      _Tp __sum = __term;
      for (int __k = int(__n) - 1; __k >= 0; --__k)
        {
          __term *= ((__b + _Tp(__k)) / _Tp(int(__n) - __k))
                  * _Tp(__k + 1) / __mx;
          __sum += __term;
        }

      return __sum;
    }
# 185 "/usr/include/c++/15.1.1/tr1/poly_laguerre.tcc" 3
    template<typename _Tpa, typename _Tp>
    _Tp
    __poly_laguerre_recursion(unsigned int __n, _Tpa __alpha1, _Tp __x)
    {

      _Tp __l_0 = _Tp(1);
      if (__n == 0)
        return __l_0;


      _Tp __l_1 = -__x + _Tp(1) + _Tp(__alpha1);
      if (__n == 1)
        return __l_1;


      _Tp __l_n2 = __l_0;
      _Tp __l_n1 = __l_1;
      _Tp __l_n = _Tp(0);
      for (unsigned int __nn = 2; __nn <= __n; ++__nn)
        {
            __l_n = (_Tp(2 * __nn - 1) + _Tp(__alpha1) - __x)
                  * __l_n1 / _Tp(__nn)
                  - (_Tp(__nn - 1) + _Tp(__alpha1)) * __l_n2 / _Tp(__nn);
            __l_n2 = __l_n1;
            __l_n1 = __l_n;
        }

      return __l_n;
    }
# 244 "/usr/include/c++/15.1.1/tr1/poly_laguerre.tcc" 3
    template<typename _Tpa, typename _Tp>
    _Tp
    __poly_laguerre(unsigned int __n, _Tpa __alpha1, _Tp __x)
    {
      if (__x < _Tp(0))
        std::__throw_domain_error(("Negative argument " "in __poly_laguerre.")
                                                            );

      else if (__isnan(__x))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else if (__n == 0)
        return _Tp(1);
      else if (__n == 1)
        return _Tp(1) + _Tp(__alpha1) - __x;
      else if (__x == _Tp(0))
        {
          _Tp __prod = _Tp(__alpha1) + _Tp(1);
          for (unsigned int __k = 2; __k <= __n; ++__k)
            __prod *= (_Tp(__alpha1) + _Tp(__k)) / _Tp(__k);
          return __prod;
        }
      else if (__n > 10000000 && _Tp(__alpha1) > -_Tp(1)
            && __x < _Tp(2) * (_Tp(__alpha1) + _Tp(1)) + _Tp(4 * __n))
        return __poly_laguerre_large_n(__n, __alpha1, __x);
      else if (_Tp(__alpha1) >= _Tp(0)
           || (__x > _Tp(0) && _Tp(__alpha1) < -_Tp(__n + 1)))
        return __poly_laguerre_recursion(__n, __alpha1, __x);
      else
        return __poly_laguerre_hyperg(__n, __alpha1, __x);
    }
# 296 "/usr/include/c++/15.1.1/tr1/poly_laguerre.tcc" 3
    template<typename _Tp>
    inline _Tp
    __assoc_laguerre(unsigned int __n, unsigned int __m, _Tp __x)
    { return __poly_laguerre<unsigned int, _Tp>(__n, __m, __x); }
# 316 "/usr/include/c++/15.1.1/tr1/poly_laguerre.tcc" 3
    template<typename _Tp>
    inline _Tp
    __laguerre(unsigned int __n, _Tp __x)
    { return __poly_laguerre<unsigned int, _Tp>(__n, 0, __x); }
  }
#undef _GLIBCXX_MATH_NS





}
# 57 "/usr/include/c++/15.1.1/bits/specfun.h" 2 3
# 1 "/usr/include/c++/15.1.1/tr1/riemann_zeta.tcc" 1 3
# 43 "/usr/include/c++/15.1.1/tr1/riemann_zeta.tcc" 3
#define _GLIBCXX_TR1_RIEMANN_ZETA_TCC 1



namespace std __attribute__ ((__visibility__ ("default")))
{



#define _GLIBCXX_MATH_NS ::std
# 63 "/usr/include/c++/15.1.1/tr1/riemann_zeta.tcc" 3
  namespace __detail
  {
# 78 "/usr/include/c++/15.1.1/tr1/riemann_zeta.tcc" 3
    template<typename _Tp>
    _Tp
    __riemann_zeta_sum(_Tp __s)
    {

      if (__s < _Tp(1))
        std::__throw_domain_error(("Bad argument in zeta sum."));

      const unsigned int max_iter = 10000;
      _Tp __zeta = _Tp(0);
      for (unsigned int __k = 1; __k < max_iter; ++__k)
        {
          _Tp __term = std::pow(static_cast<_Tp>(__k), -__s);
          if (__term < std::numeric_limits<_Tp>::epsilon())
            {
              break;
            }
          __zeta += __term;
        }

      return __zeta;
    }
# 115 "/usr/include/c++/15.1.1/tr1/riemann_zeta.tcc" 3
    template<typename _Tp>
    _Tp
    __riemann_zeta_alt(_Tp __s)
    {
      _Tp __sgn = _Tp(1);
      _Tp __zeta = _Tp(0);
      for (unsigned int __i = 1; __i < 10000000; ++__i)
        {
          _Tp __term = __sgn / std::pow(__i, __s);
          if (std::abs(__term) < std::numeric_limits<_Tp>::epsilon())
            break;
          __zeta += __term;
          __sgn *= _Tp(-1);
        }
      __zeta /= _Tp(1) - std::pow(_Tp(2), _Tp(1) - __s);

      return __zeta;
    }
# 157 "/usr/include/c++/15.1.1/tr1/riemann_zeta.tcc" 3
    template<typename _Tp>
    _Tp
    __riemann_zeta_glob(_Tp __s)
    {
      _Tp __zeta = _Tp(0);

      const _Tp __eps = std::numeric_limits<_Tp>::epsilon();

      const _Tp __max_bincoeff = std::numeric_limits<_Tp>::max_exponent10
                               * std::log(_Tp(10)) - _Tp(1);



      if (__s < _Tp(0))
        {

          if (::std::fmod(__s,_Tp(2)) == _Tp(0))
            return _Tp(0);
          else

            {
              _Tp __zeta = __riemann_zeta_glob(_Tp(1) - __s);
              __zeta *= std::pow(_Tp(2)
                     * __numeric_constants<_Tp>::__pi(), __s)
                     * std::sin(__numeric_constants<_Tp>::__pi_2() * __s)

                     * std::exp(::std::lgamma(_Tp(1) - __s))



                     / __numeric_constants<_Tp>::__pi();
              return __zeta;
            }
        }

      _Tp __num = _Tp(0.5L);
      const unsigned int __maxit = 10000;
      for (unsigned int __i = 0; __i < __maxit; ++__i)
        {
          bool __punt = false;
          _Tp __sgn = _Tp(1);
          _Tp __term = _Tp(0);
          for (unsigned int __j = 0; __j <= __i; ++__j)
            {

              _Tp __bincoeff = ::std::lgamma(_Tp(1 + __i))
                              - ::std::lgamma(_Tp(1 + __j))
                              - ::std::lgamma(_Tp(1 + __i - __j));





              if (__bincoeff > __max_bincoeff)
                {

                  __punt = true;
                  break;
                }
              __bincoeff = std::exp(__bincoeff);
              __term += __sgn * __bincoeff * std::pow(_Tp(1 + __j), -__s);
              __sgn *= _Tp(-1);
            }
          if (__punt)
            break;
          __term *= __num;
          __zeta += __term;
          if (std::abs(__term/__zeta) < __eps)
            break;
          __num *= _Tp(0.5L);
        }

      __zeta /= _Tp(1) - std::pow(_Tp(2), _Tp(1) - __s);

      return __zeta;
    }
# 252 "/usr/include/c++/15.1.1/tr1/riemann_zeta.tcc" 3
    template<typename _Tp>
    _Tp
    __riemann_zeta_product(_Tp __s)
    {
      static const _Tp __prime[] = {
        _Tp(2), _Tp(3), _Tp(5), _Tp(7), _Tp(11), _Tp(13), _Tp(17), _Tp(19),
        _Tp(23), _Tp(29), _Tp(31), _Tp(37), _Tp(41), _Tp(43), _Tp(47),
        _Tp(53), _Tp(59), _Tp(61), _Tp(67), _Tp(71), _Tp(73), _Tp(79),
        _Tp(83), _Tp(89), _Tp(97), _Tp(101), _Tp(103), _Tp(107), _Tp(109)
      };
      static const unsigned int __num_primes = sizeof(__prime) / sizeof(_Tp);

      _Tp __zeta = _Tp(1);
      for (unsigned int __i = 0; __i < __num_primes; ++__i)
        {
          const _Tp __fact = _Tp(1) - std::pow(__prime[__i], -__s);
          __zeta *= __fact;
          if (_Tp(1) - __fact < std::numeric_limits<_Tp>::epsilon())
            break;
        }

      __zeta = _Tp(1) / __zeta;

      return __zeta;
    }
# 293 "/usr/include/c++/15.1.1/tr1/riemann_zeta.tcc" 3
    template<typename _Tp>
    _Tp
    __riemann_zeta(_Tp __s)
    {
      if (__isnan(__s))
        return std::numeric_limits<_Tp>::quiet_NaN();
      else if (__s == _Tp(1))
        return std::numeric_limits<_Tp>::infinity();
      else if (__s < -_Tp(19))
        {
          _Tp __zeta = __riemann_zeta_product(_Tp(1) - __s);
          __zeta *= std::pow(_Tp(2) * __numeric_constants<_Tp>::__pi(), __s)
                 * std::sin(__numeric_constants<_Tp>::__pi_2() * __s)

                 * std::exp(::std::lgamma(_Tp(1) - __s))



                 / __numeric_constants<_Tp>::__pi();
          return __zeta;
        }
      else if (__s < _Tp(20))
        {

          bool __glob = true;
          if (__glob)
            return __riemann_zeta_glob(__s);
          else
            {
              if (__s > _Tp(1))
                return __riemann_zeta_sum(__s);
              else
                {
                  _Tp __zeta = std::pow(_Tp(2)
                                * __numeric_constants<_Tp>::__pi(), __s)
                         * std::sin(__numeric_constants<_Tp>::__pi_2() * __s)

                             * ::std::tgamma(_Tp(1) - __s)



                             * __riemann_zeta_sum(_Tp(1) - __s);
                  return __zeta;
                }
            }
        }
      else
        return __riemann_zeta_product(__s);
    }
# 365 "/usr/include/c++/15.1.1/tr1/riemann_zeta.tcc" 3
    template<typename _Tp>
    _Tp
    __hurwitz_zeta_glob(_Tp __a, _Tp __s)
    {
      _Tp __zeta = _Tp(0);

      const _Tp __eps = std::numeric_limits<_Tp>::epsilon();

      const _Tp __max_bincoeff = std::numeric_limits<_Tp>::max_exponent10
                               * std::log(_Tp(10)) - _Tp(1);

      const unsigned int __maxit = 10000;
      for (unsigned int __i = 0; __i < __maxit; ++__i)
        {
          bool __punt = false;
          _Tp __sgn = _Tp(1);
          _Tp __term = _Tp(0);
          for (unsigned int __j = 0; __j <= __i; ++__j)
            {

              _Tp __bincoeff = ::std::lgamma(_Tp(1 + __i))
                              - ::std::lgamma(_Tp(1 + __j))
                              - ::std::lgamma(_Tp(1 + __i - __j));





              if (__bincoeff > __max_bincoeff)
                {

                  __punt = true;
                  break;
                }
              __bincoeff = std::exp(__bincoeff);
              __term += __sgn * __bincoeff * std::pow(_Tp(__a + __j), -__s);
              __sgn *= _Tp(-1);
            }
          if (__punt)
            break;
          __term /= _Tp(__i + 1);
          if (std::abs(__term / __zeta) < __eps)
            break;
          __zeta += __term;
        }

      __zeta /= __s - _Tp(1);

      return __zeta;
    }
# 430 "/usr/include/c++/15.1.1/tr1/riemann_zeta.tcc" 3
    template<typename _Tp>
    inline _Tp
    __hurwitz_zeta(_Tp __a, _Tp __s)
    { return __hurwitz_zeta_glob(__a, __s); }
  }
#undef _GLIBCXX_MATH_NS





}
# 58 "/usr/include/c++/15.1.1/bits/specfun.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 203 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  assoc_laguerref(unsigned int __n, unsigned int __m, float __x)
  { return __detail::__assoc_laguerre<float>(__n, __m, __x); }







  inline long double
  assoc_laguerrel(unsigned int __n, unsigned int __m, long double __x)
  { return __detail::__assoc_laguerre<long double>(__n, __m, __x); }
# 248 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    assoc_laguerre(unsigned int __n, unsigned int __m, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__assoc_laguerre<__type>(__n, __m, __x);
    }
# 264 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  assoc_legendref(unsigned int __l, unsigned int __m, float __x)
  { return __detail::__assoc_legendre_p<float>(__l, __m, __x); }






  inline long double
  assoc_legendrel(unsigned int __l, unsigned int __m, long double __x)
  { return __detail::__assoc_legendre_p<long double>(__l, __m, __x); }
# 294 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    assoc_legendre(unsigned int __l, unsigned int __m, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__assoc_legendre_p<__type>(__l, __m, __x);
    }
# 309 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  betaf(float __a, float __b)
  { return __detail::__beta<float>(__a, __b); }







  inline long double
  betal(long double __a, long double __b)
  { return __detail::__beta<long double>(__a, __b); }
# 339 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tpa, typename _Tpb>
    inline typename __gnu_cxx::__promote_2<_Tpa, _Tpb>::__type
    beta(_Tpa __a, _Tpb __b)
    {
      typedef typename __gnu_cxx::__promote_2<_Tpa, _Tpb>::__type __type;
      return __detail::__beta<__type>(__a, __b);
    }
# 355 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  comp_ellint_1f(float __k)
  { return __detail::__comp_ellint_1<float>(__k); }







  inline long double
  comp_ellint_1l(long double __k)
  { return __detail::__comp_ellint_1<long double>(__k); }
# 387 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    comp_ellint_1(_Tp __k)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__comp_ellint_1<__type>(__k);
    }
# 403 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  comp_ellint_2f(float __k)
  { return __detail::__comp_ellint_2<float>(__k); }







  inline long double
  comp_ellint_2l(long double __k)
  { return __detail::__comp_ellint_2<long double>(__k); }
# 434 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    comp_ellint_2(_Tp __k)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__comp_ellint_2<__type>(__k);
    }
# 450 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  comp_ellint_3f(float __k, float __nu)
  { return __detail::__comp_ellint_3<float>(__k, __nu); }







  inline long double
  comp_ellint_3l(long double __k, long double __nu)
  { return __detail::__comp_ellint_3<long double>(__k, __nu); }
# 485 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tp, typename _Tpn>
    inline typename __gnu_cxx::__promote_2<_Tp, _Tpn>::__type
    comp_ellint_3(_Tp __k, _Tpn __nu)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Tpn>::__type __type;
      return __detail::__comp_ellint_3<__type>(__k, __nu);
    }
# 501 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  cyl_bessel_if(float __nu, float __x)
  { return __detail::__cyl_bessel_i<float>(__nu, __x); }







  inline long double
  cyl_bessel_il(long double __nu, long double __x)
  { return __detail::__cyl_bessel_i<long double>(__nu, __x); }
# 531 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tpnu, typename _Tp>
    inline typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type
    cyl_bessel_i(_Tpnu __nu, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type __type;
      return __detail::__cyl_bessel_i<__type>(__nu, __x);
    }
# 547 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  cyl_bessel_jf(float __nu, float __x)
  { return __detail::__cyl_bessel_j<float>(__nu, __x); }







  inline long double
  cyl_bessel_jl(long double __nu, long double __x)
  { return __detail::__cyl_bessel_j<long double>(__nu, __x); }
# 577 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tpnu, typename _Tp>
    inline typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type
    cyl_bessel_j(_Tpnu __nu, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type __type;
      return __detail::__cyl_bessel_j<__type>(__nu, __x);
    }
# 593 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  cyl_bessel_kf(float __nu, float __x)
  { return __detail::__cyl_bessel_k<float>(__nu, __x); }







  inline long double
  cyl_bessel_kl(long double __nu, long double __x)
  { return __detail::__cyl_bessel_k<long double>(__nu, __x); }
# 629 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tpnu, typename _Tp>
    inline typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type
    cyl_bessel_k(_Tpnu __nu, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type __type;
      return __detail::__cyl_bessel_k<__type>(__nu, __x);
    }
# 645 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  cyl_neumannf(float __nu, float __x)
  { return __detail::__cyl_neumann_n<float>(__nu, __x); }







  inline long double
  cyl_neumannl(long double __nu, long double __x)
  { return __detail::__cyl_neumann_n<long double>(__nu, __x); }
# 677 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tpnu, typename _Tp>
    inline typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type
    cyl_neumann(_Tpnu __nu, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tpnu, _Tp>::__type __type;
      return __detail::__cyl_neumann_n<__type>(__nu, __x);
    }
# 693 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  ellint_1f(float __k, float __phi)
  { return __detail::__ellint_1<float>(__k, __phi); }







  inline long double
  ellint_1l(long double __k, long double __phi)
  { return __detail::__ellint_1<long double>(__k, __phi); }
# 725 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tp, typename _Tpp>
    inline typename __gnu_cxx::__promote_2<_Tp, _Tpp>::__type
    ellint_1(_Tp __k, _Tpp __phi)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Tpp>::__type __type;
      return __detail::__ellint_1<__type>(__k, __phi);
    }
# 741 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  ellint_2f(float __k, float __phi)
  { return __detail::__ellint_2<float>(__k, __phi); }







  inline long double
  ellint_2l(long double __k, long double __phi)
  { return __detail::__ellint_2<long double>(__k, __phi); }
# 773 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tp, typename _Tpp>
    inline typename __gnu_cxx::__promote_2<_Tp, _Tpp>::__type
    ellint_2(_Tp __k, _Tpp __phi)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Tpp>::__type __type;
      return __detail::__ellint_2<__type>(__k, __phi);
    }
# 789 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  ellint_3f(float __k, float __nu, float __phi)
  { return __detail::__ellint_3<float>(__k, __nu, __phi); }







  inline long double
  ellint_3l(long double __k, long double __nu, long double __phi)
  { return __detail::__ellint_3<long double>(__k, __nu, __phi); }
# 826 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tp, typename _Tpn, typename _Tpp>
    inline typename __gnu_cxx::__promote_3<_Tp, _Tpn, _Tpp>::__type
    ellint_3(_Tp __k, _Tpn __nu, _Tpp __phi)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Tpn, _Tpp>::__type __type;
      return __detail::__ellint_3<__type>(__k, __nu, __phi);
    }
# 841 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  expintf(float __x)
  { return __detail::__expint<float>(__x); }







  inline long double
  expintl(long double __x)
  { return __detail::__expint<long double>(__x); }
# 866 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    expint(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__expint<__type>(__x);
    }
# 882 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  hermitef(unsigned int __n, float __x)
  { return __detail::__poly_hermite<float>(__n, __x); }







  inline long double
  hermitel(unsigned int __n, long double __x)
  { return __detail::__poly_hermite<long double>(__n, __x); }
# 914 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    hermite(unsigned int __n, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__poly_hermite<__type>(__n, __x);
    }
# 930 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  laguerref(unsigned int __n, float __x)
  { return __detail::__laguerre<float>(__n, __x); }







  inline long double
  laguerrel(unsigned int __n, long double __x)
  { return __detail::__laguerre<long double>(__n, __x); }
# 958 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    laguerre(unsigned int __n, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__laguerre<__type>(__n, __x);
    }
# 974 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  legendref(unsigned int __l, float __x)
  { return __detail::__poly_legendre_p<float>(__l, __x); }







  inline long double
  legendrel(unsigned int __l, long double __x)
  { return __detail::__poly_legendre_p<long double>(__l, __x); }
# 1003 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    legendre(unsigned int __l, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__poly_legendre_p<__type>(__l, __x);
    }
# 1019 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  riemann_zetaf(float __s)
  { return __detail::__riemann_zeta<float>(__s); }







  inline long double
  riemann_zetal(long double __s)
  { return __detail::__riemann_zeta<long double>(__s); }
# 1054 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    riemann_zeta(_Tp __s)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__riemann_zeta<__type>(__s);
    }
# 1070 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  sph_besself(unsigned int __n, float __x)
  { return __detail::__sph_bessel<float>(__n, __x); }







  inline long double
  sph_bessell(unsigned int __n, long double __x)
  { return __detail::__sph_bessel<long double>(__n, __x); }
# 1098 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    sph_bessel(unsigned int __n, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__sph_bessel<__type>(__n, __x);
    }
# 1114 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  sph_legendref(unsigned int __l, unsigned int __m, float __theta)
  { return __detail::__sph_legendre<float>(__l, __m, __theta); }
# 1125 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline long double
  sph_legendrel(unsigned int __l, unsigned int __m, long double __theta)
  { return __detail::__sph_legendre<long double>(__l, __m, __theta); }
# 1145 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    sph_legendre(unsigned int __l, unsigned int __m, _Tp __theta)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__sph_legendre<__type>(__l, __m, __theta);
    }
# 1161 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  sph_neumannf(unsigned int __n, float __x)
  { return __detail::__sph_neumann<float>(__n, __x); }







  inline long double
  sph_neumannl(unsigned int __n, long double __x)
  { return __detail::__sph_neumann<long double>(__n, __x); }
# 1189 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    sph_neumann(unsigned int __n, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __detail::__sph_neumann<__type>(__n, __x);
    }




}


namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 1216 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  airy_aif(float __x)
  {
    float __Ai, __Bi, __Aip, __Bip;
    std::__detail::__airy<float>(__x, __Ai, __Bi, __Aip, __Bip);
    return __Ai;
  }




  inline long double
  airy_ail(long double __x)
  {
    long double __Ai, __Bi, __Aip, __Bip;
    std::__detail::__airy<long double>(__x, __Ai, __Bi, __Aip, __Bip);
    return __Ai;
  }




  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    airy_ai(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      __type __Ai, __Bi, __Aip, __Bip;
      std::__detail::__airy<__type>(__x, __Ai, __Bi, __Aip, __Bip);
      return __Ai;
    }




  inline float
  airy_bif(float __x)
  {
    float __Ai, __Bi, __Aip, __Bip;
    std::__detail::__airy<float>(__x, __Ai, __Bi, __Aip, __Bip);
    return __Bi;
  }




  inline long double
  airy_bil(long double __x)
  {
    long double __Ai, __Bi, __Aip, __Bip;
    std::__detail::__airy<long double>(__x, __Ai, __Bi, __Aip, __Bip);
    return __Bi;
  }




  template<typename _Tp>
    inline typename __gnu_cxx::__promote<_Tp>::__type
    airy_bi(_Tp __x)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      __type __Ai, __Bi, __Aip, __Bip;
      std::__detail::__airy<__type>(__x, __Ai, __Bi, __Aip, __Bip);
      return __Bi;
    }
# 1292 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  conf_hypergf(float __a, float __c, float __x)
  { return std::__detail::__conf_hyperg<float>(__a, __c, __x); }
# 1303 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline long double
  conf_hypergl(long double __a, long double __c, long double __x)
  { return std::__detail::__conf_hyperg<long double>(__a, __c, __x); }
# 1323 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tpa, typename _Tpc, typename _Tp>
    inline typename __gnu_cxx::__promote_3<_Tpa, _Tpc, _Tp>::__type
    conf_hyperg(_Tpa __a, _Tpc __c, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote_3<_Tpa, _Tpc, _Tp>::__type __type;
      return std::__detail::__conf_hyperg<__type>(__a, __c, __x);
    }
# 1340 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline float
  hypergf(float __a, float __b, float __c, float __x)
  { return std::__detail::__hyperg<float>(__a, __b, __c, __x); }
# 1351 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  inline long double
  hypergl(long double __a, long double __b, long double __c, long double __x)
  { return std::__detail::__hyperg<long double>(__a, __b, __c, __x); }
# 1372 "/usr/include/c++/15.1.1/bits/specfun.h" 3
  template<typename _Tpa, typename _Tpb, typename _Tpc, typename _Tp>
    inline typename __gnu_cxx::__promote_4<_Tpa, _Tpb, _Tpc, _Tp>::__type
    hyperg(_Tpa __a, _Tpb __b, _Tpc __c, _Tp __x)
    {
      typedef typename __gnu_cxx::__promote_4<_Tpa, _Tpb, _Tpc, _Tp>
  ::__type __type;
      return std::__detail::__hyperg<__type>(__a, __b, __c, __x);
    }



}
# 3914 "/usr/include/c++/15.1.1/cmath" 2 3


}
# 5 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/bytecode.hpp" 2



# 1 "/usr/include/c++/15.1.1/unordered_map" 1 3
# 30 "/usr/include/c++/15.1.1/unordered_map" 3
#define _GLIBCXX_UNORDERED_MAP 1
# 43 "/usr/include/c++/15.1.1/unordered_map" 3
# 1 "/usr/include/c++/15.1.1/bits/unordered_map.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
#define _UNORDERED_MAP_H 

# 1 "/usr/include/c++/15.1.1/bits/hashtable.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/hashtable.h" 3
#define _HASHTABLE_H 1





# 1 "/usr/include/c++/15.1.1/bits/hashtable_policy.h" 1 3
# 32 "/usr/include/c++/15.1.1/bits/hashtable_policy.h" 3
#define _HASHTABLE_POLICY_H 1
# 42 "/usr/include/c++/15.1.1/bits/hashtable_policy.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    class _Hashtable;

namespace __detail
{





  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _Equal, typename _Hash, typename _RangeHash,
    typename _Unused, typename _Traits>
    struct _Hashtable_base;

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"


  template<typename _Iterator>
    inline typename std::iterator_traits<_Iterator>::difference_type
    __distance_fw(_Iterator __first, _Iterator __last)
    {
      using _Cat = typename std::iterator_traits<_Iterator>::iterator_category;
      if constexpr (is_convertible<_Cat, forward_iterator_tag>::value)
 return std::distance(__first, __last);
      else
 return __first != __last ? 1 : 0;
    }
#pragma GCC diagnostic pop

  struct _Identity
  {
    template<typename _Tp>
      _Tp&&
      operator()(_Tp&& __x) const noexcept
      { return std::forward<_Tp>(__x); }
  };

  struct _Select1st
  {
    template<typename _Pair>
      struct __1st_type;

    template<typename _Tp, typename _Up>
      struct __1st_type<pair<_Tp, _Up>>
      { using type = _Tp; };

    template<typename _Tp, typename _Up>
      struct __1st_type<const pair<_Tp, _Up>>
      { using type = const _Tp; };

    template<typename _Pair>
      struct __1st_type<_Pair&>
      { using type = typename __1st_type<_Pair>::type&; };

    template<typename _Tp>
      typename __1st_type<_Tp>::type&&
      operator()(_Tp&& __x) const noexcept
      { return std::forward<_Tp>(__x).first; }
  };

  template<typename _ExKey>
    struct _NodeBuilder;

  template<>
    struct _NodeBuilder<_Select1st>
    {
      template<typename _Kt, typename _Arg, typename _NodeGenerator>
 static auto
 _S_build(_Kt&& __k, _Arg&& __arg, _NodeGenerator& __node_gen)
 -> typename _NodeGenerator::__node_ptr
 {
   return __node_gen(std::forward<_Kt>(__k),
       std::forward<_Arg>(__arg).second);
 }
    };

  template<>
    struct _NodeBuilder<_Identity>
    {
      template<typename _Kt, typename _Arg, typename _NodeGenerator>
 static auto
 _S_build(_Kt&& __k, _Arg&&, _NodeGenerator& __node_gen)
 -> typename _NodeGenerator::__node_ptr
 { return __node_gen(std::forward<_Kt>(__k)); }
    };

  template<typename _HashtableAlloc, typename _NodePtr>
    struct _NodePtrGuard
    {
      _HashtableAlloc& _M_h;
      _NodePtr _M_ptr;

      ~_NodePtrGuard()
      {
 if (_M_ptr)
   _M_h._M_deallocate_node_ptr(_M_ptr);
      }
    };

  template<typename _NodeAlloc>
    struct _Hashtable_alloc;



  template<typename _NodeAlloc>
    struct _ReuseOrAllocNode
    {
    private:
      using __node_alloc_type = _NodeAlloc;
      using __hashtable_alloc = _Hashtable_alloc<__node_alloc_type>;
      using __node_alloc_traits =
 typename __hashtable_alloc::__node_alloc_traits;

    public:
      using __node_ptr = typename __hashtable_alloc::__node_ptr;

      _ReuseOrAllocNode(__node_ptr __nodes, __hashtable_alloc& __h)
      : _M_nodes(__nodes), _M_h(__h) { }
      _ReuseOrAllocNode(const _ReuseOrAllocNode&) = delete;

      ~_ReuseOrAllocNode()
      { _M_h._M_deallocate_nodes(_M_nodes); }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
      template<typename _Arg>
 __node_ptr
 operator()(_Arg&& __arg)
 {
   if (!_M_nodes)
     return _M_h._M_allocate_node(std::forward<_Arg>(__arg));

   using value_type = typename _NodeAlloc::value_type::value_type;

   __node_ptr __node = _M_nodes;
   if constexpr (is_assignable<value_type&, _Arg>::value)
     {
       __node->_M_v() = std::forward<_Arg>(__arg);
       _M_nodes = _M_nodes->_M_next();
       __node->_M_nxt = nullptr;
     }
   else
     {
       _M_nodes = _M_nodes->_M_next();
       __node->_M_nxt = nullptr;
       auto& __a = _M_h._M_node_allocator();
       __node_alloc_traits::destroy(__a, __node->_M_valptr());
       _NodePtrGuard<__hashtable_alloc, __node_ptr>
  __guard{ _M_h, __node };
       __node_alloc_traits::construct(__a, __node->_M_valptr(),
          std::forward<_Arg>(__arg));
       __guard._M_ptr = nullptr;
     }
   return __node;
 }
#pragma GCC diagnostic pop

    private:
      __node_ptr _M_nodes;
      __hashtable_alloc& _M_h;
    };



  template<typename _NodeAlloc>
    struct _AllocNode
    {
    private:
      using __hashtable_alloc = _Hashtable_alloc<_NodeAlloc>;

    public:
      using __node_ptr = typename __hashtable_alloc::__node_ptr;

      _AllocNode(__hashtable_alloc& __h)
      : _M_h(__h) { }

      template<typename... _Args>
 __node_ptr
 operator()(_Args&&... __args) const
 { return _M_h._M_allocate_node(std::forward<_Args>(__args)...); }

    private:
      __hashtable_alloc& _M_h;
    };
# 262 "/usr/include/c++/15.1.1/bits/hashtable_policy.h" 3
  template<bool _Cache_hash_code, bool _Constant_iterators, bool _Unique_keys>
    struct _Hashtable_traits
    {
      using __hash_cached = __bool_constant<_Cache_hash_code>;
      using __constant_iterators = __bool_constant<_Constant_iterators>;
      using __unique_keys = __bool_constant<_Unique_keys>;
    };







  template<typename _Hash>
    struct _Hashtable_hash_traits
    {
      static constexpr size_t
      __small_size_threshold() noexcept
      { return std::__is_fast_hash<_Hash>::value ? 0 : 20; }
    };
# 292 "/usr/include/c++/15.1.1/bits/hashtable_policy.h" 3
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }

    _Hash_node_base(_Hash_node_base* __next) noexcept : _M_nxt(__next) { }
  };






  template<typename _Value>
    struct _Hash_node_value_base
    {
      using value_type = _Value;

      __gnu_cxx::__aligned_buffer<_Value> _M_storage;



      [[__gnu__::__always_inline__]]
      _Value*
      _M_valptr() noexcept
      { return _M_storage._M_ptr(); }

      [[__gnu__::__always_inline__]]
      const _Value*
      _M_valptr() const noexcept
      { return _M_storage._M_ptr(); }

      [[__gnu__::__always_inline__]]
      _Value&
      _M_v() noexcept
      { return *_M_valptr(); }

      [[__gnu__::__always_inline__]]
      const _Value&
      _M_v() const noexcept
      { return *_M_valptr(); }
    };




  template<bool _Cache_hash_code>
    struct _Hash_node_code_cache
    { };




  template<>
    struct _Hash_node_code_cache<true>
    { size_t _M_hash_code; };

  template<typename _Value, bool _Cache_hash_code>
    struct _Hash_node_value
    : _Hash_node_value_base<_Value>
    , _Hash_node_code_cache<_Cache_hash_code>
    { };




  template<typename _Value, bool _Cache_hash_code>
    struct _Hash_node
    : _Hash_node_base
    , _Hash_node_value<_Value, _Cache_hash_code>
    {
      _Hash_node*
      _M_next() const noexcept
      { return static_cast<_Hash_node*>(this->_M_nxt); }
    };


  template<typename _Value, bool _Cache_hash_code>
    struct _Node_iterator_base
    {
      using __node_type = _Hash_node<_Value, _Cache_hash_code>;

      __node_type* _M_cur;

      _Node_iterator_base() : _M_cur(nullptr) { }
      _Node_iterator_base(__node_type* __p) noexcept
      : _M_cur(__p) { }

      void
      _M_incr() noexcept
      { _M_cur = _M_cur->_M_next(); }

      friend bool
      operator==(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
      noexcept
      { return __x._M_cur == __y._M_cur; }


      friend bool
      operator!=(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
      noexcept
      { return __x._M_cur != __y._M_cur; }

    };


  template<typename _Value, bool __constant_iterators, bool __cache>
    struct _Node_iterator
    : public _Node_iterator_base<_Value, __cache>
    {
    private:
      using __base_type = _Node_iterator_base<_Value, __cache>;
      using __node_type = typename __base_type::__node_type;

    public:
      using value_type = _Value;
      using difference_type = ptrdiff_t;
      using iterator_category = forward_iterator_tag;

      using pointer = __conditional_t<__constant_iterators,
          const value_type*, value_type*>;

      using reference = __conditional_t<__constant_iterators,
     const value_type&, value_type&>;

      _Node_iterator() = default;

      explicit
      _Node_iterator(__node_type* __p) noexcept
      : __base_type(__p) { }

      reference
      operator*() const noexcept
      { return this->_M_cur->_M_v(); }

      pointer
      operator->() const noexcept
      { return this->_M_cur->_M_valptr(); }

      _Node_iterator&
      operator++() noexcept
      {
 this->_M_incr();
 return *this;
      }

      _Node_iterator
      operator++(int) noexcept
      {
 _Node_iterator __tmp(*this);
 this->_M_incr();
 return __tmp;
      }





      friend bool
      operator==(const _Node_iterator& __x, const _Node_iterator& __y) noexcept
      {
 const __base_type& __bx = __x;
 const __base_type& __by = __y;
 return __bx == __by;
      }

      friend bool
      operator!=(const _Node_iterator& __x, const _Node_iterator& __y) noexcept
      { return !(__x == __y); }

    };


  template<typename _Value, bool __constant_iterators, bool __cache>
    struct _Node_const_iterator
    : public _Node_iterator_base<_Value, __cache>
    {
    private:
      using __base_type = _Node_iterator_base<_Value, __cache>;
      using __node_type = typename __base_type::__node_type;


      using __iterator
 = _Node_iterator<_Value, __constant_iterators, __cache>;

    public:
      using value_type = _Value;
      using difference_type = ptrdiff_t;
      using iterator_category = forward_iterator_tag;

      using pointer = const value_type*;
      using reference = const value_type&;

      _Node_const_iterator() = default;

      explicit
      _Node_const_iterator(__node_type* __p) noexcept
      : __base_type(__p) { }

      _Node_const_iterator(const __iterator& __x) noexcept
      : __base_type(__x._M_cur) { }

      reference
      operator*() const noexcept
      { return this->_M_cur->_M_v(); }

      pointer
      operator->() const noexcept
      { return this->_M_cur->_M_valptr(); }

      _Node_const_iterator&
      operator++() noexcept
      {
 this->_M_incr();
 return *this;
      }

      _Node_const_iterator
      operator++(int) noexcept
      {
 _Node_const_iterator __tmp(*this);
 this->_M_incr();
 return __tmp;
      }
# 531 "/usr/include/c++/15.1.1/bits/hashtable_policy.h" 3
      friend bool
      operator==(const _Node_const_iterator& __x,
   const _Node_const_iterator& __y) noexcept
      {
 const __base_type& __bx = __x;
 const __base_type& __by = __y;
 return __bx == __by;
      }

      friend bool
      operator!=(const _Node_const_iterator& __x,
   const _Node_const_iterator& __y) noexcept
      { return !(__x == __y); }

      friend bool
      operator==(const _Node_const_iterator& __x,
   const __iterator& __y) noexcept
      {
 const __base_type& __bx = __x;
 const __base_type& __by = __y;
 return __bx == __by;
      }

      friend bool
      operator!=(const _Node_const_iterator& __x,
   const __iterator& __y) noexcept
      { return !(__x == __y); }

      friend bool
      operator==(const __iterator& __x,
   const _Node_const_iterator& __y) noexcept
      {
 const __base_type& __bx = __x;
 const __base_type& __by = __y;
 return __bx == __by;
      }

      friend bool
      operator!=(const __iterator& __x,
   const _Node_const_iterator& __y) noexcept
      { return !(__x == __y); }

    };






  struct _Mod_range_hashing
  {
    size_t
    operator()(size_t __num, size_t __den) const noexcept
    { return __num % __den; }
  };






  struct _Default_ranged_hash { };



  struct _Prime_rehash_policy
  {
    using __has_load_factor = true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
    : _M_max_load_factor(__z), _M_next_resize(0) { }

    float
    max_load_factor() const noexcept
    { return _M_max_load_factor; }



    size_t
    _M_next_bkt(size_t __n) const;


    size_t
    _M_bkt_for_elements(size_t __n) const
    { return __builtin_ceil(__n / (double)_M_max_load_factor); }






    std::pair<bool, size_t>
    _M_need_rehash(size_t __n_bkt, size_t __n_elt,
     size_t __n_ins) const;

    using _State = size_t;

    _State
    _M_state() const
    { return _M_next_resize; }

    void
    _M_reset() noexcept
    { _M_next_resize = 0; }

    void
    _M_reset(_State __state)
    { _M_next_resize = __state; }

    static const size_t _S_growth_factor = 2;

    float _M_max_load_factor;


    mutable size_t _M_next_resize;
  };


  struct _Mask_range_hashing
  {
    size_t
    operator()(size_t __num, size_t __den) const noexcept
    { return __num & (__den - 1); }
  };


  inline size_t
  __clp2(size_t __n) noexcept
  {
    using __gnu_cxx::__int_traits;

    if (__n < 2)
      return __n;
    const unsigned __lz = sizeof(size_t) > sizeof(long)
      ? __builtin_clzll(__n - 1ull)
      : __builtin_clzl(__n - 1ul);

    return (size_t(1) << (__int_traits<size_t>::__digits - __lz - 1)) << 1;
  }



  struct _Power2_rehash_policy
  {
    using __has_load_factor = true_type;

    _Power2_rehash_policy(float __z = 1.0) noexcept
    : _M_max_load_factor(__z), _M_next_resize(0) { }

    float
    max_load_factor() const noexcept
    { return _M_max_load_factor; }



    size_t
    _M_next_bkt(size_t __n) noexcept
    {
      if (__n == 0)



 return 1;

      const auto __max_width = std::min<size_t>(sizeof(size_t), 8);
      const auto __max_bkt = size_t(1) << (__max_width * 8 - 1);
      size_t __res = __clp2(__n);

      if (__res == 0)
 __res = __max_bkt;
      else if (__res == 1)



 __res = 2;

      if (__res == __max_bkt)



 _M_next_resize = size_t(-1);
      else
 _M_next_resize
   = __builtin_floor(__res * (double)_M_max_load_factor);

      return __res;
    }


    size_t
    _M_bkt_for_elements(size_t __n) const noexcept
    { return __builtin_ceil(__n / (double)_M_max_load_factor); }





    std::pair<bool, size_t>
    _M_need_rehash(size_t __n_bkt, size_t __n_elt, size_t __n_ins) noexcept
    {
      if (__n_elt + __n_ins > _M_next_resize)
 {



   double __min_bkts
     = std::max<size_t>(__n_elt + __n_ins, _M_next_resize ? 0 : 11)
       / (double)_M_max_load_factor;
   if (__min_bkts >= __n_bkt)
     return { true,
       _M_next_bkt(std::max<size_t>(__builtin_floor(__min_bkts) + 1,
        __n_bkt * _S_growth_factor)) };

   _M_next_resize
     = __builtin_floor(__n_bkt * (double)_M_max_load_factor);
   return { false, 0 };
 }
      else
 return { false, 0 };
    }

    using _State = size_t;

    _State
    _M_state() const noexcept
    { return _M_next_resize; }

    void
    _M_reset() noexcept
    { _M_next_resize = 0; }

    void
    _M_reset(_State __state) noexcept
    { _M_next_resize = __state; }

    static const size_t _S_growth_factor = 2;

    float _M_max_load_factor;
    size_t _M_next_resize;
  };

  template<typename _RehashPolicy>
    struct _RehashStateGuard
    {
      _RehashPolicy* _M_guarded_obj;
      typename _RehashPolicy::_State _M_prev_state;

      _RehashStateGuard(_RehashPolicy& __policy)
      : _M_guarded_obj(std::__addressof(__policy))
      , _M_prev_state(__policy._M_state())
      { }
      _RehashStateGuard(const _RehashStateGuard&) = delete;

      ~_RehashStateGuard()
      {
 if (_M_guarded_obj)
   _M_guarded_obj->_M_reset(_M_prev_state);
      }
    };
# 809 "/usr/include/c++/15.1.1/bits/hashtable_policy.h" 3
  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits,
    bool _Unique_keys = _Traits::__unique_keys::value>
    struct _Map_base { };


  template<typename _Key, typename _Val, typename _Alloc, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    struct _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, false>
    {
      using mapped_type = _Val;
    };


  template<typename _Key, typename _Val, typename _Alloc, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    struct _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>
    {
    private:
      using __hashtable_base = _Hashtable_base<_Key, pair<const _Key, _Val>,
            _Select1st, _Equal, _Hash,
            _RangeHash, _Unused,
            _Traits>;

      using __hashtable = _Hashtable<_Key, pair<const _Key, _Val>, _Alloc,
         _Select1st, _Equal, _Hash, _RangeHash,
         _Unused, _RehashPolicy, _Traits>;

      using __hash_code = typename __hashtable_base::__hash_code;

    public:
      using key_type = typename __hashtable_base::key_type;
      using mapped_type = _Val;

      mapped_type&
      operator[](const key_type& __k);

      mapped_type&
      operator[](key_type&& __k);



      mapped_type&
      at(const key_type& __k)
      {
 auto __ite = static_cast<__hashtable*>(this)->find(__k);
 if (!__ite._M_cur)
   __throw_out_of_range(("unordered_map::at"));
 return __ite->second;
      }

      const mapped_type&
      at(const key_type& __k) const
      {
 auto __ite = static_cast<const __hashtable*>(this)->find(__k);
 if (!__ite._M_cur)
   __throw_out_of_range(("unordered_map::at"));
 return __ite->second;
      }
    };

  template<typename _Key, typename _Val, typename _Alloc, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    auto
    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>::
    operator[](const key_type& __k)
    -> mapped_type&
    {
      __hashtable* __h = static_cast<__hashtable*>(this);
      __hash_code __code = __h->_M_hash_code(__k);
      size_t __bkt = __h->_M_bucket_index(__code);
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
 return __node->_M_v().second;

      typename __hashtable::_Scoped_node __node {
 __h,
 std::piecewise_construct,
 std::tuple<const key_type&>(__k),
 std::tuple<>()
      };
      auto __pos
 = __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
      __node._M_node = nullptr;
      return __pos->second;
    }

  template<typename _Key, typename _Val, typename _Alloc, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    auto
    _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal,
       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>::
    operator[](key_type&& __k)
    -> mapped_type&
    {
      __hashtable* __h = static_cast<__hashtable*>(this);
      __hash_code __code = __h->_M_hash_code(__k);
      size_t __bkt = __h->_M_bucket_index(__code);
      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
 return __node->_M_v().second;

      typename __hashtable::_Scoped_node __node {
 __h,
 std::piecewise_construct,
 std::forward_as_tuple(std::move(__k)),
 std::tuple<>()
      };
      auto __pos
 = __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
      __node._M_node = nullptr;
      return __pos->second;
    }


  template<typename _Key, typename _Val, typename _Alloc, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits, bool __uniq>
    struct _Map_base<const _Key, pair<const _Key, _Val>,
       _Alloc, _Select1st, _Equal, _Hash,
       _RangeHash, _Unused, _RehashPolicy, _Traits, __uniq>
    : _Map_base<_Key, pair<const _Key, _Val>, _Alloc, _Select1st, _Equal, _Hash,
  _RangeHash, _Unused, _RehashPolicy, _Traits, __uniq>
    { };

  template<typename _Policy>
    using __has_load_factor = typename _Policy::__has_load_factor;







  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits,
    typename =
      __detected_or_t<false_type, __has_load_factor, _RehashPolicy>>
    struct _Rehash_base;


  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    struct _Rehash_base<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits,
   false_type >
    {
    };


  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    struct _Rehash_base<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits,
   true_type >
    {
    private:
      using __hashtable = _Hashtable<_Key, _Value, _Alloc, _ExtractKey,
         _Equal, _Hash, _RangeHash, _Unused,
         _RehashPolicy, _Traits>;

    public:
      float
      max_load_factor() const noexcept
      {
 const __hashtable* __this = static_cast<const __hashtable*>(this);
 return __this->__rehash_policy().max_load_factor();
      }

      void
      max_load_factor(float __z)
      {
 __hashtable* __this = static_cast<__hashtable*>(this);
 __this->__rehash_policy(_RehashPolicy(__z));
      }

      void
      reserve(size_t __n)
      {
 __hashtable* __this = static_cast<__hashtable*>(this);
 __this->rehash(__this->__rehash_policy()._M_bkt_for_elements(__n));
      }
    };






  template<typename _Tp,
    bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
    struct _Hashtable_ebo_helper
    {
      [[__no_unique_address__]] _Tp _M_obj;
    };




  template<typename _Tp>
    struct _Hashtable_ebo_helper<_Tp, false>
    {
      _Tp _M_obj;
    };
# 1034 "/usr/include/c++/15.1.1/bits/hashtable_policy.h" 3
  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _Hash, typename _RangeHash, typename _Unused,
    bool __cache_hash_code>
    struct _Local_iterator_base;


  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _Hash, typename _RangeHash, typename _Unused,
    bool >
    struct _Hash_code_base
    {

      friend struct _Local_iterator_base<_Key, _Value, _ExtractKey,
      _Hash, _RangeHash, _Unused, false>;
    public:
      using hasher = _Hash;

      hasher
      hash_function() const
      { return _M_hash._M_obj; }

    protected:
      [[__no_unique_address__]] _Hashtable_ebo_helper<_Hash> _M_hash{};

      using __hash_code = size_t;



      _Hash_code_base() = default;

      _Hash_code_base(const _Hash& __hash) : _M_hash{__hash} { }

      __hash_code
      _M_hash_code(const _Key& __k) const
      {
 static_assert(__is_invocable<const _Hash&, const _Key&>{},
     "hash function must be invocable with an argument of key type");
 return _M_hash._M_obj(__k);
      }

      template<typename _Kt>
 __hash_code
 _M_hash_code_tr(const _Kt& __k) const
 {
   static_assert(__is_invocable<const _Hash&, const _Kt&>{},
     "hash function must be invocable with an argument of key type");
   return _M_hash._M_obj(__k);
 }

      __hash_code
      _M_hash_code(const _Hash_node_value<_Value, false>& __n) const
      { return _M_hash_code(_ExtractKey{}(__n._M_v())); }

      __hash_code
      _M_hash_code(const _Hash_node_value<_Value, true>& __n) const
      { return __n._M_hash_code; }

      size_t
      _M_bucket_index(__hash_code __c, size_t __bkt_count) const
      { return _RangeHash{}(__c, __bkt_count); }

      size_t
      _M_bucket_index(const _Hash_node_value<_Value, false>& __n,
        size_t __bkt_count) const
      noexcept( noexcept(declval<const _Hash&>()(declval<const _Key&>())) )
      {
 return _RangeHash{}(_M_hash_code(_ExtractKey{}(__n._M_v())),
       __bkt_count);
      }

      size_t
      _M_bucket_index(const _Hash_node_value<_Value, true>& __n,
        size_t __bkt_count) const noexcept
      { return _RangeHash{}(__n._M_hash_code, __bkt_count); }
    };


  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _Hash, typename _RangeHash, typename _Unused>
    struct _Local_iterator_base<_Key, _Value, _ExtractKey,
    _Hash, _RangeHash, _Unused, true>
    : public _Node_iterator_base<_Value, true>
    {
    protected:
      using __base_node_iter = _Node_iterator_base<_Value, true>;
      using __hash_code_base = _Hash_code_base<_Key, _Value, _ExtractKey,
           _Hash, _RangeHash, _Unused, true>;

      _Local_iterator_base() = default;

      _Local_iterator_base(const __hash_code_base&,
      _Hash_node<_Value, true>* __p,
      size_t __bkt, size_t __bkt_count)
      : __base_node_iter(__p), _M_bucket(__bkt), _M_bucket_count(__bkt_count)
      { }

      void
      _M_incr()
      {
 __base_node_iter::_M_incr();
 if (this->_M_cur)
   {
     size_t __bkt
       = _RangeHash{}(this->_M_cur->_M_hash_code, _M_bucket_count);
     if (__bkt != _M_bucket)
       this->_M_cur = nullptr;
   }
      }

      size_t _M_bucket = 0;
      size_t _M_bucket_count = 0;

    public:
      size_t
      _M_get_bucket() const { return _M_bucket; }
    };




  template<typename _Hash>
    struct _Hash_obj_storage
    {
      union _Uninit_storage
      {
 _Uninit_storage() noexcept { }
 ~_Uninit_storage() { }

 [[__no_unique_address__]] _Hash _M_h;
      };

      [[__no_unique_address__]] _Uninit_storage _M_u;
    };


  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _Hash, typename _RangeHash, typename _Unused>
    struct _Local_iterator_base<_Key, _Value, _ExtractKey,
    _Hash, _RangeHash, _Unused, false>
    : _Hash_obj_storage<_Hash>, _Node_iterator_base<_Value, false>
    {
    protected:
      using __hash_code_base = _Hash_code_base<_Key, _Value, _ExtractKey,
          _Hash, _RangeHash, _Unused, false>;
      using __hash_obj_storage = _Hash_obj_storage<_Hash>;
      using __node_iter_base = _Node_iterator_base<_Value, false>;

      _Local_iterator_base() = default;

      _Local_iterator_base(const __hash_code_base& __base,
      _Hash_node<_Value, false>* __p,
      size_t __bkt, size_t __bkt_count)
      : __node_iter_base(__p), _M_bucket(__bkt), _M_bucket_count(__bkt_count)
      { _M_init(__base._M_hash._M_obj); }

      ~_Local_iterator_base()
      {
 if (_M_bucket_count != size_t(-1))
   _M_destroy();
      }

      _Local_iterator_base(const _Local_iterator_base& __iter)
      : __node_iter_base(__iter._M_cur), _M_bucket(__iter._M_bucket)
      , _M_bucket_count(__iter._M_bucket_count)
      {
 if (_M_bucket_count != size_t(-1))
   _M_init(__iter._M_h());
      }

      _Local_iterator_base&
      operator=(const _Local_iterator_base& __iter)
      {
 if (_M_bucket_count != size_t(-1))
   _M_destroy();
 this->_M_cur = __iter._M_cur;
 _M_bucket = __iter._M_bucket;
 _M_bucket_count = __iter._M_bucket_count;
 if (_M_bucket_count != size_t(-1))
   _M_init(__iter._M_h());
 return *this;
      }

      void
      _M_incr()
      {
 __node_iter_base::_M_incr();
 if (this->_M_cur)
   {
     const auto __code = _M_h()(_ExtractKey{}(this->_M_cur->_M_v()));
     size_t __bkt = _RangeHash{}(__code, _M_bucket_count);
     if (__bkt != _M_bucket)
       this->_M_cur = nullptr;
   }
      }

      size_t _M_bucket = 0;
      size_t _M_bucket_count = -1;

      void
      _M_init(const _Hash& __h)
      { std::_Construct(std::__addressof(__hash_obj_storage::_M_u._M_h), __h); }

      void
      _M_destroy() { __hash_obj_storage::_M_u._M_h.~_Hash(); }

      const _Hash&
      _M_h() const { return __hash_obj_storage::_M_u._M_h; }

    public:
      size_t
      _M_get_bucket() const { return _M_bucket; }
    };


  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _Hash, typename _RangeHash, typename _Unused,
    bool __constant_iterators, bool __cache>
    struct _Local_iterator
    : public _Local_iterator_base<_Key, _Value, _ExtractKey,
      _Hash, _RangeHash, _Unused, __cache>
    {
    private:
      using __base_type = _Local_iterator_base<_Key, _Value, _ExtractKey,
        _Hash, _RangeHash, _Unused, __cache>;
      using __hash_code_base = typename __base_type::__hash_code_base;

    public:
      using value_type = _Value;
      using pointer = __conditional_t<__constant_iterators,
          const value_type*, value_type*>;
      using reference = __conditional_t<__constant_iterators,
     const value_type&, value_type&>;
      using difference_type = ptrdiff_t;
      using iterator_category = forward_iterator_tag;

      _Local_iterator() = default;

      _Local_iterator(const __hash_code_base& __base,
        _Hash_node<_Value, __cache>* __n,
        size_t __bkt, size_t __bkt_count)
      : __base_type(__base, __n, __bkt, __bkt_count)
      { }

      reference
      operator*() const
      { return this->_M_cur->_M_v(); }

      pointer
      operator->() const
      { return this->_M_cur->_M_valptr(); }

      _Local_iterator&
      operator++()
      {
 this->_M_incr();
 return *this;
      }

      _Local_iterator
      operator++(int)
      {
 _Local_iterator __tmp(*this);
 this->_M_incr();
 return __tmp;
      }
    };


  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _Hash, typename _RangeHash, typename _Unused,
    bool __constant_iterators, bool __cache>
    struct _Local_const_iterator
    : public _Local_iterator_base<_Key, _Value, _ExtractKey,
      _Hash, _RangeHash, _Unused, __cache>
    {
    private:
      using __base_type = _Local_iterator_base<_Key, _Value, _ExtractKey,
        _Hash, _RangeHash, _Unused, __cache>;
      using __hash_code_base = typename __base_type::__hash_code_base;

    public:
      using value_type = _Value;
      using pointer = const value_type*;
      using reference = const value_type&;
      using difference_type = ptrdiff_t;
      using iterator_category = forward_iterator_tag;

      _Local_const_iterator() = default;

      _Local_const_iterator(const __hash_code_base& __base,
       _Hash_node<_Value, __cache>* __n,
       size_t __bkt, size_t __bkt_count)
      : __base_type(__base, __n, __bkt, __bkt_count)
      { }

      _Local_const_iterator(const _Local_iterator<_Key, _Value, _ExtractKey,
        _Hash, _RangeHash, _Unused,
        __constant_iterators,
        __cache>& __x)
      : __base_type(__x)
      { }

      reference
      operator*() const
      { return this->_M_cur->_M_v(); }

      pointer
      operator->() const
      { return this->_M_cur->_M_valptr(); }

      _Local_const_iterator&
      operator++()
      {
 this->_M_incr();
 return *this;
      }

      _Local_const_iterator
      operator++(int)
      {
 _Local_const_iterator __tmp(*this);
 this->_M_incr();
 return __tmp;
      }
    };
# 1369 "/usr/include/c++/15.1.1/bits/hashtable_policy.h" 3
  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _Equal, typename _Hash, typename _RangeHash,
    typename _Unused, typename _Traits>
    struct _Hashtable_base
    : public _Hash_code_base<_Key, _Value, _ExtractKey, _Hash, _RangeHash,
        _Unused, _Traits::__hash_cached::value>
    {
    public:
      using key_type = _Key;
      using value_type = _Value;
      using key_equal = _Equal;
      using size_type = size_t;
      using difference_type = ptrdiff_t;

      using __traits_type = _Traits;
      using __hash_cached = typename __traits_type::__hash_cached;

      using __hash_code_base = _Hash_code_base<_Key, _Value, _ExtractKey,
            _Hash, _RangeHash, _Unused,
            __hash_cached::value>;

      using __hash_code = typename __hash_code_base::__hash_code;

    protected:
      [[__no_unique_address__]] _Hashtable_ebo_helper<_Equal> _M_equal{};

      _Hashtable_base() = default;

      _Hashtable_base(const _Hash& __hash, const _Equal& __eq)
      : __hash_code_base(__hash), _M_equal{__eq}
      { }

      bool
      _M_key_equals(const _Key& __k,
      const _Hash_node_value<_Value,
        __hash_cached::value>& __n) const
      {
 static_assert(__is_invocable<const _Equal&, const _Key&, const _Key&>{},
   "key equality predicate must be invocable with two arguments of "
   "key type");
 return _M_eq()(__k, _ExtractKey{}(__n._M_v()));
      }

      template<typename _Kt>
 bool
 _M_key_equals_tr(const _Kt& __k,
    const _Hash_node_value<_Value,
          __hash_cached::value>& __n) const
 {
   static_assert(
     __is_invocable<const _Equal&, const _Kt&, const _Key&>{},
     "key equality predicate must be invocable with the argument type "
     "and the key type");
   return _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
      bool
      _M_equals(const _Key& __k, __hash_code __c,
  const _Hash_node_value<_Value, __hash_cached::value>& __n) const
      {
 if constexpr (__hash_cached::value)
   if (__c != __n._M_hash_code)
     return false;

 return _M_key_equals(__k, __n);
      }

      template<typename _Kt>
 bool
 _M_equals_tr(const _Kt& __k, __hash_code __c,
       const _Hash_node_value<_Value,
         __hash_cached::value>& __n) const
 {
   if constexpr (__hash_cached::value)
     if (__c != __n._M_hash_code)
       return false;

   return _M_key_equals_tr(__k, __n);
 }

      bool
      _M_node_equals(
 const _Hash_node_value<_Value, __hash_cached::value>& __lhn,
 const _Hash_node_value<_Value, __hash_cached::value>& __rhn) const
      {
 if constexpr (__hash_cached::value)
   if (__lhn._M_hash_code != __rhn._M_hash_code)
     return false;

 return _M_key_equals(_ExtractKey{}(__lhn._M_v()), __rhn);
      }
#pragma GCC diagnostic pop

      const _Equal&
      _M_eq() const noexcept { return _M_equal._M_obj; }
    };




  template<typename _NodeAlloc>
    struct _Hashtable_alloc
    {
    private:
      [[__no_unique_address__]] _Hashtable_ebo_helper<_NodeAlloc> _M_alloc{};

      template<typename>
 struct __get_value_type;
      template<typename _Val, bool _Cache_hash_code>
 struct __get_value_type<_Hash_node<_Val, _Cache_hash_code>>
 { using type = _Val; };

    public:
      using __node_type = typename _NodeAlloc::value_type;
      using __node_alloc_type = _NodeAlloc;

      using __node_alloc_traits = __gnu_cxx::__alloc_traits<__node_alloc_type>;

      using __value_alloc_traits = typename __node_alloc_traits::template
 rebind_traits<typename __get_value_type<__node_type>::type>;

      using __node_ptr = __node_type*;
      using __node_base = _Hash_node_base;
      using __node_base_ptr = __node_base*;
      using __buckets_alloc_type =
 __alloc_rebind<__node_alloc_type, __node_base_ptr>;
      using __buckets_alloc_traits = std::allocator_traits<__buckets_alloc_type>;
      using __buckets_ptr = __node_base_ptr*;

      _Hashtable_alloc() = default;
      _Hashtable_alloc(const _Hashtable_alloc&) = default;
      _Hashtable_alloc(_Hashtable_alloc&&) = default;

      template<typename _Alloc>
 _Hashtable_alloc(_Alloc&& __a)
 : _M_alloc{std::forward<_Alloc>(__a)}
 { }

      __node_alloc_type&
      _M_node_allocator()
      { return _M_alloc._M_obj; }

      const __node_alloc_type&
      _M_node_allocator() const
      { return _M_alloc._M_obj; }


      template<typename... _Args>
 __node_ptr
 _M_allocate_node(_Args&&... __args);


      void
      _M_deallocate_node(__node_ptr __n);


      void
      _M_deallocate_node_ptr(__node_ptr __n);



      void
      _M_deallocate_nodes(__node_ptr __n);

      __buckets_ptr
      _M_allocate_buckets(size_t __bkt_count);

      void
      _M_deallocate_buckets(__buckets_ptr, size_t __bkt_count);
    };



  template<typename _NodeAlloc>
    template<typename... _Args>
      auto
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
      -> __node_ptr
      {
 auto& __alloc = _M_node_allocator();
 auto __nptr = __node_alloc_traits::allocate(__alloc, 1);
 __node_ptr __n = std::__to_address(__nptr);
 try
   {
     ::new ((void*)__n) __node_type;
     __node_alloc_traits::construct(__alloc, __n->_M_valptr(),
        std::forward<_Args>(__args)...);
     return __n;
   }
 catch(...)
   {
     __n->~__node_type();
     __node_alloc_traits::deallocate(__alloc, __nptr, 1);
     throw;
   }
      }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
    {
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
      _M_deallocate_node_ptr(__n);
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
    {
      using _Ptr = typename __node_alloc_traits::pointer;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
      __n->~__node_type();
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
    {
      while (__n)
 {
   __node_ptr __tmp = __n;
   __n = __n->_M_next();
   _M_deallocate_node(__tmp);
 }
    }

  template<typename _NodeAlloc>
    auto
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(size_t __bkt_count)
    -> __buckets_ptr
    {
      __buckets_alloc_type __alloc(_M_node_allocator());

      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
      __buckets_ptr __p = std::__to_address(__ptr);
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
      return __p;
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::
    _M_deallocate_buckets(__buckets_ptr __bkts, size_t __bkt_count)
    {
      using _Ptr = typename __buckets_alloc_traits::pointer;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
      __buckets_alloc_type __alloc(_M_node_allocator());
      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
    }


}


}
# 38 "/usr/include/c++/15.1.1/bits/hashtable.h" 2 3




# 1 "/usr/include/c++/15.1.1/bits/node_handle.h" 1 3
# 32 "/usr/include/c++/15.1.1/bits/node_handle.h" 3
#define _NODE_HANDLE 1





# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 39 "/usr/include/c++/15.1.1/bits/node_handle.h" 2 3







namespace std __attribute__ ((__visibility__ ("default")))
{

# 66 "/usr/include/c++/15.1.1/bits/node_handle.h" 3
  template<typename _Val, typename _NodeAlloc>
    class _Node_handle_common
    {
      using _AllocTraits = allocator_traits<_NodeAlloc>;

    public:
      using allocator_type = __alloc_rebind<_NodeAlloc, _Val>;

      allocator_type
      get_allocator() const noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return allocator_type(_M_alloc._M_alloc);
      }

      explicit operator bool() const noexcept { return _M_ptr != nullptr; }

      [[nodiscard]] bool empty() const noexcept { return _M_ptr == nullptr; }


    protected:
      constexpr _Node_handle_common() noexcept : _M_ptr() { }

      ~_Node_handle_common()
      {
 if (!empty())
   _M_reset();
      }

      _Node_handle_common(_Node_handle_common&& __nh) noexcept
      : _M_ptr(__nh._M_ptr)
      {
 if (_M_ptr)
   _M_move(std::move(__nh));
      }

      _Node_handle_common&
      operator=(_Node_handle_common&& __nh) noexcept
      {
 if (empty())
   {
     if (!__nh.empty())
       _M_move(std::move(__nh));
   }
 else if (__nh.empty())
   _M_reset();
 else
   {

     _AllocTraits::destroy(*_M_alloc, _M_ptr->_M_valptr());
     _AllocTraits::deallocate(*_M_alloc, _M_ptr, 1);

     _M_alloc = __nh._M_alloc.release();
     _M_ptr = __nh._M_ptr;
     __nh._M_ptr = nullptr;
   }
 return *this;
      }

      _Node_handle_common(typename _AllocTraits::pointer __ptr,
     const _NodeAlloc& __alloc)
      : _M_ptr(__ptr), _M_alloc(__alloc)
      {
 do { if (std::__is_constant_evaluated() && !bool(__ptr != nullptr)) std::__glibcxx_assert_fail(); } while (false);
      }

      void
      _M_swap(_Node_handle_common& __nh) noexcept
      {
 if (empty())
   {
     if (!__nh.empty())
       _M_move(std::move(__nh));
   }
 else if (__nh.empty())
   __nh._M_move(std::move(*this));
 else
   {
     using std::swap;
     swap(_M_ptr, __nh._M_ptr);
     _M_alloc.swap(__nh._M_alloc);
   }
      }

    private:



      void
      _M_move(_Node_handle_common&& __nh) noexcept
      {
 ::new (std::__addressof(_M_alloc)) _NodeAlloc(__nh._M_alloc.release());
 _M_ptr = __nh._M_ptr;
 __nh._M_ptr = nullptr;
      }




      void
      _M_reset() noexcept
      {
 _NodeAlloc __alloc = _M_alloc.release();
 _AllocTraits::destroy(__alloc, _M_ptr->_M_valptr());
 _AllocTraits::deallocate(__alloc, _M_ptr, 1);
 _M_ptr = nullptr;
      }




      void
      release() noexcept
      {
 _M_alloc.release();
 _M_ptr = nullptr;
      }

    protected:
      typename _AllocTraits::pointer _M_ptr;

    private:


      union _Optional_alloc
      {
 _Optional_alloc() { }
 ~_Optional_alloc() { }

 _Optional_alloc(_Optional_alloc&&) = delete;
 _Optional_alloc& operator=(_Optional_alloc&&) = delete;

 _Optional_alloc(const _NodeAlloc& __alloc) noexcept
 : _M_alloc(__alloc)
 { }


 void
 operator=(_NodeAlloc&& __alloc) noexcept
 {
   using _ATr = _AllocTraits;
   if constexpr (_ATr::propagate_on_container_move_assignment::value)
     _M_alloc = std::move(__alloc);
   else if constexpr (!_AllocTraits::is_always_equal::value)
     do { if (std::__is_constant_evaluated() && !bool(_M_alloc == __alloc)) std::__glibcxx_assert_fail(); } while (false);
 }


 void
 swap(_Optional_alloc& __other) noexcept
 {
   using std::swap;
   if constexpr (_AllocTraits::propagate_on_container_swap::value)
     swap(_M_alloc, __other._M_alloc);
   else if constexpr (!_AllocTraits::is_always_equal::value)
     do { if (std::__is_constant_evaluated() && !bool(_M_alloc == __other._M_alloc)) std::__glibcxx_assert_fail(); } while (false);
 }


 _NodeAlloc& operator*() noexcept { return _M_alloc; }


 _NodeAlloc release() noexcept
 {
   _NodeAlloc __tmp = std::move(_M_alloc);
   _M_alloc.~_NodeAlloc();
   return __tmp;
 }

 [[__no_unique_address__]] _NodeAlloc _M_alloc;
      };

      [[__no_unique_address__]] _Optional_alloc _M_alloc;

      template<typename _Key2, typename _Value2, typename _KeyOfValue,
        typename _Compare, typename _ValueAlloc>
 friend class _Rb_tree;

      template<typename _Key2, typename _Value2, typename _ValueAlloc,
        typename _ExtractKey, typename _Equal,
        typename _Hash, typename _RangeHash, typename _Unused,
        typename _RehashPolicy, typename _Traits>
 friend class _Hashtable;


    };


  template<typename _Key, typename _Value, typename _NodeAlloc>
    class _Node_handle : public _Node_handle_common<_Value, _NodeAlloc>
    {
    public:
      constexpr _Node_handle() noexcept = default;
      ~_Node_handle() = default;
      _Node_handle(_Node_handle&&) noexcept = default;

      _Node_handle&
      operator=(_Node_handle&&) noexcept = default;

      using key_type = _Key;
      using mapped_type = typename _Value::second_type;

      key_type&
      key() const noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return *_M_pkey;
      }

      mapped_type&
      mapped() const noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return *_M_pmapped;
      }

      void
      swap(_Node_handle& __nh) noexcept
      {
 this->_M_swap(__nh);
 using std::swap;
 swap(_M_pkey, __nh._M_pkey);
 swap(_M_pmapped, __nh._M_pmapped);
      }

      friend void
      swap(_Node_handle& __x, _Node_handle& __y)
      noexcept(noexcept(__x.swap(__y)))
      { __x.swap(__y); }

    private:
      using _AllocTraits = allocator_traits<_NodeAlloc>;

      _Node_handle(typename _AllocTraits::pointer __ptr,
     const _NodeAlloc& __alloc)
      : _Node_handle_common<_Value, _NodeAlloc>(__ptr, __alloc)
      {
 if (__ptr)
   {
     auto& __key = const_cast<_Key&>(__ptr->_M_valptr()->first);
     _M_pkey = _S_pointer_to(__key);
     _M_pmapped = _S_pointer_to(__ptr->_M_valptr()->second);
   }
 else
   {
     _M_pkey = nullptr;
     _M_pmapped = nullptr;
   }
      }

      template<typename _Tp>
 using __pointer
   = __ptr_rebind<typename _AllocTraits::pointer,
    remove_reference_t<_Tp>>;

      __pointer<_Key> _M_pkey = nullptr;
      __pointer<typename _Value::second_type> _M_pmapped = nullptr;

      template<typename _Tp>
 __pointer<_Tp>
 _S_pointer_to(_Tp& __obj)
 { return pointer_traits<__pointer<_Tp>>::pointer_to(__obj); }

      const key_type&
      _M_key() const noexcept { return key(); }

      template<typename _Key2, typename _Value2, typename _KeyOfValue,
        typename _Compare, typename _ValueAlloc>
 friend class _Rb_tree;

      template<typename _Key2, typename _Value2, typename _ValueAlloc,
        typename _ExtractKey, typename _Equal,
        typename _Hash, typename _RangeHash, typename _Unused,
        typename _RehashPolicy, typename _Traits>
 friend class _Hashtable;
    };


  template<typename _Value, typename _NodeAlloc>
    class _Node_handle<_Value, _Value, _NodeAlloc>
    : public _Node_handle_common<_Value, _NodeAlloc>
    {
    public:
      constexpr _Node_handle() noexcept = default;
      ~_Node_handle() = default;
      _Node_handle(_Node_handle&&) noexcept = default;

      _Node_handle&
      operator=(_Node_handle&&) noexcept = default;

      using value_type = _Value;

      value_type&
      value() const noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return *this->_M_ptr->_M_valptr();
      }

      void
      swap(_Node_handle& __nh) noexcept
      { this->_M_swap(__nh); }

      friend void
      swap(_Node_handle& __x, _Node_handle& __y)
      noexcept(noexcept(__x.swap(__y)))
      { __x.swap(__y); }

    private:
      using _AllocTraits = allocator_traits<_NodeAlloc>;

      _Node_handle(typename _AllocTraits::pointer __ptr,
     const _NodeAlloc& __alloc)
      : _Node_handle_common<_Value, _NodeAlloc>(__ptr, __alloc) { }

      const value_type&
      _M_key() const noexcept { return value(); }

      template<typename _Key, typename _Val, typename _KeyOfValue,
        typename _Compare, typename _Alloc>
 friend class _Rb_tree;

      template<typename _Key2, typename _Value2, typename _ValueAlloc,
        typename _ExtractKey, typename _Equal,
        typename _Hash, typename _RangeHash, typename _Unused,
        typename _RehashPolicy, typename _Traits>
 friend class _Hashtable;
    };


  template<typename _Iterator, typename _NodeHandle>
    struct _Node_insert_return
    {
      _Iterator position = _Iterator();
      bool inserted = false;
      _NodeHandle node;
    };




}
# 43 "/usr/include/c++/15.1.1/bits/hashtable.h" 2 3


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"

namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp, typename _Hash>
    using __cache_default
      = __not_<__and_<
         __is_fast_hash<_Hash>,

         __is_nothrow_invocable<const _Hash&, const _Tp&>>>;




  template<typename _Equal, typename _Hash, typename _Allocator>
    using _Hashtable_enable_default_ctor
      = _Enable_default_constructor<__and_<is_default_constructible<_Equal>,
           is_default_constructible<_Hash>,
           is_default_constructible<_Allocator>>{},
        __detail::_Hash_node_base>;
# 185 "/usr/include/c++/15.1.1/bits/hashtable.h" 3
  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    class _Hashtable
    : public __detail::_Hashtable_base<_Key, _Value, _ExtractKey, _Equal,
           _Hash, _RangeHash, _Unused, _Traits>,
      public __detail::_Map_base<_Key, _Value, _Alloc, _ExtractKey, _Equal,
     _Hash, _RangeHash, _Unused,
     _RehashPolicy, _Traits>,
      public __detail::_Rehash_base<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused,
        _RehashPolicy, _Traits>,
      private __detail::_Hashtable_alloc<
 __alloc_rebind<_Alloc,
         __detail::_Hash_node<_Value,
         _Traits::__hash_cached::value>>>,
      private _Hashtable_enable_default_ctor<_Equal, _Hash, _Alloc>
    {
      static_assert(is_same<typename remove_cv<_Value>::type, _Value>::value,
   "unordered container must have a non-const, non-volatile value_type");




      static_assert(is_copy_constructible<_Hash>::value,
   "hash function must be copy constructible");

      using __traits_type = _Traits;
      using __hash_cached = typename __traits_type::__hash_cached;
      using __constant_iterators = typename __traits_type::__constant_iterators;
      using __node_type = __detail::_Hash_node<_Value, __hash_cached::value>;
      using __node_alloc_type = __alloc_rebind<_Alloc, __node_type>;

      using __hashtable_alloc = __detail::_Hashtable_alloc<__node_alloc_type>;

      using __node_value_type =
 __detail::_Hash_node_value<_Value, __hash_cached::value>;
      using __node_ptr = typename __hashtable_alloc::__node_ptr;
      using __value_alloc_traits =
 typename __hashtable_alloc::__value_alloc_traits;
      using __node_alloc_traits =
 typename __hashtable_alloc::__node_alloc_traits;
      using __node_base = typename __hashtable_alloc::__node_base;
      using __node_base_ptr = typename __hashtable_alloc::__node_base_ptr;
      using __buckets_ptr = typename __hashtable_alloc::__buckets_ptr;

      using __enable_default_ctor
 = _Hashtable_enable_default_ctor<_Equal, _Hash, _Alloc>;
      using __rehash_guard_t
 = __detail::_RehashStateGuard<_RehashPolicy>;

    public:
      typedef _Key key_type;
      typedef _Value value_type;
      typedef _Alloc allocator_type;
      typedef _Equal key_equal;



      typedef typename __value_alloc_traits::pointer pointer;
      typedef typename __value_alloc_traits::const_pointer const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;

      using iterator
 = __detail::_Node_iterator<_Value, __constant_iterators::value,
       __hash_cached::value>;

      using const_iterator
 = __detail::_Node_const_iterator<_Value, __constant_iterators::value,
      __hash_cached::value>;

      using local_iterator = __detail::_Local_iterator<key_type, _Value,
   _ExtractKey, _Hash, _RangeHash, _Unused,
          __constant_iterators::value,
          __hash_cached::value>;

      using const_local_iterator = __detail::_Local_const_iterator<
   key_type, _Value,
   _ExtractKey, _Hash, _RangeHash, _Unused,
   __constant_iterators::value, __hash_cached::value>;

    private:
      using __rehash_type = _RehashPolicy;

      using __unique_keys = typename __traits_type::__unique_keys;

      using __hashtable_base = __detail::
 _Hashtable_base<_Key, _Value, _ExtractKey,
   _Equal, _Hash, _RangeHash, _Unused, _Traits>;

      using __hash_code_base = typename __hashtable_base::__hash_code_base;
      using __hash_code = typename __hashtable_base::__hash_code;
      using __ireturn_type = __conditional_t<__unique_keys::value,
          std::pair<iterator, bool>,
          iterator>;

      using __map_base = __detail::_Map_base<_Key, _Value, _Alloc, _ExtractKey,
          _Equal, _Hash, _RangeHash, _Unused,
          _RehashPolicy, _Traits>;

      using __rehash_base = __detail::_Rehash_base<_Key, _Value, _Alloc,
         _ExtractKey, _Equal,
         _Hash, _RangeHash, _Unused,
         _RehashPolicy, _Traits>;

      using __node_builder_t = __detail::_NodeBuilder<_ExtractKey>;


      struct _Scoped_node
      {

 _Scoped_node(__node_ptr __n, __hashtable_alloc* __h)
 : _M_h(__h), _M_node(__n) { }


 template<typename... _Args>
   _Scoped_node(__hashtable_alloc* __h, _Args&&... __args)
   : _M_h(__h),
     _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
   { }


 ~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };

 _Scoped_node(const _Scoped_node&) = delete;
 _Scoped_node& operator=(const _Scoped_node&) = delete;

 __hashtable_alloc* _M_h;
 __node_ptr _M_node;
      };





      struct __hash_code_base_access : __hash_code_base
      { using __hash_code_base::_M_bucket_index; };


      static_assert(is_nothrow_default_constructible<_RangeHash>::value,
      "Functor used to map hash code to bucket index"
      " must be nothrow default constructible");
      static_assert(noexcept(
 std::declval<const _RangeHash&>()((std::size_t)0, (std::size_t)0)),
      "Functor used to map hash code to bucket index must be"
      " noexcept");


      static_assert(is_nothrow_default_constructible<_ExtractKey>::value,
      "_ExtractKey must be nothrow default constructible");
      static_assert(noexcept(
 std::declval<const _ExtractKey&>()(std::declval<_Value>())),
      "_ExtractKey functor must be noexcept invocable");

      template<typename _Keya, typename _Valuea, typename _Alloca,
        typename _ExtractKeya, typename _Equala,
        typename _Hasha, typename _RangeHasha, typename _Unuseda,
        typename _RehashPolicya, typename _Traitsa,
        bool _Unique_keysa>
 friend struct __detail::_Map_base;

    public:
      using size_type = typename __hashtable_base::size_type;
      using difference_type = typename __hashtable_base::difference_type;


      using node_type = _Node_handle<_Key, _Value, __node_alloc_type>;
      using insert_return_type = _Node_insert_return<iterator, node_type>;


    private:
      __buckets_ptr _M_buckets = &_M_single_bucket;
      size_type _M_bucket_count = 1;
      __node_base _M_before_begin;
      size_type _M_element_count = 0;
      _RehashPolicy _M_rehash_policy;







      __node_base_ptr _M_single_bucket = nullptr;

      void
      _M_update_bbegin()
      {
 if (auto __begin = _M_begin())
   _M_buckets[_M_bucket_index(*__begin)] = &_M_before_begin;
      }

      void
      _M_update_bbegin(__node_ptr __n)
      {
 _M_before_begin._M_nxt = __n;
 _M_update_bbegin();
      }

      bool
      _M_uses_single_bucket(__buckets_ptr __bkts) const
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }

      bool
      _M_uses_single_bucket() const
      { return _M_uses_single_bucket(_M_buckets); }

      static constexpr size_t
      __small_size_threshold() noexcept
      {
 return
   __detail::_Hashtable_hash_traits<_Hash>::__small_size_threshold();
      }

      __hashtable_alloc&
      _M_base_alloc() { return *this; }

      __buckets_ptr
      _M_allocate_buckets(size_type __bkt_count)
      {
 if (__builtin_expect(__bkt_count == 1, false))
   {
     _M_single_bucket = nullptr;
     return &_M_single_bucket;
   }

 return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
      }

      void
      _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count)
      {
 if (_M_uses_single_bucket(__bkts))
   return;

 __hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
      }

      void
      _M_deallocate_buckets()
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }



      __node_ptr
      _M_bucket_begin(size_type __bkt) const
      {
 __node_base_ptr __n = _M_buckets[__bkt];
 return __n ? static_cast<__node_ptr>(__n->_M_nxt) : nullptr;
      }

      __node_ptr
      _M_begin() const
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }



      template<typename _Ht>
 void
 _M_assign_elements(_Ht&&);

      template<typename _Ht>
 void
 _M_assign(_Ht&& __ht)
 {
   __detail::_AllocNode<__node_alloc_type> __alloc_node_gen(*this);
   _M_assign(std::forward<_Ht>(__ht), __alloc_node_gen);
 }

      template<typename _Ht, typename _NodeGenerator>
 void
 _M_assign(_Ht&&, _NodeGenerator&);

      void
      _M_move_assign(_Hashtable&&, true_type);

      void
      _M_move_assign(_Hashtable&&, false_type);

      void
      _M_reset() noexcept;

      _Hashtable(const _Hash& __h, const _Equal& __eq,
   const allocator_type& __a)
      : __hashtable_base(__h, __eq),
 __hashtable_alloc(__node_alloc_type(__a)),
 __enable_default_ctor(_Enable_default_constructor_tag{})
      { }

      template<bool _No_realloc = true>
 static constexpr bool
 _S_nothrow_move()
 {





   if constexpr (_No_realloc)
     if constexpr (is_nothrow_copy_constructible<_Hash>())
       return is_nothrow_copy_constructible<_Equal>();
   return false;

 }

      _Hashtable(_Hashtable&& __ht, __node_alloc_type&& __a,
   true_type )
 noexcept(_S_nothrow_move());

      _Hashtable(_Hashtable&&, __node_alloc_type&&,
   false_type );

      template<typename _InputIterator>
 _Hashtable(_InputIterator __first, _InputIterator __last,
     size_type __bkt_count_hint,
     const _Hash&, const _Equal&, const allocator_type&,
     true_type __uks);

      template<typename _InputIterator>
 _Hashtable(_InputIterator __first, _InputIterator __last,
     size_type __bkt_count_hint,
     const _Hash&, const _Equal&, const allocator_type&,
     false_type __uks);

    public:

      _Hashtable() = default;

      _Hashtable(const _Hashtable&);

      _Hashtable(const _Hashtable&, const allocator_type&);

      explicit
      _Hashtable(size_type __bkt_count_hint,
   const _Hash& __hf = _Hash(),
   const key_equal& __eql = key_equal(),
   const allocator_type& __a = allocator_type());


      _Hashtable(_Hashtable&& __ht)
 noexcept(_S_nothrow_move())
      : _Hashtable(std::move(__ht), std::move(__ht._M_node_allocator()),
     true_type{})
      { }

      _Hashtable(_Hashtable&& __ht, const allocator_type& __a)
 noexcept(_S_nothrow_move<__node_alloc_traits::_S_always_equal()>())
      : _Hashtable(std::move(__ht), __node_alloc_type(__a),
     typename __node_alloc_traits::is_always_equal{})
      { }

      explicit
      _Hashtable(const allocator_type& __a)
      : __hashtable_alloc(__node_alloc_type(__a)),
 __enable_default_ctor(_Enable_default_constructor_tag{})
      { }

      template<typename _InputIterator>
 _Hashtable(_InputIterator __f, _InputIterator __l,
     size_type __bkt_count_hint = 0,
     const _Hash& __hf = _Hash(),
     const key_equal& __eql = key_equal(),
     const allocator_type& __a = allocator_type())
 : _Hashtable(__f, __l, __bkt_count_hint, __hf, __eql, __a,
       __unique_keys{})
 { }

      _Hashtable(initializer_list<value_type> __l,
   size_type __bkt_count_hint = 0,
   const _Hash& __hf = _Hash(),
   const key_equal& __eql = key_equal(),
   const allocator_type& __a = allocator_type())
      : _Hashtable(__l.begin(), __l.end(), __bkt_count_hint,
     __hf, __eql, __a, __unique_keys{})
      { }

      _Hashtable&
      operator=(const _Hashtable& __ht);

      _Hashtable&
      operator=(_Hashtable&& __ht)
      noexcept(__node_alloc_traits::_S_nothrow_move()
        && is_nothrow_move_assignable<_Hash>::value
        && is_nothrow_move_assignable<_Equal>::value)
      {
 constexpr bool __move_storage =
   __node_alloc_traits::_S_propagate_on_move_assign()
   || __node_alloc_traits::_S_always_equal();
 _M_move_assign(std::move(__ht), __bool_constant<__move_storage>());
 return *this;
      }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
      _Hashtable&
      operator=(initializer_list<value_type> __l)
      {
 using __reuse_or_alloc_node_gen_t =
   __detail::_ReuseOrAllocNode<__node_alloc_type>;

 __reuse_or_alloc_node_gen_t __roan(_M_begin(), *this);
 _M_before_begin._M_nxt = nullptr;
 clear();


 auto __l_bkt_count = _M_rehash_policy._M_bkt_for_elements(__l.size());



 if (_M_bucket_count < __l_bkt_count)
   rehash(__l_bkt_count);

 __hash_code __code;
 size_type __bkt;
 for (auto& __e : __l)
   {
     const key_type& __k = _ExtractKey{}(__e);

     if constexpr (__unique_keys::value)
       {
  if (auto __loc = _M_locate(__k))
    continue;
  else
    {
      __code = __loc._M_hash_code;
      __bkt = __loc._M_bucket_index;
    }
       }
     else
       {
  __code = this->_M_hash_code(__k);
  __bkt = _M_bucket_index(__code);
       }

     _M_insert_unique_node(__bkt, __code, __roan(__e));
   }

 return *this;
      }
#pragma GCC diagnostic pop

      ~_Hashtable() noexcept;

      void
      swap(_Hashtable&)
      noexcept(__and_<__is_nothrow_swappable<_Hash>,
        __is_nothrow_swappable<_Equal>>::value);


      iterator
      begin() noexcept
      { return iterator(_M_begin()); }

      const_iterator
      begin() const noexcept
      { return const_iterator(_M_begin()); }

      iterator
      end() noexcept
      { return iterator(nullptr); }

      const_iterator
      end() const noexcept
      { return const_iterator(nullptr); }

      const_iterator
      cbegin() const noexcept
      { return const_iterator(_M_begin()); }

      const_iterator
      cend() const noexcept
      { return const_iterator(nullptr); }

      size_type
      size() const noexcept
      { return _M_element_count; }

      [[__nodiscard__]] bool
      empty() const noexcept
      { return size() == 0; }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(this->_M_node_allocator()); }

      size_type
      max_size() const noexcept
      { return __node_alloc_traits::max_size(this->_M_node_allocator()); }


      key_equal
      key_eq() const
      { return this->_M_eq(); }




      size_type
      bucket_count() const noexcept
      { return _M_bucket_count; }

      size_type
      max_bucket_count() const noexcept
      { return max_size(); }

      size_type
      bucket_size(size_type __bkt) const
      { return std::distance(begin(__bkt), end(__bkt)); }

      size_type
      bucket(const key_type& __k) const
      { return _M_bucket_index(this->_M_hash_code(__k)); }

      local_iterator
      begin(size_type __bkt)
      {
 return local_iterator(*this, _M_bucket_begin(__bkt),
         __bkt, _M_bucket_count);
      }

      local_iterator
      end(size_type __bkt)
      { return local_iterator(*this, nullptr, __bkt, _M_bucket_count); }

      const_local_iterator
      begin(size_type __bkt) const
      {
 return const_local_iterator(*this, _M_bucket_begin(__bkt),
        __bkt, _M_bucket_count);
      }

      const_local_iterator
      end(size_type __bkt) const
      { return const_local_iterator(*this, nullptr, __bkt, _M_bucket_count); }


      const_local_iterator
      cbegin(size_type __bkt) const
      {
 return const_local_iterator(*this, _M_bucket_begin(__bkt),
        __bkt, _M_bucket_count);
      }

      const_local_iterator
      cend(size_type __bkt) const
      { return const_local_iterator(*this, nullptr, __bkt, _M_bucket_count); }

      float
      load_factor() const noexcept
      {
 return static_cast<float>(size()) / static_cast<float>(bucket_count());
      }






      const _RehashPolicy&
      __rehash_policy() const
      { return _M_rehash_policy; }

      void
      __rehash_policy(const _RehashPolicy& __pol)
      { _M_rehash_policy = __pol; }


      iterator
      find(const key_type& __k);

      const_iterator
      find(const key_type& __k) const;

      size_type
      count(const key_type& __k) const;

      std::pair<iterator, iterator>
      equal_range(const key_type& __k);

      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __k) const;
# 801 "/usr/include/c++/15.1.1/bits/hashtable.h" 3
      void _M_rehash_insert(size_type __n);

    private:

      size_type
      _M_bucket_index(const __node_value_type& __n) const noexcept
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }

      size_type
      _M_bucket_index(__hash_code __c) const
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"



      __hash_code
      _M_hash_code_ext(const __node_value_type& __from) const
      {
 if constexpr (__and_<__hash_cached, is_empty<_Hash>>::value)
   return __from._M_hash_code;
 else
   return this->_M_hash_code(_ExtractKey{}(__from._M_v()));
      }



      size_type
      _M_bucket_index_ext(const __node_value_type& __from) const
      { return _RangeHash{}(_M_hash_code_ext(__from), _M_bucket_count); }

      void
      _M_copy_code(__node_value_type& __to,
     const __node_value_type& __from) const
      {
 if constexpr (__hash_cached::value)
   __to._M_hash_code = _M_hash_code_ext(__from);
      }

      void
      _M_store_code(__node_value_type& __to, __hash_code __code) const
      {
 if constexpr (__hash_cached::value)
   __to._M_hash_code = __code;
      }
#pragma GCC diagnostic pop




      __node_base_ptr
      _M_find_before_node(size_type, const key_type&, __hash_code) const;

      template<typename _Kt>
 __node_base_ptr
 _M_find_before_node_tr(size_type, const _Kt&, __hash_code) const;



      struct __location_type
      {

 explicit operator bool() const noexcept
 { return static_cast<bool>(_M_before); }


 explicit operator iterator() const noexcept
 { return iterator(_M_node()); }


 explicit operator const_iterator() const noexcept
 { return const_iterator(_M_node()); }


 __node_ptr _M_node() const
 {
   if (_M_before)
     return static_cast<__node_ptr>(_M_before->_M_nxt);
   return __node_ptr();
 }

 __node_base_ptr _M_before{};
 __hash_code _M_hash_code{};
 size_type _M_bucket_index = size_type(-1);
      };
# 902 "/usr/include/c++/15.1.1/bits/hashtable.h" 3
      __location_type
      _M_locate(const key_type& __k) const;

      __node_ptr
      _M_find_node(size_type __bkt, const key_type& __key,
     __hash_code __c) const
      {
 if (__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c))
   return static_cast<__node_ptr>(__before_n->_M_nxt);
 return nullptr;
      }

      template<typename _Kt>
 __node_ptr
 _M_find_node_tr(size_type __bkt, const _Kt& __key,
   __hash_code __c) const
 {
   if (auto __before_n = _M_find_before_node_tr(__bkt, __key, __c))
     return static_cast<__node_ptr>(__before_n->_M_nxt);
   return nullptr;
 }


      void
      _M_insert_bucket_begin(size_type __bkt, __node_ptr __node)
      {
 if (_M_buckets[__bkt])
   {


     __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
     _M_buckets[__bkt]->_M_nxt = __node;
   }
 else
   {



     __node->_M_nxt = _M_before_begin._M_nxt;
     _M_before_begin._M_nxt = __node;

     if (__node->_M_nxt)


       _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;

     _M_buckets[__bkt] = &_M_before_begin;
   }
      }


      void
      _M_remove_bucket_begin(size_type __bkt, __node_ptr __next_n,
        size_type __next_bkt)
      {
 if (!__next_n)
   _M_buckets[__bkt] = nullptr;
 else if (__next_bkt != __bkt)
   {
     _M_buckets[__next_bkt] = _M_buckets[__bkt];
     _M_buckets[__bkt] = nullptr;
   }
      }


      __node_base_ptr
      _M_get_previous_node(size_type __bkt, __node_ptr __n);

      pair<__node_ptr, __hash_code>
      _M_compute_hash_code(__node_ptr __hint, const key_type& __k) const;







      iterator
      _M_insert_unique_node(size_type __bkt, __hash_code,
       __node_ptr __n, size_type __n_elt = 1);



      iterator
      _M_insert_multi_node(__node_ptr __hint,
      __hash_code __code, __node_ptr __n);

      template<typename... _Args>
 std::pair<iterator, bool>
 _M_emplace_uniq(_Args&&... __args);

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++14-extensions"
      template<typename _Arg, typename _DArg = __remove_cvref_t<_Arg>,
        typename = _ExtractKey>
 static constexpr bool __is_key_type = false;

      template<typename _Arg>
 static constexpr bool
 __is_key_type<_Arg, key_type, __detail::_Identity> = true;

      template<typename _Arg, typename _Arg1, typename _Arg2>
 static constexpr bool
 __is_key_type<_Arg, pair<_Arg1, _Arg2>, __detail::_Select1st>
   = is_same<__remove_cvref_t<_Arg1>, key_type>::value;
#pragma GCC diagnostic pop

      template<typename... _Args>
 iterator
 _M_emplace_multi(const_iterator, _Args&&... __args);

      iterator
      _M_erase(size_type __bkt, __node_base_ptr __prev_n, __node_ptr __n);

      template<typename _InputIterator>
 void
 _M_insert_range_multi(_InputIterator __first, _InputIterator __last);

    public:
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"

      template<typename... _Args>
 __ireturn_type
 emplace(_Args&&... __args)
 {
   if constexpr (__unique_keys::value)
     return _M_emplace_uniq(std::forward<_Args>(__args)...);
   else
     return _M_emplace_multi(cend(), std::forward<_Args>(__args)...);
 }

      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __hint, _Args&&... __args)
 {
   if constexpr (__unique_keys::value)
     return _M_emplace_uniq(std::forward<_Args>(__args)...).first;
   else
     return _M_emplace_multi(__hint, std::forward<_Args>(__args)...);
 }


      __ireturn_type
      insert(const value_type& __v)
      {
 if constexpr (__unique_keys::value)
   return _M_emplace_uniq(__v);
 else
   return _M_emplace_multi(cend(), __v);
      }

      iterator
      insert(const_iterator __hint, const value_type& __v)
      {
 if constexpr (__unique_keys::value)
   return _M_emplace_uniq(__v).first;
 else
   return _M_emplace_multi(__hint, __v);
      }

      __ireturn_type
      insert(value_type&& __v)
      {
 if constexpr (__unique_keys::value)
   return _M_emplace_uniq(std::move(__v));
 else
   return _M_emplace_multi(cend(), std::move(__v));
      }

      iterator
      insert(const_iterator __hint, value_type&& __v)
      {
 if constexpr (__unique_keys::value)
   return _M_emplace_uniq(std::move(__v)).first;
 else
   return _M_emplace_multi(__hint, std::move(__v));
      }


      template<typename _KType, typename... _Args>
 std::pair<iterator, bool>
 try_emplace(const_iterator, _KType&& __k, _Args&&... __args)
 {
   __hash_code __code;
   size_type __bkt;
   if (auto __loc = _M_locate(__k))
     return { iterator(__loc), false };
   else
     {
       __code = __loc._M_hash_code;
       __bkt = __loc._M_bucket_index;
     }

   _Scoped_node __node {
     this,
     std::piecewise_construct,
     std::forward_as_tuple(std::forward<_KType>(__k)),
     std::forward_as_tuple(std::forward<_Args>(__args)...)
   };
   auto __it = _M_insert_unique_node(__bkt, __code, __node._M_node);
   __node._M_node = nullptr;
   return { __it, true };
 }


      void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }

      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 {
   if constexpr (__unique_keys::value)
     for (; __first != __last; ++__first)
       _M_emplace_uniq(*__first);
   else
     return _M_insert_range_multi(__first, __last);
 }


      template<typename _Pair,
        typename = _Require<__not_<is_same<_Key, _Value>>,
       is_constructible<value_type, _Pair&&>>>
 __ireturn_type
 insert(_Pair&& __v)
 {
   if constexpr (__unique_keys::value)
     return _M_emplace_uniq(std::forward<_Pair>(__v));
   else
     return _M_emplace_multi(cend(), std::forward<_Pair>(__v));
 }


      template<typename _Pair,
        typename = _Require<__not_<is_same<_Key, _Value>>,
       is_constructible<value_type, _Pair&&>>>
 iterator
 insert(const_iterator __hint, _Pair&& __v)
 {
   if constexpr (__unique_keys::value)
     return _M_emplace_uniq(std::forward<_Pair>(__v));
   else
     return _M_emplace_multi(__hint, std::forward<_Pair>(__v));
 }
#pragma GCC diagnostic pop


      iterator
      erase(const_iterator);



      iterator
      erase(iterator __it)
      { return erase(const_iterator(__it)); }

      size_type
      erase(const key_type& __k);

      iterator
      erase(const_iterator, const_iterator);

      void
      clear() noexcept;



      void rehash(size_type __bkt_count);






      insert_return_type
      _M_reinsert_node(node_type&& __nh)
      {
 insert_return_type __ret;
 if (__nh.empty())
   __ret.position = end();
 else
   {
     do { if (std::__is_constant_evaluated() && !bool(get_allocator() == __nh.get_allocator())) std::__glibcxx_assert_fail(); } while (false);

     if (auto __loc = _M_locate(__nh._M_key()))
       {
  __ret.node = std::move(__nh);
  __ret.position = iterator(__loc);
  __ret.inserted = false;
       }
     else
       {
  auto __code = __loc._M_hash_code;
  auto __bkt = __loc._M_bucket_index;
  __ret.position
       = _M_insert_unique_node(__bkt, __code, __nh._M_ptr);
  __ret.inserted = true;
  __nh.release();
       }
   }
 return __ret;
      }


      iterator
      _M_reinsert_node_multi(const_iterator __hint, node_type&& __nh)
      {
 if (__nh.empty())
   return end();

 do { if (std::__is_constant_evaluated() && !bool(get_allocator() == __nh.get_allocator())) std::__glibcxx_assert_fail(); } while (false);

 const key_type& __k = __nh._M_key();
 auto __code = this->_M_hash_code(__k);
 auto __ret
   = _M_insert_multi_node(__hint._M_cur, __code, __nh._M_ptr);
 __nh.release();
 return __ret;
      }

    private:
      node_type
      _M_extract_node(size_t __bkt, __node_base_ptr __prev_n)
      {
 __node_ptr __n = static_cast<__node_ptr>(__prev_n->_M_nxt);
 if (__prev_n == _M_buckets[__bkt])
   _M_remove_bucket_begin(__bkt, __n->_M_next(),
      __n->_M_nxt ? _M_bucket_index(*__n->_M_next()) : 0);
 else if (__n->_M_nxt)
   {
     size_type __next_bkt = _M_bucket_index(*__n->_M_next());
     if (__next_bkt != __bkt)
       _M_buckets[__next_bkt] = __prev_n;
   }

 __prev_n->_M_nxt = __n->_M_nxt;
 __n->_M_nxt = nullptr;
 --_M_element_count;
 return { __n, this->_M_node_allocator() };
      }





      template<typename _H2>
 __hash_code
 _M_src_hash_code(const _H2&, const __node_value_type& __src_n) const
 {
   if constexpr (__and_<__hash_cached,
   is_same<_H2, _Hash>, is_empty<_Hash>>::value)

     return __src_n._M_hash_code;
   else
     return this->_M_hash_code(_ExtractKey{}(__src_n._M_v()));
 }

    public:

      node_type
      extract(const_iterator __pos)
      {
 size_t __bkt = _M_bucket_index(*__pos._M_cur);
 return _M_extract_node(__bkt,
          _M_get_previous_node(__bkt, __pos._M_cur));
      }


      node_type
      extract(const _Key& __k)
      {
 node_type __nh;
 __hash_code __code = this->_M_hash_code(__k);
 std::size_t __bkt = _M_bucket_index(__code);
 if (__node_base_ptr __prev_node = _M_find_before_node(__bkt, __k, __code))
   __nh = _M_extract_node(__bkt, __prev_node);
 return __nh;
      }


      void
      _M_merge_unique(_Hashtable& __src)
      {
 do { if (std::__is_constant_evaluated() && !bool(get_allocator() == __src.get_allocator())) std::__glibcxx_assert_fail(); } while (false);

 using _PTr = pointer_traits<__node_base_ptr>;

 auto __n_elt = __src.size();
 size_type __first = 1;


 auto __prev = _PTr::pointer_to(__src._M_before_begin);
 while (__n_elt--)
   {
     const auto __next = __prev->_M_nxt;
     const auto& __node = static_cast<__node_type&>(*__next);
     const key_type& __k = _ExtractKey{}(__node._M_v());
     const auto __loc = _M_locate(__k);
     if (__loc)
       {
  __prev = __next;
  continue;
       }

     auto __src_bkt = __src._M_bucket_index(__node);
     auto __nh = __src._M_extract_node(__src_bkt, __prev);
     _M_insert_unique_node(__loc._M_bucket_index, __loc._M_hash_code,
      __nh._M_ptr, __first * __n_elt + 1);
     __nh.release();
     __first = 0;
   }
      }


      template<typename _Compatible_Hashtable>
 void
 _M_merge_unique(_Compatible_Hashtable& __src)
 {
   static_assert(is_same_v<typename _Compatible_Hashtable::node_type,
       node_type>, "Node types are compatible");
   do { if (std::__is_constant_evaluated() && !bool(get_allocator() == __src.get_allocator())) std::__glibcxx_assert_fail(); } while (false);

   auto __n_elt = __src.size();
   size_type __first = 1;


   for (auto __i = __src.cbegin(), __end = __src.cend(); __i != __end;)
     {
       --__n_elt;
       auto __pos = __i++;
       const key_type& __k = _ExtractKey{}(*__pos);
       const auto __loc = _M_locate(__k);
       if (__loc)
  continue;

       auto __nh = __src.extract(__pos);
       _M_insert_unique_node(__loc._M_bucket_index,
        __loc._M_hash_code, __nh._M_ptr,
        __first * __n_elt + 1);
       __nh.release();
       __first = 0;
     }
 }


      void
      _M_merge_multi(_Hashtable& __src)
      {
 do { if (std::__is_constant_evaluated() && !bool(get_allocator() == __src.get_allocator())) std::__glibcxx_assert_fail(); } while (false);

 if (__src.size() == 0) [[__unlikely__]]
   return;

 using _PTr = pointer_traits<__node_base_ptr>;

 __node_ptr __hint = nullptr;
 this->reserve(size() + __src.size());


 auto __prev = _PTr::pointer_to(__src._M_before_begin);
 do
   {
     const auto& __node = static_cast<__node_type&>(*__prev->_M_nxt);

     auto __code = _M_hash_code_ext(__node);

     size_type __src_bkt = __src._M_bucket_index(__node);
     auto __nh = __src._M_extract_node(__src_bkt, __prev);
     __hint = _M_insert_multi_node(__hint, __code, __nh._M_ptr)._M_cur;
     __nh.release();
   }
 while (__prev->_M_nxt != nullptr);
      }


      template<typename _Compatible_Hashtable>
 void
 _M_merge_multi(_Compatible_Hashtable& __src)
 {
   static_assert(is_same_v<typename _Compatible_Hashtable::node_type,
       node_type>, "Node types are compatible");
   do { if (std::__is_constant_evaluated() && !bool(get_allocator() == __src.get_allocator())) std::__glibcxx_assert_fail(); } while (false);

   __node_ptr __hint = nullptr;
   this->reserve(size() + __src.size());


   for (auto __i = __src.cbegin(), __end = __src.cend(); __i != __end;)
     {
       auto __pos = __i++;
       __hash_code __code
  = _M_src_hash_code(__src.hash_function(), *__pos._M_cur);
       auto __nh = __src.extract(__pos);
       __hint = _M_insert_multi_node(__hint, __code, __nh._M_ptr)._M_cur;
       __nh.release();
     }
 }


      bool
      _M_equal(const _Hashtable& __other) const;

    private:

      void _M_rehash(size_type __bkt_count, true_type __uks);


      void _M_rehash(size_type __bkt_count, false_type __uks);
    };


  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _Hashtable(size_type __bkt_count_hint,
        const _Hash& __h, const _Equal& __eq, const allocator_type& __a)
    : _Hashtable(__h, __eq, __a)
    {
      auto __bkt_count = _M_rehash_policy._M_next_bkt(__bkt_count_hint);
      if (__bkt_count > _M_bucket_count)
 {
   _M_buckets = _M_allocate_buckets(__bkt_count);
   _M_bucket_count = __bkt_count;
 }
    }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    template<typename _InputIterator>
      inline
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
      _Hashtable(_InputIterator __f, _InputIterator __l,
   size_type __bkt_count_hint,
   const _Hash& __h, const _Equal& __eq,
   const allocator_type& __a, true_type )
      : _Hashtable(__bkt_count_hint, __h, __eq, __a)
      { this->insert(__f, __l); }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    template<typename _InputIterator>
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
      _Hashtable(_InputIterator __f, _InputIterator __l,
   size_type __bkt_count_hint,
   const _Hash& __h, const _Equal& __eq,
   const allocator_type& __a, false_type __uks)
      : _Hashtable(__h, __eq, __a)
      {
 auto __nb_elems = __detail::__distance_fw(__f, __l);
 auto __bkt_count =
   _M_rehash_policy._M_next_bkt(
     std::max(_M_rehash_policy._M_bkt_for_elements(__nb_elems),
       __bkt_count_hint));

 if (__bkt_count > _M_bucket_count)
   {
     _M_buckets = _M_allocate_buckets(__bkt_count);
     _M_bucket_count = __bkt_count;
   }

 for (; __f != __l; ++__f)
   _M_emplace_multi(cend(), *__f);
      }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    auto
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    operator=(const _Hashtable& __ht)
    -> _Hashtable&
    {
      if (&__ht == this)
 return *this;

      if (__node_alloc_traits::_S_propagate_on_copy_assign())
 {
   auto& __this_alloc = this->_M_node_allocator();
   auto& __that_alloc = __ht._M_node_allocator();
   if (!__node_alloc_traits::_S_always_equal()
       && __this_alloc != __that_alloc)
     {

       this->_M_deallocate_nodes(_M_begin());
       _M_before_begin._M_nxt = nullptr;
       _M_deallocate_buckets();
       _M_buckets = nullptr;
       std::__alloc_on_copy(__this_alloc, __that_alloc);
       __hashtable_base::operator=(__ht);
       _M_bucket_count = __ht._M_bucket_count;
       _M_element_count = __ht._M_element_count;
       _M_rehash_policy = __ht._M_rehash_policy;

       struct _Guard
       {
  ~_Guard() { if (_M_ht) _M_ht->_M_reset(); }
  _Hashtable* _M_ht;
       };


       _Guard __guard{this};
       _M_assign(__ht);
       __guard._M_ht = nullptr;
       return *this;
     }
   std::__alloc_on_copy(__this_alloc, __that_alloc);
 }


      _M_assign_elements(__ht);
      return *this;
    }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    template<typename _Ht>
      void
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
      _M_assign_elements(_Ht&& __ht)
      {
 using __reuse_or_alloc_node_gen_t =
   __detail::_ReuseOrAllocNode<__node_alloc_type>;

 __buckets_ptr __former_buckets = nullptr;
 std::size_t __former_bucket_count = _M_bucket_count;
 __rehash_guard_t __rehash_guard(_M_rehash_policy);

 if (_M_bucket_count != __ht._M_bucket_count)
   {
     __former_buckets = _M_buckets;
     _M_buckets = _M_allocate_buckets(__ht._M_bucket_count);
     _M_bucket_count = __ht._M_bucket_count;
   }
 else
   std::fill_n(_M_buckets, _M_bucket_count, nullptr);

 try
   {
     __hashtable_base::operator=(std::forward<_Ht>(__ht));
     _M_element_count = __ht._M_element_count;
     _M_rehash_policy = __ht._M_rehash_policy;
     __reuse_or_alloc_node_gen_t __roan(_M_begin(), *this);
     _M_before_begin._M_nxt = nullptr;
     _M_assign(std::forward<_Ht>(__ht), __roan);
     if (__former_buckets)
       _M_deallocate_buckets(__former_buckets, __former_bucket_count);
     __rehash_guard._M_guarded_obj = nullptr;
   }
 catch(...)
   {
     if (__former_buckets)
       {

  _M_deallocate_buckets();
  _M_buckets = __former_buckets;
  _M_bucket_count = __former_bucket_count;
       }
     std::fill_n(_M_buckets, _M_bucket_count, nullptr);
     throw;
   }
      }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    template<typename _Ht, typename _NodeGenerator>
      void
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
      _M_assign(_Ht&& __ht, _NodeGenerator& __node_gen)
      {
 struct _Guard
 {
   ~_Guard()
   {
     if (_M_ht)
       {
  _M_ht->clear();
  if (_M_dealloc_buckets)
    _M_ht->_M_deallocate_buckets();
       }
   }
   _Hashtable* _M_ht = nullptr;
   bool _M_dealloc_buckets = false;
 };
 _Guard __guard;

 if (!_M_buckets)
   {
     _M_buckets = _M_allocate_buckets(_M_bucket_count);
     __guard._M_dealloc_buckets = true;
   }

 if (!__ht._M_before_begin._M_nxt)
   return;

 __guard._M_ht = this;

 using _FromVal = __conditional_t<is_lvalue_reference<_Ht>::value,
      const value_type&, value_type&&>;



 __node_ptr __ht_n = __ht._M_begin();
 __node_ptr __this_n
   = __node_gen(static_cast<_FromVal>(__ht_n->_M_v()));
 _M_copy_code(*__this_n, *__ht_n);
 _M_update_bbegin(__this_n);


 __node_ptr __prev_n = __this_n;
 for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
   {
     __this_n = __node_gen(static_cast<_FromVal>(__ht_n->_M_v()));
     __prev_n->_M_nxt = __this_n;
     _M_copy_code(*__this_n, *__ht_n);
     size_type __bkt = _M_bucket_index(*__this_n);
     if (!_M_buckets[__bkt])
       _M_buckets[__bkt] = __prev_n;
     __prev_n = __this_n;
   }
 __guard._M_ht = nullptr;
      }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_reset() noexcept
    {
      _M_rehash_policy._M_reset();
      _M_bucket_count = 1;
      _M_single_bucket = nullptr;
      _M_buckets = &_M_single_bucket;
      _M_before_begin._M_nxt = nullptr;
      _M_element_count = 0;
    }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_move_assign(_Hashtable&& __ht, true_type)
    {
      if (__builtin_expect(std::__addressof(__ht) == this, false))
 return;

      this->_M_deallocate_nodes(_M_begin());
      _M_deallocate_buckets();
      __hashtable_base::operator=(std::move(__ht));
      _M_rehash_policy = __ht._M_rehash_policy;
      if (!__ht._M_uses_single_bucket())
 _M_buckets = __ht._M_buckets;
      else
 {
   _M_buckets = &_M_single_bucket;
   _M_single_bucket = __ht._M_single_bucket;
 }

      _M_bucket_count = __ht._M_bucket_count;
      _M_before_begin._M_nxt = __ht._M_before_begin._M_nxt;
      _M_element_count = __ht._M_element_count;
      std::__alloc_on_move(this->_M_node_allocator(), __ht._M_node_allocator());


      _M_update_bbegin();
      __ht._M_reset();
    }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_move_assign(_Hashtable&& __ht, false_type)
    {
      if (__ht._M_node_allocator() == this->_M_node_allocator())
 _M_move_assign(std::move(__ht), true_type{});
      else
 {

   _M_assign_elements(std::move(__ht));
   __ht.clear();
 }
    }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    inline
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _Hashtable(const _Hashtable& __ht)
    : __hashtable_base(__ht),
      __map_base(__ht),
      __rehash_base(__ht),
      __hashtable_alloc(
 __node_alloc_traits::_S_select_on_copy(__ht._M_node_allocator())),
      __enable_default_ctor(__ht),
      _M_buckets(nullptr),
      _M_bucket_count(__ht._M_bucket_count),
      _M_element_count(__ht._M_element_count),
      _M_rehash_policy(__ht._M_rehash_policy)
    {
      _M_assign(__ht);
    }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _Hashtable(_Hashtable&& __ht, __node_alloc_type&& __a,
        true_type )
    noexcept(_S_nothrow_move())
    : __hashtable_base(__ht),
      __map_base(__ht),
      __rehash_base(__ht),
      __hashtable_alloc(std::move(__a)),
      __enable_default_ctor(__ht),
      _M_buckets(__ht._M_buckets),
      _M_bucket_count(__ht._M_bucket_count),
      _M_before_begin(__ht._M_before_begin._M_nxt),
      _M_element_count(__ht._M_element_count),
      _M_rehash_policy(__ht._M_rehash_policy)
    {

      if (__ht._M_uses_single_bucket())
 {
   _M_buckets = &_M_single_bucket;
   _M_single_bucket = __ht._M_single_bucket;
 }


      _M_update_bbegin();

      __ht._M_reset();
    }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    inline
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _Hashtable(const _Hashtable& __ht, const allocator_type& __a)
    : __hashtable_base(__ht),
      __map_base(__ht),
      __rehash_base(__ht),
      __hashtable_alloc(__node_alloc_type(__a)),
      __enable_default_ctor(__ht),
      _M_buckets(),
      _M_bucket_count(__ht._M_bucket_count),
      _M_element_count(__ht._M_element_count),
      _M_rehash_policy(__ht._M_rehash_policy)
    {
      _M_assign(__ht);
    }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _Hashtable(_Hashtable&& __ht, __node_alloc_type&& __a,
        false_type )
    : __hashtable_base(__ht),
      __map_base(__ht),
      __rehash_base(__ht),
      __hashtable_alloc(std::move(__a)),
      __enable_default_ctor(__ht),
      _M_buckets(nullptr),
      _M_bucket_count(__ht._M_bucket_count),
      _M_element_count(__ht._M_element_count),
      _M_rehash_policy(__ht._M_rehash_policy)
    {
      if (__ht._M_node_allocator() == this->_M_node_allocator())
 {
   if (__ht._M_uses_single_bucket())
     {
       _M_buckets = &_M_single_bucket;
       _M_single_bucket = __ht._M_single_bucket;
     }
   else
     _M_buckets = __ht._M_buckets;



   _M_update_bbegin(__ht._M_begin());

   __ht._M_reset();
 }
      else
 {
   using _Fwd_Ht = __conditional_t<
     __move_if_noexcept_cond<value_type>::value,
     const _Hashtable&, _Hashtable&&>;
   _M_assign(std::forward<_Fwd_Ht>(__ht));
   __ht.clear();
 }
    }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    ~_Hashtable() noexcept
    {





      static_assert(noexcept(declval<const __hash_code_base_access&>()
   ._M_bucket_index(declval<const __node_value_type&>(),
      (std::size_t)0)),
      "Cache the hash code or qualify your functors involved"
      " in hash code and bucket index computation with noexcept");

      this->_M_deallocate_nodes(_M_begin());
      _M_deallocate_buckets();
    }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    swap(_Hashtable& __x)
    noexcept(__and_<__is_nothrow_swappable<_Hash>,
   __is_nothrow_swappable<_Equal>>::value)
    {
      using std::swap;
      swap(__hash_code_base::_M_hash._M_obj,
    __x.__hash_code_base::_M_hash._M_obj);
      swap(__hashtable_base::_M_equal._M_obj,
    __x.__hashtable_base::_M_equal._M_obj);

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
      if constexpr (__node_alloc_traits::propagate_on_container_swap::value)
 swap(this->_M_node_allocator(), __x._M_node_allocator());
#pragma GCC diagnostic pop

      std::swap(_M_rehash_policy, __x._M_rehash_policy);


      if (this->_M_uses_single_bucket())
 {
   if (!__x._M_uses_single_bucket())
     {
       _M_buckets = __x._M_buckets;
       __x._M_buckets = &__x._M_single_bucket;
     }
 }
      else if (__x._M_uses_single_bucket())
 {
   __x._M_buckets = _M_buckets;
   _M_buckets = &_M_single_bucket;
 }
      else
 std::swap(_M_buckets, __x._M_buckets);

      std::swap(_M_bucket_count, __x._M_bucket_count);
      std::swap(_M_before_begin._M_nxt, __x._M_before_begin._M_nxt);
      std::swap(_M_element_count, __x._M_element_count);
      std::swap(_M_single_bucket, __x._M_single_bucket);



      _M_update_bbegin();
      __x._M_update_bbegin();
    }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    auto
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    find(const key_type& __k)
    -> iterator
    { return iterator(_M_locate(__k)); }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    auto
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    find(const key_type& __k) const
    -> const_iterator
    { return const_iterator(_M_locate(__k)); }
# 1981 "/usr/include/c++/15.1.1/bits/hashtable.h" 3
  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    auto
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    count(const key_type& __k) const
    -> size_type
    {
      auto __it = find(__k);
      if (!__it._M_cur)
 return 0;

      if (__unique_keys::value)
 return 1;

      size_type __result = 1;
      for (auto __ref = __it++;
    __it._M_cur && this->_M_node_equals(*__ref._M_cur, *__it._M_cur);
    ++__it)
 ++__result;

      return __result;
    }
# 2054 "/usr/include/c++/15.1.1/bits/hashtable.h" 3
  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    auto
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    equal_range(const key_type& __k)
    -> pair<iterator, iterator>
    {
      auto __ite = find(__k);
      if (!__ite._M_cur)
 return { __ite, __ite };

      auto __beg = __ite++;
      if (__unique_keys::value)
 return { __beg, __ite };

      while (__ite._M_cur && this->_M_node_equals(*__beg._M_cur, *__ite._M_cur))
 ++__ite;

      return { __beg, __ite };
    }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    auto
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    equal_range(const key_type& __k) const
    -> pair<const_iterator, const_iterator>
    {
      auto __ite = find(__k);
      if (!__ite._M_cur)
 return { __ite, __ite };

      auto __beg = __ite++;
      if (__unique_keys::value)
 return { __beg, __ite };

      while (__ite._M_cur && this->_M_node_equals(*__beg._M_cur, *__ite._M_cur))
 ++__ite;

      return { __beg, __ite };
    }
# 2194 "/usr/include/c++/15.1.1/bits/hashtable.h" 3
  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    auto
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_find_before_node(size_type __bkt, const key_type& __k,
   __hash_code __code) const
    -> __node_base_ptr
    {
      __node_base_ptr __prev_p = _M_buckets[__bkt];
      if (!__prev_p)
 return nullptr;

      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
    __p = __p->_M_next())
 {
   if (this->_M_equals(__k, __code, *__p))
     return __prev_p;

   if (__builtin_expect (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt, 0))
     break;
   __prev_p = __p;
 }

      return nullptr;
    }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    template<typename _Kt>
      auto
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
      _M_find_before_node_tr(size_type __bkt, const _Kt& __k,
        __hash_code __code) const
      -> __node_base_ptr
      {
 __node_base_ptr __prev_p = _M_buckets[__bkt];
 if (!__prev_p)
   return nullptr;

 for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
      __p = __p->_M_next())
   {
     if (this->_M_equals_tr(__k, __code, *__p))
       return __prev_p;

     if (__builtin_expect (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt, 0))
       break;
     __prev_p = __p;
   }

 return nullptr;
      }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    inline auto
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_locate(const key_type& __k) const
    -> __location_type
    {
      __location_type __loc;
      const auto __size = size();

      if (__size <= __small_size_threshold())
 {
   __loc._M_before = pointer_traits<__node_base_ptr>::
        pointer_to(const_cast<__node_base&>(_M_before_begin));
   while (__loc._M_before->_M_nxt)
     {
       if (this->_M_key_equals(__k, *__loc._M_node()))
  return __loc;
       __loc._M_before = __loc._M_before->_M_nxt;
     }
   __loc._M_before = nullptr;
 }

      __loc._M_hash_code = this->_M_hash_code(__k);
      __loc._M_bucket_index = _M_bucket_index(__loc._M_hash_code);

      if (__size > __small_size_threshold())
 __loc._M_before = _M_find_before_node(__loc._M_bucket_index, __k,
           __loc._M_hash_code);

      return __loc;
    }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    auto
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_get_previous_node(size_type __bkt, __node_ptr __n)
    -> __node_base_ptr
    {
      __node_base_ptr __prev_n = _M_buckets[__bkt];
      while (__prev_n->_M_nxt != __n)
 __prev_n = __prev_n->_M_nxt;
      return __prev_n;
    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    template<typename... _Args>
      auto
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
      _M_emplace_uniq(_Args&&... __args)
      -> pair<iterator, bool>
      {
 const key_type* __kp = nullptr;

 if constexpr (sizeof...(_Args) == 1)
   {
     if constexpr (__is_key_type<_Args...>)
       {
  const auto& __key = _ExtractKey{}(__args...);
  __kp = std::__addressof(__key);
       }
   }
 else if constexpr (sizeof...(_Args) == 2)
   {
     if constexpr (__is_key_type<pair<const _Args&...>>)
       {
  pair<const _Args&...> __refs(__args...);
  const auto& __key = _ExtractKey{}(__refs);
  __kp = std::__addressof(__key);
       }
   }

 _Scoped_node __node { __node_ptr(), this };
 __hash_code __code = 0;
 size_type __bkt = 0;

 if (__kp == nullptr)
   {

     __node._M_node
    = this->_M_allocate_node(std::forward<_Args>(__args)...);
     const key_type& __key = _ExtractKey{}(__node._M_node->_M_v());
     __kp = std::__addressof(__key);
   }

 if (auto __loc = _M_locate(*__kp))

   return { iterator(__loc), false };
 else
   {
     __code = __loc._M_hash_code;
     __bkt = __loc._M_bucket_index;
   }

 if (!__node._M_node)
   __node._M_node
  = this->_M_allocate_node(std::forward<_Args>(__args)...);


 auto __pos = _M_insert_unique_node(__bkt, __code, __node._M_node);
 __node._M_node = nullptr;
 return { __pos, true };
      }
#pragma GCC diagnostic pop

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    template<typename... _Args>
      auto
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
      _M_emplace_multi(const_iterator __hint, _Args&&... __args)
      -> iterator
      {

 _Scoped_node __node { this, std::forward<_Args>(__args)... };
 const key_type& __k = _ExtractKey{}(__node._M_node->_M_v());

 auto __res = this->_M_compute_hash_code(__hint._M_cur, __k);
 auto __pos
   = _M_insert_multi_node(__res.first, __res.second, __node._M_node);
 __node._M_node = nullptr;
 return __pos;
      }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
   void
  _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
      _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
  _M_rehash_insert(size_type __n)
  {
    using __pair_type = std::pair<bool, std::size_t>;
    if (__n == 0)
      return;

    __rehash_guard_t __rehash_guard(_M_rehash_policy);
    __pair_type __do_rehash
      = _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, __n);

    if (__do_rehash.first)
      _M_rehash(__do_rehash.second, false_type{});

    __rehash_guard._M_guarded_obj = nullptr;
  }


  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    template<typename _InputIterator>
      void
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
      _M_insert_range_multi(_InputIterator __first, _InputIterator __last)
      {
 _M_rehash_insert(__detail::__distance_fw(__first, __last));
 for (; __first != __last; ++__first)
   _M_emplace_multi(cend(), *__first);
      }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    auto
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_compute_hash_code(__node_ptr __hint, const key_type& __k) const
    -> pair<__node_ptr, __hash_code>
    {
      if (size() <= __small_size_threshold())
 {
   if (__hint)
     {
       for (auto __it = __hint; __it; __it = __it->_M_next())
  if (this->_M_key_equals(__k, *__it))
    return { __it, this->_M_hash_code(*__it) };
     }

   for (auto __it = _M_begin(); __it != __hint; __it = __it->_M_next())
     if (this->_M_key_equals(__k, *__it))
       return { __it, this->_M_hash_code(*__it) };

   __hint = nullptr;
 }

      return { __hint, this->_M_hash_code(__k) };
    }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    auto
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_insert_unique_node(size_type __bkt, __hash_code __code,
     __node_ptr __node, size_type __n_elt)
    -> iterator
    {
      __rehash_guard_t __rehash_guard(_M_rehash_policy);
      std::pair<bool, std::size_t> __do_rehash
 = _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count,
       __n_elt);

      if (__do_rehash.first)
 {
   _M_rehash(__do_rehash.second, true_type{});
   __bkt = _M_bucket_index(__code);
 }

      __rehash_guard._M_guarded_obj = nullptr;
      _M_store_code(*__node, __code);


      _M_insert_bucket_begin(__bkt, __node);
      ++_M_element_count;
      return iterator(__node);
    }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    auto
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_insert_multi_node(__node_ptr __hint,
    __hash_code __code, __node_ptr __node)
    -> iterator
    {
      __rehash_guard_t __rehash_guard(_M_rehash_policy);
      std::pair<bool, std::size_t> __do_rehash
 = _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);

      if (__do_rehash.first)
 _M_rehash(__do_rehash.second, false_type{});

      __rehash_guard._M_guarded_obj = nullptr;
      _M_store_code(*__node, __code);
      const key_type& __k = _ExtractKey{}(__node->_M_v());
      size_type __bkt = _M_bucket_index(__code);



      __node_base_ptr __prev
 = __builtin_expect(__hint != nullptr, false)
   && this->_M_equals(__k, __code, *__hint)
     ? __hint
     : _M_find_before_node(__bkt, __k, __code);

      if (__prev)
 {

   __node->_M_nxt = __prev->_M_nxt;
   __prev->_M_nxt = __node;
   if (__builtin_expect(__prev == __hint, false))


     if (__node->_M_nxt
  && !this->_M_equals(__k, __code, *__node->_M_next()))
       {
  size_type __next_bkt = _M_bucket_index(*__node->_M_next());
  if (__next_bkt != __bkt)
    _M_buckets[__next_bkt] = __node;
       }
 }
      else



 _M_insert_bucket_begin(__bkt, __node);
      ++_M_element_count;
      return iterator(__node);
    }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    auto
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    erase(const_iterator __it)
    -> iterator
    {
      __node_ptr __n = __it._M_cur;
      std::size_t __bkt = _M_bucket_index(*__n);




      __node_base_ptr __prev_n = _M_get_previous_node(__bkt, __n);
      return _M_erase(__bkt, __prev_n, __n);
    }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    auto
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_erase(size_type __bkt, __node_base_ptr __prev_n, __node_ptr __n)
    -> iterator
    {
      if (__prev_n == _M_buckets[__bkt])
 _M_remove_bucket_begin(__bkt, __n->_M_next(),
   __n->_M_nxt ? _M_bucket_index(*__n->_M_next()) : 0);
      else if (__n->_M_nxt)
 {
   size_type __next_bkt = _M_bucket_index(*__n->_M_next());
   if (__next_bkt != __bkt)
     _M_buckets[__next_bkt] = __prev_n;
 }

      __prev_n->_M_nxt = __n->_M_nxt;
      iterator __result(__n->_M_next());
      this->_M_deallocate_node(__n);
      --_M_element_count;

      return __result;
    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    auto
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    erase(const key_type& __k)
    -> size_type
    {
      auto __loc = _M_locate(__k);
      if (!__loc)
 return 0;

      __node_base_ptr __prev_n = __loc._M_before;
      __node_ptr __n = __loc._M_node();
      auto __bkt = __loc._M_bucket_index;
      if (__bkt == size_type(-1))
 __bkt = _M_bucket_index(*__n);

      if constexpr (__unique_keys::value)
 {
   _M_erase(__bkt, __prev_n, __n);
   return 1;
 }
      else
 {






   __node_ptr __n_last = __n->_M_next();
   while (__n_last && this->_M_node_equals(*__n, *__n_last))
     __n_last = __n_last->_M_next();

   std::size_t __n_last_bkt
     = __n_last ? _M_bucket_index(*__n_last) : __bkt;


   size_type __result = 0;
   do
     {
       __node_ptr __p = __n->_M_next();
       this->_M_deallocate_node(__n);
       __n = __p;
       ++__result;
     }
   while (__n != __n_last);

   _M_element_count -= __result;
   if (__prev_n == _M_buckets[__bkt])
     _M_remove_bucket_begin(__bkt, __n_last, __n_last_bkt);
   else if (__n_last_bkt != __bkt)
     _M_buckets[__n_last_bkt] = __prev_n;
   __prev_n->_M_nxt = __n_last;
   return __result;
 }
    }
#pragma GCC diagnostic pop

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    auto
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    erase(const_iterator __first, const_iterator __last)
    -> iterator
    {
      __node_ptr __n = __first._M_cur;
      __node_ptr __last_n = __last._M_cur;
      if (__n == __last_n)
 return iterator(__n);

      std::size_t __bkt = _M_bucket_index(*__n);

      __node_base_ptr __prev_n = _M_get_previous_node(__bkt, __n);
      bool __is_bucket_begin = __n == _M_bucket_begin(__bkt);
      std::size_t __n_bkt = __bkt;
      for (;;)
 {
   do
     {
       __node_ptr __tmp = __n;
       __n = __n->_M_next();
       this->_M_deallocate_node(__tmp);
       --_M_element_count;
       if (!__n)
  break;
       __n_bkt = _M_bucket_index(*__n);
     }
   while (__n != __last_n && __n_bkt == __bkt);
   if (__is_bucket_begin)
     _M_remove_bucket_begin(__bkt, __n, __n_bkt);
   if (__n == __last_n)
     break;
   __is_bucket_begin = true;
   __bkt = __n_bkt;
 }

      if (__n && (__n_bkt != __bkt || __is_bucket_begin))
 _M_buckets[__n_bkt] = __prev_n;
      __prev_n->_M_nxt = __n;
      return iterator(__n);
    }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
      std::fill_n(_M_buckets, _M_bucket_count, nullptr);
      _M_element_count = 0;
      _M_before_begin._M_nxt = nullptr;
    }

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    rehash(size_type __bkt_count)
    {
      __rehash_guard_t __rehash_guard(_M_rehash_policy);
      __bkt_count
 = std::max(_M_rehash_policy._M_bkt_for_elements(_M_element_count + 1),
     __bkt_count);
      __bkt_count = _M_rehash_policy._M_next_bkt(__bkt_count);

      if (__bkt_count != _M_bucket_count)
 {
   _M_rehash(__bkt_count, __unique_keys{});
   __rehash_guard._M_guarded_obj = nullptr;
 }
    }


  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash(size_type __bkt_count, true_type )
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
      __node_ptr __p = _M_begin();
      _M_before_begin._M_nxt = nullptr;
      std::size_t __bbegin_bkt = 0;
      while (__p)
 {
   __node_ptr __next = __p->_M_next();
   std::size_t __bkt
     = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
   if (!__new_buckets[__bkt])
     {
       __p->_M_nxt = _M_before_begin._M_nxt;
       _M_before_begin._M_nxt = __p;
       __new_buckets[__bkt] = &_M_before_begin;
       if (__p->_M_nxt)
  __new_buckets[__bbegin_bkt] = __p;
       __bbegin_bkt = __bkt;
     }
   else
     {
       __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
       __new_buckets[__bkt]->_M_nxt = __p;
     }

   __p = __next;
 }

      _M_deallocate_buckets();
      _M_bucket_count = __bkt_count;
      _M_buckets = __new_buckets;
    }



  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash(size_type __bkt_count, false_type )
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
      __node_ptr __p = _M_begin();
      _M_before_begin._M_nxt = nullptr;
      std::size_t __bbegin_bkt = 0;
      std::size_t __prev_bkt = 0;
      __node_ptr __prev_p = nullptr;
      bool __check_bucket = false;

      while (__p)
 {
   __node_ptr __next = __p->_M_next();
   std::size_t __bkt
     = __hash_code_base::_M_bucket_index(*__p, __bkt_count);

   if (__prev_p && __prev_bkt == __bkt)
     {



       __p->_M_nxt = __prev_p->_M_nxt;
       __prev_p->_M_nxt = __p;






       __check_bucket = true;
     }
   else
     {
       if (__check_bucket)
  {


    if (__prev_p->_M_nxt)
      {
        std::size_t __next_bkt
   = __hash_code_base::_M_bucket_index(
     *__prev_p->_M_next(), __bkt_count);
        if (__next_bkt != __prev_bkt)
   __new_buckets[__next_bkt] = __prev_p;
      }
    __check_bucket = false;
  }

       if (!__new_buckets[__bkt])
  {
    __p->_M_nxt = _M_before_begin._M_nxt;
    _M_before_begin._M_nxt = __p;
    __new_buckets[__bkt] = &_M_before_begin;
    if (__p->_M_nxt)
      __new_buckets[__bbegin_bkt] = __p;
    __bbegin_bkt = __bkt;
  }
       else
  {
    __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
    __new_buckets[__bkt]->_M_nxt = __p;
  }
     }
   __prev_p = __p;
   __prev_bkt = __bkt;
   __p = __next;
 }

      if (__check_bucket && __prev_p->_M_nxt)
 {
   std::size_t __next_bkt
     = __hash_code_base::_M_bucket_index(*__prev_p->_M_next(),
      __bkt_count);
   if (__next_bkt != __prev_bkt)
     __new_buckets[__next_bkt] = __prev_p;
 }

      _M_deallocate_buckets();
      _M_bucket_count = __bkt_count;
      _M_buckets = __new_buckets;
    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"




  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _Hash, typename _RangeHash, typename _Unused,
    typename _RehashPolicy, typename _Traits>
    bool
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_equal(const _Hashtable& __other) const
    {
      if (size() != __other.size())
 return false;

      if constexpr (__unique_keys::value)
 for (auto __x_n = _M_begin(); __x_n; __x_n = __x_n->_M_next())
   {
     std::size_t __ybkt = __other._M_bucket_index_ext(*__x_n);
     auto __prev_n = __other._M_buckets[__ybkt];
     if (!__prev_n)
       return false;

     for (__node_ptr __n = static_cast<__node_ptr>(__prev_n->_M_nxt);;
   __n = __n->_M_next())
       {
  if (__n->_M_v() == __x_n->_M_v())
    break;

  if (!__n->_M_nxt
      || __other._M_bucket_index(*__n->_M_next()) != __ybkt)
    return false;
       }
   }
      else
 for (auto __x_n = _M_begin(); __x_n;)
   {
     std::size_t __x_count = 1;
     auto __x_n_end = __x_n->_M_next();
     for (; __x_n_end
     && key_eq()(_ExtractKey{}(__x_n->_M_v()),
          _ExtractKey{}(__x_n_end->_M_v()));
   __x_n_end = __x_n_end->_M_next())
       ++__x_count;

     std::size_t __ybkt = __other._M_bucket_index_ext(*__x_n);
     auto __y_prev_n = __other._M_buckets[__ybkt];
     if (!__y_prev_n)
       return false;

     __node_ptr __y_n = static_cast<__node_ptr>(__y_prev_n->_M_nxt);
     for (;;)
       {
  if (key_eq()(_ExtractKey{}(__y_n->_M_v()),
        _ExtractKey{}(__x_n->_M_v())))
    break;

  auto __y_ref_n = __y_n;
  for (__y_n = __y_n->_M_next(); __y_n; __y_n = __y_n->_M_next())
    if (!__other._M_node_equals(*__y_ref_n, *__y_n))
      break;

  if (!__y_n || __other._M_bucket_index(*__y_n) != __ybkt)
    return false;
       }

     auto __y_n_end = __y_n;
     for (; __y_n_end; __y_n_end = __y_n_end->_M_next())
       if (--__x_count == 0)
  break;

     if (__x_count != 0)
       return false;

     const_iterator __itx(__x_n), __itx_end(__x_n_end);
     const_iterator __ity(__y_n);
     if (!std::is_permutation(__itx, __itx_end, __ity))
       return false;

     __x_n = __x_n_end;
   }

      return true;
    }
#pragma GCC diagnostic pop


  template<typename, typename, typename> class _Hash_merge_helper { };




  template<typename _Hash>
    using _RequireNotAllocatorOrIntegral
      = __enable_if_t<!__or_<is_integral<_Hash>, __is_allocator<_Hash>>::value>;




}

#pragma GCC diagnostic pop
# 34 "/usr/include/c++/15.1.1/bits/unordered_map.h" 2 3







namespace std __attribute__ ((__visibility__ ("default")))
{




  template<bool _Cache>
    using __umap_traits = __detail::_Hashtable_traits<_Cache, false, true>;

  template<typename _Key,
    typename _Tp,
    typename _Hash = hash<_Key>,
    typename _Pred = std::equal_to<_Key>,
    typename _Alloc = std::allocator<std::pair<const _Key, _Tp> >,
    typename _Tr = __umap_traits<__cache_default<_Key, _Hash>::value>>
    using __umap_hashtable = _Hashtable<_Key, std::pair<const _Key, _Tp>,
                                        _Alloc, __detail::_Select1st,
            _Pred, _Hash,
            __detail::_Mod_range_hashing,
            __detail::_Default_ranged_hash,
            __detail::_Prime_rehash_policy, _Tr>;


  template<bool _Cache>
    using __ummap_traits = __detail::_Hashtable_traits<_Cache, false, false>;

  template<typename _Key,
    typename _Tp,
    typename _Hash = hash<_Key>,
    typename _Pred = std::equal_to<_Key>,
    typename _Alloc = std::allocator<std::pair<const _Key, _Tp> >,
    typename _Tr = __ummap_traits<__cache_default<_Key, _Hash>::value>>
    using __ummap_hashtable = _Hashtable<_Key, std::pair<const _Key, _Tp>,
      _Alloc, __detail::_Select1st,
      _Pred, _Hash,
      __detail::_Mod_range_hashing,
      __detail::_Default_ranged_hash,
      __detail::_Prime_rehash_policy, _Tr>;

  template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
    class unordered_multimap;
# 108 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
  template<typename _Key, typename _Tp,
    typename _Hash = hash<_Key>,
    typename _Pred = equal_to<_Key>,
    typename _Alloc = allocator<std::pair<const _Key, _Tp>>>
    class unordered_map
    {
      typedef __umap_hashtable<_Key, _Tp, _Hash, _Pred, _Alloc> _Hashtable;
      _Hashtable _M_h;

    public:



      typedef typename _Hashtable::key_type key_type;
      typedef typename _Hashtable::value_type value_type;
      typedef typename _Hashtable::mapped_type mapped_type;
      typedef typename _Hashtable::hasher hasher;
      typedef typename _Hashtable::key_equal key_equal;
      typedef typename _Hashtable::allocator_type allocator_type;




      typedef typename _Hashtable::pointer pointer;
      typedef typename _Hashtable::const_pointer const_pointer;
      typedef typename _Hashtable::reference reference;
      typedef typename _Hashtable::const_reference const_reference;
      typedef typename _Hashtable::iterator iterator;
      typedef typename _Hashtable::const_iterator const_iterator;
      typedef typename _Hashtable::local_iterator local_iterator;
      typedef typename _Hashtable::const_local_iterator const_local_iterator;
      typedef typename _Hashtable::size_type size_type;
      typedef typename _Hashtable::difference_type difference_type;



      using node_type = typename _Hashtable::node_type;
      using insert_return_type = typename _Hashtable::insert_return_type;





      unordered_map() = default;
# 160 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      explicit
      unordered_map(size_type __n,
      const hasher& __hf = hasher(),
      const key_equal& __eql = key_equal(),
      const allocator_type& __a = allocator_type())
      : _M_h(__n, __hf, __eql, __a)
      { }
# 181 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      template<typename _InputIterator>
 unordered_map(_InputIterator __first, _InputIterator __last,
        size_type __n = 0,
        const hasher& __hf = hasher(),
        const key_equal& __eql = key_equal(),
        const allocator_type& __a = allocator_type())
 : _M_h(__first, __last, __n, __hf, __eql, __a)
 { }


      unordered_map(const unordered_map&) = default;


      unordered_map(unordered_map&&) = default;





      explicit
      unordered_map(const allocator_type& __a)
 : _M_h(__a)
      { }






      unordered_map(const unordered_map& __umap,
      const allocator_type& __a)
      : _M_h(__umap._M_h, __a)
      { }






      unordered_map(unordered_map&& __umap,
      const allocator_type& __a)
 noexcept( noexcept(_Hashtable(std::move(__umap._M_h), __a)) )
      : _M_h(std::move(__umap._M_h), __a)
      { }
# 237 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      unordered_map(initializer_list<value_type> __l,
      size_type __n = 0,
      const hasher& __hf = hasher(),
      const key_equal& __eql = key_equal(),
      const allocator_type& __a = allocator_type())
      : _M_h(__l, __n, __hf, __eql, __a)
      { }

      unordered_map(size_type __n, const allocator_type& __a)
      : unordered_map(__n, hasher(), key_equal(), __a)
      { }

      unordered_map(size_type __n, const hasher& __hf,
      const allocator_type& __a)
      : unordered_map(__n, __hf, key_equal(), __a)
      { }

      template<typename _InputIterator>
 unordered_map(_InputIterator __first, _InputIterator __last,
        size_type __n,
        const allocator_type& __a)
 : unordered_map(__first, __last, __n, hasher(), key_equal(), __a)
 { }

      template<typename _InputIterator>
 unordered_map(_InputIterator __first, _InputIterator __last,
        size_type __n, const hasher& __hf,
        const allocator_type& __a)
   : unordered_map(__first, __last, __n, __hf, key_equal(), __a)
 { }

      unordered_map(initializer_list<value_type> __l,
      size_type __n,
      const allocator_type& __a)
      : unordered_map(__l, __n, hasher(), key_equal(), __a)
      { }

      unordered_map(initializer_list<value_type> __l,
      size_type __n, const hasher& __hf,
      const allocator_type& __a)
      : unordered_map(__l, __n, __hf, key_equal(), __a)
      { }
# 324 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      unordered_map&
      operator=(const unordered_map&) = default;


      unordered_map&
      operator=(unordered_map&&) = default;
# 342 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      unordered_map&
      operator=(initializer_list<value_type> __l)
      {
 _M_h = __l;
 return *this;
      }


      allocator_type
      get_allocator() const noexcept
      { return _M_h.get_allocator(); }




      [[__nodiscard__]] bool
      empty() const noexcept
      { return _M_h.empty(); }


      size_type
      size() const noexcept
      { return _M_h.size(); }


      size_type
      max_size() const noexcept
      { return _M_h.max_size(); }







      iterator
      begin() noexcept
      { return _M_h.begin(); }






      const_iterator
      begin() const noexcept
      { return _M_h.begin(); }

      const_iterator
      cbegin() const noexcept
      { return _M_h.begin(); }






      iterator
      end() noexcept
      { return _M_h.end(); }






      const_iterator
      end() const noexcept
      { return _M_h.end(); }

      const_iterator
      cend() const noexcept
      { return _M_h.end(); }
# 439 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      template<typename... _Args>
 std::pair<iterator, bool>
 emplace(_Args&&... __args)
 { return _M_h.emplace(std::forward<_Args>(__args)...); }
# 470 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 { return _M_h.emplace_hint(__pos, std::forward<_Args>(__args)...); }



      node_type
      extract(const_iterator __pos)
      {
 do { if (std::__is_constant_evaluated() && !bool(__pos != end())) std::__glibcxx_assert_fail(); } while (false);
 return _M_h.extract(__pos);
      }


      node_type
      extract(const key_type& __key)
      { return _M_h.extract(__key); }


      insert_return_type
      insert(node_type&& __nh)
      { return _M_h._M_reinsert_node(std::move(__nh)); }


      iterator
      insert(const_iterator, node_type&& __nh)
      { return _M_h._M_reinsert_node(std::move(__nh)).position; }
# 523 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      template <typename... _Args>
 pair<iterator, bool>
 try_emplace(const key_type& __k, _Args&&... __args)
 {
   return _M_h.try_emplace(cend(), __k, std::forward<_Args>(__args)...);
 }


      template <typename... _Args>
 pair<iterator, bool>
 try_emplace(key_type&& __k, _Args&&... __args)
 {
   return _M_h.try_emplace(cend(), std::move(__k),
      std::forward<_Args>(__args)...);
 }
# 567 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      template <typename... _Args>
 iterator
 try_emplace(const_iterator __hint, const key_type& __k,
      _Args&&... __args)
 {
   return _M_h.try_emplace(__hint, __k,
      std::forward<_Args>(__args)...).first;
 }


      template <typename... _Args>
 iterator
 try_emplace(const_iterator __hint, key_type&& __k, _Args&&... __args)
 {
   return _M_h.try_emplace(__hint, std::move(__k),
      std::forward<_Args>(__args)...).first;
 }
# 604 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      std::pair<iterator, bool>
      insert(const value_type& __x)
      { return _M_h.insert(__x); }



      std::pair<iterator, bool>
      insert(value_type&& __x)
      { return _M_h.insert(std::move(__x)); }

      template<typename _Pair>
 __enable_if_t<is_constructible<value_type, _Pair&&>::value,
        pair<iterator, bool>>
 insert(_Pair&& __x)
        { return _M_h.emplace(std::forward<_Pair>(__x)); }
# 643 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      iterator
      insert(const_iterator __hint, const value_type& __x)
      { return _M_h.insert(__hint, __x); }



      iterator
      insert(const_iterator __hint, value_type&& __x)
      { return _M_h.insert(__hint, std::move(__x)); }

      template<typename _Pair>
 __enable_if_t<is_constructible<value_type, _Pair&&>::value, iterator>
 insert(const_iterator __hint, _Pair&& __x)
 { return _M_h.emplace_hint(__hint, std::forward<_Pair>(__x)); }
# 668 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 { _M_h.insert(__first, __last); }
# 680 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      void
      insert(initializer_list<value_type> __l)
      { _M_h.insert(__l); }
# 723 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      template <typename _Obj>
 pair<iterator, bool>
 insert_or_assign(const key_type& __k, _Obj&& __obj)
 {
   auto __ret = _M_h.try_emplace(cend(), __k,
     std::forward<_Obj>(__obj));
   if (!__ret.second)
     __ret.first->second = std::forward<_Obj>(__obj);
   return __ret;
 }


      template <typename _Obj>
 pair<iterator, bool>
 insert_or_assign(key_type&& __k, _Obj&& __obj)
 {
   auto __ret = _M_h.try_emplace(cend(), std::move(__k),
     std::forward<_Obj>(__obj));
   if (!__ret.second)
     __ret.first->second = std::forward<_Obj>(__obj);
   return __ret;
 }
# 772 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      template <typename _Obj>
 iterator
 insert_or_assign(const_iterator __hint, const key_type& __k,
    _Obj&& __obj)
 {
   auto __ret = _M_h.try_emplace(__hint, __k, std::forward<_Obj>(__obj));
   if (!__ret.second)
     __ret.first->second = std::forward<_Obj>(__obj);
   return __ret.first;
 }


      template <typename _Obj>
 iterator
 insert_or_assign(const_iterator __hint, key_type&& __k, _Obj&& __obj)
 {
   auto __ret = _M_h.try_emplace(__hint, std::move(__k),
     std::forward<_Obj>(__obj));
   if (!__ret.second)
     __ret.first->second = std::forward<_Obj>(__obj);
   return __ret.first;
 }
# 810 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_h.erase(__position); }


      iterator
      erase(iterator __position)
      { return _M_h.erase(__position); }
# 832 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_h.erase(__x); }
# 850 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_h.erase(__first, __last); }







      void
      clear() noexcept
      { _M_h.clear(); }
# 874 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      void
      swap(unordered_map& __x)
      noexcept( noexcept(_M_h.swap(__x._M_h)) )
      { _M_h.swap(__x._M_h); }


      template<typename, typename, typename>
 friend class std::_Hash_merge_helper;

      template<typename _H2, typename _P2>
 void
 merge(unordered_map<_Key, _Tp, _H2, _P2, _Alloc>& __source)
 {
   if constexpr (is_same_v<_H2, _Hash> && is_same_v<_P2, _Pred>)
     if (std::__addressof(__source) == this) [[__unlikely__]]
       return;

   using _Merge_helper = _Hash_merge_helper<unordered_map, _H2, _P2>;
   _M_h._M_merge_unique(_Merge_helper::_S_get_table(__source));
 }

      template<typename _H2, typename _P2>
 void
 merge(unordered_map<_Key, _Tp, _H2, _P2, _Alloc>&& __source)
 {
   using _Merge_helper = _Hash_merge_helper<unordered_map, _H2, _P2>;
   _M_h._M_merge_unique(_Merge_helper::_S_get_table(__source));
 }

      template<typename _H2, typename _P2>
 void
 merge(unordered_multimap<_Key, _Tp, _H2, _P2, _Alloc>& __source)
 {
   using _Merge_helper = _Hash_merge_helper<unordered_map, _H2, _P2>;
   _M_h._M_merge_unique(_Merge_helper::_S_get_table(__source));
 }

      template<typename _H2, typename _P2>
 void
 merge(unordered_multimap<_Key, _Tp, _H2, _P2, _Alloc>&& __source)
 { merge(__source); }






      hasher
      hash_function() const
      { return _M_h.hash_function(); }



      key_equal
      key_eq() const
      { return _M_h.key_eq(); }
# 945 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      iterator
      find(const key_type& __x)
      { return _M_h.find(__x); }
# 956 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_h.find(__x); }
# 978 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_h.count(__x); }
# 1018 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_h.equal_range(__x); }
# 1030 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_h.equal_range(__x); }
# 1056 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      mapped_type&
      operator[](const key_type& __k)
      { return _M_h[__k]; }

      mapped_type&
      operator[](key_type&& __k)
      { return _M_h[std::move(__k)]; }
# 1073 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      mapped_type&
      at(const key_type& __k)
      { return _M_h.at(__k); }

      const mapped_type&
      at(const key_type& __k) const
      { return _M_h.at(__k); }





      size_type
      bucket_count() const noexcept
      { return _M_h.bucket_count(); }


      size_type
      max_bucket_count() const noexcept
      { return _M_h.max_bucket_count(); }






      size_type
      bucket_size(size_type __n) const
      { return _M_h.bucket_size(__n); }






      size_type
      bucket(const key_type& __key) const
      { return _M_h.bucket(__key); }







      local_iterator
      begin(size_type __n)
      { return _M_h.begin(__n); }
# 1129 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      const_local_iterator
      begin(size_type __n) const
      { return _M_h.begin(__n); }

      const_local_iterator
      cbegin(size_type __n) const
      { return _M_h.cbegin(__n); }
# 1144 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      local_iterator
      end(size_type __n)
      { return _M_h.end(__n); }
# 1155 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      const_local_iterator
      end(size_type __n) const
      { return _M_h.end(__n); }

      const_local_iterator
      cend(size_type __n) const
      { return _M_h.cend(__n); }





      float
      load_factor() const noexcept
      { return _M_h.load_factor(); }



      float
      max_load_factor() const noexcept
      { return _M_h.max_load_factor(); }





      void
      max_load_factor(float __z)
      { _M_h.max_load_factor(__z); }
# 1192 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      void
      rehash(size_type __n)
      { _M_h.rehash(__n); }
# 1203 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      void
      reserve(size_type __n)
      { _M_h.reserve(__n); }

      template<typename _Key1, typename _Tp1, typename _Hash1, typename _Pred1,
        typename _Alloc1>
        friend bool
 operator==(const unordered_map<_Key1, _Tp1, _Hash1, _Pred1, _Alloc1>&,
     const unordered_map<_Key1, _Tp1, _Hash1, _Pred1, _Alloc1>&);
    };



  template<typename _InputIterator,
    typename _Hash = hash<__iter_key_t<_InputIterator>>,
    typename _Pred = equal_to<__iter_key_t<_InputIterator>>,
    typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireNotAllocatorOrIntegral<_Hash>,
    typename = _RequireNotAllocator<_Pred>,
    typename = _RequireAllocator<_Allocator>>
    unordered_map(_InputIterator, _InputIterator,
    typename unordered_map<int, int>::size_type = {},
    _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())
    -> unordered_map<__iter_key_t<_InputIterator>,
       __iter_val_t<_InputIterator>,
       _Hash, _Pred, _Allocator>;

  template<typename _Key, typename _Tp, typename _Hash = hash<_Key>,
    typename _Pred = equal_to<_Key>,
    typename _Allocator = allocator<pair<const _Key, _Tp>>,
    typename = _RequireNotAllocatorOrIntegral<_Hash>,
    typename = _RequireNotAllocator<_Pred>,
    typename = _RequireAllocator<_Allocator>>
    unordered_map(initializer_list<pair<_Key, _Tp>>,
    typename unordered_map<int, int>::size_type = {},
    _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())
    -> unordered_map<_Key, _Tp, _Hash, _Pred, _Allocator>;

  template<typename _InputIterator, typename _Allocator,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireAllocator<_Allocator>>
    unordered_map(_InputIterator, _InputIterator,
    typename unordered_map<int, int>::size_type, _Allocator)
    -> unordered_map<__iter_key_t<_InputIterator>,
       __iter_val_t<_InputIterator>,
       hash<__iter_key_t<_InputIterator>>,
       equal_to<__iter_key_t<_InputIterator>>,
       _Allocator>;

  template<typename _InputIterator, typename _Allocator,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireAllocator<_Allocator>>
    unordered_map(_InputIterator, _InputIterator, _Allocator)
    -> unordered_map<__iter_key_t<_InputIterator>,
       __iter_val_t<_InputIterator>,
       hash<__iter_key_t<_InputIterator>>,
       equal_to<__iter_key_t<_InputIterator>>,
       _Allocator>;

  template<typename _InputIterator, typename _Hash, typename _Allocator,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireNotAllocatorOrIntegral<_Hash>,
    typename = _RequireAllocator<_Allocator>>
    unordered_map(_InputIterator, _InputIterator,
    typename unordered_map<int, int>::size_type,
    _Hash, _Allocator)
    -> unordered_map<__iter_key_t<_InputIterator>,
       __iter_val_t<_InputIterator>, _Hash,
       equal_to<__iter_key_t<_InputIterator>>, _Allocator>;

  template<typename _Key, typename _Tp, typename _Allocator,
    typename = _RequireAllocator<_Allocator>>
    unordered_map(initializer_list<pair<_Key, _Tp>>,
    typename unordered_map<int, int>::size_type,
    _Allocator)
    -> unordered_map<_Key, _Tp, hash<_Key>, equal_to<_Key>, _Allocator>;

  template<typename _Key, typename _Tp, typename _Allocator,
    typename = _RequireAllocator<_Allocator>>
    unordered_map(initializer_list<pair<_Key, _Tp>>, _Allocator)
    -> unordered_map<_Key, _Tp, hash<_Key>, equal_to<_Key>, _Allocator>;

  template<typename _Key, typename _Tp, typename _Hash, typename _Allocator,
    typename = _RequireNotAllocatorOrIntegral<_Hash>,
    typename = _RequireAllocator<_Allocator>>
    unordered_map(initializer_list<pair<_Key, _Tp>>,
    typename unordered_map<int, int>::size_type,
    _Hash, _Allocator)
    -> unordered_map<_Key, _Tp, _Hash, equal_to<_Key>, _Allocator>;
# 1362 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
  template<typename _Key, typename _Tp,
    typename _Hash = hash<_Key>,
    typename _Pred = equal_to<_Key>,
    typename _Alloc = allocator<std::pair<const _Key, _Tp>>>
    class unordered_multimap
    {
      typedef __ummap_hashtable<_Key, _Tp, _Hash, _Pred, _Alloc> _Hashtable;
      _Hashtable _M_h;

    public:



      typedef typename _Hashtable::key_type key_type;
      typedef typename _Hashtable::value_type value_type;
      typedef typename _Hashtable::mapped_type mapped_type;
      typedef typename _Hashtable::hasher hasher;
      typedef typename _Hashtable::key_equal key_equal;
      typedef typename _Hashtable::allocator_type allocator_type;




      typedef typename _Hashtable::pointer pointer;
      typedef typename _Hashtable::const_pointer const_pointer;
      typedef typename _Hashtable::reference reference;
      typedef typename _Hashtable::const_reference const_reference;
      typedef typename _Hashtable::iterator iterator;
      typedef typename _Hashtable::const_iterator const_iterator;
      typedef typename _Hashtable::local_iterator local_iterator;
      typedef typename _Hashtable::const_local_iterator const_local_iterator;
      typedef typename _Hashtable::size_type size_type;
      typedef typename _Hashtable::difference_type difference_type;



      using node_type = typename _Hashtable::node_type;





      unordered_multimap() = default;
# 1413 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      explicit
      unordered_multimap(size_type __n,
    const hasher& __hf = hasher(),
    const key_equal& __eql = key_equal(),
    const allocator_type& __a = allocator_type())
      : _M_h(__n, __hf, __eql, __a)
      { }
# 1434 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      template<typename _InputIterator>
 unordered_multimap(_InputIterator __first, _InputIterator __last,
      size_type __n = 0,
      const hasher& __hf = hasher(),
      const key_equal& __eql = key_equal(),
      const allocator_type& __a = allocator_type())
 : _M_h(__first, __last, __n, __hf, __eql, __a)
 { }


      unordered_multimap(const unordered_multimap&) = default;


      unordered_multimap(unordered_multimap&&) = default;





      explicit
      unordered_multimap(const allocator_type& __a)
      : _M_h(__a)
      { }






      unordered_multimap(const unordered_multimap& __ummap,
    const allocator_type& __a)
      : _M_h(__ummap._M_h, __a)
      { }






      unordered_multimap(unordered_multimap&& __ummap,
    const allocator_type& __a)
 noexcept( noexcept(_Hashtable(std::move(__ummap._M_h), __a)) )
      : _M_h(std::move(__ummap._M_h), __a)
      { }
# 1490 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      unordered_multimap(initializer_list<value_type> __l,
    size_type __n = 0,
    const hasher& __hf = hasher(),
    const key_equal& __eql = key_equal(),
    const allocator_type& __a = allocator_type())
      : _M_h(__l, __n, __hf, __eql, __a)
      { }

      unordered_multimap(size_type __n, const allocator_type& __a)
      : unordered_multimap(__n, hasher(), key_equal(), __a)
      { }

      unordered_multimap(size_type __n, const hasher& __hf,
    const allocator_type& __a)
      : unordered_multimap(__n, __hf, key_equal(), __a)
      { }

      template<typename _InputIterator>
 unordered_multimap(_InputIterator __first, _InputIterator __last,
      size_type __n,
      const allocator_type& __a)
 : unordered_multimap(__first, __last, __n, hasher(), key_equal(), __a)
 { }

      template<typename _InputIterator>
 unordered_multimap(_InputIterator __first, _InputIterator __last,
      size_type __n, const hasher& __hf,
      const allocator_type& __a)
 : unordered_multimap(__first, __last, __n, __hf, key_equal(), __a)
 { }

      unordered_multimap(initializer_list<value_type> __l,
    size_type __n,
    const allocator_type& __a)
      : unordered_multimap(__l, __n, hasher(), key_equal(), __a)
      { }

      unordered_multimap(initializer_list<value_type> __l,
    size_type __n, const hasher& __hf,
    const allocator_type& __a)
      : unordered_multimap(__l, __n, __hf, key_equal(), __a)
      { }
# 1577 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      unordered_multimap&
      operator=(const unordered_multimap&) = default;


      unordered_multimap&
      operator=(unordered_multimap&&) = default;
# 1595 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      unordered_multimap&
      operator=(initializer_list<value_type> __l)
      {
 _M_h = __l;
 return *this;
      }


      allocator_type
      get_allocator() const noexcept
      { return _M_h.get_allocator(); }




      [[__nodiscard__]] bool
      empty() const noexcept
      { return _M_h.empty(); }


      size_type
      size() const noexcept
      { return _M_h.size(); }


      size_type
      max_size() const noexcept
      { return _M_h.max_size(); }







      iterator
      begin() noexcept
      { return _M_h.begin(); }






      const_iterator
      begin() const noexcept
      { return _M_h.begin(); }

      const_iterator
      cbegin() const noexcept
      { return _M_h.begin(); }






      iterator
      end() noexcept
      { return _M_h.end(); }






      const_iterator
      end() const noexcept
      { return _M_h.end(); }

      const_iterator
      cend() const noexcept
      { return _M_h.end(); }
# 1687 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      template<typename... _Args>
 iterator
 emplace(_Args&&... __args)
 { return _M_h.emplace(std::forward<_Args>(__args)...); }
# 1714 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 { return _M_h.emplace_hint(__pos, std::forward<_Args>(__args)...); }
# 1729 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      iterator
      insert(const value_type& __x)
      { return _M_h.insert(__x); }

      iterator
      insert(value_type&& __x)
      { return _M_h.insert(std::move(__x)); }

      template<typename _Pair>
 __enable_if_t<is_constructible<value_type, _Pair&&>::value, iterator>
 insert(_Pair&& __x)
        { return _M_h.emplace(std::forward<_Pair>(__x)); }
# 1763 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      iterator
      insert(const_iterator __hint, const value_type& __x)
      { return _M_h.insert(__hint, __x); }



      iterator
      insert(const_iterator __hint, value_type&& __x)
      { return _M_h.insert(__hint, std::move(__x)); }

      template<typename _Pair>
 __enable_if_t<is_constructible<value_type, _Pair&&>::value, iterator>
 insert(const_iterator __hint, _Pair&& __x)
        { return _M_h.emplace_hint(__hint, std::forward<_Pair>(__x)); }
# 1788 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 { _M_h.insert(__first, __last); }
# 1801 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      void
      insert(initializer_list<value_type> __l)
      { _M_h.insert(__l); }
# 1833 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      node_type
      extract(const_iterator __pos)
      {
 do { if (std::__is_constant_evaluated() && !bool(__pos != end())) std::__glibcxx_assert_fail(); } while (false);
 return _M_h.extract(__pos);
      }


      node_type
      extract(const key_type& __key)
      { return _M_h.extract(__key); }


      iterator
      insert(node_type&& __nh)
      { return _M_h._M_reinsert_node_multi(cend(), std::move(__nh)); }


      iterator
      insert(const_iterator __hint, node_type&& __nh)
      { return _M_h._M_reinsert_node_multi(__hint, std::move(__nh)); }
# 1870 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_h.erase(__position); }


      iterator
      erase(iterator __position)
      { return _M_h.erase(__position); }
# 1891 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_h.erase(__x); }
# 1910 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_h.erase(__first, __last); }







      void
      clear() noexcept
      { _M_h.clear(); }
# 1934 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      void
      swap(unordered_multimap& __x)
      noexcept( noexcept(_M_h.swap(__x._M_h)) )
      { _M_h.swap(__x._M_h); }


      template<typename, typename, typename>
 friend class std::_Hash_merge_helper;

      template<typename _H2, typename _P2>
 void
 merge(unordered_multimap<_Key, _Tp, _H2, _P2, _Alloc>& __source)
 {
   if constexpr (is_same_v<_H2, _Hash> && is_same_v<_P2, _Pred>)
     if (std::__addressof(__source) == this) [[__unlikely__]]
       return;

   using _Merge_helper
     = _Hash_merge_helper<unordered_multimap, _H2, _P2>;
   _M_h._M_merge_multi(_Merge_helper::_S_get_table(__source));
 }

      template<typename _H2, typename _P2>
 void
 merge(unordered_multimap<_Key, _Tp, _H2, _P2, _Alloc>&& __source)
 {
   using _Merge_helper
     = _Hash_merge_helper<unordered_multimap, _H2, _P2>;
   _M_h._M_merge_multi(_Merge_helper::_S_get_table(__source));
 }

      template<typename _H2, typename _P2>
 void
 merge(unordered_map<_Key, _Tp, _H2, _P2, _Alloc>& __source)
 {
   using _Merge_helper
     = _Hash_merge_helper<unordered_multimap, _H2, _P2>;
   _M_h._M_merge_multi(_Merge_helper::_S_get_table(__source));
 }

      template<typename _H2, typename _P2>
 void
 merge(unordered_map<_Key, _Tp, _H2, _P2, _Alloc>&& __source)
 { merge(__source); }






      hasher
      hash_function() const
      { return _M_h.hash_function(); }



      key_equal
      key_eq() const
      { return _M_h.key_eq(); }
# 2008 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      iterator
      find(const key_type& __x)
      { return _M_h.find(__x); }
# 2019 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_h.find(__x); }
# 2037 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_h.count(__x); }
# 2075 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_h.equal_range(__x); }
# 2087 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_h.equal_range(__x); }
# 2103 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      size_type
      bucket_count() const noexcept
      { return _M_h.bucket_count(); }


      size_type
      max_bucket_count() const noexcept
      { return _M_h.max_bucket_count(); }






      size_type
      bucket_size(size_type __n) const
      { return _M_h.bucket_size(__n); }






      size_type
      bucket(const key_type& __key) const
      { return _M_h.bucket(__key); }







      local_iterator
      begin(size_type __n)
      { return _M_h.begin(__n); }
# 2147 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      const_local_iterator
      begin(size_type __n) const
      { return _M_h.begin(__n); }

      const_local_iterator
      cbegin(size_type __n) const
      { return _M_h.cbegin(__n); }
# 2162 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      local_iterator
      end(size_type __n)
      { return _M_h.end(__n); }
# 2173 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      const_local_iterator
      end(size_type __n) const
      { return _M_h.end(__n); }

      const_local_iterator
      cend(size_type __n) const
      { return _M_h.cend(__n); }





      float
      load_factor() const noexcept
      { return _M_h.load_factor(); }



      float
      max_load_factor() const noexcept
      { return _M_h.max_load_factor(); }





      void
      max_load_factor(float __z)
      { _M_h.max_load_factor(__z); }
# 2210 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      void
      rehash(size_type __n)
      { _M_h.rehash(__n); }
# 2221 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
      void
      reserve(size_type __n)
      { _M_h.reserve(__n); }

      template<typename _Key1, typename _Tp1, typename _Hash1, typename _Pred1,
        typename _Alloc1>
        friend bool
 operator==(const unordered_multimap<_Key1, _Tp1,
         _Hash1, _Pred1, _Alloc1>&,
     const unordered_multimap<_Key1, _Tp1,
         _Hash1, _Pred1, _Alloc1>&);
    };



  template<typename _InputIterator,
    typename _Hash = hash<__iter_key_t<_InputIterator>>,
    typename _Pred = equal_to<__iter_key_t<_InputIterator>>,
    typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireNotAllocatorOrIntegral<_Hash>,
    typename = _RequireNotAllocator<_Pred>,
    typename = _RequireAllocator<_Allocator>>
    unordered_multimap(_InputIterator, _InputIterator,
         unordered_multimap<int, int>::size_type = {},
         _Hash = _Hash(), _Pred = _Pred(),
         _Allocator = _Allocator())
    -> unordered_multimap<__iter_key_t<_InputIterator>,
     __iter_val_t<_InputIterator>, _Hash, _Pred,
     _Allocator>;

  template<typename _Key, typename _Tp, typename _Hash = hash<_Key>,
    typename _Pred = equal_to<_Key>,
    typename _Allocator = allocator<pair<const _Key, _Tp>>,
    typename = _RequireNotAllocatorOrIntegral<_Hash>,
    typename = _RequireNotAllocator<_Pred>,
    typename = _RequireAllocator<_Allocator>>
    unordered_multimap(initializer_list<pair<_Key, _Tp>>,
         unordered_multimap<int, int>::size_type = {},
         _Hash = _Hash(), _Pred = _Pred(),
         _Allocator = _Allocator())
    -> unordered_multimap<_Key, _Tp, _Hash, _Pred, _Allocator>;

  template<typename _InputIterator, typename _Allocator,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireAllocator<_Allocator>>
    unordered_multimap(_InputIterator, _InputIterator,
         unordered_multimap<int, int>::size_type, _Allocator)
    -> unordered_multimap<__iter_key_t<_InputIterator>,
     __iter_val_t<_InputIterator>,
     hash<__iter_key_t<_InputIterator>>,
     equal_to<__iter_key_t<_InputIterator>>, _Allocator>;

  template<typename _InputIterator, typename _Allocator,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireAllocator<_Allocator>>
    unordered_multimap(_InputIterator, _InputIterator, _Allocator)
    -> unordered_multimap<__iter_key_t<_InputIterator>,
     __iter_val_t<_InputIterator>,
     hash<__iter_key_t<_InputIterator>>,
     equal_to<__iter_key_t<_InputIterator>>, _Allocator>;

  template<typename _InputIterator, typename _Hash, typename _Allocator,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireNotAllocatorOrIntegral<_Hash>,
    typename = _RequireAllocator<_Allocator>>
    unordered_multimap(_InputIterator, _InputIterator,
         unordered_multimap<int, int>::size_type, _Hash,
         _Allocator)
    -> unordered_multimap<__iter_key_t<_InputIterator>,
     __iter_val_t<_InputIterator>, _Hash,
     equal_to<__iter_key_t<_InputIterator>>, _Allocator>;

  template<typename _Key, typename _Tp, typename _Allocator,
    typename = _RequireAllocator<_Allocator>>
    unordered_multimap(initializer_list<pair<_Key, _Tp>>,
         unordered_multimap<int, int>::size_type,
         _Allocator)
    -> unordered_multimap<_Key, _Tp, hash<_Key>, equal_to<_Key>, _Allocator>;

  template<typename _Key, typename _Tp, typename _Allocator,
    typename = _RequireAllocator<_Allocator>>
    unordered_multimap(initializer_list<pair<_Key, _Tp>>, _Allocator)
    -> unordered_multimap<_Key, _Tp, hash<_Key>, equal_to<_Key>, _Allocator>;

  template<typename _Key, typename _Tp, typename _Hash, typename _Allocator,
    typename = _RequireNotAllocatorOrIntegral<_Hash>,
    typename = _RequireAllocator<_Allocator>>
    unordered_multimap(initializer_list<pair<_Key, _Tp>>,
         unordered_multimap<int, int>::size_type,
         _Hash, _Allocator)
    -> unordered_multimap<_Key, _Tp, _Hash, equal_to<_Key>, _Allocator>;
# 2360 "/usr/include/c++/15.1.1/bits/unordered_map.h" 3
  template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
    inline void
    swap(unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
  unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }

  template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
    inline void
    swap(unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
  unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }

  template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
    inline bool
    operator==(const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
        const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)
    { return __x._M_h._M_equal(__y._M_h); }


  template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
    inline bool
    operator!=(const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
        const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)
    { return !(__x == __y); }


  template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
    inline bool
    operator==(const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
        const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)
    { return __x._M_h._M_equal(__y._M_h); }


  template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
    inline bool
    operator!=(const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
        const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)
    { return !(__x == __y); }






  template<typename _Key, typename _Val, typename _Hash1, typename _Eq1,
    typename _Alloc, typename _Hash2, typename _Eq2>
    struct _Hash_merge_helper<
      std::unordered_map<_Key, _Val, _Hash1, _Eq1, _Alloc>,
      _Hash2, _Eq2>
    {
    private:
      template<typename... _Tp>
 using unordered_map = std::unordered_map<_Tp...>;
      template<typename... _Tp>
 using unordered_multimap = std::unordered_multimap<_Tp...>;

      friend unordered_map<_Key, _Val, _Hash1, _Eq1, _Alloc>;

      static auto&
      _S_get_table(unordered_map<_Key, _Val, _Hash2, _Eq2, _Alloc>& __map)
      { return __map._M_h; }

      static auto&
      _S_get_table(unordered_multimap<_Key, _Val, _Hash2, _Eq2, _Alloc>& __map)
      { return __map._M_h; }
    };


  template<typename _Key, typename _Val, typename _Hash1, typename _Eq1,
    typename _Alloc, typename _Hash2, typename _Eq2>
    struct _Hash_merge_helper<
      std::unordered_multimap<_Key, _Val, _Hash1, _Eq1, _Alloc>,
      _Hash2, _Eq2>
    {
    private:
      template<typename... _Tp>
 using unordered_map = std::unordered_map<_Tp...>;
      template<typename... _Tp>
 using unordered_multimap = std::unordered_multimap<_Tp...>;

      friend unordered_multimap<_Key, _Val, _Hash1, _Eq1, _Alloc>;

      static auto&
      _S_get_table(unordered_map<_Key, _Val, _Hash2, _Eq2, _Alloc>& __map)
      { return __map._M_h; }

      static auto&
      _S_get_table(unordered_multimap<_Key, _Val, _Hash2, _Eq2, _Alloc>& __map)
      { return __map._M_h; }
    };



}
# 44 "/usr/include/c++/15.1.1/unordered_map" 2 3

# 1 "/usr/include/c++/15.1.1/bits/erase_if.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/erase_if.h" 3
#define _GLIBCXX_ERASE_IF_H 1
# 41 "/usr/include/c++/15.1.1/bits/erase_if.h" 3
namespace std
{


  namespace __detail
  {
    template<typename _Container, typename _UnsafeContainer,
      typename _Predicate>
      typename _Container::size_type
      __erase_nodes_if(_Container& __cont, _UnsafeContainer& __ucont,
         _Predicate __pred)
      {
 typename _Container::size_type __num = 0;
 for (auto __iter = __ucont.begin(), __last = __ucont.end();
      __iter != __last;)
   {
     if (__pred(*__iter))
       {
  __iter = __cont.erase(__iter);
  ++__num;
       }
     else
       ++__iter;
   }
 return __num;
      }
  }


}
# 46 "/usr/include/c++/15.1.1/unordered_map" 2 3





#define __glibcxx_want_allocator_traits_is_always_equal 
#define __glibcxx_want_containers_ranges 
#define __glibcxx_want_erase_if 
#define __glibcxx_want_generic_unordered_lookup 
#define __glibcxx_want_node_extract 
#define __glibcxx_want_nonmember_container_access 
#define __glibcxx_want_unordered_map_try_emplace 
#define __glibcxx_want_tuple_like 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 60 "/usr/include/c++/15.1.1/unordered_map" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{

  namespace pmr
  {
    template<typename _Key, typename _Tp, typename _Hash = std::hash<_Key>,
      typename _Pred = std::equal_to<_Key>>
      using unordered_map
 = std::unordered_map<_Key, _Tp, _Hash, _Pred,
        polymorphic_allocator<pair<const _Key, _Tp>>>;
    template<typename _Key, typename _Tp, typename _Hash = std::hash<_Key>,
      typename _Pred = std::equal_to<_Key>>
      using unordered_multimap
 = std::unordered_multimap<_Key, _Tp, _Hash, _Pred,
      polymorphic_allocator<pair<const _Key, _Tp>>>;
  }

}
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/bytecode.hpp" 2



# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/gpp.hpp" 1

#define smv_gpp_gpp_hpp 

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/gen/parser_antlr4.h" 1



       


# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 1





       



# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-common.h" 1





       


# 1 "/usr/include/c++/15.1.1/any" 1 3
# 30 "/usr/include/c++/15.1.1/any" 3
#define _GLIBCXX_ANY 1





#define __glibcxx_want_any 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 38 "/usr/include/c++/15.1.1/any" 2 3
# 47 "/usr/include/c++/15.1.1/any" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

namespace std __attribute__ ((__visibility__ ("default")))
{

# 63 "/usr/include/c++/15.1.1/any" 3
  class bad_any_cast : public bad_cast
  {
  public:
    virtual const char* what() const noexcept { return "bad any_cast"; }
  };

  [[gnu::noreturn]] inline void __throw_bad_any_cast()
  {

    throw bad_any_cast{};



  }
# 86 "/usr/include/c++/15.1.1/any" 3
  class any
  {

    union _Storage
    {
      constexpr _Storage() : _M_ptr{nullptr} {}


      _Storage(const _Storage&) = delete;
      _Storage& operator=(const _Storage&) = delete;

      void* _M_ptr;
      unsigned char _M_buffer[sizeof(_M_ptr)];
    };

    template<typename _Tp, typename _Safe = is_nothrow_move_constructible<_Tp>,
      bool _Fits = (sizeof(_Tp) <= sizeof(_Storage))
     && (alignof(_Tp) <= alignof(_Storage))>
      using _Internal = std::integral_constant<bool, _Safe::value && _Fits>;

    template<typename _Tp>
      struct _Manager_internal;

    template<typename _Tp>
      struct _Manager_external;

    template<typename _Tp>
      using _Manager = __conditional_t<_Internal<_Tp>::value,
           _Manager_internal<_Tp>,
           _Manager_external<_Tp>>;

    template<typename _Tp, typename _VTp = decay_t<_Tp>>
      using _Decay_if_not_any = enable_if_t<!is_same_v<_VTp, any>, _VTp>;


    template <typename _Tp, typename... _Args,
       typename _Mgr = _Manager<_Tp>>
      void __do_emplace(_Args&&... __args)
      {
 reset();
        _Mgr::_S_create(_M_storage, std::forward<_Args>(__args)...);
 _M_manager = &_Mgr::_S_manage;
      }



    template <typename _Tp, typename _Up, typename... _Args,
       typename _Mgr = _Manager<_Tp>>
      void __do_emplace(initializer_list<_Up> __il, _Args&&... __args)
      {
 reset();
 _Mgr::_S_create(_M_storage, __il, std::forward<_Args>(__args)...);
 _M_manager = &_Mgr::_S_manage;
      }

    template <typename _Res, typename _Tp, typename... _Args>
      using __any_constructible
 = enable_if<__and_<is_copy_constructible<_Tp>,
      is_constructible<_Tp, _Args...>>::value,
      _Res>;

    template <typename _Tp, typename... _Args>
      using __any_constructible_t
 = typename __any_constructible<bool, _Tp, _Args...>::type;

    template<typename _VTp, typename... _Args>
      using __emplace_t
 = typename __any_constructible<_VTp&, _VTp, _Args...>::type;

  public:



    constexpr any() noexcept : _M_manager(nullptr) { }


    any(const any& __other)
    {
      if (!__other.has_value())
 _M_manager = nullptr;
      else
 {
   _Arg __arg;
   __arg._M_any = this;
   __other._M_manager(_Op_clone, &__other, &__arg);
 }
    }






    any(any&& __other) noexcept
    {
      if (!__other.has_value())
 _M_manager = nullptr;
      else
 {
   _Arg __arg;
   __arg._M_any = this;
   __other._M_manager(_Op_xfer, &__other, &__arg);
 }
    }


    template <typename _Tp, typename _VTp = _Decay_if_not_any<_Tp>,
       typename _Mgr = _Manager<_VTp>,
       enable_if_t<is_copy_constructible_v<_VTp>
     && !__is_in_place_type_v<_VTp>, bool> = true>
      any(_Tp&& __value)
      : _M_manager(&_Mgr::_S_manage)
      {
 _Mgr::_S_create(_M_storage, std::forward<_Tp>(__value));
      }


    template <typename _Tp, typename... _Args, typename _VTp = decay_t<_Tp>,
       typename _Mgr = _Manager<_VTp>,
       __any_constructible_t<_VTp, _Args&&...> = false>
      explicit
      any(in_place_type_t<_Tp>, _Args&&... __args)
      : _M_manager(&_Mgr::_S_manage)
      {
 _Mgr::_S_create(_M_storage, std::forward<_Args>(__args)...);
      }



    template <typename _Tp, typename _Up, typename... _Args,
       typename _VTp = decay_t<_Tp>, typename _Mgr = _Manager<_VTp>,
       __any_constructible_t<_VTp, initializer_list<_Up>&,
        _Args&&...> = false>
      explicit
      any(in_place_type_t<_Tp>, initializer_list<_Up> __il, _Args&&... __args)
      : _M_manager(&_Mgr::_S_manage)
      {
 _Mgr::_S_create(_M_storage, __il, std::forward<_Args>(__args)...);
      }


    ~any() { reset(); }




    any&
    operator=(const any& __rhs)
    {
      *this = any(__rhs);
      return *this;
    }






    any&
    operator=(any&& __rhs) noexcept
    {
      if (!__rhs.has_value())
 reset();
      else if (this != &__rhs)
 {
   reset();
   _Arg __arg;
   __arg._M_any = this;
   __rhs._M_manager(_Op_xfer, &__rhs, &__arg);
 }
      return *this;
    }


    template<typename _Tp>
      enable_if_t<is_copy_constructible<_Decay_if_not_any<_Tp>>::value, any&>
      operator=(_Tp&& __rhs)
      {
 *this = any(std::forward<_Tp>(__rhs));
 return *this;
      }


    template <typename _Tp, typename... _Args>
      __emplace_t<decay_t<_Tp>, _Args...>
      emplace(_Args&&... __args)
      {
 using _VTp = decay_t<_Tp>;
 __do_emplace<_VTp>(std::forward<_Args>(__args)...);
 return *any::_Manager<_VTp>::_S_access(_M_storage);
      }



    template <typename _Tp, typename _Up, typename... _Args>
      __emplace_t<decay_t<_Tp>, initializer_list<_Up>&, _Args&&...>
      emplace(initializer_list<_Up> __il, _Args&&... __args)
      {
 using _VTp = decay_t<_Tp>;
 __do_emplace<_VTp, _Up>(__il, std::forward<_Args>(__args)...);
 return *any::_Manager<_VTp>::_S_access(_M_storage);
      }




    void reset() noexcept
    {
      if (has_value())
      {
 _M_manager(_Op_destroy, this, nullptr);
 _M_manager = nullptr;
      }
    }


    void swap(any& __rhs) noexcept
    {
      if (!has_value() && !__rhs.has_value())
 return;

      if (has_value() && __rhs.has_value())
 {
   if (this == &__rhs)
     return;

   any __tmp;
   _Arg __arg;
   __arg._M_any = &__tmp;
   __rhs._M_manager(_Op_xfer, &__rhs, &__arg);
   __arg._M_any = &__rhs;
   _M_manager(_Op_xfer, this, &__arg);
   __arg._M_any = this;
   __tmp._M_manager(_Op_xfer, &__tmp, &__arg);
 }
      else
 {
   any* __empty = !has_value() ? this : &__rhs;
   any* __full = !has_value() ? &__rhs : this;
   _Arg __arg;
   __arg._M_any = __empty;
   __full->_M_manager(_Op_xfer, __full, &__arg);
 }
    }




    bool has_value() const noexcept { return _M_manager != nullptr; }



    const type_info& type() const noexcept
    {
      if (!has_value())
 return typeid(void);
      _Arg __arg;
      _M_manager(_Op_get_type_info, this, &__arg);
      return *__arg._M_typeinfo;
    }



    template<typename _Tp>
      static constexpr bool __is_valid_cast()
      { return __or_<is_reference<_Tp>, is_copy_constructible<_Tp>>::value; }


  private:
    enum _Op {
 _Op_access, _Op_get_type_info, _Op_clone, _Op_destroy, _Op_xfer
    };

    union _Arg
    {
 void* _M_obj;
 const std::type_info* _M_typeinfo;
 any* _M_any;
    };

    void (*_M_manager)(_Op, const any*, _Arg*);
    _Storage _M_storage;


    template<typename _Tp>
      friend void* __any_caster(const any* __any);



    template<typename _Tp>
      struct _Manager_internal
      {
 static void
 _S_manage(_Op __which, const any* __anyp, _Arg* __arg);

 template<typename _Up>
   static void
   _S_create(_Storage& __storage, _Up&& __value)
   {
     void* __addr = &__storage._M_buffer;
     ::new (__addr) _Tp(std::forward<_Up>(__value));
   }

 template<typename... _Args>
   static void
   _S_create(_Storage& __storage, _Args&&... __args)
   {
     void* __addr = &__storage._M_buffer;
     ::new (__addr) _Tp(std::forward<_Args>(__args)...);
   }

 static _Tp*
 _S_access(const _Storage& __storage)
 {

   const void* __addr = &__storage._M_buffer;
   return static_cast<_Tp*>(const_cast<void*>(__addr));
 }
      };


    template<typename _Tp>
      struct _Manager_external
      {
 static void
 _S_manage(_Op __which, const any* __anyp, _Arg* __arg);

 template<typename _Up>
   static void
   _S_create(_Storage& __storage, _Up&& __value)
   {
     __storage._M_ptr = new _Tp(std::forward<_Up>(__value));
   }
 template<typename... _Args>
   static void
   _S_create(_Storage& __storage, _Args&&... __args)
   {
     __storage._M_ptr = new _Tp(std::forward<_Args>(__args)...);
   }
 static _Tp*
 _S_access(const _Storage& __storage)
 {

   return static_cast<_Tp*>(__storage._M_ptr);
 }
      };
  };


  inline void swap(any& __x, any& __y) noexcept { __x.swap(__y); }


  template <typename _Tp, typename... _Args>
    inline
    enable_if_t<is_constructible_v<any, in_place_type_t<_Tp>, _Args...>, any>
    make_any(_Args&&... __args)
    {
      return any(in_place_type<_Tp>, std::forward<_Args>(__args)...);
    }


  template <typename _Tp, typename _Up, typename... _Args>
    inline
    enable_if_t<is_constructible_v<any, in_place_type_t<_Tp>,
       initializer_list<_Up>&, _Args...>, any>
    make_any(initializer_list<_Up> __il, _Args&&... __args)
    {
      return any(in_place_type<_Tp>, __il, std::forward<_Args>(__args)...);
    }
# 466 "/usr/include/c++/15.1.1/any" 3
  template<typename _ValueType>
    inline _ValueType any_cast(const any& __any)
    {
      using _Up = __remove_cvref_t<_ValueType>;
      static_assert(any::__is_valid_cast<_ValueType>(),
   "Template argument must be a reference or CopyConstructible type");
      static_assert(is_constructible_v<_ValueType, const _Up&>,
   "Template argument must be constructible from a const value.");
      auto __p = any_cast<_Up>(&__any);
      if (__p)
 return static_cast<_ValueType>(*__p);
      __throw_bad_any_cast();
    }
# 492 "/usr/include/c++/15.1.1/any" 3
  template<typename _ValueType>
    inline _ValueType any_cast(any& __any)
    {
      using _Up = __remove_cvref_t<_ValueType>;
      static_assert(any::__is_valid_cast<_ValueType>(),
   "Template argument must be a reference or CopyConstructible type");
      static_assert(is_constructible_v<_ValueType, _Up&>,
   "Template argument must be constructible from an lvalue.");
      auto __p = any_cast<_Up>(&__any);
      if (__p)
 return static_cast<_ValueType>(*__p);
      __throw_bad_any_cast();
    }

  template<typename _ValueType>
    inline _ValueType any_cast(any&& __any)
    {
      using _Up = __remove_cvref_t<_ValueType>;
      static_assert(any::__is_valid_cast<_ValueType>(),
   "Template argument must be a reference or CopyConstructible type");
      static_assert(is_constructible_v<_ValueType, _Up>,
   "Template argument must be constructible from an rvalue.");
      auto __p = any_cast<_Up>(&__any);
      if (__p)
 return static_cast<_ValueType>(std::move(*__p));
      __throw_bad_any_cast();
    }



  template<typename _Tp>
    void* __any_caster(const any* __any)
    {


      using _Up = remove_cv_t<_Tp>;


      if constexpr (!is_same_v<decay_t<_Up>, _Up>)
 return nullptr;

      else if constexpr (!is_copy_constructible_v<_Up>)
 return nullptr;

      else if (__any->_M_manager == &any::_Manager<_Up>::_S_manage

   || __any->type() == typeid(_Tp)

   )
 {
   return any::_Manager<_Up>::_S_access(__any->_M_storage);
 }
      return nullptr;
    }
# 559 "/usr/include/c++/15.1.1/any" 3
  template<typename _ValueType>
    inline const _ValueType* any_cast(const any* __any) noexcept
    {


      static_assert(!is_void_v<_ValueType>);



      if constexpr (is_object_v<_ValueType>)
 if (__any)
   return static_cast<_ValueType*>(__any_caster<_ValueType>(__any));
      return nullptr;
    }

  template<typename _ValueType>
    inline _ValueType* any_cast(any* __any) noexcept
    {
      static_assert(!is_void_v<_ValueType>);

      if constexpr (is_object_v<_ValueType>)
 if (__any)
   return static_cast<_ValueType*>(__any_caster<_ValueType>(__any));
      return nullptr;
    }


  template<typename _Tp>
    void
    any::_Manager_internal<_Tp>::
    _S_manage(_Op __which, const any* __any, _Arg* __arg)
    {

      auto __ptr = reinterpret_cast<const _Tp*>(&__any->_M_storage._M_buffer);
      switch (__which)
      {
      case _Op_access:
 __arg->_M_obj = const_cast<_Tp*>(__ptr);
 break;
      case _Op_get_type_info:

 __arg->_M_typeinfo = &typeid(_Tp);

 break;
      case _Op_clone:
 ::new(&__arg->_M_any->_M_storage._M_buffer) _Tp(*__ptr);
 __arg->_M_any->_M_manager = __any->_M_manager;
 break;
      case _Op_destroy:
 __ptr->~_Tp();
 break;
      case _Op_xfer:
 ::new(&__arg->_M_any->_M_storage._M_buffer) _Tp
   (std::move(*const_cast<_Tp*>(__ptr)));
 __ptr->~_Tp();
 __arg->_M_any->_M_manager = __any->_M_manager;
 const_cast<any*>(__any)->_M_manager = nullptr;
 break;
      }
    }

  template<typename _Tp>
    void
    any::_Manager_external<_Tp>::
    _S_manage(_Op __which, const any* __any, _Arg* __arg)
    {

      auto __ptr = static_cast<const _Tp*>(__any->_M_storage._M_ptr);
      switch (__which)
      {
      case _Op_access:
 __arg->_M_obj = const_cast<_Tp*>(__ptr);
 break;
      case _Op_get_type_info:

 __arg->_M_typeinfo = &typeid(_Tp);

 break;
      case _Op_clone:
 __arg->_M_any->_M_storage._M_ptr = new _Tp(*__ptr);
 __arg->_M_any->_M_manager = __any->_M_manager;
 break;
      case _Op_destroy:
 delete __ptr;
 break;
      case _Op_xfer:
 __arg->_M_any->_M_storage._M_ptr = __any->_M_storage._M_ptr;
 __arg->_M_any->_M_manager = __any->_M_manager;
 const_cast<any*>(__any)->_M_manager = nullptr;
 break;
      }
    }



  namespace __detail::__variant
  {
    template<typename> struct _Never_valueless_alt;



    template<>
      struct _Never_valueless_alt<std::any>
      : std::true_type
      { };
  }


}

#pragma GCC diagnostic pop
# 10 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-common.h" 2
# 1 "/usr/include/c++/15.1.1/atomic" 1 3
# 33 "/usr/include/c++/15.1.1/atomic" 3
#define _GLIBCXX_ATOMIC 1
# 43 "/usr/include/c++/15.1.1/atomic" 3
#define __glibcxx_want_atomic_is_always_lock_free 
#define __glibcxx_want_atomic_flag_test 
#define __glibcxx_want_atomic_float 
#define __glibcxx_want_atomic_ref 
#define __glibcxx_want_atomic_lock_free_type_aliases 
#define __glibcxx_want_atomic_value_initialization 
#define __glibcxx_want_atomic_wait 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 51 "/usr/include/c++/15.1.1/atomic" 2 3


# 1 "/usr/include/c++/15.1.1/cstdint" 1 3
# 30 "/usr/include/c++/15.1.1/cstdint" 3
#define _GLIBCXX_CSTDINT 1
# 50 "/usr/include/c++/15.1.1/cstdint" 3
namespace std
{

  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
# 144 "/usr/include/c++/15.1.1/cstdint" 3
}
# 54 "/usr/include/c++/15.1.1/atomic" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    struct atomic;



  template<>
  struct atomic<bool>
  {
    using value_type = bool;

  private:
    __atomic_base<bool> _M_base;

  public:
    atomic() noexcept = default;
    ~atomic() noexcept = default;
    atomic(const atomic&) = delete;
    atomic& operator=(const atomic&) = delete;
    atomic& operator=(const atomic&) volatile = delete;

    constexpr atomic(bool __i) noexcept : _M_base(__i) { }

    bool
    operator=(bool __i) noexcept
    { return _M_base.operator=(__i); }

    bool
    operator=(bool __i) volatile noexcept
    { return _M_base.operator=(__i); }

    operator bool() const noexcept
    { return _M_base.load(); }

    operator bool() const volatile noexcept
    { return _M_base.load(); }

    bool
    is_lock_free() const noexcept { return _M_base.is_lock_free(); }

    bool
    is_lock_free() const volatile noexcept { return _M_base.is_lock_free(); }


    static constexpr bool is_always_lock_free = 2 == 2;


    void
    store(bool __i, memory_order __m = memory_order_seq_cst) noexcept
    { _M_base.store(__i, __m); }

    void
    store(bool __i, memory_order __m = memory_order_seq_cst) volatile noexcept
    { _M_base.store(__i, __m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const noexcept
    { return _M_base.load(__m); }

    bool
    load(memory_order __m = memory_order_seq_cst) const volatile noexcept
    { return _M_base.load(__m); }

    bool
    exchange(bool __i, memory_order __m = memory_order_seq_cst) noexcept
    { return _M_base.exchange(__i, __m); }

    bool
    exchange(bool __i,
      memory_order __m = memory_order_seq_cst) volatile noexcept
    { return _M_base.exchange(__i, __m); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2, memory_order __m1,
     memory_order __m2) noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2, memory_order __m1,
     memory_order __m2) volatile noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2,
     memory_order __m = memory_order_seq_cst) noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m); }

    bool
    compare_exchange_weak(bool& __i1, bool __i2,
       memory_order __m = memory_order_seq_cst) volatile noexcept
    { return _M_base.compare_exchange_weak(__i1, __i2, __m); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2, memory_order __m1,
       memory_order __m2) noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2, memory_order __m1,
       memory_order __m2) volatile noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m1, __m2); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2,
       memory_order __m = memory_order_seq_cst) noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m); }

    bool
    compare_exchange_strong(bool& __i1, bool __i2,
      memory_order __m = memory_order_seq_cst) volatile noexcept
    { return _M_base.compare_exchange_strong(__i1, __i2, __m); }
# 191 "/usr/include/c++/15.1.1/atomic" 3
  };






  template<typename _Tp>
    struct atomic
    {
      using value_type = _Tp;

    private:

      static constexpr int _S_min_alignment
 = (sizeof(_Tp) & (sizeof(_Tp) - 1)) || sizeof(_Tp) > 16
 ? 0 : sizeof(_Tp);

      static constexpr int _S_alignment
        = _S_min_alignment > alignof(_Tp) ? _S_min_alignment : alignof(_Tp);

      alignas(_S_alignment) _Tp _M_i;

      static_assert(__is_trivially_copyable(_Tp),
      "std::atomic requires a trivially copyable type");

      static_assert(sizeof(_Tp) > 0,
      "Incomplete or zero-sized types are not supported");
# 227 "/usr/include/c++/15.1.1/atomic" 3
    public:
# 236 "/usr/include/c++/15.1.1/atomic" 3
      atomic() = default;


      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i)
      {

 if constexpr (__atomic_impl::__maybe_has_padding<_Tp>())
   __builtin_clear_padding(std::__addressof(_M_i));

      }

      operator _Tp() const noexcept
      { return load(); }

      operator _Tp() const volatile noexcept
      { return load(); }

      _Tp
      operator=(_Tp __i) noexcept
      { store(__i); return __i; }

      _Tp
      operator=(_Tp __i) volatile noexcept
      { store(__i); return __i; }

      bool
      is_lock_free() const noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-_S_alignment));
      }

      bool
      is_lock_free() const volatile noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-_S_alignment));
      }


      static constexpr bool is_always_lock_free
 = __atomic_always_lock_free(sizeof(_M_i), 0);


      void
      store(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept
      {
 __atomic_store(std::__addressof(_M_i),
         __atomic_impl::__clear_padding(__i),
         int(__m));
      }

      void
      store(_Tp __i, memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 __atomic_store(std::__addressof(_M_i),
         __atomic_impl::__clear_padding(__i),
         int(__m));
      }

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
 alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
 _Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
 __atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 return *__ptr;
      }

      _Tp
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
        alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
 _Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
 __atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 return *__ptr;
      }

      _Tp
      exchange(_Tp __i, memory_order __m = memory_order_seq_cst) noexcept
      {
        alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
 _Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
 __atomic_exchange(std::__addressof(_M_i),
     __atomic_impl::__clear_padding(__i),
     __ptr, int(__m));
 return *__ptr;
      }

      _Tp
      exchange(_Tp __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      {
        alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
 _Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
 __atomic_exchange(std::__addressof(_M_i),
     __atomic_impl::__clear_padding(__i),
     __ptr, int(__m));
 return *__ptr;
      }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i, memory_order __s,
       memory_order __f) noexcept
      {
 return __atomic_impl::__compare_exchange(_M_i, __e, __i, true,
       __s, __f);
      }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i, memory_order __s,
       memory_order __f) volatile noexcept
      {
 return __atomic_impl::__compare_exchange(_M_i, __e, __i, true,
       __s, __f);
      }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i,
       memory_order __m = memory_order_seq_cst) noexcept
      { return compare_exchange_weak(__e, __i, __m,
                                     __cmpexch_failure_order(__m)); }

      bool
      compare_exchange_weak(_Tp& __e, _Tp __i,
       memory_order __m = memory_order_seq_cst) volatile noexcept
      { return compare_exchange_weak(__e, __i, __m,
                                     __cmpexch_failure_order(__m)); }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
         memory_order __f) noexcept
      {
 return __atomic_impl::__compare_exchange(_M_i, __e, __i, false,
       __s, __f);
      }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
         memory_order __f) volatile noexcept
      {
 return __atomic_impl::__compare_exchange(_M_i, __e, __i, false,
       __s, __f);
      }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i,
          memory_order __m = memory_order_seq_cst) noexcept
      { return compare_exchange_strong(__e, __i, __m,
                                       __cmpexch_failure_order(__m)); }

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i,
       memory_order __m = memory_order_seq_cst) volatile noexcept
      { return compare_exchange_strong(__e, __i, __m,
                                       __cmpexch_failure_order(__m)); }
# 419 "/usr/include/c++/15.1.1/atomic" 3
    };


  template<typename _Tp>
    struct atomic<_Tp*>
    {
      using value_type = _Tp*;
      using difference_type = ptrdiff_t;

      typedef _Tp* __pointer_type;
      typedef __atomic_base<_Tp*> __base_type;
      __base_type _M_b;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__pointer_type __p) noexcept : _M_b(__p) { }

      operator __pointer_type() const noexcept
      { return __pointer_type(_M_b); }

      operator __pointer_type() const volatile noexcept
      { return __pointer_type(_M_b); }

      __pointer_type
      operator=(__pointer_type __p) noexcept
      { return _M_b.operator=(__p); }

      __pointer_type
      operator=(__pointer_type __p) volatile noexcept
      { return _M_b.operator=(__p); }

      __pointer_type
      operator++(int) noexcept
      {

 static_assert( is_object_v<_Tp>, "pointer to object type" );

 return _M_b++;
      }

      __pointer_type
      operator++(int) volatile noexcept
      {

 static_assert( is_object_v<_Tp>, "pointer to object type" );

 return _M_b++;
      }

      __pointer_type
      operator--(int) noexcept
      {

 static_assert( is_object_v<_Tp>, "pointer to object type" );

 return _M_b--;
      }

      __pointer_type
      operator--(int) volatile noexcept
      {

 static_assert( is_object_v<_Tp>, "pointer to object type" );

 return _M_b--;
      }

      __pointer_type
      operator++() noexcept
      {

 static_assert( is_object_v<_Tp>, "pointer to object type" );

 return ++_M_b;
      }

      __pointer_type
      operator++() volatile noexcept
      {

 static_assert( is_object_v<_Tp>, "pointer to object type" );

 return ++_M_b;
      }

      __pointer_type
      operator--() noexcept
      {

 static_assert( is_object_v<_Tp>, "pointer to object type" );

 return --_M_b;
      }

      __pointer_type
      operator--() volatile noexcept
      {

 static_assert( is_object_v<_Tp>, "pointer to object type" );

 return --_M_b;
      }

      __pointer_type
      operator+=(ptrdiff_t __d) noexcept
      {

 static_assert( is_object_v<_Tp>, "pointer to object type" );

 return _M_b.operator+=(__d);
      }

      __pointer_type
      operator+=(ptrdiff_t __d) volatile noexcept
      {

 static_assert( is_object_v<_Tp>, "pointer to object type" );

 return _M_b.operator+=(__d);
      }

      __pointer_type
      operator-=(ptrdiff_t __d) noexcept
      {

 static_assert( is_object_v<_Tp>, "pointer to object type" );

 return _M_b.operator-=(__d);
      }

      __pointer_type
      operator-=(ptrdiff_t __d) volatile noexcept
      {

 static_assert( is_object_v<_Tp>, "pointer to object type" );

 return _M_b.operator-=(__d);
      }

      bool
      is_lock_free() const noexcept
      { return _M_b.is_lock_free(); }

      bool
      is_lock_free() const volatile noexcept
      { return _M_b.is_lock_free(); }


      static constexpr bool is_always_lock_free
 = 2 == 2;


      void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) noexcept
      { return _M_b.store(__p, __m); }

      void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      { return _M_b.store(__p, __m); }

      __pointer_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { return _M_b.load(__m); }

      __pointer_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      { return _M_b.load(__m); }

      __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) noexcept
      { return _M_b.exchange(__p, __m); }

      __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      { return _M_b.exchange(__p, __m); }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
       memory_order __m1, memory_order __m2) noexcept
      { return _M_b.compare_exchange_weak(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
       memory_order __m1,
       memory_order __m2) volatile noexcept
      { return _M_b.compare_exchange_weak(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
       memory_order __m = memory_order_seq_cst) noexcept
      {
 return compare_exchange_weak(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }

      bool
      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,
      memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return compare_exchange_weak(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1, memory_order __m2) noexcept
      { return _M_b.compare_exchange_strong(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1,
         memory_order __m2) volatile noexcept
      { return _M_b.compare_exchange_strong(__p1, __p2, __m1, __m2); }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m = memory_order_seq_cst) noexcept
      {
 return _M_b.compare_exchange_strong(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }

      bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
      memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return _M_b.compare_exchange_strong(__p1, __p2, __m,
         __cmpexch_failure_order(__m));
      }
# 673 "/usr/include/c++/15.1.1/atomic" 3
      __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      {

 static_assert( is_object_v<_Tp>, "pointer to object type" );

 return _M_b.fetch_add(__d, __m);
      }

      __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      {

 static_assert( is_object_v<_Tp>, "pointer to object type" );

 return _M_b.fetch_add(__d, __m);
      }

      __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      {

 static_assert( is_object_v<_Tp>, "pointer to object type" );

 return _M_b.fetch_sub(__d, __m);
      }

      __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      {

 static_assert( is_object_v<_Tp>, "pointer to object type" );

 return _M_b.fetch_sub(__d, __m);
      }
    };



  template<>
    struct atomic<char> : __atomic_base<char>
    {
      typedef char __integral_type;
      typedef __atomic_base<char> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;


      static constexpr bool is_always_lock_free = 2 == 2;

    };


  template<>
    struct atomic<signed char> : __atomic_base<signed char>
    {
      typedef signed char __integral_type;
      typedef __atomic_base<signed char> __base_type;

      atomic() noexcept= default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;


      static constexpr bool is_always_lock_free = 2 == 2;

    };


  template<>
    struct atomic<unsigned char> : __atomic_base<unsigned char>
    {
      typedef unsigned char __integral_type;
      typedef __atomic_base<unsigned char> __base_type;

      atomic() noexcept= default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;


      static constexpr bool is_always_lock_free = 2 == 2;

    };


  template<>
    struct atomic<short> : __atomic_base<short>
    {
      typedef short __integral_type;
      typedef __atomic_base<short> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;


      static constexpr bool is_always_lock_free = 2 == 2;

    };


  template<>
    struct atomic<unsigned short> : __atomic_base<unsigned short>
    {
      typedef unsigned short __integral_type;
      typedef __atomic_base<unsigned short> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;


      static constexpr bool is_always_lock_free = 2 == 2;

    };


  template<>
    struct atomic<int> : __atomic_base<int>
    {
      typedef int __integral_type;
      typedef __atomic_base<int> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;


      static constexpr bool is_always_lock_free = 2 == 2;

    };


  template<>
    struct atomic<unsigned int> : __atomic_base<unsigned int>
    {
      typedef unsigned int __integral_type;
      typedef __atomic_base<unsigned int> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;


      static constexpr bool is_always_lock_free = 2 == 2;

    };


  template<>
    struct atomic<long> : __atomic_base<long>
    {
      typedef long __integral_type;
      typedef __atomic_base<long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;


      static constexpr bool is_always_lock_free = 2 == 2;

    };


  template<>
    struct atomic<unsigned long> : __atomic_base<unsigned long>
    {
      typedef unsigned long __integral_type;
      typedef __atomic_base<unsigned long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;


      static constexpr bool is_always_lock_free = 2 == 2;

    };


  template<>
    struct atomic<long long> : __atomic_base<long long>
    {
      typedef long long __integral_type;
      typedef __atomic_base<long long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;


      static constexpr bool is_always_lock_free = 2 == 2;

    };


  template<>
    struct atomic<unsigned long long> : __atomic_base<unsigned long long>
    {
      typedef unsigned long long __integral_type;
      typedef __atomic_base<unsigned long long> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;


      static constexpr bool is_always_lock_free = 2 == 2;

    };


  template<>
    struct atomic<wchar_t> : __atomic_base<wchar_t>
    {
      typedef wchar_t __integral_type;
      typedef __atomic_base<wchar_t> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;


      static constexpr bool is_always_lock_free = 2 == 2;

    };
# 1018 "/usr/include/c++/15.1.1/atomic" 3
  template<>
    struct atomic<char16_t> : __atomic_base<char16_t>
    {
      typedef char16_t __integral_type;
      typedef __atomic_base<char16_t> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;


      static constexpr bool is_always_lock_free
 = 2 == 2;

    };


  template<>
    struct atomic<char32_t> : __atomic_base<char32_t>
    {
      typedef char32_t __integral_type;
      typedef __atomic_base<char32_t> __base_type;

      atomic() noexcept = default;
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(__integral_type __i) noexcept : __base_type(__i) { }

      using __base_type::operator __integral_type;
      using __base_type::operator=;


      static constexpr bool is_always_lock_free
 = 2 == 2;

    };



  typedef atomic<bool> atomic_bool;


  typedef atomic<char> atomic_char;


  typedef atomic<signed char> atomic_schar;


  typedef atomic<unsigned char> atomic_uchar;


  typedef atomic<short> atomic_short;


  typedef atomic<unsigned short> atomic_ushort;


  typedef atomic<int> atomic_int;


  typedef atomic<unsigned int> atomic_uint;


  typedef atomic<long> atomic_long;


  typedef atomic<unsigned long> atomic_ulong;


  typedef atomic<long long> atomic_llong;


  typedef atomic<unsigned long long> atomic_ullong;


  typedef atomic<wchar_t> atomic_wchar_t;







  typedef atomic<char16_t> atomic_char16_t;


  typedef atomic<char32_t> atomic_char32_t;






  typedef atomic<int8_t> atomic_int8_t;


  typedef atomic<uint8_t> atomic_uint8_t;


  typedef atomic<int16_t> atomic_int16_t;


  typedef atomic<uint16_t> atomic_uint16_t;


  typedef atomic<int32_t> atomic_int32_t;


  typedef atomic<uint32_t> atomic_uint32_t;


  typedef atomic<int64_t> atomic_int64_t;


  typedef atomic<uint64_t> atomic_uint64_t;



  typedef atomic<int_least8_t> atomic_int_least8_t;


  typedef atomic<uint_least8_t> atomic_uint_least8_t;


  typedef atomic<int_least16_t> atomic_int_least16_t;


  typedef atomic<uint_least16_t> atomic_uint_least16_t;


  typedef atomic<int_least32_t> atomic_int_least32_t;


  typedef atomic<uint_least32_t> atomic_uint_least32_t;


  typedef atomic<int_least64_t> atomic_int_least64_t;


  typedef atomic<uint_least64_t> atomic_uint_least64_t;



  typedef atomic<int_fast8_t> atomic_int_fast8_t;


  typedef atomic<uint_fast8_t> atomic_uint_fast8_t;


  typedef atomic<int_fast16_t> atomic_int_fast16_t;


  typedef atomic<uint_fast16_t> atomic_uint_fast16_t;


  typedef atomic<int_fast32_t> atomic_int_fast32_t;


  typedef atomic<uint_fast32_t> atomic_uint_fast32_t;


  typedef atomic<int_fast64_t> atomic_int_fast64_t;


  typedef atomic<uint_fast64_t> atomic_uint_fast64_t;



  typedef atomic<intptr_t> atomic_intptr_t;


  typedef atomic<uintptr_t> atomic_uintptr_t;


  typedef atomic<size_t> atomic_size_t;


  typedef atomic<ptrdiff_t> atomic_ptrdiff_t;


  typedef atomic<intmax_t> atomic_intmax_t;


  typedef atomic<uintmax_t> atomic_uintmax_t;


  inline bool
  atomic_flag_test_and_set_explicit(atomic_flag* __a,
        memory_order __m) noexcept
  { return __a->test_and_set(__m); }

  inline bool
  atomic_flag_test_and_set_explicit(volatile atomic_flag* __a,
        memory_order __m) noexcept
  { return __a->test_and_set(__m); }
# 1244 "/usr/include/c++/15.1.1/atomic" 3
  inline void
  atomic_flag_clear_explicit(atomic_flag* __a, memory_order __m) noexcept
  { __a->clear(__m); }

  inline void
  atomic_flag_clear_explicit(volatile atomic_flag* __a,
        memory_order __m) noexcept
  { __a->clear(__m); }

  inline bool
  atomic_flag_test_and_set(atomic_flag* __a) noexcept
  { return atomic_flag_test_and_set_explicit(__a, memory_order_seq_cst); }

  inline bool
  atomic_flag_test_and_set(volatile atomic_flag* __a) noexcept
  { return atomic_flag_test_and_set_explicit(__a, memory_order_seq_cst); }

  inline void
  atomic_flag_clear(atomic_flag* __a) noexcept
  { atomic_flag_clear_explicit(__a, memory_order_seq_cst); }

  inline void
  atomic_flag_clear(volatile atomic_flag* __a) noexcept
  { atomic_flag_clear_explicit(__a, memory_order_seq_cst); }
# 1291 "/usr/include/c++/15.1.1/atomic" 3
  template<typename _Tp>
    using __atomic_val_t = __type_identity_t<_Tp>;
  template<typename _Tp>
    using __atomic_diff_t = typename atomic<_Tp>::difference_type;




  template<typename _ITp>
    inline bool
    atomic_is_lock_free(const atomic<_ITp>* __a) noexcept
    { return __a->is_lock_free(); }

  template<typename _ITp>
    inline bool
    atomic_is_lock_free(const volatile atomic<_ITp>* __a) noexcept
    { return __a->is_lock_free(); }

  template<typename _ITp>
    inline void
    atomic_init(atomic<_ITp>* __a, __atomic_val_t<_ITp> __i) noexcept
    { __a->store(__i, memory_order_relaxed); }

  template<typename _ITp>
    inline void
    atomic_init(volatile atomic<_ITp>* __a, __atomic_val_t<_ITp> __i) noexcept
    { __a->store(__i, memory_order_relaxed); }

  template<typename _ITp>
    inline void
    atomic_store_explicit(atomic<_ITp>* __a, __atomic_val_t<_ITp> __i,
     memory_order __m) noexcept
    { __a->store(__i, __m); }

  template<typename _ITp>
    inline void
    atomic_store_explicit(volatile atomic<_ITp>* __a, __atomic_val_t<_ITp> __i,
     memory_order __m) noexcept
    { __a->store(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_load_explicit(const atomic<_ITp>* __a, memory_order __m) noexcept
    { return __a->load(__m); }

  template<typename _ITp>
    inline _ITp
    atomic_load_explicit(const volatile atomic<_ITp>* __a,
    memory_order __m) noexcept
    { return __a->load(__m); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange_explicit(atomic<_ITp>* __a, __atomic_val_t<_ITp> __i,
        memory_order __m) noexcept
    { return __a->exchange(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange_explicit(volatile atomic<_ITp>* __a,
        __atomic_val_t<_ITp> __i,
        memory_order __m) noexcept
    { return __a->exchange(__i, __m); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak_explicit(atomic<_ITp>* __a,
       __atomic_val_t<_ITp>* __i1,
       __atomic_val_t<_ITp> __i2,
       memory_order __m1,
       memory_order __m2) noexcept
    { return __a->compare_exchange_weak(*__i1, __i2, __m1, __m2); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak_explicit(volatile atomic<_ITp>* __a,
       __atomic_val_t<_ITp>* __i1,
       __atomic_val_t<_ITp> __i2,
       memory_order __m1,
       memory_order __m2) noexcept
    { return __a->compare_exchange_weak(*__i1, __i2, __m1, __m2); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong_explicit(atomic<_ITp>* __a,
         __atomic_val_t<_ITp>* __i1,
         __atomic_val_t<_ITp> __i2,
         memory_order __m1,
         memory_order __m2) noexcept
    { return __a->compare_exchange_strong(*__i1, __i2, __m1, __m2); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong_explicit(volatile atomic<_ITp>* __a,
         __atomic_val_t<_ITp>* __i1,
         __atomic_val_t<_ITp> __i2,
         memory_order __m1,
         memory_order __m2) noexcept
    { return __a->compare_exchange_strong(*__i1, __i2, __m1, __m2); }


  template<typename _ITp>
    inline void
    atomic_store(atomic<_ITp>* __a, __atomic_val_t<_ITp> __i) noexcept
    { atomic_store_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline void
    atomic_store(volatile atomic<_ITp>* __a, __atomic_val_t<_ITp> __i) noexcept
    { atomic_store_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_load(const atomic<_ITp>* __a) noexcept
    { return atomic_load_explicit(__a, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_load(const volatile atomic<_ITp>* __a) noexcept
    { return atomic_load_explicit(__a, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange(atomic<_ITp>* __a, __atomic_val_t<_ITp> __i) noexcept
    { return atomic_exchange_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_exchange(volatile atomic<_ITp>* __a,
      __atomic_val_t<_ITp> __i) noexcept
    { return atomic_exchange_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak(atomic<_ITp>* __a,
     __atomic_val_t<_ITp>* __i1,
     __atomic_val_t<_ITp> __i2) noexcept
    {
      return atomic_compare_exchange_weak_explicit(__a, __i1, __i2,
         memory_order_seq_cst,
         memory_order_seq_cst);
    }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_weak(volatile atomic<_ITp>* __a,
     __atomic_val_t<_ITp>* __i1,
     __atomic_val_t<_ITp> __i2) noexcept
    {
      return atomic_compare_exchange_weak_explicit(__a, __i1, __i2,
         memory_order_seq_cst,
         memory_order_seq_cst);
    }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong(atomic<_ITp>* __a,
       __atomic_val_t<_ITp>* __i1,
       __atomic_val_t<_ITp> __i2) noexcept
    {
      return atomic_compare_exchange_strong_explicit(__a, __i1, __i2,
           memory_order_seq_cst,
           memory_order_seq_cst);
    }

  template<typename _ITp>
    inline bool
    atomic_compare_exchange_strong(volatile atomic<_ITp>* __a,
       __atomic_val_t<_ITp>* __i1,
       __atomic_val_t<_ITp> __i2) noexcept
    {
      return atomic_compare_exchange_strong_explicit(__a, __i1, __i2,
           memory_order_seq_cst,
           memory_order_seq_cst);
    }
# 1497 "/usr/include/c++/15.1.1/atomic" 3
  template<typename _ITp>
    inline _ITp
    atomic_fetch_add_explicit(atomic<_ITp>* __a,
         __atomic_diff_t<_ITp> __i,
         memory_order __m) noexcept
    { return __a->fetch_add(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_add_explicit(volatile atomic<_ITp>* __a,
         __atomic_diff_t<_ITp> __i,
         memory_order __m) noexcept
    { return __a->fetch_add(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub_explicit(atomic<_ITp>* __a,
         __atomic_diff_t<_ITp> __i,
         memory_order __m) noexcept
    { return __a->fetch_sub(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub_explicit(volatile atomic<_ITp>* __a,
         __atomic_diff_t<_ITp> __i,
         memory_order __m) noexcept
    { return __a->fetch_sub(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and_explicit(__atomic_base<_ITp>* __a,
         __atomic_val_t<_ITp> __i,
         memory_order __m) noexcept
    { return __a->fetch_and(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and_explicit(volatile __atomic_base<_ITp>* __a,
         __atomic_val_t<_ITp> __i,
         memory_order __m) noexcept
    { return __a->fetch_and(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or_explicit(__atomic_base<_ITp>* __a,
        __atomic_val_t<_ITp> __i,
        memory_order __m) noexcept
    { return __a->fetch_or(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or_explicit(volatile __atomic_base<_ITp>* __a,
        __atomic_val_t<_ITp> __i,
        memory_order __m) noexcept
    { return __a->fetch_or(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor_explicit(__atomic_base<_ITp>* __a,
         __atomic_val_t<_ITp> __i,
         memory_order __m) noexcept
    { return __a->fetch_xor(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor_explicit(volatile __atomic_base<_ITp>* __a,
         __atomic_val_t<_ITp> __i,
         memory_order __m) noexcept
    { return __a->fetch_xor(__i, __m); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_add(atomic<_ITp>* __a,
       __atomic_diff_t<_ITp> __i) noexcept
    { return atomic_fetch_add_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_add(volatile atomic<_ITp>* __a,
       __atomic_diff_t<_ITp> __i) noexcept
    { return atomic_fetch_add_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub(atomic<_ITp>* __a,
       __atomic_diff_t<_ITp> __i) noexcept
    { return atomic_fetch_sub_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_sub(volatile atomic<_ITp>* __a,
       __atomic_diff_t<_ITp> __i) noexcept
    { return atomic_fetch_sub_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and(__atomic_base<_ITp>* __a,
       __atomic_val_t<_ITp> __i) noexcept
    { return atomic_fetch_and_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_and(volatile __atomic_base<_ITp>* __a,
       __atomic_val_t<_ITp> __i) noexcept
    { return atomic_fetch_and_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or(__atomic_base<_ITp>* __a,
      __atomic_val_t<_ITp> __i) noexcept
    { return atomic_fetch_or_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_or(volatile __atomic_base<_ITp>* __a,
      __atomic_val_t<_ITp> __i) noexcept
    { return atomic_fetch_or_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor(__atomic_base<_ITp>* __a,
       __atomic_val_t<_ITp> __i) noexcept
    { return atomic_fetch_xor_explicit(__a, __i, memory_order_seq_cst); }

  template<typename _ITp>
    inline _ITp
    atomic_fetch_xor(volatile __atomic_base<_ITp>* __a,
       __atomic_val_t<_ITp> __i) noexcept
    { return atomic_fetch_xor_explicit(__a, __i, memory_order_seq_cst); }
# 1798 "/usr/include/c++/15.1.1/atomic" 3

}
# 11 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-common.h" 2

# 1 "/usr/include/c++/15.1.1/cassert" 1 3
# 46 "/usr/include/c++/15.1.1/cassert" 3
# 1 "/usr/include/assert.h" 1 3 4
# 34 "/usr/include/assert.h" 3 4
#define _ASSERT_H 1



#define __ASSERT_VOID_CAST static_cast<void>
# 64 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     noexcept (true) __attribute__ ((__noreturn__)) __attribute__ ((__cold__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     noexcept (true) __attribute__ ((__noreturn__)) __attribute__ ((__cold__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     noexcept (true) __attribute__ ((__noreturn__)) __attribute__ ((__cold__));


}







#define __ASSERT_FILE __builtin_FILE ()
#define __ASSERT_LINE __builtin_LINE ()






#define assert(expr) (static_cast <bool> (expr) ? void (0) : __assert_fail (#expr, __ASSERT_FILE, __ASSERT_LINE, __ASSERT_FUNCTION))
# 125 "/usr/include/assert.h" 3 4
#define assert_perror(errnum) (!(errnum) ? __ASSERT_VOID_CAST (0) : __assert_perror_fail ((errnum), __FILE__, __LINE__, __ASSERT_FUNCTION))
# 137 "/usr/include/assert.h" 3 4
#define __ASSERT_FUNCTION __extension__ __PRETTY_FUNCTION__
# 47 "/usr/include/c++/15.1.1/cassert" 2 3
# 13 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-common.h" 2
# 1 "/usr/include/c++/15.1.1/climits" 1 3
# 40 "/usr/include/c++/15.1.1/climits" 3
#define _GLIBCXX_CLIMITS 1






# 1 "/usr/lib/gcc/x86_64-pc-linux-gnu/15.1.1/include/limits.h" 1 3 4
# 48 "/usr/include/c++/15.1.1/climits" 2 3

 
# 49 "/usr/include/c++/15.1.1/climits" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
# 64 "/usr/include/c++/15.1.1/climits" 3
#pragma GCC diagnostic pop
# 14 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-common.h" 2




# 1 "/usr/include/c++/15.1.1/fstream" 1 3
# 34 "/usr/include/c++/15.1.1/fstream" 3
#define _GLIBCXX_FSTREAM 1







# 1 "/usr/include/c++/15.1.1/istream" 1 3
# 34 "/usr/include/c++/15.1.1/istream" 3
#define _GLIBCXX_ISTREAM 1







# 1 "/usr/include/c++/15.1.1/ios" 1 3
# 34 "/usr/include/c++/15.1.1/ios" 3
#define _GLIBCXX_IOS 1
# 46 "/usr/include/c++/15.1.1/ios" 3
# 1 "/usr/include/c++/15.1.1/bits/ios_base.h" 1 3
# 35 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
#define _IOS_BASE_H 1







# 1 "/usr/include/c++/15.1.1/bits/locale_classes.h" 1 3
# 35 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
#define _LOCALE_CLASSES_H 1
# 49 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 68 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend const _Facet*
      __try_use_facet(const locale&) noexcept;

    template<typename _Cache>
      friend struct __use_cache;
# 108 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 127 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
    locale() throw();
# 136 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 146 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 161 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 172 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
    explicit
    locale(const std::string& __s) : locale(__s.c_str()) { }
# 187 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
    locale(const locale& __base, const std::string& __s, category __cat)
    : locale(__base, __s.c_str(), __cat) { }
# 202 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 215 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 229 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 244 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
    template<typename _Facet>
      [[__nodiscard__]]
      locale
      combine(const locale& __other) const;






    [[__nodiscard__]] __attribute ((__abi_tag__ ("cxx11")))
    string
    name() const;
# 275 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
    [[__nodiscard__]]
    bool
    operator==(const locale& __other) const throw();
# 286 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
    [[__nodiscard__]]
    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 307 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      [[__nodiscard__]]
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 324 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
    static locale
    global(const locale& __loc);




    [[__nodiscard__]]
    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 360 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 6 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);


    static const id* const _S_twinned_facets[];

  };


  template<typename _Tp>
    constexpr bool __is_facet = is_base_of_v<locale::facet, _Tp>;
  template<typename _Tp>
    constexpr bool __is_facet<volatile _Tp> = false;
# 404 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 435 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();
# 471 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
    facet(const facet&) = delete;

    facet&
    operator=(const facet&) = delete;


  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {

      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
          ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    const facet* _M_sso_shim(const id*) const;
    const facet* _M_cow_shim(const id*) const;

  protected:
    class __shim;
  };
# 516 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet*
      __try_use_facet(const locale&) noexcept;




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend const _Facet*
      __try_use_facet(const locale&) noexcept;

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {

      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
          ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    template<typename _Facet>
      void
      _M_init_facet_unchecked(_Facet* __facet)
      {
 __facet->_M_add_reference();
 _M_facets[_Facet::id._M_id()] = __facet;
      }

    void
    _M_install_cache(const facet*, size_t);

    void _M_init_extra(facet**);
    void _M_init_extra(void*, void*, const char*, const char*);




  };
# 686 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
  template<typename _CharT>
    class __cxx11:: collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 713 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 727 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 744 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 763 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 777 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 806 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 820 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 833 "/usr/include/c++/15.1.1/bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class __cxx11:: collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }


      explicit
      collate_byname(const string& __s, size_t __refs = 0)
      : collate_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~collate_byname() { }
    };


}

# 1 "/usr/include/c++/15.1.1/bits/locale_classes.tcc" 1 3
# 35 "/usr/include/c++/15.1.1/bits/locale_classes.tcc" 3
#define _LOCALE_CLASSES_TCC 1







#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"
#pragma GCC diagnostic ignored "-Wvariadic-macros"

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {


      if (__builtin_expect(!__f, 0))
 {
   _M_impl = __other._M_impl;
   _M_impl->_M_add_reference();
   return;
 }

      _M_impl = new _Impl(*__other._M_impl, 1);

      try
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      catch(...)
 {
   _M_impl->_M_remove_reference();
   throw;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {

      static_assert(__is_facet<_Facet>, "Template argument must be a facet");


      _Impl* __tmp = new _Impl(*_M_impl, 1);
      try
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      catch(...)
 {
   __tmp->_M_remove_reference();
   throw;
 }
      delete[] __tmp->_M_names[0];
      __tmp->_M_names[0] = 0;
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
  template<typename _Facet>
    inline const _Facet*
    __try_use_facet(const locale& __loc) noexcept
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;



#define _GLIBCXX_STD_FACET(...) if _GLIBCXX_CONSTEXPR (__is_same(const _Facet, const __VA_ARGS__)) return static_cast<const _Facet*>(__facets[__i])



      if constexpr (__is_same(const _Facet, const ctype<char>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const num_get<char>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const num_put<char>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const codecvt<char, char, mbstate_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const collate<char>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const moneypunct<char>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const moneypunct<char, true>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const money_get<char>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const money_put<char>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const numpunct<char>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const time_get<char>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const time_put<char>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const messages<char>)) return static_cast<const _Facet*>(__facets[__i]);


      if constexpr (__is_same(const _Facet, const ctype<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const num_get<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const num_put<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const codecvt<wchar_t, char, mbstate_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const collate<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const moneypunct<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const moneypunct<wchar_t, true>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const money_get<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const money_put<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const numpunct<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const time_get<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const time_put<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const messages<wchar_t>)) return static_cast<const _Facet*>(__facets[__i]);


      if constexpr (__is_same(const _Facet, const codecvt<char16_t, char, mbstate_t>)) return static_cast<const _Facet*>(__facets[__i]);
      if constexpr (__is_same(const _Facet, const codecvt<char32_t, char, mbstate_t>)) return static_cast<const _Facet*>(__facets[__i]);


#undef _GLIBCXX_STD_FACET

      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
 return 0;


      return dynamic_cast<const _Facet*>(__facets[__i]);



    }
#pragma GCC diagnostic pop
# 187 "/usr/include/c++/15.1.1/bits/locale_classes.tcc" 3
  template<typename _Facet>
    [[__nodiscard__]]
    inline bool
    has_facet(const locale& __loc) noexcept
    {

      static_assert(__is_base_of(locale::facet, _Facet),
      "template argument must be derived from locale::facet");



      return std::__try_use_facet<_Facet>(__loc) != 0;
    }
# 215 "/usr/include/c++/15.1.1/bits/locale_classes.tcc" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdangling-reference"
  template<typename _Facet>
    [[__nodiscard__]]
    inline const _Facet&
    use_facet(const locale& __loc)
    {

      static_assert(__is_base_of(locale::facet, _Facet),
      "template argument must be derived from locale::facet");



      if (const _Facet* __f = std::__try_use_facet<_Facet>(__loc))
 return *__f;
      __throw_bad_cast();
    }
#pragma GCC diagnostic pop



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      struct _Buf
      {
 _Buf(size_t __n, void* __buf, int __e)
 : _M_c(__buf ? (_CharT*)__buf : new _CharT[__n]),
   _M_stackbuf(__buf),
   _M_errno(__e)
 { }

 ~_Buf()
 {
   if (_M_c != _M_stackbuf)
     delete[] _M_c;
   if ((*__errno_location ()) == 0)
     (*__errno_location ()) = _M_errno;
 }

 void _M_realloc(size_t __len)
 {
   _CharT* __p = new _CharT[__len];
   if (_M_c != _M_stackbuf)
     delete[] _M_c;
   _M_c = __p;
 }

 _CharT* _M_c;
 void* const _M_stackbuf;
 int _M_errno;
      };

      const size_t __bytes = __len * sizeof(_CharT);
      _Buf __buf(__len, __bytes <= 256 ? __builtin_alloca(__bytes) : 0, (*__errno_location ()));
      (*__errno_location ()) = 0;




      for (;;)
 {

   size_t __res = _M_transform(__buf._M_c, __p, __len);


   if (__res >= __len)
     {
       if (__builtin_expect((*__errno_location ()), 0))
  {

    __throw_system_error((*__errno_location ()));







  }

       __len = __res + 1;
       __buf._M_realloc(__len);
       __res = _M_transform(__buf._M_c, __p, __len);
     }

   __ret.append(__buf._M_c, __res);
   __p += char_traits<_CharT>::length(__p);
   if (__p == __pend)
     break;

   __p++;
   __ret.push_back(_CharT());
 }

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }




  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>*
    __try_use_facet<collate<char> >(const locale&) noexcept;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>*
    __try_use_facet<collate<wchar_t> >(const locale&) noexcept;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);




}

#pragma GCC diagnostic pop
# 897 "/usr/include/c++/15.1.1/bits/locale_classes.h" 2 3
# 44 "/usr/include/c++/15.1.1/bits/ios_base.h" 2 3




# 1 "/usr/include/c++/15.1.1/system_error" 1 3
# 30 "/usr/include/c++/15.1.1/system_error" 3
#define _GLIBCXX_SYSTEM_ERROR 1
# 43 "/usr/include/c++/15.1.1/system_error" 3
# 1 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/error_constants.h" 1 3
# 31 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/error_constants.h" 3
#define _GLIBCXX_ERROR_CONSTANTS 1




namespace std __attribute__ ((__visibility__ ("default")))
{


  enum class errc
    {
      address_family_not_supported = 97,
      address_in_use = 98,
      address_not_available = 99,
      already_connected = 106,
      argument_list_too_long = 7,
      argument_out_of_domain = 33,
      bad_address = 14,
      bad_file_descriptor = 9,


      bad_message = 74,


      broken_pipe = 32,
      connection_aborted = 103,
      connection_already_in_progress = 114,
      connection_refused = 111,
      connection_reset = 104,
      cross_device_link = 18,
      destination_address_required = 89,
      device_or_resource_busy = 16,
      directory_not_empty = 39,
      executable_format_error = 8,
      file_exists = 17,
      file_too_large = 27,
      filename_too_long = 36,
      function_not_supported = 38,
      host_unreachable = 113,


      identifier_removed = 43,


      illegal_byte_sequence = 84,
      inappropriate_io_control_operation = 25,
      interrupted = 4,
      invalid_argument = 22,
      invalid_seek = 29,
      io_error = 5,
      is_a_directory = 21,
      message_size = 90,
      network_down = 100,
      network_reset = 102,
      network_unreachable = 101,
      no_buffer_space = 105,
      no_child_process = 10,


      no_link = 67,


      no_lock_available = 37,


      no_message_available = 61,


      no_message = 42,
      no_protocol_option = 92,
      no_space_on_device = 28,


      no_stream_resources = 63,


      no_such_device_or_address = 6,
      no_such_device = 19,
      no_such_file_or_directory = 2,
      no_such_process = 3,
      not_a_directory = 20,
      not_a_socket = 88,


      not_a_stream = 60,


      not_connected = 107,
      not_enough_memory = 12,


      not_supported = 95,



      operation_canceled = 125,


      operation_in_progress = 115,
      operation_not_permitted = 1,
      operation_not_supported = 95,
      operation_would_block = 11,


      owner_dead = 130,


      permission_denied = 13,


      protocol_error = 71,


      protocol_not_supported = 93,
      read_only_file_system = 30,
      resource_deadlock_would_occur = 35,
      resource_unavailable_try_again = 11,
      result_out_of_range = 34,


      state_not_recoverable = 131,



      stream_timeout = 62,



      text_file_busy = 26,


      timed_out = 110,
      too_many_files_open_in_system = 23,
      too_many_files_open = 24,
      too_many_links = 31,
      too_many_symbolic_link_levels = 40,


      value_too_large = 75,




      wrong_protocol_type = 91
    };


}
# 44 "/usr/include/c++/15.1.1/system_error" 2 3

# 1 "/usr/include/c++/15.1.1/stdexcept" 1 3
# 34 "/usr/include/c++/15.1.1/stdexcept" 3
#define _GLIBCXX_STDEXCEPT 1
# 43 "/usr/include/c++/15.1.1/stdexcept" 3
namespace std __attribute__ ((__visibility__ ("default")))
{





  struct __cow_string
  {
    union {
      const char* _M_p;
      char _M_bytes[sizeof(const char*)];
    };

    __cow_string();
    __cow_string(const std::string&);
    __cow_string(const char*, size_t);
    __cow_string(const __cow_string&) noexcept;
    __cow_string& operator=(const __cow_string&) noexcept;
    ~__cow_string();

    __cow_string(__cow_string&&) noexcept;
    __cow_string& operator=(__cow_string&&) noexcept;

  };

  typedef basic_string<char> __sso_string;
# 115 "/usr/include/c++/15.1.1/stdexcept" 3
  class logic_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    logic_error(const string& __arg) ;


    explicit
    logic_error(const char*) ;

    logic_error(logic_error&&) noexcept;
    logic_error& operator=(logic_error&&) noexcept;



    logic_error(const logic_error&) noexcept;
    logic_error& operator=(const logic_error&) noexcept;





    virtual ~logic_error() noexcept;



    virtual const char*
    what() const noexcept;





  };



  class domain_error : public logic_error
  {
  public:
    explicit domain_error(const string& __arg) ;

    explicit domain_error(const char*) ;
    domain_error(const domain_error&) = default;
    domain_error& operator=(const domain_error&) = default;
    domain_error(domain_error&&) = default;
    domain_error& operator=(domain_error&&) = default;

    virtual ~domain_error() noexcept;
  };


  class invalid_argument : public logic_error
  {
  public:
    explicit invalid_argument(const string& __arg) ;

    explicit invalid_argument(const char*) ;
    invalid_argument(const invalid_argument&) = default;
    invalid_argument& operator=(const invalid_argument&) = default;
    invalid_argument(invalid_argument&&) = default;
    invalid_argument& operator=(invalid_argument&&) = default;

    virtual ~invalid_argument() noexcept;
  };



  class length_error : public logic_error
  {
  public:
    explicit length_error(const string& __arg) ;

    explicit length_error(const char*) ;
    length_error(const length_error&) = default;
    length_error& operator=(const length_error&) = default;
    length_error(length_error&&) = default;
    length_error& operator=(length_error&&) = default;

    virtual ~length_error() noexcept;
  };



  class out_of_range : public logic_error
  {
  public:
    explicit out_of_range(const string& __arg) ;

    explicit out_of_range(const char*) ;
    out_of_range(const out_of_range&) = default;
    out_of_range& operator=(const out_of_range&) = default;
    out_of_range(out_of_range&&) = default;
    out_of_range& operator=(out_of_range&&) = default;

    virtual ~out_of_range() noexcept;
  };






  class runtime_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    runtime_error(const string& __arg) ;


    explicit
    runtime_error(const char*) ;

    runtime_error(runtime_error&&) noexcept;
    runtime_error& operator=(runtime_error&&) noexcept;



    runtime_error(const runtime_error&) noexcept;
    runtime_error& operator=(const runtime_error&) noexcept;





    virtual ~runtime_error() noexcept;



    virtual const char*
    what() const noexcept;





  };


  class range_error : public runtime_error
  {
  public:
    explicit range_error(const string& __arg) ;

    explicit range_error(const char*) ;
    range_error(const range_error&) = default;
    range_error& operator=(const range_error&) = default;
    range_error(range_error&&) = default;
    range_error& operator=(range_error&&) = default;

    virtual ~range_error() noexcept;
  };


  class overflow_error : public runtime_error
  {
  public:
    explicit overflow_error(const string& __arg) ;

    explicit overflow_error(const char*) ;
    overflow_error(const overflow_error&) = default;
    overflow_error& operator=(const overflow_error&) = default;
    overflow_error(overflow_error&&) = default;
    overflow_error& operator=(overflow_error&&) = default;

    virtual ~overflow_error() noexcept;
  };


  class underflow_error : public runtime_error
  {
  public:
    explicit underflow_error(const string& __arg) ;

    explicit underflow_error(const char*) ;
    underflow_error(const underflow_error&) = default;
    underflow_error& operator=(const underflow_error&) = default;
    underflow_error(underflow_error&&) = default;
    underflow_error& operator=(underflow_error&&) = default;

    virtual ~underflow_error() noexcept;
  };




}
# 46 "/usr/include/c++/15.1.1/system_error" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{






  class error_code;
  class error_condition;
  class system_error;


  template<typename _Tp>
    struct is_error_code_enum : public false_type { };


  template<typename _Tp>
    struct is_error_condition_enum : public false_type { };

  template<>
    struct is_error_condition_enum<errc>
    : public true_type { };


  template <typename _Tp>
    inline constexpr bool is_error_code_enum_v =
      is_error_code_enum<_Tp>::value;
  template <typename _Tp>
    inline constexpr bool is_error_condition_enum_v =
      is_error_condition_enum<_Tp>::value;



inline namespace _V2 {
# 108 "/usr/include/c++/15.1.1/system_error" 3
  class error_category
  {
  public:
    constexpr error_category() noexcept = default;

    virtual ~error_category();

    error_category(const error_category&) = delete;
    error_category& operator=(const error_category&) = delete;


    virtual const char*
    name() const noexcept = 0;






  private:
    __attribute ((__abi_tag__ ("cxx11")))
    virtual __cow_string
    _M_message(int) const;

  public:

    __attribute ((__abi_tag__ ("cxx11")))
    virtual string
    message(int) const = 0;
# 146 "/usr/include/c++/15.1.1/system_error" 3
  public:

    virtual error_condition
    default_error_condition(int __i) const noexcept;


    virtual bool
    equivalent(int __i, const error_condition& __cond) const noexcept;


    virtual bool
    equivalent(const error_code& __code, int __i) const noexcept;


    [[__nodiscard__]]
    bool
    operator==(const error_category& __other) const noexcept
    { return this == &__other; }
# 172 "/usr/include/c++/15.1.1/system_error" 3
    bool
    operator<(const error_category& __other) const noexcept
    { return less<const error_category*>()(this, &__other); }

    bool
    operator!=(const error_category& __other) const noexcept
    { return this != &__other; }

  };




  [[__nodiscard__, __gnu__::__const__]]
  const error_category&
  generic_category() noexcept;


  [[__nodiscard__, __gnu__::__const__]]
  const error_category&
  system_category() noexcept;



}





namespace __adl_only
{
  void make_error_code() = delete;
  void make_error_condition() = delete;
}
# 225 "/usr/include/c++/15.1.1/system_error" 3
  class error_code
  {
    template<typename _ErrorCodeEnum>
      using _Check
 = __enable_if_t<is_error_code_enum<_ErrorCodeEnum>::value>;

  public:
    error_code() noexcept
    : _M_value(0), _M_cat(&system_category()) { }

    error_code(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }


    template<typename _ErrorCodeEnum,
      typename = _Check<_ErrorCodeEnum>>
      error_code(_ErrorCodeEnum __e) noexcept
      {
 using __adl_only::make_error_code;
 *this = make_error_code(__e);
      }

    error_code(const error_code&) = default;
    error_code& operator=(const error_code&) = default;

    void
    assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }

    void
    clear() noexcept
    { assign(0, system_category()); }


    [[__nodiscard__]]
    int
    value() const noexcept { return _M_value; }


    [[__nodiscard__]]
    const error_category&
    category() const noexcept { return *_M_cat; }


    error_condition
    default_error_condition() const noexcept;


    __attribute ((__abi_tag__ ("cxx11")))
    string
    message() const
    { return category().message(value()); }


    [[__nodiscard__]]
    explicit operator bool() const noexcept
    { return _M_value != 0; }


  private:
    int _M_value;
    const error_category* _M_cat;
  };
# 302 "/usr/include/c++/15.1.1/system_error" 3
  [[__nodiscard__]]
  inline error_code
  make_error_code(errc __e) noexcept
  { return error_code(static_cast<int>(__e), generic_category()); }
# 325 "/usr/include/c++/15.1.1/system_error" 3
  inline bool
  operator<(const error_code& __lhs, const error_code& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category()
     || (__lhs.category() == __rhs.category()
  && __lhs.value() < __rhs.value()));
  }







  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)
    { return (__os << __e.category().name() << ':' << __e.value()); }
# 356 "/usr/include/c++/15.1.1/system_error" 3
  class error_condition
  {
    template<typename _ErrorConditionEnum>
      using _Check
 = __enable_if_t<is_error_condition_enum<_ErrorConditionEnum>::value>;

  public:

    error_condition() noexcept
    : _M_value(0), _M_cat(&generic_category()) { }


    error_condition(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }


    template<typename _ErrorConditionEnum,
      typename = _Check<_ErrorConditionEnum>>
      error_condition(_ErrorConditionEnum __e) noexcept
      {
 using __adl_only::make_error_condition;
 *this = make_error_condition(__e);
      }

    error_condition(const error_condition&) = default;
    error_condition& operator=(const error_condition&) = default;


    void
    assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }


    void
    clear() noexcept
    { assign(0, generic_category()); }




    [[__nodiscard__]]
    int
    value() const noexcept { return _M_value; }


    [[__nodiscard__]]
    const error_category&
    category() const noexcept { return *_M_cat; }


    __attribute ((__abi_tag__ ("cxx11")))
    string
    message() const
    { return category().message(value()); }


    [[__nodiscard__]]
    explicit operator bool() const noexcept
    { return _M_value != 0; }


  private:
    int _M_value;
    const error_category* _M_cat;
  };
# 435 "/usr/include/c++/15.1.1/system_error" 3
  [[__nodiscard__]]
  inline error_condition
  make_error_condition(errc __e) noexcept
  { return error_condition(static_cast<int>(__e), generic_category()); }
# 449 "/usr/include/c++/15.1.1/system_error" 3
  [[__nodiscard__]]
  inline bool
  operator==(const error_code& __lhs, const error_code& __rhs) noexcept
  {
    return __lhs.category() == __rhs.category()
      && __lhs.value() == __rhs.value();
  }
# 465 "/usr/include/c++/15.1.1/system_error" 3
  [[__nodiscard__]]
  inline bool
  operator==(const error_code& __lhs, const error_condition& __rhs) noexcept
  {
    return __lhs.category().equivalent(__lhs.value(), __rhs)
      || __rhs.category().equivalent(__lhs, __rhs.value());
  }
# 480 "/usr/include/c++/15.1.1/system_error" 3
  [[__nodiscard__]]
  inline bool
  operator==(const error_condition& __lhs,
      const error_condition& __rhs) noexcept
  {
    return __lhs.category() == __rhs.category()
      && __lhs.value() == __rhs.value();
  }
# 508 "/usr/include/c++/15.1.1/system_error" 3
  inline bool
  operator<(const error_condition& __lhs,
     const error_condition& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category()
     || (__lhs.category() == __rhs.category()
  && __lhs.value() < __rhs.value()));
  }


  inline bool
  operator==(const error_condition& __lhs, const error_code& __rhs) noexcept
  {
    return (__rhs.category().equivalent(__rhs.value(), __lhs)
     || __lhs.category().equivalent(__rhs, __lhs.value()));
  }


  inline bool
  operator!=(const error_code& __lhs, const error_code& __rhs) noexcept
  { return !(__lhs == __rhs); }


  inline bool
  operator!=(const error_code& __lhs, const error_condition& __rhs) noexcept
  { return !(__lhs == __rhs); }


  inline bool
  operator!=(const error_condition& __lhs, const error_code& __rhs) noexcept
  { return !(__lhs == __rhs); }


  inline bool
  operator!=(const error_condition& __lhs,
      const error_condition& __rhs) noexcept
  { return !(__lhs == __rhs); }
# 558 "/usr/include/c++/15.1.1/system_error" 3
  class system_error : public std::runtime_error
  {
  private:
    error_code _M_code;

  public:
    system_error(error_code __ec = error_code())
    : runtime_error(__ec.message()), _M_code(__ec) { }

    system_error(error_code __ec, const string& __what)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }

    system_error(error_code __ec, const char* __what)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }

    system_error(int __v, const error_category& __ecat, const char* __what)
    : system_error(error_code(__v, __ecat), __what) { }

    system_error(int __v, const error_category& __ecat)
    : runtime_error(error_code(__v, __ecat).message()),
      _M_code(__v, __ecat) { }

    system_error(int __v, const error_category& __ecat, const string& __what)
    : runtime_error(__what + (": " + error_code(__v, __ecat).message())),
      _M_code(__v, __ecat) { }


    system_error (const system_error &) = default;
    system_error &operator= (const system_error &) = default;


    virtual ~system_error() noexcept;

    const error_code&
    code() const noexcept { return _M_code; }
  };


}



namespace std __attribute__ ((__visibility__ ("default")))
{






  template<>
    struct hash<error_code>
    : public __hash_base<size_t, error_code>
    {
      size_t
      operator()(const error_code& __e) const noexcept
      {
 const size_t __tmp = std::_Hash_impl::hash(__e.value());
 return std::_Hash_impl::__hash_combine(&__e.category(), __tmp);
      }
    };






  template<>
    struct hash<error_condition>
    : public __hash_base<size_t, error_condition>
    {
      size_t
      operator()(const error_condition& __e) const noexcept
      {
 const size_t __tmp = std::_Hash_impl::hash(__e.value());
 return std::_Hash_impl::__hash_combine(&__e.category(), __tmp);
      }
    };



}
# 49 "/usr/include/c++/15.1.1/bits/ios_base.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{






  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16,
      _S_ios_fmtflags_max = 0x7fffffff,
      _S_ios_fmtflags_min = ~0x7fffffff
    };

  [[__nodiscard__]] constexpr
  inline _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b) noexcept
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  [[__nodiscard__]] constexpr
  inline _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b) noexcept
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  [[__nodiscard__]] constexpr
  inline _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b) noexcept
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  [[__nodiscard__]] constexpr
  inline _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a) noexcept
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }

  constexpr
  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b) noexcept
  { return __a = __a | __b; }

  constexpr
  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b) noexcept
  { return __a = __a & __b; }

  constexpr
  inline const _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b) noexcept
  { return __a = __a ^ __b; }






#define _NOREPLACE_UNUSED __attribute__((__unused__))


  enum __attribute__((__flag_enum__)) _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_noreplace __attribute__((__unused__)) = 1L << 6,
      _S_ios_openmode_end __attribute__((__unused__)) = 1L << 16,
      _S_ios_openmode_max __attribute__((__unused__)) = 0x7fffffff,
      _S_ios_openmode_min __attribute__((__unused__)) = ~0x7fffffff
    };

#undef _NOREPLACE_UNUSED

  [[__nodiscard__]] constexpr
  inline _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b) noexcept
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  [[__nodiscard__]] constexpr
  inline _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b) noexcept
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  [[__nodiscard__]] constexpr
  inline _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b) noexcept
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  [[__nodiscard__]] constexpr
  inline _Ios_Openmode
  operator~(_Ios_Openmode __a) noexcept
  { return _Ios_Openmode(~static_cast<int>(__a)); }

  constexpr
  inline const _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b) noexcept
  { return __a = __a | __b; }

  constexpr
  inline const _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b) noexcept
  { return __a = __a & __b; }

  constexpr
  inline const _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b) noexcept
  { return __a = __a ^ __b; }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16,
      _S_ios_iostate_max = 0x7fffffff,
      _S_ios_iostate_min = ~0x7fffffff
    };

  [[__nodiscard__]] constexpr
  inline _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b) noexcept
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  [[__nodiscard__]] constexpr
  inline _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b) noexcept
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  [[__nodiscard__]] constexpr
  inline _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b) noexcept
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  [[__nodiscard__]] constexpr
  inline _Ios_Iostate
  operator~(_Ios_Iostate __a) noexcept
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  constexpr
  inline const _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b) noexcept
  { return __a = __a | __b; }

  constexpr
  inline const _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b) noexcept
  { return __a = __a & __b; }

  constexpr
  inline const _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b) noexcept
  { return __a = __a ^ __b; }


  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };



  enum class io_errc { stream = 1 };

  template <> struct is_error_code_enum<io_errc> : public true_type { };

  [[__nodiscard__, __gnu__::__const__]]
  const error_category&
  iostream_category() noexcept;

  [[__nodiscard__]]
  inline error_code
  make_error_code(io_errc __e) noexcept
  { return error_code(static_cast<int>(__e), iostream_category()); }

  [[__nodiscard__]]
  inline error_condition
  make_error_condition(io_errc __e) noexcept
  { return error_condition(static_cast<int>(__e), iostream_category()); }
# 265 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
  class ios_base
  {
# 283 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
  public:
# 292 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
    class __attribute ((__abi_tag__ ("cxx11"))) failure : public system_error
    {
    public:
      explicit
      failure(const string& __str);


      explicit
      failure(const string&, const error_code&);

      explicit
      failure(const char*, const error_code& = io_errc::stream);


      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();
    };
# 378 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 453 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 484 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;

    static const openmode __noreplace = _S_noreplace;
# 523 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;
# 556 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 573 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
    typedef void (*event_callback) (event __e, ios_base& __b, int __i);
# 585 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      {

        ;
        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
        if (__res == 0)
          {
            ;
          }
        return __res;
      }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();


      Init(const Init&) = default;
      Init& operator=(const Init&) = default;


    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    [[__nodiscard__]]
    fmtflags
    flags() const
    { return _M_flags; }
# 704 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 720 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 737 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 763 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
    [[__nodiscard__]]
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    [[__nodiscard__]]
    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 816 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 828 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 839 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
    [[__nodiscard__]]
    locale
    getloc() const
    { return _M_ios_locale; }
# 851 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 870 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
    static int
    xalloc() throw();
# 886 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = ((unsigned)__ix < (unsigned)_M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 907 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = ((unsigned)__ix < (unsigned)_M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 924 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();
# 938 "/usr/include/c++/15.1.1/bits/ios_base.h" 3
  public:
    ios_base(const ios_base&) = delete;

    ios_base&
    operator=(const ios_base&) = delete;

  protected:
    void
    _M_move(ios_base&) noexcept;

    void
    _M_swap(ios_base& __rhs) noexcept;

  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }






  inline ios_base&
  hexfloat(ios_base& __base)
  {
    __base.setf(ios_base::fixed | ios_base::scientific, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  defaultfloat(ios_base& __base)
  {
    __base.unsetf(ios_base::floatfield);
    return __base;
  }



}
# 47 "/usr/include/c++/15.1.1/ios" 2 3
# 1 "/usr/include/c++/15.1.1/streambuf" 1 3
# 34 "/usr/include/c++/15.1.1/streambuf" 3
#define _GLIBXX_STREAMBUF 1
# 49 "/usr/include/c++/15.1.1/streambuf" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


#define _IsUnused __attribute__ ((__unused__))

  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 125 "/usr/include/c++/15.1.1/streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(basic_streambuf*, basic_streambuf*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Distance>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            void>::__type
        advance(istreambuf_iterator<_CharT2>&, _Distance);

      friend void __istream_extract(istream&, char*, streamsize);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:







      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 217 "/usr/include/c++/15.1.1/streambuf" 3
      locale
      pubimbue(const locale& __loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 234 "/usr/include/c++/15.1.1/streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 247 "/usr/include/c++/15.1.1/streambuf" 3
      basic_streambuf*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }
# 259 "/usr/include/c++/15.1.1/streambuf" 3
      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }
# 271 "/usr/include/c++/15.1.1/streambuf" 3
      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }




      int
      pubsync() { return this->sync(); }
# 292 "/usr/include/c++/15.1.1/streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 306 "/usr/include/c++/15.1.1/streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 324 "/usr/include/c++/15.1.1/streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 346 "/usr/include/c++/15.1.1/streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 365 "/usr/include/c++/15.1.1/streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 380 "/usr/include/c++/15.1.1/streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 405 "/usr/include/c++/15.1.1/streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 432 "/usr/include/c++/15.1.1/streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 458 "/usr/include/c++/15.1.1/streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 472 "/usr/include/c++/15.1.1/streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 490 "/usr/include/c++/15.1.1/streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 506 "/usr/include/c++/15.1.1/streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 517 "/usr/include/c++/15.1.1/streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 537 "/usr/include/c++/15.1.1/streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 553 "/usr/include/c++/15.1.1/streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 563 "/usr/include/c++/15.1.1/streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 584 "/usr/include/c++/15.1.1/streambuf" 3
      virtual void
      imbue(const locale& __loc __attribute__ ((__unused__)))
      { }
# 599 "/usr/include/c++/15.1.1/streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 610 "/usr/include/c++/15.1.1/streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 622 "/usr/include/c++/15.1.1/streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 635 "/usr/include/c++/15.1.1/streambuf" 3
      virtual int
      sync() { return 0; }
# 657 "/usr/include/c++/15.1.1/streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 673 "/usr/include/c++/15.1.1/streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 695 "/usr/include/c++/15.1.1/streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 708 "/usr/include/c++/15.1.1/streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 732 "/usr/include/c++/15.1.1/streambuf" 3
      virtual int_type
      pbackfail(int_type __c __attribute__ ((__unused__)) = traits_type::eof())
      { return traits_type::eof(); }
# 750 "/usr/include/c++/15.1.1/streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 776 "/usr/include/c++/15.1.1/streambuf" 3
      virtual int_type
      overflow(int_type __c __attribute__ ((__unused__)) = traits_type::eof())
      { return traits_type::eof(); }
# 803 "/usr/include/c++/15.1.1/streambuf" 3
      void
      __safe_gbump(streamsize __n) { _M_in_cur += __n; }

      void
      __safe_pbump(streamsize __n) { _M_out_cur += __n; }




    protected:

      basic_streambuf(const basic_streambuf&);

      basic_streambuf&
      operator=(const basic_streambuf&);


      void
      swap(basic_streambuf& __sb)
      {
 std::swap(_M_in_beg, __sb._M_in_beg);
 std::swap(_M_in_cur, __sb._M_in_cur);
 std::swap(_M_in_end, __sb._M_in_end);
 std::swap(_M_out_beg, __sb._M_out_beg);
 std::swap(_M_out_cur, __sb._M_out_cur);
 std::swap(_M_out_end, __sb._M_out_end);
 std::swap(_M_buf_locale, __sb._M_buf_locale);
      }

    };


  template<typename _CharT, typename _Traits>
    std::basic_streambuf<_CharT, _Traits>::
    basic_streambuf(const basic_streambuf&) = default;

  template<typename _CharT, typename _Traits>
    std::basic_streambuf<_CharT, _Traits>&
    std::basic_streambuf<_CharT, _Traits>::
    operator=(const basic_streambuf&) = default;



  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);


#undef _IsUnused


}

# 1 "/usr/include/c++/15.1.1/bits/streambuf.tcc" 1 3
# 35 "/usr/include/c++/15.1.1/bits/streambuf.tcc" 3
#define _STREAMBUF_TCC 1





#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->__safe_gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->__safe_pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }




  extern template class basic_streambuf<char>;

  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);


  extern template class basic_streambuf<wchar_t>;

  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);




}

#pragma GCC diagnostic pop
# 863 "/usr/include/c++/15.1.1/streambuf" 2 3
# 48 "/usr/include/c++/15.1.1/ios" 2 3
# 1 "/usr/include/c++/15.1.1/bits/basic_ios.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/basic_ios.h" 3
#define _BASIC_IOS_H 1







# 1 "/usr/include/c++/15.1.1/bits/locale_facets.h" 1 3
# 35 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
#define _LOCALE_FACETS_H 1





# 1 "/usr/include/c++/15.1.1/cwctype" 1 3
# 40 "/usr/include/c++/15.1.1/cwctype" 3
#define _GLIBCXX_CWCTYPE 1
# 55 "/usr/include/c++/15.1.1/cwctype" 3
# 1 "/usr/include/wctype.h" 1 3 4
# 24 "/usr/include/wctype.h" 3 4
#define _WCTYPE_H 1
# 38 "/usr/include/wctype.h" 3 4
# 1 "/usr/include/bits/wctype-wchar.h" 1 3 4
# 24 "/usr/include/bits/wctype-wchar.h" 3 4
#define _BITS_WCTYPE_WCHAR_H 1
# 38 "/usr/include/bits/wctype-wchar.h" 3 4
typedef unsigned long int wctype_t;
# 49 "/usr/include/bits/wctype-wchar.h" 3 4
#define _ISwbit(bit) ((bit) < 8 ? (int) ((1UL << (bit)) << 24) : ((bit) < 16 ? (int) ((1UL << (bit)) << 8) : ((bit) < 24 ? (int) ((1UL << (bit)) >> 8) : (int) ((1UL << (bit)) >> 24))))






enum
{
  __ISwupper = 0,
  __ISwlower = 1,
  __ISwalpha = 2,
  __ISwdigit = 3,
  __ISwxdigit = 4,
  __ISwspace = 5,
  __ISwprint = 6,
  __ISwgraph = 7,
  __ISwblank = 8,
  __ISwcntrl = 9,
  __ISwpunct = 10,
  __ISwalnum = 11,

  _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),
  _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),
  _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),
  _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),
  _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),
  _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),
  _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),
  _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),
  _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),
  _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),
  _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),
  _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))
};



extern "C" {







extern int iswalnum (wint_t __wc) noexcept (true);





extern int iswalpha (wint_t __wc) noexcept (true);


extern int iswcntrl (wint_t __wc) noexcept (true);



extern int iswdigit (wint_t __wc) noexcept (true);



extern int iswgraph (wint_t __wc) noexcept (true);




extern int iswlower (wint_t __wc) noexcept (true);


extern int iswprint (wint_t __wc) noexcept (true);




extern int iswpunct (wint_t __wc) noexcept (true);




extern int iswspace (wint_t __wc) noexcept (true);




extern int iswupper (wint_t __wc) noexcept (true);




extern int iswxdigit (wint_t __wc) noexcept (true);





extern int iswblank (wint_t __wc) noexcept (true);
# 155 "/usr/include/bits/wctype-wchar.h" 3 4
extern wctype_t wctype (const char *__property) noexcept (true);



extern int iswctype (wint_t __wc, wctype_t __desc) noexcept (true);






extern wint_t towlower (wint_t __wc) noexcept (true);


extern wint_t towupper (wint_t __wc) noexcept (true);

}
# 39 "/usr/include/wctype.h" 2 3 4





extern "C" {



typedef const __int32_t *wctrans_t;



extern wctrans_t wctrans (const char *__property) noexcept (true);


extern wint_t towctrans (wint_t __wc, wctrans_t __desc) noexcept (true);







extern int iswalnum_l (wint_t __wc, locale_t __locale) noexcept (true);





extern int iswalpha_l (wint_t __wc, locale_t __locale) noexcept (true);


extern int iswcntrl_l (wint_t __wc, locale_t __locale) noexcept (true);



extern int iswdigit_l (wint_t __wc, locale_t __locale) noexcept (true);



extern int iswgraph_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswlower_l (wint_t __wc, locale_t __locale) noexcept (true);


extern int iswprint_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswpunct_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswspace_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswupper_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswxdigit_l (wint_t __wc, locale_t __locale) noexcept (true);




extern int iswblank_l (wint_t __wc, locale_t __locale) noexcept (true);



extern wctype_t wctype_l (const char *__property, locale_t __locale)
     noexcept (true);



extern int iswctype_l (wint_t __wc, wctype_t __desc, locale_t __locale)
     noexcept (true);






extern wint_t towlower_l (wint_t __wc, locale_t __locale) noexcept (true);


extern wint_t towupper_l (wint_t __wc, locale_t __locale) noexcept (true);



extern wctrans_t wctrans_l (const char *__property, locale_t __locale)
     noexcept (true);


extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,
      locale_t __locale) noexcept (true);



}
# 56 "/usr/include/c++/15.1.1/cwctype" 2 3



#undef iswalnum
#undef iswalpha

#undef iswblank

#undef iswcntrl
#undef iswctype
#undef iswdigit
#undef iswgraph
#undef iswlower
#undef iswprint
#undef iswpunct
#undef iswspace
#undef iswupper
#undef iswxdigit
#undef towctrans
#undef towlower
#undef towupper
#undef wctrans
#undef wctype



namespace std
{
  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;
}
# 42 "/usr/include/c++/15.1.1/bits/locale_facets.h" 2 3

# 1 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/ctype_base.h" 1 3
# 36 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/ctype_base.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = _ISupper;
    static const mask lower = _ISlower;
    static const mask alpha = _ISalpha;
    static const mask digit = _ISdigit;
    static const mask xdigit = _ISxdigit;
    static const mask space = _ISspace;
    static const mask print = _ISprint;
    static const mask graph = _ISalpha | _ISdigit | _ISpunct;
    static const mask cntrl = _IScntrl;
    static const mask punct = _ISpunct;
    static const mask alnum = _ISalpha | _ISdigit;

    static const mask blank = _ISblank;

  };


}
# 44 "/usr/include/c++/15.1.1/bits/locale_facets.h" 2 3






# 1 "/usr/include/c++/15.1.1/bits/streambuf_iterator.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/streambuf_iterator.h" 3
#define _STREAMBUF_ITERATOR_H 1
# 41 "/usr/include/c++/15.1.1/bits/streambuf_iterator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{








 
# 51 "/usr/include/c++/15.1.1/bits/streambuf_iterator.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"


  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
        _CharT*, _CharT>
    {
    public:
# 72 "/usr/include/c++/15.1.1/bits/streambuf_iterator.h" 3
      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2, typename _Size>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_n_a(istreambuf_iterator<_CharT2>, _Size, _CharT2*, bool);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Distance>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            void>::__type
 advance(istreambuf_iterator<_CharT2>&, _Distance);

    private:







      mutable streambuf_type* _M_sbuf;
      int_type _M_c;

    public:

      constexpr istreambuf_iterator() noexcept
      : _M_sbuf(0), _M_c(traits_type::eof()) { }







      istreambuf_iterator(const istreambuf_iterator&) noexcept = default;

      ~istreambuf_iterator() = default;



      istreambuf_iterator(istream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }


      istreambuf_iterator&
      operator=(const istreambuf_iterator&) noexcept = default;





      [[__nodiscard__]]
      char_type
      operator*() const
      {
 int_type __c = _M_get();
# 163 "/usr/include/c++/15.1.1/bits/streambuf_iterator.h" 3
 return traits_type::to_char_type(__c);
      }


      istreambuf_iterator&
      operator++()
      {



                        ;

 _M_sbuf->sbumpc();
 _M_c = traits_type::eof();
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {



                        ;

 istreambuf_iterator __old = *this;
 __old._M_c = _M_sbuf->sbumpc();
 _M_c = traits_type::eof();
 return __old;
      }





      [[__nodiscard__]]
      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 int_type __ret = _M_c;
 if (_M_sbuf && _S_is_eof(__ret) && _S_is_eof(__ret = _M_sbuf->sgetc()))
   _M_sbuf = 0;
 return __ret;
      }

      bool
      _M_at_eof() const
      { return _S_is_eof(_M_get()); }

      static bool
      _S_is_eof(int_type __c)
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(__c, __eof);
      }







    };

  template<typename _CharT, typename _Traits>
    [[__nodiscard__]]
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }


  template<typename _CharT, typename _Traits>
    [[__nodiscard__]]
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }



  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:
# 286 "/usr/include/c++/15.1.1/bits/streambuf_iterator.h" 3
      ostreambuf_iterator(ostream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      [[__nodiscard__]]
      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      [[__nodiscard__]]
      bool
      failed() const noexcept
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };
#pragma GCC diagnostic pop


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->__safe_gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT, typename _Size>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_n_a(istreambuf_iterator<_CharT> __it, _Size __n, _CharT* __result,
        bool __strict __attribute__((__unused__)))
    {
      if (__n == 0)
 return __result;

     

                            ;
      _CharT* __beg = __result;
      __result += __it._M_sbuf->sgetn(__beg, __n);
     

                            ;
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;
      const int_type __eof = traits_type::eof();

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, __eof)
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->__safe_gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   __first._M_c = __eof;
 }

      return __first;
    }

  template<typename _CharT, typename _Distance>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        void>::__type
    advance(istreambuf_iterator<_CharT>& __i, _Distance __n)
    {
      if (__n == 0)
 return;

      do { if (std::__is_constant_evaluated() && !bool(__n > 0)) std::__glibcxx_assert_fail(); } while (false);
     

                           ;

      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;
      const int_type __eof = traits_type::eof();

      streambuf_type* __sb = __i._M_sbuf;
      while (__n > 0)
 {
   streamsize __size = __sb->egptr() - __sb->gptr();
   if (__size > __n)
     {
       __sb->__safe_gbump(__n);
       break;
     }

   __sb->__safe_gbump(__size);
   __n -= __size;
   if (traits_type::eq_int_type(__sb->underflow(), __eof))
     {
      

                      ;
       break;
     }
 }

      __i._M_c = __eof;
    }




}
# 51 "/usr/include/c++/15.1.1/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



#define _GLIBCXX_NUM_FACETS 14


#define _GLIBCXX_NUM_CXX11_FACETS (_GLIBCXX_USE_DUAL_ABI ? 8 : 0)





#define _GLIBCXX_NUM_UNICODE_FACETS 2




#define _GLIBCXX_NUM_LBDL_ALT128_FACETS (4 + (_GLIBCXX_USE_DUAL_ABI ? 2 : 0))




  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 154 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 173 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 190 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 206 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 222 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 236 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 251 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 265 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 280 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 297 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 316 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 335 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 357 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char* __to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 382 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 401 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 420 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 439 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 457 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const = 0;
# 474 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 490 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const = 0;
# 507 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 526 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const = 0;
# 547 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const = 0;
# 568 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const = 0;
# 593 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const = 0;
    };
# 616 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;



  template<typename _CharT, typename _Traits, typename _Alloc>
    class ctype<basic_string<_CharT, _Traits, _Alloc> >;
# 690 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 727 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 740 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 753 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 768 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 782 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 796 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 811 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 828 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 844 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 861 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 881 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 908 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     if (__builtin_expect(__hi != __lo, true))
       __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 940 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 973 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char* __to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     if (__builtin_expect(__hi != __lo, true))
       __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1023 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1040 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1056 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1073 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1093 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1116 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (__builtin_expect(__hi != __lo, true))
   __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }
# 1143 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault __attribute__((__unused__))) const
      { return __c; }
# 1169 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault __attribute__((__unused__)), char* __to) const
      {
 if (__builtin_expect(__hi != __lo, true))
   __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1195 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1228 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1239 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1263 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1282 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1300 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1318 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1335 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1352 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1368 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1385 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1405 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const;
# 1427 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const;
# 1450 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const;
# 1476 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0)
      : ctype_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~ctype_byname() { }
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0);


    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0);


    protected:
      virtual
      ~ctype_byname();
    };



}


# 1 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/ctype_inline.h" 1 3
# 37 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/ctype_inline.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return _M_table[static_cast<unsigned char>(__c)] & __m; }

  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && !(_M_table[static_cast<unsigned char>(*__low)] & __m))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)
      ++__low;
    return __low;
  }


}
# 1549 "/usr/include/c++/15.1.1/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class __num_base
  {
  public:


    enum
      {
 _S_ominus,
 _S_oplus,
 _S_ox,
 _S_oX,
 _S_odigits,
 _S_odigits_end = _S_odigits + 16,
 _S_oudigits = _S_odigits_end,
 _S_oudigits_end = _S_oudigits + 16,
 _S_oe = _S_odigits + 14,
 _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0)
      : facet(__refs), _M_grouping(0), _M_grouping_size(0),
 _M_use_grouping(false),
 _M_truename(0), _M_truename_size(0), _M_falsename(0),
 _M_falsename_size(0), _M_decimal_point(_CharT()),
 _M_thousands_sep(_CharT()), _M_allocated(false)
 { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }

namespace __cxx11 {
# 1679 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(); }
# 1717 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1731 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(__cloc); }
# 1745 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1758 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1789 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1802 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1815 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1832 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1844 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1857 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1870 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1883 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }


      explicit
      numpunct_byname(const string& __s, size_t __refs = 0)
      : numpunct_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~numpunct_byname() { }
    };

}


# 1961 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1982 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 2008 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2045 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
#pragma GCC diagnostic pop
# 2108 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2151 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      __attribute ((__abi_tag__ ("cxx11")))
      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
 __attribute ((__abi_tag__ ("cxx11")))
 iter_type
 _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
 _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
 _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2224 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }
#pragma GCC diagnostic pop


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      double&) const;
# 2279 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, void*&) const;
# 2307 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2325 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2346 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2364 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2406 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __io, __fill, __v); }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }
#pragma GCC diagnostic pop
# 2472 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2497 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __io, __fill, __v); }

    protected:
      template<typename _ValueT>
 iter_type
 _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
 iter_type
 _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { }
# 2545 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }
#pragma GCC diagnostic pop


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, double) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type, long double) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, const void*) const;
# 2600 "/usr/include/c++/15.1.1/bits/locale_facets.h" 3
    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;









  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }



  template<typename _CharT>
    inline bool
    isblank(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::blank, __c); }



  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }


}

# 1 "/usr/include/c++/15.1.1/bits/locale_facets.tcc" 1 3
# 31 "/usr/include/c++/15.1.1/bits/locale_facets.tcc" 3
#define _LOCALE_FACETS_TCC 1




#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"

namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = 0;
     try
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     catch(...)
       {
  delete __tmp;
  throw;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      try
 {
   const string& __g = __np.grouping();
   _M_grouping_size = __g.size();
   __grouping = new char[_M_grouping_size];
   __g.copy(__grouping, _M_grouping_size);
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(__grouping[0]) > 0
        && (__grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   const basic_string<_CharT>& __tn = __np.truename();
   _M_truename_size = __tn.size();
   __truename = new _CharT[_M_truename_size];
   __tn.copy(__truename, _M_truename_size);

   const basic_string<_CharT>& __fn = __np.falsename();
   _M_falsename_size = __fn.size();
   __falsename = new _CharT[_M_falsename_size];
   __fn.copy(__falsename, _M_falsename_size);

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);

   _M_grouping = __grouping;
   _M_truename = __truename;
   _M_falsename = __falsename;
   _M_allocated = true;
 }
      catch(...)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
   throw;
 }
    }
# 143 "/usr/include/c++/15.1.1/bits/locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    __attribute ((__abi_tag__ ("cxx11")))
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      __attribute ((__abi_tag__ ("cxx11")))
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 typedef __gnu_cxx::__numeric_traits<_ValueT> __num_traits;
 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __num_traits::__is_signed)
   ? -static_cast<__unsigned_type>(__num_traits::__min)
   : __num_traits::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative && __num_traits::__is_signed)
       __v = __num_traits::__min;
     else
       __v = __num_traits::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 739 "/usr/include/c++/15.1.1/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;
#pragma GCC diagnostic pop

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }
# 802 "/usr/include/c++/15.1.1/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 996 "/usr/include/c++/15.1.1/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);



 const bool __use_prec =
   (__io.flags() & ios_base::floatfield) != ios_base::floatfield;



 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 if (__use_prec)
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     __fbuf, __prec, __v);
 else
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     __fbuf, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     if (__use_prec)
       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
         __fbuf, __prec, __v);
     else
       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
         __fbuf, __v);
   }
# 1069 "/usr/include/c++/15.1.1/bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1194 "/usr/include/c++/15.1.1/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;
#pragma GCC diagnostic pop

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }
# 1234 "/usr/include/c++/15.1.1/bits/locale_facets.tcc" 3

# 1243 "/usr/include/c++/15.1.1/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }




  extern template class __cxx11:: numpunct<char>;
  extern template class __cxx11:: numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>*
    __try_use_facet<ctype<char> >(const locale&) noexcept;

  extern template
    const numpunct<char>*
    __try_use_facet<numpunct<char> >(const locale&) noexcept;

  extern template
    const num_put<char>*
    __try_use_facet<num_put<char> >(const locale&) noexcept;

  extern template
    const num_get<char>*
    __try_use_facet<num_get<char> >(const locale&) noexcept;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class __cxx11:: numpunct<wchar_t>;
  extern template class __cxx11:: numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>*
    __try_use_facet<ctype<wchar_t> >(const locale&) noexcept;

  extern template
    const numpunct<wchar_t>*
    __try_use_facet<numpunct<wchar_t> >(const locale&) noexcept;

  extern template
    const num_put<wchar_t>*
    __try_use_facet<num_put<wchar_t> >(const locale&) noexcept;

  extern template
    const num_get<wchar_t>*
    __try_use_facet<num_get<wchar_t> >(const locale&) noexcept;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);




}

#pragma GCC diagnostic pop
# 2702 "/usr/include/c++/15.1.1/bits/locale_facets.h" 2 3
# 40 "/usr/include/c++/15.1.1/bits/basic_ios.h" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 68 "/usr/include/c++/15.1.1/bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {




    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:
# 123 "/usr/include/c++/15.1.1/bits/basic_ios.h" 3
      [[__nodiscard__]]
      explicit operator bool() const
      { return !this->fail(); }





      [[__nodiscard__]]
      bool
      operator!() const
      { return this->fail(); }
# 144 "/usr/include/c++/15.1.1/bits/basic_ios.h" 3
      [[__nodiscard__]]
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 156 "/usr/include/c++/15.1.1/bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
   { throw; }
      }







      [[__nodiscard__]]
      bool
      good() const
      { return this->rdstate() == 0; }







      [[__nodiscard__]]
      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 211 "/usr/include/c++/15.1.1/bits/basic_ios.h" 3
      [[__nodiscard__]]
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      [[__nodiscard__]]
      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 234 "/usr/include/c++/15.1.1/bits/basic_ios.h" 3
      [[__nodiscard__]]
      iostate
      exceptions() const
      { return _M_exception; }
# 270 "/usr/include/c++/15.1.1/bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 308 "/usr/include/c++/15.1.1/bits/basic_ios.h" 3
      [[__nodiscard__]]
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 321 "/usr/include/c++/15.1.1/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      [[__nodiscard__]]
      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 362 "/usr/include/c++/15.1.1/bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 376 "/usr/include/c++/15.1.1/bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      [[__nodiscard__]]
      char_type
      fill() const
      {
 if (__builtin_expect(!_M_fill_init, false))
   return this->widen(' ');
 return _M_fill;
      }
# 403 "/usr/include/c++/15.1.1/bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = _M_fill;
 _M_fill = __ch;
 _M_fill_init = true;
 return __old;
      }
# 424 "/usr/include/c++/15.1.1/bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 444 "/usr/include/c++/15.1.1/bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 463 "/usr/include/c++/15.1.1/bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);


      basic_ios(const basic_ios&) = delete;
      basic_ios& operator=(const basic_ios&) = delete;

      void
      move(basic_ios& __rhs)
      {
 ios_base::_M_move(__rhs);
 _M_cache_locale(_M_ios_locale);
 this->tie(__rhs.tie(nullptr));
 _M_fill = __rhs._M_fill;
 _M_fill_init = __rhs._M_fill_init;
 _M_streambuf = nullptr;
      }

      void
      move(basic_ios&& __rhs)
      { this->move(__rhs); }

      void
      swap(basic_ios& __rhs) noexcept
      {
 ios_base::_M_swap(__rhs);
 _M_cache_locale(_M_ios_locale);
 __rhs._M_cache_locale(__rhs._M_ios_locale);
 std::swap(_M_tie, __rhs._M_tie);
 std::swap(_M_fill, __rhs._M_fill);
 std::swap(_M_fill_init, __rhs._M_fill_init);
      }

      void
      set_rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
      { _M_streambuf = __sb; }


      void
      _M_cache_locale(const locale& __loc);
    };


}

# 1 "/usr/include/c++/15.1.1/bits/basic_ios.tcc" 1 3
# 31 "/usr/include/c++/15.1.1/bits/basic_ios.tcc" 3
#define _BASIC_IOS_TCC 1





#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
 _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != std::__addressof(__rhs))
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 153 "/usr/include/c++/15.1.1/bits/basic_ios.tcc" 3
      if (_M_ctype)
 {
   _M_fill = _M_ctype->widen(' ');
   _M_fill_init = true;
 }
      else
 _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      _M_ctype = std::__try_use_facet<__ctype_type>(__loc);
      _M_num_put = std::__try_use_facet<__num_put_type>(__loc);
      _M_num_get = std::__try_use_facet<__num_get_type>(__loc);
    }




  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;




}

#pragma GCC diagnostic pop
# 532 "/usr/include/c++/15.1.1/bits/basic_ios.h" 2 3
# 49 "/usr/include/c++/15.1.1/ios" 2 3

#define __glibcxx_want_ios_noreplace 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 52 "/usr/include/c++/15.1.1/ios" 2 3
# 43 "/usr/include/c++/15.1.1/istream" 2 3
# 1 "/usr/include/c++/15.1.1/ostream" 1 3
# 34 "/usr/include/c++/15.1.1/ostream" 3
#define _GLIBCXX_OSTREAM 1







# 1 "/usr/include/c++/15.1.1/bits/ostream.h" 1 3
# 35 "/usr/include/c++/15.1.1/bits/ostream.h" 3
#define _GLIBCXX_OSTREAM_H 1
# 46 "/usr/include/c++/15.1.1/bits/ostream.h" 3
#define __glibcxx_want_print 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 48 "/usr/include/c++/15.1.1/bits/ostream.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 65 "/usr/include/c++/15.1.1/bits/ostream.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
       __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 91 "/usr/include/c++/15.1.1/bits/ostream.h" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 115 "/usr/include/c++/15.1.1/bits/ostream.h" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 173 "/usr/include/c++/15.1.1/bits/ostream.h" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }
#pragma GCC diagnostic pop
# 230 "/usr/include/c++/15.1.1/bits/ostream.h" 3
      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(_S_cast_flt<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }
# 300 "/usr/include/c++/15.1.1/bits/ostream.h" 3
      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }


      __ostream_type&
      operator<<(nullptr_t)
      { return *this << "nullptr"; }
# 338 "/usr/include/c++/15.1.1/bits/ostream.h" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 371 "/usr/include/c++/15.1.1/bits/ostream.h" 3
      __ostream_type&
      put(char_type __c);
# 390 "/usr/include/c++/15.1.1/bits/ostream.h" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 403 "/usr/include/c++/15.1.1/bits/ostream.h" 3
      __ostream_type&
      flush();
# 413 "/usr/include/c++/15.1.1/bits/ostream.h" 3
      pos_type
      tellp();
# 424 "/usr/include/c++/15.1.1/bits/ostream.h" 3
      __ostream_type&
      seekp(pos_type);
# 436 "/usr/include/c++/15.1.1/bits/ostream.h" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }



      basic_ostream(basic_iostream<_CharT, _Traits>&) { }

      basic_ostream(const basic_ostream&) = delete;

      basic_ostream(basic_ostream&& __rhs)
      : __ios_type()
      { __ios_type::move(__rhs); }



      basic_ostream& operator=(const basic_ostream&) = delete;

      basic_ostream&
      operator=(basic_ostream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_ostream& __rhs)
      { __ios_type::swap(__rhs); }


      template<typename _ValueT>
 __ostream_type&
 _M_insert(_ValueT __v);

    private:

      void
      _M_write(const char_type* __s, streamsize __n)
      { std::__ostream_insert(*this, __s, __n); }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++17-extensions"
      template<typename _To, typename _From>
 static _To
 _S_cast_flt(_From __f)
 {
   _To __d = static_cast<_To>(__f);
# 507 "/usr/include/c++/15.1.1/bits/ostream.h" 3
   return __d;
 }
#pragma GCC diagnostic pop


      struct _Disable_exceptions
      {
 _Disable_exceptions(basic_ostream& __os)
 : _M_os(__os), _M_exception(_M_os._M_exception)
 { _M_os._M_exception = ios_base::goodbit; }

 ~_Disable_exceptions()
 { _M_os._M_exception = _M_exception; }

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"
 _Disable_exceptions(const _Disable_exceptions&) = delete;
 _Disable_exceptions& operator=(const _Disable_exceptions&) = delete;
#pragma GCC diagnostic pop

      private:
 basic_ostream& _M_os;
 const ios_base::iostate _M_exception;
      };
    };
# 540 "/usr/include/c++/15.1.1/bits/ostream.h" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 559 "/usr/include/c++/15.1.1/bits/ostream.h" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"







      ~sentry()
      {




 if (bool(_M_os.flags() & ios_base::unitbuf) && _M_os.good()
       && !uncaught_exception())
   {
     _Disable_exceptions __noex(_M_os);
     try
       {


  if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
    _M_os.setstate(ios_base::badbit);
       }
     catch(...)
       { _M_os.setstate(ios_base::badbit); }
   }
      }
#pragma GCC diagnostic pop
# 602 "/usr/include/c++/15.1.1/bits/ostream.h" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 624 "/usr/include/c++/15.1.1/bits/ostream.h" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    {
      if (__out.width() != 0)
 return __ostream_insert(__out, &__c, 1);
      __out.put(__c);
      return __out;
    }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template<typename _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    {
      if (__out.width() != 0)
 return __ostream_insert(__out, &__c, 1);
      __out.put(__c);
      return __out;
    }


  template<typename _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<typename _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 715 "/usr/include/c++/15.1.1/bits/ostream.h" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<typename _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<typename _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<typename _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 812 "/usr/include/c++/15.1.1/bits/ostream.h" 3
  template<typename _Tp>
    using _Require_derived_from_ios_base
      = _Require<is_class<_Tp>, __not_<is_same<_Tp, ios_base>>,
   is_convertible<typename add_pointer<_Tp>::type, ios_base*>>;

  template<typename _Os, typename _Tp,
    typename = _Require_derived_from_ios_base<_Os>,
    typename
      = decltype(std::declval<_Os&>() << std::declval<const _Tp&>())>
    using __rvalue_stream_insertion_t = _Os&&;
# 834 "/usr/include/c++/15.1.1/bits/ostream.h" 3
  template<typename _Ostream, typename _Tp>
    inline __rvalue_stream_insertion_t<_Ostream, _Tp>
    operator<<(_Ostream&& __os, const _Tp& __x)
    {
      __os << __x;
      return std::move(__os);
    }



}
# 43 "/usr/include/c++/15.1.1/ostream" 2 3




#define __glibcxx_want_print 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 49 "/usr/include/c++/15.1.1/ostream" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 64 "/usr/include/c++/15.1.1/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
# 76 "/usr/include/c++/15.1.1/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
# 291 "/usr/include/c++/15.1.1/ostream" 3

}

# 1 "/usr/include/c++/15.1.1/bits/ostream.tcc" 1 3
# 35 "/usr/include/c++/15.1.1/bits/ostream.tcc" 3
#define _OSTREAM_TCC 1




#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else if (__os.bad())
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {

  const __num_put_type& __np = __check_facet(this->_M_num_put);




  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   try
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (this->rdbuf()->sputn(__s, __n) != __n)
  __err = ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(ios_base::badbit);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {





      if (__streambuf_type* __buf = this->rdbuf())
 {
   sentry __cerb(*this);
   if (__cerb)
     {
       ios_base::iostate __err = ios_base::goodbit;
       try
  {
    if (this->rdbuf()->pubsync() == -1)
      __err |= ios_base::badbit;
  }
       catch(__cxxabiv1::__forced_unwind&)
  {
    this->_M_setstate(ios_base::badbit);
    throw;
  }
       catch(...)
  { this->_M_setstate(ios_base::badbit); }
       if (__err)
  this->setstate(__err);
     }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      sentry __cerb(*this);
      pos_type __ret = pos_type(-1);
      if (!this->fail())
 __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      sentry __cerb(*this);
      if (!this->fail())
 {


   const pos_type __p = this->rdbuf()->pubseekpos(__pos, ios_base::out);


   if (__p == pos_type(off_type(-1)))
     this->setstate(ios_base::failbit);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      sentry __cerb(*this);
      if (!this->fail())
 {


   const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
        ios_base::out);


   if (__p == pos_type(off_type(-1)))
     this->setstate(ios_base::failbit);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   try
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }




  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);
#pragma GCC diagnostic pop

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);
#pragma GCC diagnostic pop

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);




}

#pragma GCC diagnostic pop
# 295 "/usr/include/c++/15.1.1/ostream" 2 3
# 44 "/usr/include/c++/15.1.1/istream" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 61 "/usr/include/c++/15.1.1/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:







      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 123 "/usr/include/c++/15.1.1/istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 171 "/usr/include/c++/15.1.1/istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }
#pragma GCC diagnostic pop
# 220 "/usr/include/c++/15.1.1/istream" 3
      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }
# 329 "/usr/include/c++/15.1.1/istream" 3
      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 353 "/usr/include/c++/15.1.1/istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 363 "/usr/include/c++/15.1.1/istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 396 "/usr/include/c++/15.1.1/istream" 3
      int_type
      get();
# 410 "/usr/include/c++/15.1.1/istream" 3
      __istream_type&
      get(char_type& __c);
# 437 "/usr/include/c++/15.1.1/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 448 "/usr/include/c++/15.1.1/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 471 "/usr/include/c++/15.1.1/istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 481 "/usr/include/c++/15.1.1/istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 510 "/usr/include/c++/15.1.1/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 521 "/usr/include/c++/15.1.1/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 545 "/usr/include/c++/15.1.1/istream" 3
      __istream_type&
      ignore(streamsize __n, int_type __delim);

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore();
# 562 "/usr/include/c++/15.1.1/istream" 3
      int_type
      peek();
# 580 "/usr/include/c++/15.1.1/istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 599 "/usr/include/c++/15.1.1/istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 616 "/usr/include/c++/15.1.1/istream" 3
      __istream_type&
      putback(char_type __c);
# 632 "/usr/include/c++/15.1.1/istream" 3
      __istream_type&
      unget();
# 650 "/usr/include/c++/15.1.1/istream" 3
      int
      sync();
# 665 "/usr/include/c++/15.1.1/istream" 3
      pos_type
      tellg();
# 680 "/usr/include/c++/15.1.1/istream" 3
      __istream_type&
      seekg(pos_type);
# 696 "/usr/include/c++/15.1.1/istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }


      basic_istream(const basic_istream&) = delete;

      basic_istream(basic_istream&& __rhs)
      : __ios_type(), _M_gcount(__rhs._M_gcount)
      {
 __ios_type::move(__rhs);
 __rhs._M_gcount = 0;
      }



      basic_istream& operator=(const basic_istream&) = delete;

      basic_istream&
      operator=(basic_istream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_istream& __rhs)
      {
 __ios_type::swap(__rhs);
 std::swap(_M_gcount, __rhs._M_gcount);
      }


      template<typename _ValueT>
 __istream_type&
 _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 780 "/usr/include/c++/15.1.1/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 816 "/usr/include/c++/15.1.1/istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 827 "/usr/include/c++/15.1.1/istream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 845 "/usr/include/c++/15.1.1/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }



  template<typename _CharT, typename _Traits>
    void
    __istream_extract(basic_istream<_CharT, _Traits>&, _CharT*, streamsize);

  void __istream_extract(istream&, char*, streamsize);
# 895 "/usr/include/c++/15.1.1/istream" 3
  template<typename _CharT, typename _Traits>
    __attribute__((__nonnull__(2), __access__(__write_only__, 2)))
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {



      size_t __n = __builtin_object_size(__s, 0);
      if (__n < sizeof(_CharT))
 {

   do { if (std::__is_constant_evaluated() && !bool(__n >= sizeof(_CharT))) std::__glibcxx_assert_fail(); } while (false);

   __in.width(0);
   __in.setstate(ios_base::failbit);
 }
      else if (__n != (size_t)-1)
 {
   __n /= sizeof(_CharT);
   streamsize __w = __in.width();
   std::__istream_extract(__in, __s, __n);
   if (__in.good() && (__w <= 0 || __n < (size_t)__w))
     {


       const typename _Traits::int_type __c = __in.rdbuf()->sgetc();
       const bool __eof = _Traits::eq_int_type(__c, _Traits::eof());
       if (__builtin_expect(__eof, true))
  __in.setstate(ios_base::eofbit);
     }
 }
      else

 {

   streamsize __n = __gnu_cxx::__numeric_traits<streamsize>::__max;
   __n /= sizeof(_CharT);
   std::__istream_extract(__in, __s, __n);
 }
      return __in;
    }

  template<class _Traits>
    __attribute__((__nonnull__(2), __access__(__write_only__, 2)))
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return __in >> reinterpret_cast<char*>(__s); }

  template<class _Traits>
    __attribute__((__nonnull__(2), __access__(__write_only__, 2)))
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return __in >> reinterpret_cast<char*>(__s); }
# 984 "/usr/include/c++/15.1.1/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }


      basic_iostream(const basic_iostream&) = delete;

      basic_iostream(basic_iostream&& __rhs)
      : __istream_type(std::move(__rhs)), __ostream_type(*this)
      { }



      basic_iostream& operator=(const basic_iostream&) = delete;

      basic_iostream&
      operator=(basic_iostream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_iostream& __rhs)
      { __istream_type::swap(__rhs); }

    };
# 1067 "/usr/include/c++/15.1.1/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);
# 1083 "/usr/include/c++/15.1.1/istream" 3
  template<typename _Is, typename _Tp,
    typename = _Require_derived_from_ios_base<_Is>,
    typename = decltype(std::declval<_Is&>() >> std::declval<_Tp>())>
    using __rvalue_stream_extraction_t = _Is&&;
# 1099 "/usr/include/c++/15.1.1/istream" 3
  template<typename _Istream, typename _Tp>
    inline __rvalue_stream_extraction_t<_Istream, _Tp>
    operator>>(_Istream&& __is, _Tp&& __x)
    {
      __is >> std::forward<_Tp>(__x);
      return std::move(__is);
    }



}

# 1 "/usr/include/c++/15.1.1/bits/istream.tcc" 1 3
# 35 "/usr/include/c++/15.1.1/bits/istream.tcc" 3
#define _ISTREAM_TCC 1





#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 {
   try
     {
       if (__in.tie())
  __in.tie()->flush();
       if (!__noskip && bool(__in.flags() & ios_base::skipws))
  {
    const __int_type __eof = traits_type::eof();
    __streambuf_type* __sb = __in.rdbuf();
    __int_type __c = __sb->sgetc();

    const __ctype_type& __ct = __check_facet(__in._M_ctype);
    while (!traits_type::eq_int_type(__c, __eof)
    && __ct.is(ctype_base::space,
        traits_type::to_char_type(__c)))
      __c = __sb->snextc();




    if (traits_type::eq_int_type(__c, __eof))
      __err |= ios_base::eofbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
 }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {

  const __num_get_type& __ng = __check_facet(this->_M_num_get);




  __ng.get(*this, 0, *this, __err, __v);
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;

       const __num_get_type& __ng = __check_facet(this->_M_num_get);




       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;

       const __num_get_type& __ng = __check_facet(this->_M_num_get);




       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   try
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::failbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
       unsigned long long __gcount = 0;
#pragma GCC diagnostic pop

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++__gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;


       if (__gcount <= __gnu_cxx::__numeric_traits<streamsize>::__max)
  _M_gcount = __gcount;
       else
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          try
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 553 "/usr/include/c++/15.1.1/bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max)
  {
    if (__large_ignore)
      _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

    if (traits_type::eq_int_type(__c, __eof))
      __err |= ios_base::eofbit;
  }
       else if (_M_gcount < __n)
  {
    if (traits_type::eq_int_type(__c, __eof))
      __err |= ios_base::eofbit;
  }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max)
  {
    if (__large_ignore)
      _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

    if (traits_type::eq_int_type(__c, __eof))
      __err |= ios_base::eofbit;
    else
      {
        if (_M_gcount != __n)
   ++_M_gcount;
        __sb->sbumpc();
      }
  }
       else if (_M_gcount < __n)
  {
    if (traits_type::eq_int_type(__c, __eof))
      __err |= ios_base::eofbit;
    else
      {
        ++_M_gcount;
        __sb->sbumpc();
      }
  }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       if (!this->fail())
  __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
        ios_base::in);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekpos(__pos,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    void
    __istream_extract(basic_istream<_CharT, _Traits>& __in, _CharT* __s,
        streamsize __num)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       streamsize __width = __in.width();
       if (0 < __width && __width < __num)
  __num = __width;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }

       if (__extracted < __num - 1
    && _Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;



      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       __int_type __c = __sb->sgetc();

       while (true)
  {
    if (_Traits::eq_int_type(__c, __eof))
      {
        __err = ios_base::eofbit;
        break;
      }
    if (!__ct.is(ctype_base::space, _Traits::to_char_type(__c)))
      break;
    __c = __sb->snextc();
  }
     }
   catch(const __cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     {
       __in._M_setstate(ios_base::badbit);
     }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }




#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"
#pragma GCC diagnostic ignored "-Wlong-long"
  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wlong-long"
  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);
#pragma GCC diagnostic pop

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template void __istream_extract(wistream&, wchar_t*, streamsize);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;

#pragma GCC diagnostic pop



}

#pragma GCC diagnostic pop
# 1112 "/usr/include/c++/15.1.1/istream" 2 3
# 43 "/usr/include/c++/15.1.1/fstream" 2 3

# 1 "/usr/include/c++/15.1.1/bits/codecvt.h" 1 3
# 37 "/usr/include/c++/15.1.1/bits/codecvt.h" 3
#define _CODECVT_H 1
# 46 "/usr/include/c++/15.1.1/bits/codecvt.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"

namespace std __attribute__ ((__visibility__ ("default")))
{



  class codecvt_base
  {
  public:
    enum result
    {
      ok,
      partial,
      error,
      noconv
    };
  };
# 75 "/usr/include/c++/15.1.1/bits/codecvt.h" 3
  template<typename _InternT, typename _ExternT, typename _StateT>
    class __codecvt_abstract_base
    : public locale::facet, public codecvt_base
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;
# 123 "/usr/include/c++/15.1.1/bits/codecvt.h" 3
      result
      out(state_type& __state, const intern_type* __from,
   const intern_type* __from_end, const intern_type*& __from_next,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const
      {
 return this->do_out(__state, __from, __from_end, __from_next,
       __to, __to_end, __to_next);
      }
# 162 "/usr/include/c++/15.1.1/bits/codecvt.h" 3
      result
      unshift(state_type& __state, extern_type* __to, extern_type* __to_end,
       extern_type*& __to_next) const
      { return this->do_unshift(__state, __to,__to_end,__to_next); }
# 203 "/usr/include/c++/15.1.1/bits/codecvt.h" 3
      result
      in(state_type& __state, const extern_type* __from,
  const extern_type* __from_end, const extern_type*& __from_next,
  intern_type* __to, intern_type* __to_end,
  intern_type*& __to_next) const
      {
 return this->do_in(__state, __from, __from_end, __from_next,
      __to, __to_end, __to_next);
      }

      int
      encoding() const throw()
      { return this->do_encoding(); }

      bool
      always_noconv() const throw()
      { return this->do_always_noconv(); }

      int
      length(state_type& __state, const extern_type* __from,
      const extern_type* __end, size_t __max) const
      { return this->do_length(__state, __from, __end, __max); }

      int
      max_length() const throw()
      { return this->do_max_length(); }

    protected:
      explicit
      __codecvt_abstract_base(size_t __refs = 0) : locale::facet(__refs) { }

      virtual
      ~__codecvt_abstract_base() { }
# 244 "/usr/include/c++/15.1.1/bits/codecvt.h" 3
      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const = 0;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const = 0;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const = 0;

      virtual int
      do_encoding() const throw() = 0;

      virtual bool
      do_always_noconv() const throw() = 0;

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const = 0;

      virtual int
      do_max_length() const throw() = 0;
    };
# 281 "/usr/include/c++/15.1.1/bits/codecvt.h" 3
   template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt
    : public __codecvt_abstract_base<_InternT, _ExternT, _StateT>
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<_InternT, _ExternT, _StateT> (__refs),
 _M_c_locale_codecvt(0)
      { }

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt() { }

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };

  template<typename _InternT, typename _ExternT, typename _StateT>
    locale::id codecvt<_InternT, _ExternT, _StateT>::id;


  template<>
    class codecvt<char, char, mbstate_t>
    : public __codecvt_abstract_base<char, char, mbstate_t>
    {
      friend class messages<char>;

    public:

      typedef char intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
  };






  template<>
    class codecvt<wchar_t, char, mbstate_t>
    : public __codecvt_abstract_base<wchar_t, char, mbstate_t>
    {
      friend class messages<wchar_t>;

    public:

      typedef wchar_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };







  template<>
    class codecvt<char16_t, char, mbstate_t>
    : public __codecvt_abstract_base<char16_t, char, mbstate_t>
    {
    public:

      typedef char16_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<char16_t, char, mbstate_t>(__refs) { }

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };





  template<>
    class codecvt<char32_t, char, mbstate_t>
    : public __codecvt_abstract_base<char32_t, char, mbstate_t>
    {
    public:

      typedef char32_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<char32_t, char, mbstate_t>(__refs) { }

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };
# 703 "/usr/include/c++/15.1.1/bits/codecvt.h" 3
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT>
    {
    public:
      explicit
      codecvt_byname(const char* __s, size_t __refs = 0)
      : codecvt<_InternT, _ExternT, _StateT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_codecvt);
     this->_S_create_c_locale(this->_M_c_locale_codecvt, __s);
   }
      }


      explicit
      codecvt_byname(const string& __s, size_t __refs = 0)
      : codecvt_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~codecvt_byname() { }
    };


  template<>
    class codecvt_byname<char16_t, char, mbstate_t>
    : public codecvt<char16_t, char, mbstate_t>
    {
    public:
      explicit
      codecvt_byname(const char*, size_t __refs = 0)
      : codecvt<char16_t, char, mbstate_t>(__refs) { }

      explicit
      codecvt_byname(const string& __s, size_t __refs = 0)
      : codecvt_byname(__s.c_str(), __refs) { }

    protected:
      virtual
      ~codecvt_byname() { }
    };

  template<>
    class codecvt_byname<char32_t, char, mbstate_t>
    : public codecvt<char32_t, char, mbstate_t>
    {
    public:
      explicit
      codecvt_byname(const char*, size_t __refs = 0)
      : codecvt<char32_t, char, mbstate_t>(__refs) { }

      explicit
      codecvt_byname(const string& __s, size_t __refs = 0)
      : codecvt_byname(__s.c_str(), __refs) { }

    protected:
      virtual
      ~codecvt_byname() { }
    };
# 810 "/usr/include/c++/15.1.1/bits/codecvt.h" 3
  extern template class codecvt_byname<char, char, mbstate_t>;

  extern template
    const codecvt<char, char, mbstate_t>&
    use_facet<codecvt<char, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<char, char, mbstate_t> >(const locale&);


  extern template class codecvt_byname<wchar_t, char, mbstate_t>;

  extern template
    const codecvt<wchar_t, char, mbstate_t>&
    use_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);



  extern template class codecvt_byname<char16_t, char, mbstate_t>;
  extern template class codecvt_byname<char32_t, char, mbstate_t>;
# 845 "/usr/include/c++/15.1.1/bits/codecvt.h" 3

}

#pragma GCC diagnostic pop
# 45 "/usr/include/c++/15.1.1/fstream" 2 3

# 1 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/basic_file.h" 1 3
# 35 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/basic_file.h" 3
#define _GLIBCXX_BASIC_FILE_STDIO_H 1

       
# 38 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/basic_file.h" 3


# 1 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++io.h" 1 3
# 33 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/c++io.h" 3
#define _GLIBCXX_CXX_IO_H 1




namespace std __attribute__ ((__visibility__ ("default")))
{








  typedef __gthread_mutex_t __c_lock;



  typedef FILE __c_file;


}
# 41 "/usr/include/c++/15.1.1/x86_64-pc-linux-gnu/bits/basic_file.h" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _CharT>
    class __basic_file;


  template<>
    class __basic_file<char>
    {

      __c_file* _M_cfile;


      bool _M_cfile_created;

    public:
      __basic_file(__c_lock* __lock = 0) throw ();


      __basic_file(__basic_file&& __rv, __c_lock* = 0) noexcept
      : _M_cfile(__rv._M_cfile), _M_cfile_created(__rv._M_cfile_created)
      {
 __rv._M_cfile = nullptr;
 __rv._M_cfile_created = false;
      }

      __basic_file& operator=(const __basic_file&) = delete;
      __basic_file& operator=(__basic_file&&) = delete;

      void
      swap(__basic_file& __f) noexcept
      {
 std::swap(_M_cfile, __f._M_cfile);
 std::swap(_M_cfile_created, __f._M_cfile_created);
      }


      __basic_file*
      open(const char* __name, ios_base::openmode __mode, int __prot = 0664);






      __basic_file*
      sys_open(__c_file* __file, ios_base::openmode);

      __basic_file*
      sys_open(int __fd, ios_base::openmode __mode) throw ();

      __basic_file*
      close();

      __attribute__ ((__pure__)) bool
      is_open() const throw ();

      __attribute__ ((__pure__)) int
      fd() throw ();

      __attribute__ ((__pure__)) __c_file*
      file() throw ();

      ~__basic_file();

      streamsize
      xsputn(const char* __s, streamsize __n);

      streamsize
      xsputn_2(const char* __s1, streamsize __n1,
        const char* __s2, streamsize __n2);

      streamsize
      xsgetn(char* __s, streamsize __n);

      streamoff
      seekoff(streamoff __off, ios_base::seekdir __way) throw ();

      int
      sync();

      streamsize
      showmanyc();







      using native_handle_type = int;


      native_handle_type
      native_handle() const noexcept;

    };


}
# 47 "/usr/include/c++/15.1.1/fstream" 2 3




#define __glibcxx_want_fstream_native_handle 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 53 "/usr/include/c++/15.1.1/fstream" 2 3



#define _GLIBCXX_BUFSIZ BUFSIZ


namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Path, typename _Result = _Path, typename _Path2
    = decltype(std::declval<_Path&>().make_preferred().filename())>
    using _If_fs_path = enable_if_t<is_same_v<_Path, _Path2>, _Result>;
# 91 "/usr/include/c++/15.1.1/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_filebuf : public basic_streambuf<_CharT, _Traits>
    {

      template<typename _Tp>
 using __chk_state = __and_<is_copy_assignable<_Tp>,
       is_copy_constructible<_Tp>,
       is_default_constructible<_Tp>>;

      static_assert(__chk_state<typename _Traits::state_type>::value,
      "state_type must be CopyAssignable, CopyConstructible"
      " and DefaultConstructible");

      static_assert(is_same<typename _Traits::pos_type,
       fpos<typename _Traits::state_type>>::value,
      "pos_type must be fpos<state_type>");

    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef __basic_file<char> __file_type;
      typedef typename traits_type::state_type __state_type;
      typedef codecvt<char_type, char, __state_type> __codecvt_type;

      friend class ios_base;

    protected:


      __c_lock _M_lock;


      __file_type _M_file;


      ios_base::openmode _M_mode;


      __state_type _M_state_beg;




      __state_type _M_state_cur;



      __state_type _M_state_last;


      char_type* _M_buf;






      size_t _M_buf_size;


      bool _M_buf_allocated;
# 167 "/usr/include/c++/15.1.1/fstream" 3
      bool _M_reading;
      bool _M_writing;







      char_type _M_pback;
      char_type* _M_pback_cur_save;
      char_type* _M_pback_end_save;
      bool _M_pback_init;



      const __codecvt_type* _M_codecvt;






      char* _M_ext_buf;




      streamsize _M_ext_buf_size;






      const char* _M_ext_next;
      char* _M_ext_end;






      void
      _M_create_pback()
      {
 if (!_M_pback_init)
   {
     _M_pback_cur_save = this->gptr();
     _M_pback_end_save = this->egptr();
     this->setg(&_M_pback, &_M_pback, &_M_pback + 1);
     _M_pback_init = true;
   }
      }






      void
      _M_destroy_pback() throw()
      {
 if (_M_pback_init)
   {

     _M_pback_cur_save += this->gptr() != this->eback();
     this->setg(_M_buf, _M_pback_cur_save, _M_pback_end_save);
     _M_pback_init = false;
   }
      }

    public:







      basic_filebuf();


      basic_filebuf(const basic_filebuf&) = delete;
      basic_filebuf(basic_filebuf&&);





      virtual
      ~basic_filebuf()
      {
 try
   { this->close(); }
 catch(...)
   { }
      }


      basic_filebuf& operator=(const basic_filebuf&) = delete;
      basic_filebuf& operator=(basic_filebuf&&);
      void swap(basic_filebuf&);






      [[__nodiscard__]]
      bool
      is_open() const throw()
      { return _M_file.is_open(); }
# 322 "/usr/include/c++/15.1.1/fstream" 3
      __filebuf_type*
      open(const char* __s, ios_base::openmode __mode);
# 343 "/usr/include/c++/15.1.1/fstream" 3
      __filebuf_type*
      open(const std::string& __s, ios_base::openmode __mode)
      { return open(__s.c_str(), __mode); }
# 354 "/usr/include/c++/15.1.1/fstream" 3
      template<typename _Path>
 _If_fs_path<_Path, __filebuf_type*>
 open(const _Path& __s, ios_base::openmode __mode)
 { return open(__s.c_str(), __mode); }
# 373 "/usr/include/c++/15.1.1/fstream" 3
      __filebuf_type*
      close();
# 406 "/usr/include/c++/15.1.1/fstream" 3
    protected:
      void
      _M_allocate_internal_buffer();

      void
      _M_destroy_internal_buffer() throw();


      virtual streamsize
      showmanyc();






      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = _Traits::eof());
# 435 "/usr/include/c++/15.1.1/fstream" 3
      virtual int_type
      overflow(int_type __c = _Traits::eof());



      bool
      _M_convert_to_external(char_type*, streamsize);
# 455 "/usr/include/c++/15.1.1/fstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n);

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __pos,
       ios_base::openmode __mode = ios_base::in | ios_base::out);


      pos_type
      _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state);

      int
      _M_get_ext_pos(__state_type &__state);

      virtual int
      sync();

      virtual void
      imbue(const locale& __loc);

      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);

      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);


      bool
      _M_terminate_output();
# 501 "/usr/include/c++/15.1.1/fstream" 3
      void
      _M_set_buffer(streamsize __off)
      {
 const bool __testin = _M_mode & ios_base::in;
 const bool __testout = (_M_mode & ios_base::out
    || _M_mode & ios_base::app);

 if (__testin && __off > 0)
   this->setg(_M_buf, _M_buf, _M_buf + __off);
 else
   this->setg(_M_buf, _M_buf, _M_buf);

 if (__testout && __off == 0 && _M_buf_size > 1 )
   this->setp(_M_buf, _M_buf + _M_buf_size - 1);
 else
   this->setp(0, 0);
      }
    };
# 534 "/usr/include/c++/15.1.1/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ifstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 561 "/usr/include/c++/15.1.1/fstream" 3
      basic_ifstream() : __istream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 571 "/usr/include/c++/15.1.1/fstream" 3
      explicit
      basic_ifstream(const char* __s, ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 604 "/usr/include/c++/15.1.1/fstream" 3
      explicit
      basic_ifstream(const std::string& __s,
       ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 621 "/usr/include/c++/15.1.1/fstream" 3
      template<typename _Path, typename _Require = _If_fs_path<_Path>>
 basic_ifstream(const _Path& __s,
         ios_base::openmode __mode = ios_base::in)
 : basic_ifstream(__s.c_str(), __mode)
 { }


      basic_ifstream(const basic_ifstream&) = delete;

      basic_ifstream(basic_ifstream&& __rhs)
      : __istream_type(std::move(__rhs)),
      _M_filebuf(std::move(__rhs._M_filebuf))
      { __istream_type::set_rdbuf(&_M_filebuf); }
# 642 "/usr/include/c++/15.1.1/fstream" 3
      ~basic_ifstream()
      { }




      basic_ifstream&
      operator=(const basic_ifstream&) = delete;

      basic_ifstream&
      operator=(basic_ifstream&& __rhs)
      {
 __istream_type::operator=(std::move(__rhs));
 _M_filebuf = std::move(__rhs._M_filebuf);
 return *this;
      }

      void
      swap(basic_ifstream& __rhs)
      {
 __istream_type::swap(__rhs);
 _M_filebuf.swap(__rhs._M_filebuf);
      }
# 674 "/usr/include/c++/15.1.1/fstream" 3
      [[__nodiscard__]]
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      [[__nodiscard__]]
      bool
      is_open()
      { return _M_filebuf.is_open(); }



      [[__nodiscard__]]
      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 703 "/usr/include/c++/15.1.1/fstream" 3
      void
      open(const char* __s, ios_base::openmode __mode = ios_base::in)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::in))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 742 "/usr/include/c++/15.1.1/fstream" 3
      void
      open(const std::string& __s, ios_base::openmode __mode = ios_base::in)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::in))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 762 "/usr/include/c++/15.1.1/fstream" 3
      template<typename _Path>
 _If_fs_path<_Path, void>
 open(const _Path& __s, ios_base::openmode __mode = ios_base::in)
 { open(__s.c_str(), __mode); }
# 775 "/usr/include/c++/15.1.1/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
# 790 "/usr/include/c++/15.1.1/fstream" 3
    };
# 807 "/usr/include/c++/15.1.1/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ofstream : public basic_ostream<_CharT,_Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 834 "/usr/include/c++/15.1.1/fstream" 3
      basic_ofstream(): __ostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 844 "/usr/include/c++/15.1.1/fstream" 3
      explicit
      basic_ofstream(const char* __s,
       ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 879 "/usr/include/c++/15.1.1/fstream" 3
      explicit
      basic_ofstream(const std::string& __s,
       ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 896 "/usr/include/c++/15.1.1/fstream" 3
      template<typename _Path, typename _Require = _If_fs_path<_Path>>
 basic_ofstream(const _Path& __s,
         ios_base::openmode __mode = ios_base::out)
 : basic_ofstream(__s.c_str(), __mode)
 { }


      basic_ofstream(const basic_ofstream&) = delete;

      basic_ofstream(basic_ofstream&& __rhs)
      : __ostream_type(std::move(__rhs)),
      _M_filebuf(std::move(__rhs._M_filebuf))
      { __ostream_type::set_rdbuf(&_M_filebuf); }
# 917 "/usr/include/c++/15.1.1/fstream" 3
      ~basic_ofstream()
      { }




      basic_ofstream&
      operator=(const basic_ofstream&) = delete;

      basic_ofstream&
      operator=(basic_ofstream&& __rhs)
      {
 __ostream_type::operator=(std::move(__rhs));
 _M_filebuf = std::move(__rhs._M_filebuf);
 return *this;
      }

      void
      swap(basic_ofstream& __rhs)
      {
 __ostream_type::swap(__rhs);
 _M_filebuf.swap(__rhs._M_filebuf);
      }
# 949 "/usr/include/c++/15.1.1/fstream" 3
      [[__nodiscard__]]
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      [[__nodiscard__]]
      bool
      is_open()
      { return _M_filebuf.is_open(); }



      [[__nodiscard__]]
      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 978 "/usr/include/c++/15.1.1/fstream" 3
      void
      open(const char* __s, ios_base::openmode __mode = ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::out))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 1017 "/usr/include/c++/15.1.1/fstream" 3
      void
      open(const std::string& __s, ios_base::openmode __mode = ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::out))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 1037 "/usr/include/c++/15.1.1/fstream" 3
      template<typename _Path>
 _If_fs_path<_Path, void>
 open(const _Path& __s, ios_base::openmode __mode = ios_base::out)
 { open(__s.c_str(), __mode); }
# 1050 "/usr/include/c++/15.1.1/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
# 1065 "/usr/include/c++/15.1.1/fstream" 3
    };
# 1082 "/usr/include/c++/15.1.1/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_fstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ios<char_type, traits_type> __ios_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 1110 "/usr/include/c++/15.1.1/fstream" 3
      basic_fstream()
      : __iostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }






      explicit
      basic_fstream(const char* __s,
      ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __iostream_type(0), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 1149 "/usr/include/c++/15.1.1/fstream" 3
      explicit
      basic_fstream(const std::string& __s,
      ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __iostream_type(0), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }







      template<typename _Path, typename _Require = _If_fs_path<_Path>>
 basic_fstream(const _Path& __s,
        ios_base::openmode __mode = ios_base::in | ios_base::out)
 : basic_fstream(__s.c_str(), __mode)
 { }


      basic_fstream(const basic_fstream&) = delete;

      basic_fstream(basic_fstream&& __rhs)
      : __iostream_type(std::move(__rhs)),
      _M_filebuf(std::move(__rhs._M_filebuf))
      { __iostream_type::set_rdbuf(&_M_filebuf); }
# 1185 "/usr/include/c++/15.1.1/fstream" 3
      ~basic_fstream()
      { }




      basic_fstream&
      operator=(const basic_fstream&) = delete;

      basic_fstream&
      operator=(basic_fstream&& __rhs)
      {
 __iostream_type::operator=(std::move(__rhs));
 _M_filebuf = std::move(__rhs._M_filebuf);
 return *this;
      }

      void
      swap(basic_fstream& __rhs)
      {
 __iostream_type::swap(__rhs);
 _M_filebuf.swap(__rhs._M_filebuf);
      }
# 1217 "/usr/include/c++/15.1.1/fstream" 3
      [[__nodiscard__]]
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      [[__nodiscard__]]
      bool
      is_open()
      { return _M_filebuf.is_open(); }



      [[__nodiscard__]]
      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 1246 "/usr/include/c++/15.1.1/fstream" 3
      void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::in | ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 1287 "/usr/include/c++/15.1.1/fstream" 3
      void
      open(const std::string& __s,
    ios_base::openmode __mode = ios_base::in | ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 1308 "/usr/include/c++/15.1.1/fstream" 3
      template<typename _Path>
 _If_fs_path<_Path, void>
 open(const _Path& __s,
      ios_base::openmode __mode = ios_base::in | ios_base::out)
 { open(__s.c_str(), __mode); }
# 1322 "/usr/include/c++/15.1.1/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
# 1337 "/usr/include/c++/15.1.1/fstream" 3
    };



  template <class _CharT, class _Traits>
    inline void
    swap(basic_filebuf<_CharT, _Traits>& __x,
  basic_filebuf<_CharT, _Traits>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits>
    inline void
    swap(basic_ifstream<_CharT, _Traits>& __x,
  basic_ifstream<_CharT, _Traits>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits>
    inline void
    swap(basic_ofstream<_CharT, _Traits>& __x,
  basic_ofstream<_CharT, _Traits>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits>
    inline void
    swap(basic_fstream<_CharT, _Traits>& __x,
  basic_fstream<_CharT, _Traits>& __y)
    { __x.swap(__y); }



}

# 1 "/usr/include/c++/15.1.1/bits/fstream.tcc" 1 3
# 35 "/usr/include/c++/15.1.1/bits/fstream.tcc" 3
#define _FSTREAM_TCC 1





#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"





namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_allocate_internal_buffer()
    {


      if (!_M_buf_allocated && !_M_buf)
 {
   _M_buf = new char_type[_M_buf_size];
   _M_buf_allocated = true;
 }
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_destroy_internal_buffer() throw()
    {
      if (_M_buf_allocated)
 {
   delete [] _M_buf;
   _M_buf = 0;
   _M_buf_allocated = false;
 }
      delete [] _M_ext_buf;
      _M_ext_buf = 0;
      _M_ext_buf_size = 0;
      _M_ext_next = 0;
      _M_ext_end = 0;
    }

  template<typename _CharT, typename _Traits>
    basic_filebuf<_CharT, _Traits>::
    basic_filebuf() : __streambuf_type(), _M_lock(), _M_file(&_M_lock),
    _M_mode(ios_base::openmode(0)), _M_state_beg(), _M_state_cur(),
    _M_state_last(), _M_buf(0), _M_buf_size(8192),
    _M_buf_allocated(false), _M_reading(false), _M_writing(false), _M_pback(),
    _M_pback_cur_save(0), _M_pback_end_save(0), _M_pback_init(false),
    _M_codecvt(0), _M_ext_buf(0), _M_ext_buf_size(0), _M_ext_next(0),
    _M_ext_end(0)
    {
      _M_codecvt = std::__try_use_facet<__codecvt_type>(this->_M_buf_locale);
    }


  template<typename _CharT, typename _Traits>
    basic_filebuf<_CharT, _Traits>::
    basic_filebuf(basic_filebuf&& __rhs)
    : __streambuf_type(__rhs),
    _M_lock(), _M_file(std::move(__rhs._M_file), &_M_lock),
    _M_mode(std::__exchange(__rhs._M_mode, ios_base::openmode(0))),
    _M_state_beg(std::move(__rhs._M_state_beg)),
    _M_state_cur(std::move(__rhs._M_state_cur)),
    _M_state_last(std::move(__rhs._M_state_last)),
    _M_buf(std::__exchange(__rhs._M_buf, nullptr)),
    _M_buf_size(std::__exchange(__rhs._M_buf_size, 1)),
    _M_buf_allocated(std::__exchange(__rhs._M_buf_allocated, false)),
    _M_reading(std::__exchange(__rhs._M_reading, false)),
    _M_writing(std::__exchange(__rhs._M_writing, false)),
    _M_pback(__rhs._M_pback),
    _M_pback_cur_save(std::__exchange(__rhs._M_pback_cur_save, nullptr)),
    _M_pback_end_save(std::__exchange(__rhs._M_pback_end_save, nullptr)),
    _M_pback_init(std::__exchange(__rhs._M_pback_init, false)),
    _M_codecvt(__rhs._M_codecvt),
    _M_ext_buf(std::__exchange(__rhs._M_ext_buf, nullptr)),
    _M_ext_buf_size(std::__exchange(__rhs._M_ext_buf_size, 0)),
    _M_ext_next(std::__exchange(__rhs._M_ext_next, nullptr)),
    _M_ext_end(std::__exchange(__rhs._M_ext_end, nullptr))
    {
      __rhs._M_set_buffer(-1);
      __rhs._M_state_last = __rhs._M_state_cur = __rhs._M_state_beg;
    }

  template<typename _CharT, typename _Traits>
    basic_filebuf<_CharT, _Traits>&
    basic_filebuf<_CharT, _Traits>::
    operator=(basic_filebuf&& __rhs)
    {
      this->close();
      __streambuf_type::operator=(__rhs);
      _M_file.swap(__rhs._M_file);
      _M_mode = std::__exchange(__rhs._M_mode, ios_base::openmode(0));
      _M_state_beg = std::move(__rhs._M_state_beg);
      _M_state_cur = std::move(__rhs._M_state_cur);
      _M_state_last = std::move(__rhs._M_state_last);
      _M_buf = std::__exchange(__rhs._M_buf, nullptr);
      _M_buf_size = std::__exchange(__rhs._M_buf_size, 1);
      _M_buf_allocated = std::__exchange(__rhs._M_buf_allocated, false);
      _M_ext_buf = std::__exchange(__rhs._M_ext_buf, nullptr);
      _M_ext_buf_size = std::__exchange(__rhs._M_ext_buf_size, 0);
      _M_ext_next = std::__exchange(__rhs._M_ext_next, nullptr);
      _M_ext_end = std::__exchange(__rhs._M_ext_end, nullptr);
      _M_reading = std::__exchange(__rhs._M_reading, false);
      _M_writing = std::__exchange(__rhs._M_writing, false);
      _M_pback_cur_save = std::__exchange(__rhs._M_pback_cur_save, nullptr);
      _M_pback_end_save = std::__exchange(__rhs._M_pback_end_save, nullptr);
      _M_pback_init = std::__exchange(__rhs._M_pback_init, false);
      __rhs._M_set_buffer(-1);
      __rhs._M_state_last = __rhs._M_state_cur = __rhs._M_state_beg;
      return *this;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    swap(basic_filebuf& __rhs)
    {
      __streambuf_type::swap(__rhs);
      _M_file.swap(__rhs._M_file);
      std::swap(_M_mode, __rhs._M_mode);
      std::swap(_M_state_beg, __rhs._M_state_beg);
      std::swap(_M_state_cur, __rhs._M_state_cur);
      std::swap(_M_state_last, __rhs._M_state_last);
      std::swap(_M_buf, __rhs._M_buf);
      std::swap(_M_buf_size, __rhs._M_buf_size);
      std::swap(_M_buf_allocated, __rhs._M_buf_allocated);
      std::swap(_M_ext_buf, __rhs._M_ext_buf);
      std::swap(_M_ext_buf_size, __rhs._M_ext_buf_size);
      std::swap(_M_ext_next, __rhs._M_ext_next);
      std::swap(_M_ext_end, __rhs._M_ext_end);
      std::swap(_M_reading, __rhs._M_reading);
      std::swap(_M_writing, __rhs._M_writing);
      std::swap(_M_pback_cur_save, __rhs._M_pback_cur_save);
      std::swap(_M_pback_end_save, __rhs._M_pback_end_save);
      std::swap(_M_pback_init, __rhs._M_pback_init);
    }


  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    open(const char* __s, ios_base::openmode __mode)
    {
      __filebuf_type *__ret = 0;
      if (!this->is_open())
 {
   _M_file.open(__s, __mode);
   if (this->is_open())
     {
       _M_allocate_internal_buffer();
       _M_mode = __mode;


       _M_reading = false;
       _M_writing = false;
       _M_set_buffer(-1);


       _M_state_last = _M_state_cur = _M_state_beg;


       if ((__mode & ios_base::ate)
    && this->seekoff(0, ios_base::end, __mode)
    == pos_type(off_type(-1)))
  this->close();
       else
  __ret = this;
     }
 }
      return __ret;
    }
# 251 "/usr/include/c++/15.1.1/bits/fstream.tcc" 3
  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    close()
    {
      if (!this->is_open())
 return 0;

      bool __testfail = false;
      {

 struct __close_sentry
 {
   basic_filebuf *__fb;
   __close_sentry (basic_filebuf *__fbi): __fb(__fbi) { }
   ~__close_sentry ()
   {
     __fb->_M_mode = ios_base::openmode(0);
     __fb->_M_pback_init = false;
     __fb->_M_destroy_internal_buffer();
     __fb->_M_reading = false;
     __fb->_M_writing = false;
     __fb->_M_set_buffer(-1);
     __fb->_M_state_last = __fb->_M_state_cur = __fb->_M_state_beg;
   }
 } __cs (this);

 try
   {
     if (!_M_terminate_output())
       __testfail = true;
   }
 catch(...)
   {
     _M_file.close();
     throw;
   }
      }

      if (!_M_file.close())
 __testfail = true;

      if (__testfail)
 return 0;
      else
 return this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    showmanyc()
    {
      streamsize __ret = -1;
      const bool __testin = _M_mode & ios_base::in;
      if (__testin && this->is_open())
 {


   __ret = this->egptr() - this->gptr();







   if (__check_facet(_M_codecvt).encoding() >= 0)

     __ret += _M_file.showmanyc() / _M_codecvt->max_length();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }



   _M_destroy_pback();

   if (this->gptr() < this->egptr())
     return traits_type::to_int_type(*this->gptr());


   const size_t __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;


   bool __got_eof = false;

   streamsize __ilen = 0;
   codecvt_base::result __r = codecvt_base::ok;
   if (__check_facet(_M_codecvt).always_noconv())
     {
       __ilen = _M_file.xsgetn(reinterpret_cast<char*>(this->eback()),
          __buflen);
       if (__ilen == 0)
  __got_eof = true;
     }
   else
     {


       const int __enc = _M_codecvt->encoding();
       streamsize __blen;
       streamsize __rlen;
       if (__enc > 0)
  __blen = __rlen = __buflen * __enc;
       else
  {
    __blen = __buflen + _M_codecvt->max_length() - 1;
    __rlen = __buflen;
  }
       const streamsize __remainder = _M_ext_end - _M_ext_next;
       __rlen = __rlen > __remainder ? __rlen - __remainder : 0;



       if (_M_reading && this->egptr() == this->eback() && __remainder)
  __rlen = 0;



       if (_M_ext_buf_size < __blen)
  {
    char* __buf = new char[__blen];
    if (__remainder)
      __builtin_memcpy(__buf, _M_ext_next, __remainder);

    delete [] _M_ext_buf;
    _M_ext_buf = __buf;
    _M_ext_buf_size = __blen;
  }
       else if (__remainder)
  __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

       _M_ext_next = _M_ext_buf;
       _M_ext_end = _M_ext_buf + __remainder;
       _M_state_last = _M_state_cur;

       do
  {
    if (__rlen > 0)
      {



        if (_M_ext_end - _M_ext_buf + __rlen > _M_ext_buf_size)
   {
     __throw_ios_failure(("basic_filebuf::underflow " "codecvt::max_length() " "is not valid")

                          );
   }
        streamsize __elen = _M_file.xsgetn(_M_ext_end, __rlen);
        if (__elen == 0)
   __got_eof = true;
        else if (__elen == -1)
   break;
        _M_ext_end += __elen;
      }

    char_type* __iend = this->eback();
    if (_M_ext_next < _M_ext_end)
      __r = _M_codecvt->in(_M_state_cur, _M_ext_next,
      _M_ext_end, _M_ext_next,
      this->eback(),
      this->eback() + __buflen, __iend);
    if (__r == codecvt_base::noconv)
      {
        size_t __avail = _M_ext_end - _M_ext_buf;
        __ilen = std::min(__avail, __buflen);
        traits_type::copy(this->eback(),
     reinterpret_cast<char_type*>
     (_M_ext_buf), __ilen);
        _M_ext_next = _M_ext_buf + __ilen;
      }
    else
      __ilen = __iend - this->eback();




    if (__r == codecvt_base::error)
      break;

    __rlen = 1;
  }
       while (__ilen == 0 && !__got_eof);
     }

   if (__ilen > 0)
     {
       _M_set_buffer(__ilen);
       _M_reading = true;
       __ret = traits_type::to_int_type(*this->gptr());
     }
   else if (__got_eof)
     {



       _M_set_buffer(-1);
       _M_reading = false;


       if (__r == codecvt_base::partial)
  __throw_ios_failure(("basic_filebuf::underflow " "incomplete character in file")
                                       );
     }
   else if (__r == codecvt_base::error)
     __throw_ios_failure(("basic_filebuf::underflow " "invalid byte sequence in file")
                                    );
   else
     __throw_ios_failure(("basic_filebuf::underflow " "error reading the file")
                             , (*__errno_location ()));
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    pbackfail(int_type __i)
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }


   const bool __testpb = _M_pback_init;
   const bool __testeof = traits_type::eq_int_type(__i, __ret);
   int_type __tmp;
   if (this->eback() < this->gptr())
     {
       this->gbump(-1);
       __tmp = traits_type::to_int_type(*this->gptr());
     }
   else if (this->seekoff(-1, ios_base::cur) != pos_type(off_type(-1)))
     {
       __tmp = this->underflow();
       if (traits_type::eq_int_type(__tmp, __ret))
  return __ret;
     }
   else
     {





       return __ret;
     }



   if (!__testeof && traits_type::eq_int_type(__i, __tmp))
     __ret = __i;
   else if (__testeof)
     __ret = traits_type::not_eof(__i);
   else if (!__testpb)
     {
       _M_create_pback();
       _M_reading = true;
       *this->gptr() = traits_type::to_char_type(__i);
       __ret = __i;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    overflow(int_type __c)
    {
      int_type __ret = traits_type::eof();
      const bool __testeof = traits_type::eq_int_type(__c, __ret);
      const bool __testout = (_M_mode & ios_base::out
         || _M_mode & ios_base::app);
      if (__testout)
 {
          if (_M_reading)
            {
              _M_destroy_pback();
              const int __gptr_off = _M_get_ext_pos(_M_state_last);
              if (_M_seek(__gptr_off, ios_base::cur, _M_state_last)
                  == pos_type(off_type(-1)))
                return __ret;
            }
   if (this->pbase() < this->pptr())
     {

       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }



       if (_M_convert_to_external(this->pbase(),
      this->pptr() - this->pbase()))
  {
    _M_set_buffer(0);
    __ret = traits_type::not_eof(__c);
  }
     }
   else if (_M_buf_size > 1)
     {



       _M_set_buffer(0);
       _M_writing = true;
       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }
       __ret = traits_type::not_eof(__c);
     }
   else
     {

       char_type __conv = traits_type::to_char_type(__c);
       if (__testeof || _M_convert_to_external(&__conv, 1))
  {
    _M_writing = true;
    __ret = traits_type::not_eof(__c);
  }
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_convert_to_external(_CharT* __ibuf, streamsize __ilen)
    {

      streamsize __elen;
      streamsize __plen;
      if (__check_facet(_M_codecvt).always_noconv())
 {
   __elen = _M_file.xsputn(reinterpret_cast<char*>(__ibuf), __ilen);
   __plen = __ilen;
 }
      else
 {


   streamsize __blen = __ilen * _M_codecvt->max_length();
   char* __buf = static_cast<char*>(__builtin_alloca(__blen));

   char* __bend;
   const char_type* __iend;
   codecvt_base::result __r;
   __r = _M_codecvt->out(_M_state_cur, __ibuf, __ibuf + __ilen,
    __iend, __buf, __buf + __blen, __bend);

   if (__r == codecvt_base::ok || __r == codecvt_base::partial)
     __blen = __bend - __buf;
   else if (__r == codecvt_base::noconv)
     {

       __buf = reinterpret_cast<char*>(__ibuf);
       __blen = __ilen;
     }
   else
     __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error")
                           );

   __elen = _M_file.xsputn(__buf, __blen);
   __plen = __blen;


   if (__r == codecvt_base::partial && __elen == __plen)
     {
       const char_type* __iresume = __iend;
       streamsize __rlen = this->pptr() - __iend;
       __r = _M_codecvt->out(_M_state_cur, __iresume,
        __iresume + __rlen, __iend, __buf,
        __buf + __blen, __bend);
       if (__r != codecvt_base::error)
  {
    __rlen = __bend - __buf;
    __elen = _M_file.xsputn(__buf, __rlen);
    __plen = __rlen;
  }
       else
  __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error")
                        );
     }
 }
      return __elen == __plen;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsgetn(_CharT* __s, streamsize __n)
    {

      streamsize __ret = 0;
      if (_M_pback_init)
 {
   if (__n > 0 && this->gptr() == this->eback())
     {
       *__s++ = *this->gptr();
       this->gbump(1);
       __ret = 1;
       --__n;
     }
   _M_destroy_pback();
 }
      else if (_M_writing)
 {
   if (overflow() == traits_type::eof())
     return __ret;
   _M_set_buffer(-1);
   _M_writing = false;
 }




      const bool __testin = _M_mode & ios_base::in;
      const streamsize __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;

      if (__n > __buflen && __check_facet(_M_codecvt).always_noconv()
   && __testin)
 {

   const streamsize __avail = this->egptr() - this->gptr();
   if (__avail != 0)
     {
       traits_type::copy(__s, this->gptr(), __avail);
       __s += __avail;
       this->setg(this->eback(), this->gptr() + __avail, this->egptr());
       __ret += __avail;
       __n -= __avail;
     }



   streamsize __len;
   for (;;)
     {
       __len = _M_file.xsgetn(reinterpret_cast<char*>(__s), __n);
       if (__len == -1)
  __throw_ios_failure(("basic_filebuf::xsgetn " "error reading the file")
                              , (*__errno_location ()));
       if (__len == 0)
  break;

       __n -= __len;
       __ret += __len;
       if (__n == 0)
  break;

       __s += __len;
     }

   if (__n == 0)
     {

       _M_reading = true;
     }
   else if (__len == 0)
     {



       _M_set_buffer(-1);
       _M_reading = false;
     }
 }
      else
 __ret += __streambuf_type::xsgetn(__s, __n);

      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsputn(const _CharT* __s, streamsize __n)
    {
      streamsize __ret = 0;



      const bool __testout = (_M_mode & ios_base::out
         || _M_mode & ios_base::app);
      if (__check_facet(_M_codecvt).always_noconv()
   && __testout && !_M_reading)
 {
   streamsize __bufavail = this->epptr() - this->pptr();


   if (!_M_writing && _M_buf_size > 1)
     __bufavail = _M_buf_size - 1;

   if (__n >= __bufavail)
     {
       const streamsize __buffill = this->pptr() - this->pbase();
       const char* __buf = reinterpret_cast<const char*>(this->pbase());
       __ret = _M_file.xsputn_2(__buf, __buffill,
           reinterpret_cast<const char*>(__s),
           __n);
       if (__ret == __buffill + __n)
  {
    _M_set_buffer(0);
    _M_writing = true;
  }
       if (__ret > __buffill)
  __ret -= __buffill;
       else
  __ret = 0;
     }
   else
     __ret = __streambuf_type::xsputn(__s, __n);
 }
       else
  __ret = __streambuf_type::xsputn(__s, __n);
       return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__streambuf_type*
    basic_filebuf<_CharT, _Traits>::
    setbuf(char_type* __s, streamsize __n)
    {
      if (!this->is_open())
 {
   if (__s == 0 && __n == 0)
     _M_buf_size = 1;
   else if (__s && __n > 0)
     {
# 821 "/usr/include/c++/15.1.1/bits/fstream.tcc" 3
       _M_buf = __s;
       _M_buf_size = __n;
     }
 }
      return this;
    }




  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode)
    {
      int __width = 0;
      if (_M_codecvt)
 __width = _M_codecvt->encoding();
      if (__width < 0)
 __width = 0;

      pos_type __ret = pos_type(off_type(-1));
      const bool __testfail = __off != 0 && __width <= 0;
      if (this->is_open() && !__testfail)
 {




   bool __no_movement = __way == ios_base::cur && __off == 0
     && (!_M_writing || _M_codecvt->always_noconv());


   if (!__no_movement)
     _M_destroy_pback();






   __state_type __state = _M_state_beg;
   off_type __computed_off = __off * __width;
   if (_M_reading && __way == ios_base::cur)
     {
       __state = _M_state_last;
       __computed_off += _M_get_ext_pos(__state);
     }
   if (!__no_movement)
     __ret = _M_seek(__computed_off, __way, __state);
   else
     {
       if (_M_writing)
  __computed_off = this->pptr() - this->pbase();

       off_type __file_off = _M_file.seekoff(0, ios_base::cur);
       if (__file_off != off_type(-1))
  {
    __ret = __file_off + __computed_off;
    __ret.state(__state);
  }
     }
 }
      return __ret;
    }





  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekpos(pos_type __pos, ios_base::openmode)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (this->is_open())
 {

   _M_destroy_pback();
   __ret = _M_seek(off_type(__pos), ios_base::beg, __pos.state());
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (_M_terminate_output())
 {
   off_type __file_off = _M_file.seekoff(__off, __way);
   if (__file_off != off_type(-1))
     {
       _M_reading = false;
       _M_writing = false;
       _M_ext_next = _M_ext_end = _M_ext_buf;
       _M_set_buffer(-1);
       _M_state_cur = __state;
       __ret = __file_off;
       __ret.state(_M_state_cur);
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    int basic_filebuf<_CharT, _Traits>::
    _M_get_ext_pos(__state_type& __state)
    {
      if (_M_codecvt->always_noconv())
        return this->gptr() - this->egptr();
      else
        {



          const int __gptr_off =
            _M_codecvt->length(__state, _M_ext_buf, _M_ext_next,
                               this->gptr() - this->eback());
          return _M_ext_buf + __gptr_off - _M_ext_end;
        }
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_terminate_output()
    {

      bool __testvalid = true;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __testvalid = false;
 }


      if (_M_writing && !__check_facet(_M_codecvt).always_noconv()
   && __testvalid)
 {



   const size_t __blen = 128;
   char __buf[__blen];
   codecvt_base::result __r;
   streamsize __ilen = 0;

   do
     {
       char* __next;
       __r = _M_codecvt->unshift(_M_state_cur, __buf,
     __buf + __blen, __next);
       if (__r == codecvt_base::error)
  __testvalid = false;
       else if (__r == codecvt_base::ok ||
         __r == codecvt_base::partial)
  {
    __ilen = __next - __buf;
    if (__ilen > 0)
      {
        const streamsize __elen = _M_file.xsputn(__buf, __ilen);
        if (__elen != __ilen)
   __testvalid = false;
      }
  }
     }
   while (__r == codecvt_base::partial && __ilen > 0 && __testvalid);

   if (__testvalid)
     {




       const int_type __tmp = this->overflow();
       if (traits_type::eq_int_type(__tmp, traits_type::eof()))
  __testvalid = false;
     }
 }
      return __testvalid;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_filebuf<_CharT, _Traits>::
    sync()
    {


      int __ret = 0;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __ret = -1;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    imbue(const locale& __loc)
    {
      bool __testvalid = true;

      const __codecvt_type* const _M_codecvt_tmp
 = __try_use_facet<__codecvt_type>(__loc);

      if (this->is_open())
 {

   if ((_M_reading || _M_writing)
       && __check_facet(_M_codecvt).encoding() == -1)
     __testvalid = false;
   else
     {
       if (_M_reading)
  {
    if (__check_facet(_M_codecvt).always_noconv())
      {
        if (_M_codecvt_tmp
     && !__check_facet(_M_codecvt_tmp).always_noconv())
   __testvalid = this->seekoff(0, ios_base::cur, _M_mode)
                 != pos_type(off_type(-1));
      }
    else
      {

        _M_ext_next = _M_ext_buf
   + _M_codecvt->length(_M_state_last, _M_ext_buf,
          _M_ext_next,
          this->gptr() - this->eback());
        const streamsize __remainder = _M_ext_end - _M_ext_next;
        if (__remainder)
   __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

        _M_ext_next = _M_ext_buf;
        _M_ext_end = _M_ext_buf + __remainder;
        _M_set_buffer(-1);
        _M_state_last = _M_state_cur = _M_state_beg;
      }
  }
       else if (_M_writing && (__testvalid = _M_terminate_output()))
  _M_set_buffer(-1);
     }
 }

      if (__testvalid)
 _M_codecvt = _M_codecvt_tmp;
      else
 _M_codecvt = 0;
    }




  extern template class basic_filebuf<char>;
  extern template class basic_ifstream<char>;
  extern template class basic_ofstream<char>;
  extern template class basic_fstream<char>;


  extern template class basic_filebuf<wchar_t>;
  extern template class basic_ifstream<wchar_t>;
  extern template class basic_ofstream<wchar_t>;
  extern template class basic_fstream<wchar_t>;




}

#pragma GCC diagnostic pop
# 1373 "/usr/include/c++/15.1.1/fstream" 2 3
# 19 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-common.h" 2
# 1 "/usr/include/c++/15.1.1/iostream" 1 3
# 34 "/usr/include/c++/15.1.1/iostream" 3
#define _GLIBCXX_IOSTREAM 1
# 46 "/usr/include/c++/15.1.1/iostream" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 64 "/usr/include/c++/15.1.1/iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;
# 84 "/usr/include/c++/15.1.1/iostream" 3
  __extension__ __asm (".globl _ZSt21ios_base_library_initv");



}
# 20 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-common.h" 2
# 1 "/usr/include/c++/15.1.1/iterator" 1 3
# 56 "/usr/include/c++/15.1.1/iterator" 3
#define _GLIBCXX_ITERATOR 1
# 67 "/usr/include/c++/15.1.1/iterator" 3
# 1 "/usr/include/c++/15.1.1/bits/stream_iterator.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/stream_iterator.h" 3
#define _STREAM_ITERATOR_H 1
# 42 "/usr/include/c++/15.1.1/bits/stream_iterator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{








 
# 52 "/usr/include/c++/15.1.1/bits/stream_iterator.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"


  template<typename _Tp, typename _CharT = char,
           typename _Traits = char_traits<_CharT>, typename _Dist = ptrdiff_t>
    class istream_iterator
    : public iterator<input_iterator_tag, _Tp, _Dist, const _Tp*, const _Tp&>
    {
    public:
      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_istream<_CharT, _Traits> istream_type;

    private:
      istream_type* _M_stream;
      _Tp _M_value;



      bool _M_ok;

    public:

      constexpr istream_iterator()
      noexcept(is_nothrow_default_constructible<_Tp>::value)
      : _M_stream(0), _M_value(), _M_ok(false) {}


      istream_iterator(istream_type& __s)
      : _M_stream(std::__addressof(__s)), _M_ok(true)
      { _M_read(); }

      constexpr
      istream_iterator(const istream_iterator& __obj)
      noexcept(is_nothrow_copy_constructible<_Tp>::value)
      : _M_stream(__obj._M_stream), _M_value(__obj._M_value),
        _M_ok(__obj._M_ok)
      { }
# 100 "/usr/include/c++/15.1.1/bits/stream_iterator.h" 3
      istream_iterator& operator=(const istream_iterator&) = default;
      ~istream_iterator() = default;


      [[__nodiscard__]]
      const _Tp&
      operator*() const noexcept
      {


                        ;
 return _M_value;
      }

      [[__nodiscard__]]
      const _Tp*
      operator->() const noexcept
      { return std::__addressof((operator*())); }

      istream_iterator&
      operator++()
      {


                        ;
 _M_read();
 return *this;
      }

      istream_iterator
      operator++(int)
      {


                        ;
 istream_iterator __tmp = *this;
 _M_read();
 return __tmp;
      }

    private:
      bool
      _M_equal(const istream_iterator& __x) const noexcept
      {


 return (_M_ok == __x._M_ok) && (!_M_ok || _M_stream == __x._M_stream);
      }

      void
      _M_read()
      {
        if (_M_stream && !(*_M_stream >> _M_value))
          {
            _M_stream = 0;
            _M_ok = false;
          }
      }



      [[__nodiscard__]]
      friend bool
      operator==(const istream_iterator& __x, const istream_iterator& __y)
      noexcept
      { return __x._M_equal(__y); }




      [[__nodiscard__]]
      friend bool
      operator!=(const istream_iterator& __x, const istream_iterator& __y)
      noexcept
      { return !__x._M_equal(__y); }
# 183 "/usr/include/c++/15.1.1/bits/stream_iterator.h" 3
    };
# 196 "/usr/include/c++/15.1.1/bits/stream_iterator.h" 3
  template<typename _Tp, typename _CharT = char,
           typename _Traits = char_traits<_CharT> >
    class ostream_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:





      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


    private:
      ostream_type* _M_stream;
      const _CharT* _M_string;

    public:

      ostream_iterator(ostream_type& __s) noexcept
      : _M_stream(std::__addressof(__s)), _M_string(0) {}
# 231 "/usr/include/c++/15.1.1/bits/stream_iterator.h" 3
      ostream_iterator(ostream_type& __s, const _CharT* __c) noexcept
      : _M_stream(std::__addressof(__s)), _M_string(__c) { }


      ostream_iterator(const ostream_iterator& __obj) noexcept
      : _M_stream(__obj._M_stream), _M_string(__obj._M_string) { }


      ostream_iterator& operator=(const ostream_iterator&) = default;




      ostream_iterator&
      operator=(const _Tp& __value)
      {


                        ;
 *_M_stream << __value;
 if (_M_string)
          *_M_stream << _M_string;
 return *this;
      }

      [[__nodiscard__]]
      ostream_iterator&
      operator*() noexcept
      { return *this; }

      ostream_iterator&
      operator++() noexcept
      { return *this; }

      ostream_iterator&
      operator++(int) noexcept
      { return *this; }
    };
#pragma GCC diagnostic pop




}
# 68 "/usr/include/c++/15.1.1/iterator" 2 3




#define __glibcxx_want_array_constexpr 
#define __glibcxx_want_constexpr_iterator 
#define __glibcxx_want_make_reverse_iterator 
#define __glibcxx_want_move_iterator_concept 
#define __glibcxx_want_nonmember_container_access 
#define __glibcxx_want_null_iterators 
#define __glibcxx_want_ranges 
#define __glibcxx_want_ssize 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 81 "/usr/include/c++/15.1.1/iterator" 2 3
# 21 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-common.h" 2

# 1 "/usr/include/c++/15.1.1/map" 1 3
# 56 "/usr/include/c++/15.1.1/map" 3
#define _GLIBCXX_MAP 1







# 1 "/usr/include/c++/15.1.1/bits/stl_tree.h" 1 3
# 59 "/usr/include/c++/15.1.1/bits/stl_tree.h" 3
#define _STL_TREE_H 1
# 82 "/usr/include/c++/15.1.1/bits/stl_tree.h" 3
#define _GLIBCXX_USE_ALLOC_PTR_FOR_RB_TREE 1


namespace std __attribute__ ((__visibility__ ("default")))
{

# 105 "/usr/include/c++/15.1.1/bits/stl_tree.h" 3
  enum _Rb_tree_color { _S_red = false, _S_black = true };

  struct _Rb_tree_node_base
  {
    typedef _Rb_tree_node_base* _Base_ptr;

    _Rb_tree_color _M_color;
    _Base_ptr _M_parent;
    _Base_ptr _M_left;
    _Base_ptr _M_right;

    static _Base_ptr
    _S_minimum(_Base_ptr __x) noexcept
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Base_ptr
    _S_maximum(_Base_ptr __x) noexcept
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }




    _Base_ptr
    _M_base_ptr() const noexcept
    { return const_cast<_Rb_tree_node_base*>(this); }
  };


  template<typename _Key_compare>
    struct _Rb_tree_key_compare
    {
      _Key_compare _M_key_compare;

      _Rb_tree_key_compare()
      noexcept(is_nothrow_default_constructible<_Key_compare>::value)

      : _M_key_compare()
      { }

      _Rb_tree_key_compare(const _Key_compare& __comp)
      : _M_key_compare(__comp)
      { }



      _Rb_tree_key_compare(const _Rb_tree_key_compare&) = default;

      _Rb_tree_key_compare(_Rb_tree_key_compare&& __x)
 noexcept(is_nothrow_copy_constructible<_Key_compare>::value)
      : _M_key_compare(__x._M_key_compare)
      { }

    };


  struct _Rb_tree_header
  {
    _Rb_tree_node_base _M_header;
    size_t _M_node_count;

    _Rb_tree_header() noexcept
    {
      _M_header._M_color = _S_red;
      _M_reset();
    }


    _Rb_tree_header(_Rb_tree_header&& __x) noexcept
    {
      if (__x._M_header._M_parent != nullptr)
 _M_move_data(__x);
      else
 {
   _M_header._M_color = _S_red;
   _M_reset();
 }
    }


    void
    _M_move_data(_Rb_tree_header& __from)
    {
      _M_header._M_color = __from._M_header._M_color;
      _M_header._M_parent = __from._M_header._M_parent;
      _M_header._M_left = __from._M_header._M_left;
      _M_header._M_right = __from._M_header._M_right;
      _M_header._M_parent->_M_parent = &_M_header;
      _M_node_count = __from._M_node_count;

      __from._M_reset();
    }

    void
    _M_reset()
    {
      _M_header._M_parent = 0;
      _M_header._M_left = &_M_header;
      _M_header._M_right = &_M_header;
      _M_node_count = 0;
    }
  };

  template<typename _Val>
    struct _Rb_tree_node : public _Rb_tree_node_base
    {
# 227 "/usr/include/c++/15.1.1/bits/stl_tree.h" 3
      __gnu_cxx::__aligned_membuf<_Val> _M_storage;

      _Val*
      _M_valptr()
      { return _M_storage._M_ptr(); }

      const _Val*
      _M_valptr() const
      { return _M_storage._M_ptr(); }


      _Rb_tree_node*
      _M_node_ptr() noexcept
      { return this; }
    };


namespace __rb_tree
{
  template<typename _VoidPtr>
    struct _Node_base
    {
      using _Base_ptr = __ptr_rebind<_VoidPtr, _Node_base>;

      _Rb_tree_color _M_color;
      _Base_ptr _M_parent;
      _Base_ptr _M_left;
      _Base_ptr _M_right;

      static _Base_ptr
      _S_minimum(_Base_ptr __x) noexcept
      {
 while (__x->_M_left) __x = __x->_M_left;
 return __x;
      }

      static _Base_ptr
      _S_maximum(_Base_ptr __x) noexcept
      {
 while (__x->_M_right) __x = __x->_M_right;
 return __x;
      }




      _Base_ptr
      _M_base_ptr() const noexcept
      {
 return pointer_traits<_Base_ptr>::pointer_to
   (*const_cast<_Node_base*>(this));
      }
    };


  template<typename _NodeBase>
    struct _Header
    {
    private:
      using _Base_ptr = typename _NodeBase::_Base_ptr;

    public:
      _NodeBase _M_header;
      size_t _M_node_count;

      _Header() noexcept
      {
 _M_header._M_color = _S_red;
 _M_reset();
      }

      _Header(_Header&& __x) noexcept
      {
 if (__x._M_header._M_parent)
   _M_move_data(__x);
 else
   {
     _M_header._M_color = _S_red;
     _M_reset();
   }
      }

      void
      _M_move_data(_Header& __from)
      {
 _M_header._M_color = __from._M_header._M_color;
 _M_header._M_parent = __from._M_header._M_parent;
 _M_header._M_left = __from._M_header._M_left;
 _M_header._M_right = __from._M_header._M_right;
 _M_header._M_parent->_M_parent = _M_header._M_base_ptr();
 _M_node_count = __from._M_node_count;

 __from._M_reset();
      }

      void
      _M_reset()
      {
 _M_header._M_parent = nullptr;
 _M_header._M_left = _M_header._M_right = _M_header._M_base_ptr();
 _M_node_count = 0;
      }
    };

  template<typename _ValPtr>
    struct _Node : public __rb_tree::_Node_base<__ptr_rebind<_ValPtr, void>>
    {
      using value_type = typename pointer_traits<_ValPtr>::element_type;
      using _Node_ptr = __ptr_rebind<_ValPtr, _Node>;

      _Node() noexcept { }
      ~_Node() { }
      _Node(_Node&&) = delete;

      union _Uninit_storage
      {
 _Uninit_storage() noexcept { }
 ~_Uninit_storage() { }

 value_type _M_data;
      };
      _Uninit_storage _M_u;

      value_type*
      _M_valptr()
      { return std::addressof(_M_u._M_data); }

      value_type const*
      _M_valptr() const
      { return std::addressof(_M_u._M_data); }

      _Node_ptr
      _M_node_ptr() noexcept
      { return pointer_traits<_Node_ptr>::pointer_to(*this); }
    };
}


  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_increment(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_decrement(_Rb_tree_node_base* __x) throw ();

  template<typename _Tp>
    struct _Rb_tree_iterator
    {
      typedef _Tp value_type;
      typedef _Tp& reference;
      typedef _Tp* pointer;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;
      typedef _Rb_tree_node<_Tp>* _Node_ptr;

      _Rb_tree_iterator() noexcept
      : _M_node() { }

      explicit
      _Rb_tree_iterator(_Base_ptr __x) noexcept
      : _M_node(__x) { }

      reference
      operator*() const noexcept
      { return *static_cast<_Node_ptr>(_M_node)->_M_valptr(); }

      pointer
      operator->() const noexcept
      { return static_cast<_Node_ptr>(_M_node)->_M_valptr(); }

      _Rb_tree_iterator&
      operator++() noexcept
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Rb_tree_iterator
      operator++(int) noexcept
      {
 _Rb_tree_iterator __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Rb_tree_iterator&
      operator--() noexcept
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Rb_tree_iterator
      operator--(int) noexcept
      {
 _Rb_tree_iterator __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      friend bool
      operator==(const _Rb_tree_iterator& __x,
   const _Rb_tree_iterator& __y) noexcept
      { return __x._M_node == __y._M_node; }


      friend bool
      operator!=(const _Rb_tree_iterator& __x,
   const _Rb_tree_iterator& __y) noexcept
      { return __x._M_node != __y._M_node; }


      _Base_ptr _M_node;
    };

  template<typename _Tp>
    struct _Rb_tree_const_iterator
    {
      typedef _Tp value_type;
      typedef const _Tp& reference;
      typedef const _Tp* pointer;

      typedef _Rb_tree_iterator<_Tp> iterator;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;
      typedef const _Rb_tree_node<_Tp>* _Node_ptr;

      _Rb_tree_const_iterator() noexcept
      : _M_node() { }

      explicit
      _Rb_tree_const_iterator(_Base_ptr __x) noexcept
      : _M_node(__x) { }

      _Rb_tree_const_iterator(const iterator& __it) noexcept
      : _M_node(__it._M_node) { }

      reference
      operator*() const noexcept
      { return *static_cast<_Node_ptr>(_M_node)->_M_valptr(); }

      pointer
      operator->() const noexcept
      { return static_cast<_Node_ptr>(_M_node)->_M_valptr(); }

      _Rb_tree_const_iterator&
      operator++() noexcept
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Rb_tree_const_iterator
      operator++(int) noexcept
      {
 _Rb_tree_const_iterator __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Rb_tree_const_iterator&
      operator--() noexcept
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Rb_tree_const_iterator
      operator--(int) noexcept
      {
 _Rb_tree_const_iterator __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      friend bool
      operator==(const _Rb_tree_const_iterator& __x,
   const _Rb_tree_const_iterator& __y) noexcept
      { return __x._M_node == __y._M_node; }


      friend bool
      operator!=(const _Rb_tree_const_iterator& __x,
   const _Rb_tree_const_iterator& __y) noexcept
      { return __x._M_node != __y._M_node; }


      _Base_ptr _M_node;
    };

  __attribute__((__nonnull__))
  void
  _Rb_tree_insert_and_rebalance(const bool __insert_left,
    _Rb_tree_node_base* __x,
    _Rb_tree_node_base* __p,
    _Rb_tree_node_base& __header) throw ();

  __attribute__((__nonnull__,__returns_nonnull__))
  _Rb_tree_node_base*
  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,
          _Rb_tree_node_base& __header) throw ();

namespace __rb_tree
{

  template<bool _Const, typename _ValPtr>
    struct _Iterator
    {
      template<typename _Tp>
 using __maybe_const = __conditional_t<_Const, const _Tp, _Tp>;

      using __ptr_traits = pointer_traits<_ValPtr>;
      using value_type = typename __ptr_traits::element_type;
      using reference = __maybe_const<value_type>&;
      using pointer = __maybe_const<value_type>*;

      using iterator_category = bidirectional_iterator_tag;
      using difference_type = ptrdiff_t;

      using _Node = __rb_tree::_Node<_ValPtr>;
      using _Node_base = __rb_tree::_Node_base<__ptr_rebind<_ValPtr, void>>;
      using _Base_ptr = typename _Node_base::_Base_ptr;

      _Iterator() noexcept
      : _M_node() { }

      constexpr explicit
      _Iterator(_Base_ptr __x) noexcept
      : _M_node(__x) { }

      _Iterator(const _Iterator&) = default;
      _Iterator& operator=(const _Iterator&) = default;





      template<bool _OtherConst,
        typename = __enable_if_t<_Const && !_OtherConst>>
 constexpr
 _Iterator(const _Iterator<_OtherConst, _ValPtr>& __it)

 : _M_node(__it._M_node) { }

      [[__nodiscard__]]
      reference
      operator*() const noexcept
      { return *static_cast<_Node&>(*_M_node)._M_valptr(); }

      [[__nodiscard__]]
      pointer
      operator->() const noexcept
      { return static_cast<_Node&>(*_M_node)._M_valptr(); }

      constexpr _Iterator&
      operator++() noexcept
      {
 if (_M_node->_M_right)
   {
     _M_node = _M_node->_M_right;
     while (_M_node->_M_left)
       _M_node = _M_node->_M_left;
   }
 else
   {
     _Base_ptr __y = _M_node->_M_parent;
     while (_M_node == __y->_M_right)
       {
  _M_node = __y;
  __y = __y->_M_parent;
       }
     if (_M_node->_M_right != __y)
       _M_node = __y;
   }

 return *this;
      }

      constexpr _Iterator
      operator++(int) noexcept
      {
 _Iterator __tmp(this->_M_node);
 ++*this;
 return __tmp;
      }

      constexpr _Iterator&
      operator--() noexcept
      {
 if (_M_node->_M_color == _S_red
     && _M_node->_M_parent->_M_parent == _M_node)
   _M_node = _M_node->_M_right;
 else if (_M_node->_M_left)
   {
     _Base_ptr __y = _M_node->_M_left;
     while (__y->_M_right)
       __y = __y->_M_right;
     _M_node = __y;
   }
 else
   {
     _Base_ptr __y = _M_node->_M_parent;
     while (_M_node == __y->_M_left)
       {
  _M_node = __y;
  __y = __y->_M_parent;
       }
     _M_node = __y;
   }
 return *this;
      }

      constexpr _Iterator
      operator--(int) noexcept
      {
 _Iterator __tmp(this->_M_node);
 --*this;
 return __tmp;
      }

      [[__nodiscard__]]
      friend bool
      operator==(const _Iterator& __x, const _Iterator& __y) noexcept
      { return __x._M_node == __y._M_node; }


      [[__nodiscard__]]
      friend bool
      operator!=(const _Iterator& __x, const _Iterator& __y) noexcept
      { return __x._M_node != __y._M_node; }


      _Base_ptr _M_node;
    };



  template<typename _Val, typename _Ptr>
    struct _Node_traits;





  template<typename _Val>
    struct _Node_traits<_Val, _Val*>
    {
      typedef _Rb_tree_node<_Val> _Node;
      typedef _Node* _Node_ptr;
      typedef _Rb_tree_node_base _Node_base;
      typedef _Node_base* _Base_ptr;
      typedef _Rb_tree_header _Header_t;
      typedef _Rb_tree_iterator<_Val> _Iterator;
      typedef _Rb_tree_const_iterator<_Val> _Const_iterator;

      __attribute__((__nonnull__))
      static void
      _S_insert_and_rebalance(const bool __insert_left,
         _Node_base* __x, _Node_base* __p,
         _Node_base& __header) noexcept
      {
 return _Rb_tree_insert_and_rebalance(__insert_left, __x, __p, __header);
      }

      __attribute__((__nonnull__,__returns_nonnull__))
      static _Node_base*
      _S_rebalance_for_erase(_Node_base* const __z,
        _Node_base& __header) noexcept
      { return _Rb_tree_rebalance_for_erase(__z, __header); }
    };
# 712 "/usr/include/c++/15.1.1/bits/stl_tree.h" 3
  template<typename _Val, typename _ValPtr>
    struct _Node_traits
    {
      using _Node = __rb_tree::_Node<_ValPtr>;
      using _Node_ptr = __ptr_rebind<_ValPtr, _Node>;
      using _Node_base = __rb_tree::_Node_base<__ptr_rebind<_ValPtr, void>>;
      using _Base_ptr = __ptr_rebind<_ValPtr, _Node_base>;
      using _Header_t = __rb_tree::_Header<_Node_base>;
      using _Iterator = __rb_tree::_Iterator<false, _ValPtr>;
      using _Const_iterator = __rb_tree::_Iterator<true, _ValPtr>;

      static void
      _Rotate_left(_Base_ptr __x, _Base_ptr& __root)
      {
 const _Base_ptr __y = __x->_M_right;

 __x->_M_right = __y->_M_left;
 if (__y->_M_left)
   __y->_M_left->_M_parent = __x;
 __y->_M_parent = __x->_M_parent;

 if (__x == __root)
   __root = __y;
 else if (__x == __x->_M_parent->_M_left)
   __x->_M_parent->_M_left = __y;
 else
   __x->_M_parent->_M_right = __y;
 __y->_M_left = __x;
 __x->_M_parent = __y;
      }

      static void
      _Rotate_right(_Base_ptr __x, _Base_ptr& __root)
      {
 const _Base_ptr __y = __x->_M_left;

 __x->_M_left = __y->_M_right;
 if (__y->_M_right)
   __y->_M_right->_M_parent = __x;
 __y->_M_parent = __x->_M_parent;

 if (__x == __root)
   __root = __y;
 else if (__x == __x->_M_parent->_M_right)
   __x->_M_parent->_M_right = __y;
 else
   __x->_M_parent->_M_left = __y;
 __y->_M_right = __x;
 __x->_M_parent = __y;
      }

      static void
      _S_insert_and_rebalance(const bool __insert_left,
         _Base_ptr __x, _Base_ptr __p,
         _Node_base& __header)
      {
 _Base_ptr& __root = __header._M_parent;


 __x->_M_parent = __p;
 __x->_M_left = __x->_M_right = nullptr;
 __x->_M_color = _S_red;





 if (__insert_left)
   {
     __p->_M_left = __x;

     if (std::__to_address(__p) == std::addressof(__header))
       {
  __header._M_parent = __x;
  __header._M_right = __x;
       }
     else if (__p == __header._M_left)
       __header._M_left = __x;
   }
 else
   {
     __p->_M_right = __x;

     if (__p == __header._M_right)
       __header._M_right = __x;
   }

 while (__x != __root
        && __x->_M_parent->_M_color == _S_red)
   {
     const _Base_ptr __xpp = __x->_M_parent->_M_parent;

     if (__x->_M_parent == __xpp->_M_left)
       {
  const _Base_ptr __y = __xpp->_M_right;
  if (__y && __y->_M_color == _S_red)
    {
      __x->_M_parent->_M_color = _S_black;
      __y->_M_color = _S_black;
      __xpp->_M_color = _S_red;
      __x = __xpp;
    }
  else
    {
      if (__x == __x->_M_parent->_M_right)
        {
   __x = __x->_M_parent;
   _Rotate_left(__x, __root);
        }
      __x->_M_parent->_M_color = _S_black;
      __xpp->_M_color = _S_red;
      _Rotate_right(__xpp, __root);
    }
       }
     else
       {
  const _Base_ptr __y = __xpp->_M_left;
  if (__y && __y->_M_color == _S_red)
    {
      __x->_M_parent->_M_color = _S_black;
      __y->_M_color = _S_black;
      __xpp->_M_color = _S_red;
      __x = __xpp;
    }
  else
    {
      if (__x == __x->_M_parent->_M_left)
        {
   __x = __x->_M_parent;
   _Rotate_right(__x, __root);
        }
      __x->_M_parent->_M_color = _S_black;
      __xpp->_M_color = _S_red;
      _Rotate_left(__xpp, __root);
    }
       }
   }
 __root->_M_color = _S_black;
      }

      static _Base_ptr
      _S_rebalance_for_erase(_Base_ptr __z, _Node_base& __header)
      {
 _Base_ptr& __root = __header._M_parent;
 _Base_ptr& __leftmost = __header._M_left;
 _Base_ptr& __rightmost = __header._M_right;
 _Base_ptr __y = __z;
 _Base_ptr __x{};
 _Base_ptr __x_parent{};

 if (!__y->_M_left)
   __x = __y->_M_right;
 else
   if (!__y->_M_right)
     __x = __y->_M_left;
   else
     {

       __y = __y->_M_right;
       while (__y->_M_left)
  __y = __y->_M_left;
       __x = __y->_M_right;
     }
 if (__y != __z)
   {

     __z->_M_left->_M_parent = __y;
     __y->_M_left = __z->_M_left;
     if (__y != __z->_M_right)
       {
  __x_parent = __y->_M_parent;
  if (__x)
    __x->_M_parent = __y->_M_parent;
  __y->_M_parent->_M_left = __x;
  __y->_M_right = __z->_M_right;
  __z->_M_right->_M_parent = __y;
       }
     else
       __x_parent = __y;
     if (__root == __z)
       __root = __y;
     else if (__z->_M_parent->_M_left == __z)
       __z->_M_parent->_M_left = __y;
     else
       __z->_M_parent->_M_right = __y;
     __y->_M_parent = __z->_M_parent;
     std::swap(__y->_M_color, __z->_M_color);
     __y = __z;

   }
 else
   {
     __x_parent = __y->_M_parent;
     if (__x)
       __x->_M_parent = __y->_M_parent;
     if (__root == __z)
       __root = __x;
     else
       if (__z->_M_parent->_M_left == __z)
  __z->_M_parent->_M_left = __x;
       else
  __z->_M_parent->_M_right = __x;
     if (__leftmost == __z)
       {
  if (!__z->_M_right)
    __leftmost = __z->_M_parent;

  else
    __leftmost = _Node_base::_S_minimum(__x);
       }
     if (__rightmost == __z)
       {
  if (__z->_M_left == 0)
    __rightmost = __z->_M_parent;

  else
    __rightmost = _Node_base::_S_maximum(__x);
       }
   }
 if (__y->_M_color != _S_red)
   {
     while (__x != __root && (__x == 0 || __x->_M_color == _S_black))
       if (__x == __x_parent->_M_left)
  {
    _Base_ptr __w = __x_parent->_M_right;
    if (__w->_M_color == _S_red)
      {
        __w->_M_color = _S_black;
        __x_parent->_M_color = _S_red;
        _Rotate_left(__x_parent, __root);
        __w = __x_parent->_M_right;
      }
    if ((!__w->_M_left || __w->_M_left->_M_color == _S_black) &&
        (!__w->_M_right || __w->_M_right->_M_color == _S_black))
      {
        __w->_M_color = _S_red;
        __x = __x_parent;
        __x_parent = __x_parent->_M_parent;
      }
    else
      {
        if (!__w->_M_right || __w->_M_right->_M_color == _S_black)
   {
     __w->_M_left->_M_color = _S_black;
     __w->_M_color = _S_red;
     _Rotate_right(__w, __root);
     __w = __x_parent->_M_right;
   }
        __w->_M_color = __x_parent->_M_color;
        __x_parent->_M_color = _S_black;
        if (__w->_M_right)
   __w->_M_right->_M_color = _S_black;
        _Rotate_left(__x_parent, __root);
        break;
      }
  }
       else
  {

    _Base_ptr __w = __x_parent->_M_left;
    if (__w->_M_color == _S_red)
      {
        __w->_M_color = _S_black;
        __x_parent->_M_color = _S_red;
        _Rotate_right(__x_parent, __root);
        __w = __x_parent->_M_left;
      }
    if ((!__w->_M_right || __w->_M_right->_M_color == _S_black) &&
        (!__w->_M_left || __w->_M_left->_M_color == _S_black))
      {
        __w->_M_color = _S_red;
        __x = __x_parent;
        __x_parent = __x_parent->_M_parent;
      }
    else
      {
        if (!__w->_M_left || __w->_M_left->_M_color == _S_black)
   {
     __w->_M_right->_M_color = _S_black;
     __w->_M_color = _S_red;
     _Rotate_left(__w, __root);
     __w = __x_parent->_M_left;
   }
        __w->_M_color = __x_parent->_M_color;
        __x_parent->_M_color = _S_black;
        if (__w->_M_left)
   __w->_M_left->_M_color = _S_black;
        _Rotate_right(__x_parent, __root);
        break;
      }
  }
     if (__x)
       __x->_M_color = _S_black;
   }

 return __y;
      }
    };

}


  template<typename _Tree1, typename _Cmp2>
    struct _Rb_tree_merge_helper { };


  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc = allocator<_Val> >
    class _Rb_tree
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Val>::other _Val_alloc_type;

      typedef __gnu_cxx::__alloc_traits<_Val_alloc_type> _Val_alloc_traits;
      typedef typename _Val_alloc_traits::pointer _ValPtr;
      typedef __rb_tree::_Node_traits<_Val, _ValPtr> _Node_traits;

      typedef typename _Node_traits::_Node_base _Node_base;
      typedef typename _Node_traits::_Node _Node;

      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Node>::other _Node_allocator;

      typedef __gnu_cxx::__alloc_traits<_Node_allocator> _Node_alloc_traits;

    protected:
      typedef typename _Node_traits::_Base_ptr _Base_ptr;
      typedef typename _Node_traits::_Node_ptr _Node_ptr;

    private:


      struct _Reuse_or_alloc_node
      {
 _Reuse_or_alloc_node(_Rb_tree& __t)
 : _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)
 {
   if (_M_root)
     {
       _M_root->_M_parent = _Base_ptr();

       if (_M_nodes->_M_left)
  _M_nodes = _M_nodes->_M_left;
     }
   else
     _M_nodes = _Base_ptr();
 }


 _Reuse_or_alloc_node(const _Reuse_or_alloc_node&) = delete;


 ~_Reuse_or_alloc_node()
 {
   if (_M_root)
     _M_t._M_erase(static_cast<_Node&>(*_M_root)._M_node_ptr());
 }

 template<typename _Arg>
   _Node_ptr
   operator()(_Arg&& __arg)
   {
     _Base_ptr __base = _M_extract();
     if (__base)
       {
  _Node_ptr __node = static_cast<_Node&>(*__base)._M_node_ptr();
  _M_t._M_destroy_node(__node);
  _M_t._M_construct_node(__node, std::forward<_Arg>(__arg));
  return __node;
       }

     return _M_t._M_create_node(std::forward<_Arg>(__arg));
   }

      private:
 _Base_ptr
 _M_extract()
 {
   if (!_M_nodes)
     return _M_nodes;

   _Base_ptr __node = _M_nodes;
   _M_nodes = _M_nodes->_M_parent;
   if (_M_nodes)
     {
       if (_M_nodes->_M_right == __node)
  {
    _M_nodes->_M_right = _Base_ptr();

    if (_M_nodes->_M_left)
      {
        _M_nodes = _M_nodes->_M_left;

        while (_M_nodes->_M_right)
   _M_nodes = _M_nodes->_M_right;

        if (_M_nodes->_M_left)
   _M_nodes = _M_nodes->_M_left;
      }
  }
       else
  _M_nodes->_M_left = _Base_ptr();
     }
   else
     _M_root = _Base_ptr();

   return __node;
 }

 _Base_ptr _M_root;
 _Base_ptr _M_nodes;
 _Rb_tree& _M_t;
      };



      struct _Alloc_node
      {
 _Alloc_node(_Rb_tree& __t)
 : _M_t(__t) { }

 template<typename _Arg>
   _Node_ptr
   operator()(_Arg&& __arg) const
   { return _M_t._M_create_node(std::forward<_Arg>(__arg)); }

      private:
 _Rb_tree& _M_t;
      };

    public:
      typedef _Key key_type;
      typedef _Val value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

      _Node_allocator&
      _M_get_Node_allocator() noexcept
      { return this->_M_impl; }

      const _Node_allocator&
      _M_get_Node_allocator() const noexcept
      { return this->_M_impl; }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Node_allocator()); }

    protected:
      _Node_ptr
      _M_get_node()
      {

 return _Node_alloc_traits::allocate(_M_get_Node_allocator(), 1);
# 1185 "/usr/include/c++/15.1.1/bits/stl_tree.h" 3
      }

      void
      _M_put_node(_Node_ptr __p) noexcept
      {

 _Node_alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1);
# 1207 "/usr/include/c++/15.1.1/bits/stl_tree.h" 3
      }
# 1230 "/usr/include/c++/15.1.1/bits/stl_tree.h" 3
      template<typename... _Args>
 void
 _M_construct_node(_Node_ptr __node, _Args&&... __args)
 {
   try
     {
       ::new(std::addressof(*__node)) _Node;
       _Node_alloc_traits::construct(_M_get_Node_allocator(),
         __node->_M_valptr(),
         std::forward<_Args>(__args)...);
     }
   catch(...)
     {
       __node->~_Node();
       _M_put_node(__node);
       throw;
     }
 }

      template<typename... _Args>
 _Node_ptr
 _M_create_node(_Args&&... __args)
 {
   _Node_ptr __tmp = _M_get_node();
   _M_construct_node(__tmp, std::forward<_Args>(__args)...);
   return __tmp;
 }


      void
      _M_destroy_node(_Node_ptr __p) noexcept
      {



 _Node_alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 __p->~_Node();

      }

      void
      _M_drop_node(_Node_ptr __p) noexcept
      {
 _M_destroy_node(__p);
 _M_put_node(__p);
      }

      template<bool _MoveValue, typename _NodeGen>
 _Node_ptr
 _M_clone_node(_Node_ptr __x, _NodeGen& __node_gen)
 {

   using _Vp = __conditional_t<_MoveValue,
          value_type&&,
          const value_type&>;

   _Node_ptr __tmp
     = __node_gen(std::forward<_Vp>(*__x->_M_valptr()));
   __tmp->_M_color = __x->_M_color;
   __tmp->_M_left = __tmp->_M_right = _Base_ptr();
   return __tmp;
 }

    protected:
      typedef typename _Node_traits::_Header_t _Header_t;





      template<typename _Key_compare,
        bool = __is_pod(_Key_compare)>

 struct _Rb_tree_impl
 : public _Node_allocator
 , public _Rb_tree_key_compare<_Key_compare>
 , public _Header_t
 {
   typedef _Rb_tree_key_compare<_Key_compare> _Base_key_compare;

   _Rb_tree_impl()
     noexcept(is_nothrow_default_constructible<_Node_allocator>::value && is_nothrow_default_constructible<_Base_key_compare>::value)


   : _Node_allocator()
   { }

   _Rb_tree_impl(const _Rb_tree_impl& __x)
   : _Node_allocator(_Node_alloc_traits::_S_select_on_copy(__x))
   , _Base_key_compare(__x._M_key_compare)
   , _Header_t()
   { }






   _Rb_tree_impl(_Rb_tree_impl&&)
     noexcept( is_nothrow_move_constructible<_Base_key_compare>::value )
   = default;

   explicit
   _Rb_tree_impl(_Node_allocator&& __a)
   : _Node_allocator(std::move(__a))
   { }

   _Rb_tree_impl(_Rb_tree_impl&& __x, _Node_allocator&& __a)
   : _Node_allocator(std::move(__a)),
     _Base_key_compare(std::move(__x)),
     _Header_t(std::move(__x))
   { }

   _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
   : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
   { }

 };

      _Rb_tree_impl<_Compare> _M_impl;

    protected:
      _Base_ptr&
      _M_root() noexcept
      { return this->_M_impl._M_header._M_parent; }

      _Base_ptr
      _M_root() const noexcept
      { return this->_M_impl._M_header._M_parent; }

      _Base_ptr&
      _M_leftmost() noexcept
      { return this->_M_impl._M_header._M_left; }

      _Base_ptr
      _M_leftmost() const noexcept
      { return this->_M_impl._M_header._M_left; }

      _Base_ptr&
      _M_rightmost() noexcept
      { return this->_M_impl._M_header._M_right; }

      _Base_ptr
      _M_rightmost() const noexcept
      { return this->_M_impl._M_header._M_right; }

      _Base_ptr
      _M_begin() const noexcept
      { return this->_M_impl._M_header._M_parent; }

      _Node_ptr
      _M_begin_node() const noexcept
      {
 _Base_ptr __begin = this->_M_impl._M_header._M_parent;
 return __begin
   ? static_cast<_Node&>(*__begin)._M_node_ptr()
   : _Node_ptr();
      }

      _Base_ptr
      _M_end() const noexcept
      { return this->_M_impl._M_header._M_base_ptr(); }

      static const _Key&
      _S_key(const _Node& __node)
      {



 static_assert(__is_invocable<_Compare&, const _Key&, const _Key&>{},
        "comparison object must be invocable "
        "with two arguments of key type");



 if constexpr (__is_invocable<_Compare&, const _Key&, const _Key&>{})
   static_assert(
       is_invocable_v<const _Compare&, const _Key&, const _Key&>,
       "comparison object must be invocable as const");



 return _KeyOfValue()(*__node._M_valptr());
      }

      static const _Key&
      _S_key(_Base_ptr __x)
      { return _S_key(static_cast<const _Node&>(*__x)); }

      static const _Key&
      _S_key(_Node_ptr __x)
      { return _S_key(*__x); }

      static _Base_ptr
      _S_left(_Base_ptr __x) noexcept
      { return __x->_M_left; }

      static _Node_ptr
      _S_left(_Node_ptr __x)
      {
 return __x->_M_left
   ? static_cast<_Node&>(*__x->_M_left)._M_node_ptr()
   : _Node_ptr();
      }

      static _Base_ptr
      _S_right(_Base_ptr __x) noexcept
      { return __x->_M_right; }

      static _Node_ptr
      _S_right(_Node_ptr __x) noexcept
      {
 return __x->_M_right
   ? static_cast<_Node&>(*__x->_M_right)._M_node_ptr()
   : _Node_ptr();
      }

    public:
      typedef typename _Node_traits::_Iterator iterator;
      typedef typename _Node_traits::_Const_iterator const_iterator;

      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;


      using node_type = _Node_handle<_Key, _Val, _Node_allocator>;
      using insert_return_type = _Node_insert_return<
 __conditional_t<is_same_v<_Key, _Val>, const_iterator, iterator>,
 node_type>;


      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_unique_pos(const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_equal_pos(const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_hint_unique_pos(const_iterator __pos,
        const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_hint_equal_pos(const_iterator __pos,
       const key_type& __k);

    private:

      template<typename _Arg, typename _NodeGen>
 iterator
 _M_insert_(_Base_ptr __x, _Base_ptr __y, _Arg&& __v, _NodeGen&);

      iterator
      _M_insert_node(_Base_ptr __x, _Base_ptr __y, _Node_ptr __z);

      template<typename _Arg>
 iterator
 _M_insert_lower(_Base_ptr __y, _Arg&& __v);

      template<typename _Arg>
 iterator
 _M_insert_equal_lower(_Arg&& __x);

      iterator
      _M_insert_lower_node(_Base_ptr __p, _Node_ptr __z);

      iterator
      _M_insert_equal_lower_node(_Node_ptr __z);
# 1512 "/usr/include/c++/15.1.1/bits/stl_tree.h" 3
      enum { __as_lvalue, __as_rvalue };

      template<bool _MoveValues, typename _NodeGen>
 _Base_ptr
 _M_copy(_Node_ptr, _Base_ptr, _NodeGen&);

      template<bool _MoveValues, typename _NodeGen>
 _Base_ptr
 _M_copy(const _Rb_tree& __x, _NodeGen& __gen)
 {
   _Base_ptr __root =
     _M_copy<_MoveValues>(__x._M_begin_node(), _M_end(), __gen);
   _M_leftmost() = _Node_base::_S_minimum(__root);
   _M_rightmost() = _Node_base::_S_maximum(__root);
   _M_impl._M_node_count = __x._M_impl._M_node_count;
   return __root;
 }

      _Base_ptr
      _M_copy(const _Rb_tree& __x)
      {
 _Alloc_node __an(*this);
 return _M_copy<__as_lvalue>(__x, __an);
      }

      void
      _M_erase(_Node_ptr __x);

      _Base_ptr
      _M_lower_bound(_Base_ptr __x, _Base_ptr __y,
       const _Key& __k) const;

      _Base_ptr
      _M_upper_bound(_Base_ptr __x, _Base_ptr __y,
       const _Key& __k) const;

    public:




      _Rb_tree() = default;


      _Rb_tree(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_impl(__comp, _Node_allocator(__a)) { }

      _Rb_tree(const _Rb_tree& __x)
      : _M_impl(__x._M_impl)
      {
 if (__x._M_root())
   _M_root() = _M_copy(__x);
      }


      _Rb_tree(const allocator_type& __a)
      : _M_impl(_Node_allocator(__a))
      { }

      _Rb_tree(const _Rb_tree& __x, const allocator_type& __a)
      : _M_impl(__x._M_impl._M_key_compare, _Node_allocator(__a))
      {
 if (__x._M_root())
   _M_root() = _M_copy(__x);
      }

      _Rb_tree(_Rb_tree&&) = default;

      _Rb_tree(_Rb_tree&& __x, const allocator_type& __a)
      : _Rb_tree(std::move(__x), _Node_allocator(__a))
      { }

    private:
      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a, true_type)
      noexcept(is_nothrow_default_constructible<_Compare>::value)
      : _M_impl(std::move(__x._M_impl), std::move(__a))
      { }

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a, false_type)
      : _M_impl(__x._M_impl._M_key_compare, std::move(__a))
      {
 if (__x._M_root())
   _M_move_data(__x, false_type{});
      }

    public:
      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a)
      noexcept( noexcept(
 _Rb_tree(std::declval<_Rb_tree&&>(), std::declval<_Node_allocator&&>(),
   std::declval<typename _Node_alloc_traits::is_always_equal>())) )
      : _Rb_tree(std::move(__x), std::move(__a),
   typename _Node_alloc_traits::is_always_equal{})
      { }


      ~_Rb_tree() noexcept
      { _M_erase(_M_begin_node()); }

      _Rb_tree&
      operator=(const _Rb_tree& __x);


      _Compare
      key_comp() const
      { return _M_impl._M_key_compare; }

      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_header._M_left); }

      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_header._M_left); }

      iterator
      end() noexcept
      { return iterator(_M_end()); }

      const_iterator
      end() const noexcept
      { return const_iterator(_M_end()); }

      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }

      [[__nodiscard__]] bool
      empty() const noexcept
      { return _M_impl._M_node_count == 0; }

      size_type
      size() const noexcept
      { return _M_impl._M_node_count; }

      size_type
      max_size() const noexcept
      { return _Node_alloc_traits::max_size(_M_get_Node_allocator()); }

      void
      swap(_Rb_tree& __t)
      noexcept(__is_nothrow_swappable<_Compare>::value);



      template<typename _Arg>
 pair<iterator, bool>
 _M_insert_unique(_Arg&& __x);

      template<typename _Arg>
 iterator
 _M_insert_equal(_Arg&& __x);

      template<typename _Arg, typename _NodeGen>
 iterator
 _M_insert_unique_(const_iterator __pos, _Arg&& __x, _NodeGen&);

      template<typename _Arg>
 iterator
 _M_insert_unique_(const_iterator __pos, _Arg&& __x)
 {
   _Alloc_node __an(*this);
   return _M_insert_unique_(__pos, std::forward<_Arg>(__x), __an);
 }

      template<typename _Arg, typename _NodeGen>
 iterator
 _M_insert_equal_(const_iterator __pos, _Arg&& __x, _NodeGen&);

      template<typename _Arg>
 iterator
 _M_insert_equal_(const_iterator __pos, _Arg&& __x)
 {
   _Alloc_node __an(*this);
   return _M_insert_equal_(__pos, std::forward<_Arg>(__x), __an);
 }

      template<typename... _Args>
 pair<iterator, bool>
 _M_emplace_unique(_Args&&... __args);

      template<typename... _Args>
 iterator
 _M_emplace_equal(_Args&&... __args);

      template<typename... _Args>
 iterator
 _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args);

      template<typename... _Args>
 iterator
 _M_emplace_hint_equal(const_iterator __pos, _Args&&... __args);

      template<typename _Iter>
 using __same_value_type
   = is_same<value_type, typename iterator_traits<_Iter>::value_type>;

      template<typename _InputIterator>
 __enable_if_t<__same_value_type<_InputIterator>::value>
 _M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 {
   _Alloc_node __an(*this);
   for (; __first != __last; ++__first)
     _M_insert_unique_(end(), *__first, __an);
 }

      template<typename _InputIterator>
 __enable_if_t<!__same_value_type<_InputIterator>::value>
 _M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 {
   for (; __first != __last; ++__first)
     _M_emplace_unique(*__first);
 }

      template<typename _InputIterator>
 __enable_if_t<__same_value_type<_InputIterator>::value>
 _M_insert_range_equal(_InputIterator __first, _InputIterator __last)
 {
   _Alloc_node __an(*this);
   for (; __first != __last; ++__first)
     _M_insert_equal_(end(), *__first, __an);
 }

      template<typename _InputIterator>
 __enable_if_t<!__same_value_type<_InputIterator>::value>
 _M_insert_range_equal(_InputIterator __first, _InputIterator __last)
 {
   for (; __first != __last; ++__first)
     _M_emplace_equal(*__first);
 }
# 1803 "/usr/include/c++/15.1.1/bits/stl_tree.h" 3
    private:
      void
      _M_erase_aux(const_iterator __position);

      void
      _M_erase_aux(const_iterator __first, const_iterator __last);

    public:



      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __position)
      {
 do { if (std::__is_constant_evaluated() && !bool(__position != end())) std::__glibcxx_assert_fail(); } while (false);
 const_iterator __result = __position;
 ++__result;
 _M_erase_aux(__position);
 return iterator(__result._M_node);
      }


      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(iterator __position)
      {
 do { if (std::__is_constant_evaluated() && !bool(__position != end())) std::__glibcxx_assert_fail(); } while (false);
 iterator __result = __position;
 ++__result;
 _M_erase_aux(__position);
 return __result;
      }
# 1852 "/usr/include/c++/15.1.1/bits/stl_tree.h" 3
      size_type
      erase(const key_type& __x);




      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __first, const_iterator __last)
      {
 _M_erase_aux(__first, __last);
 return iterator(__last._M_node);
      }
# 1875 "/usr/include/c++/15.1.1/bits/stl_tree.h" 3
      void
      clear() noexcept
      {
 _M_erase(_M_begin_node());
 _M_impl._M_reset();
      }


      iterator
      find(const key_type& __k);

      const_iterator
      find(const key_type& __k) const;

      size_type
      count(const key_type& __k) const;

      iterator
      lower_bound(const key_type& __k)
      { return iterator(_M_lower_bound(_M_begin(), _M_end(), __k)); }

      const_iterator
      lower_bound(const key_type& __k) const
      {
 return const_iterator
   (_M_lower_bound(_M_begin(), _M_end(), __k));
      }

      iterator
      upper_bound(const key_type& __k)
      { return iterator(_M_upper_bound(_M_begin(), _M_end(), __k)); }

      const_iterator
      upper_bound(const key_type& __k) const
      {
 return const_iterator
   (_M_upper_bound(_M_begin(), _M_end(), __k));
      }

      pair<iterator, iterator>
      equal_range(const key_type& __k);

      pair<const_iterator, const_iterator>
      equal_range(const key_type& __k) const;


      template<typename _Kt,
        typename _Req = __has_is_transparent_t<_Compare, _Kt>>
 iterator
 _M_find_tr(const _Kt& __k)
 {
   const _Rb_tree* __const_this = this;
   return iterator(__const_this->_M_find_tr(__k)._M_node);
 }

      template<typename _Kt,
        typename _Req = __has_is_transparent_t<_Compare, _Kt>>
 const_iterator
 _M_find_tr(const _Kt& __k) const
 {
   const_iterator __j(_M_lower_bound_tr(__k));
   if (__j != end() && _M_impl._M_key_compare(__k, _S_key(__j._M_node)))
     __j = end();
   return __j;
 }

      template<typename _Kt,
        typename _Req = __has_is_transparent_t<_Compare, _Kt>>
 size_type
 _M_count_tr(const _Kt& __k) const
 {
   auto __p = _M_equal_range_tr(__k);
   return std::distance(__p.first, __p.second);
 }

      template<typename _Kt,
        typename _Req = __has_is_transparent_t<_Compare, _Kt>>
 _Base_ptr
 _M_lower_bound_tr(const _Kt& __k) const
 {
   auto __x = _M_begin();
   auto __y = _M_end();
   while (__x)
     if (!_M_impl._M_key_compare(_S_key(__x), __k))
       {
  __y = __x;
  __x = _S_left(__x);
       }
     else
       __x = _S_right(__x);
   return __y;
 }

      template<typename _Kt,
        typename _Req = __has_is_transparent_t<_Compare, _Kt>>
 _Base_ptr
 _M_upper_bound_tr(const _Kt& __k) const
 {
   auto __x = _M_begin();
   auto __y = _M_end();
   while (__x)
     if (_M_impl._M_key_compare(__k, _S_key(__x)))
       {
  __y = __x;
  __x = _S_left(__x);
       }
     else
       __x = _S_right(__x);
   return __y;
 }

      template<typename _Kt,
        typename _Req = __has_is_transparent_t<_Compare, _Kt>>
 pair<iterator, iterator>
 _M_equal_range_tr(const _Kt& __k)
 {
   const _Rb_tree* __const_this = this;
   auto __ret = __const_this->_M_equal_range_tr(__k);
   return
     { iterator(__ret.first._M_node), iterator(__ret.second._M_node) };
 }

      template<typename _Kt,
        typename _Req = __has_is_transparent_t<_Compare, _Kt>>
 pair<const_iterator, const_iterator>
 _M_equal_range_tr(const _Kt& __k) const
 {
   const_iterator __low(_M_lower_bound_tr(__k));
   auto __high = __low;
   auto& __cmp = _M_impl._M_key_compare;
   while (__high != end() && !__cmp(__k, _S_key(__high._M_node)))
     ++__high;
   return { __low, __high };
 }



      bool
      __rb_verify() const;


      _Rb_tree&
      operator=(_Rb_tree&&)
      noexcept(_Node_alloc_traits::_S_nothrow_move()
        && is_nothrow_move_assignable<_Compare>::value);

      template<typename _Iterator>
 void
 _M_assign_unique(_Iterator, _Iterator);

      template<typename _Iterator>
 void
 _M_assign_equal(_Iterator, _Iterator);

    private:

      void
      _M_move_data(_Rb_tree& __x, true_type)
      { _M_impl._M_move_data(__x._M_impl); }



      void
      _M_move_data(_Rb_tree&, false_type);


      void
      _M_move_assign(_Rb_tree&, true_type);



      void
      _M_move_assign(_Rb_tree&, false_type);



      static _Node_ptr
      _S_adapt(typename _Node_alloc_traits::pointer __ptr)
      {

 return __ptr;
# 2066 "/usr/include/c++/15.1.1/bits/stl_tree.h" 3
      }

    public:

      insert_return_type
      _M_reinsert_node_unique(node_type&& __nh)
      {
 insert_return_type __ret;
 if (__nh.empty())
   __ret.position = end();
 else
   {
     do { if (std::__is_constant_evaluated() && !bool(_M_get_Node_allocator() == *__nh._M_alloc)) std::__glibcxx_assert_fail(); } while (false);

     auto __res = _M_get_insert_unique_pos(__nh._M_key());
     if (__res.second)
       {
  __ret.position
    = _M_insert_node(__res.first, __res.second,
       _S_adapt(__nh._M_ptr));
  __nh.release();
  __ret.inserted = true;
       }
     else
       {
  __ret.node = std::move(__nh);
  __ret.position = iterator(__res.first);
  __ret.inserted = false;
       }
   }
 return __ret;
      }


      iterator
      _M_reinsert_node_equal(node_type&& __nh)
      {
 iterator __ret;
 if (__nh.empty())
   __ret = end();
 else
   {
     do { if (std::__is_constant_evaluated() && !bool(_M_get_Node_allocator() == *__nh._M_alloc)) std::__glibcxx_assert_fail(); } while (false);
     auto __res = _M_get_insert_equal_pos(__nh._M_key());
     if (__res.second)
       __ret = _M_insert_node(__res.first, __res.second,
         _S_adapt(__nh._M_ptr));
     else
       __ret = _M_insert_equal_lower_node(_S_adapt(__nh._M_ptr));
     __nh.release();
   }
 return __ret;
      }


      iterator
      _M_reinsert_node_hint_unique(const_iterator __hint, node_type&& __nh)
      {
 iterator __ret;
 if (__nh.empty())
   __ret = end();
 else
   {
     do { if (std::__is_constant_evaluated() && !bool(_M_get_Node_allocator() == *__nh._M_alloc)) std::__glibcxx_assert_fail(); } while (false);
     auto __res = _M_get_insert_hint_unique_pos(__hint, __nh._M_key());
     if (__res.second)
       {
  __ret = _M_insert_node(__res.first, __res.second,
           _S_adapt(__nh._M_ptr));
  __nh.release();
       }
     else
       __ret = iterator(__res.first);
   }
 return __ret;
      }


      iterator
      _M_reinsert_node_hint_equal(const_iterator __hint, node_type&& __nh)
      {
 iterator __ret;
 if (__nh.empty())
   __ret = end();
 else
   {
     do { if (std::__is_constant_evaluated() && !bool(_M_get_Node_allocator() == *__nh._M_alloc)) std::__glibcxx_assert_fail(); } while (false);
     auto __res = _M_get_insert_hint_equal_pos(__hint, __nh._M_key());
     if (__res.second)
       __ret = _M_insert_node(__res.first, __res.second,
         _S_adapt(__nh._M_ptr));
     else
       __ret = _M_insert_equal_lower_node(_S_adapt(__nh._M_ptr));
     __nh.release();
   }
 return __ret;
      }


      node_type
      extract(const_iterator __pos)
      {
 auto __ptr = _Node_traits::_S_rebalance_for_erase
   (__pos._M_node, _M_impl._M_header);
 --_M_impl._M_node_count;
 auto __node_ptr = static_cast<_Node&>(*__ptr)._M_node_ptr();

 return { __node_ptr, _M_get_Node_allocator() };
# 2187 "/usr/include/c++/15.1.1/bits/stl_tree.h" 3
      }


      node_type
      extract(const key_type& __k)
      {
 node_type __nh;
 auto __pos = find(__k);
 if (__pos != end())
   __nh = extract(const_iterator(__pos));
 return __nh;
      }

      template<typename _Compare2>
 using _Compatible_tree
   = _Rb_tree<_Key, _Val, _KeyOfValue, _Compare2, _Alloc>;

      template<typename, typename>
 friend struct _Rb_tree_merge_helper;


      template<typename _Compare2>
 void
 _M_merge_unique(_Compatible_tree<_Compare2>& __src) noexcept
 {
   using _Merge_helper = _Rb_tree_merge_helper<_Rb_tree, _Compare2>;
   for (auto __i = __src.begin(), __end = __src.end(); __i != __end;)
     {
       auto __pos = __i++;
       auto __res = _M_get_insert_unique_pos(_KeyOfValue()(*__pos));
       if (__res.second)
  {
    auto& __src_impl = _Merge_helper::_S_get_impl(__src);
    auto __ptr = _Node_traits::_S_rebalance_for_erase
      (__pos._M_node, __src_impl._M_header);
    --__src_impl._M_node_count;
    auto __node_ptr = static_cast<_Node&>(*__ptr)._M_node_ptr();
    _M_insert_node(__res.first, __res.second, __node_ptr);
  }
     }
 }


      template<typename _Compare2>
 void
 _M_merge_equal(_Compatible_tree<_Compare2>& __src) noexcept
 {
   using _Merge_helper = _Rb_tree_merge_helper<_Rb_tree, _Compare2>;
   for (auto __i = __src.begin(), __end = __src.end(); __i != __end;)
     {
       auto __pos = __i++;
       auto __res = _M_get_insert_equal_pos(_KeyOfValue()(*__pos));
       if (__res.second)
  {
    auto& __src_impl = _Merge_helper::_S_get_impl(__src);
    auto __ptr = _Node_traits::_S_rebalance_for_erase
      (__pos._M_node, __src_impl._M_header);
    --__src_impl._M_node_count;
    auto __node_ptr = static_cast<_Node&>(*__ptr)._M_node_ptr();
    _M_insert_node(__res.first, __res.second, __node_ptr);
  }
     }
 }


      friend bool
      operator==(const _Rb_tree& __x, const _Rb_tree& __y)
      {
 return __x.size() == __y.size()
   && std::equal(__x.begin(), __x.end(), __y.begin());
      }
# 2269 "/usr/include/c++/15.1.1/bits/stl_tree.h" 3
      friend bool
      operator<(const _Rb_tree& __x, const _Rb_tree& __y)
      {
 return std::lexicographical_compare(__x.begin(), __x.end(),
         __y.begin(), __y.end());
      }


    private:


      struct _Auto_node
      {
 template<typename... _Args>
   _Auto_node(_Rb_tree& __t, _Args&&... __args)
   : _M_t(__t),
     _M_node(__t._M_create_node(std::forward<_Args>(__args)...))
   { }

 ~_Auto_node()
 {
   if (_M_node)
     _M_t._M_drop_node(_M_node);
 }

 _Auto_node(_Auto_node&& __n)
 : _M_t(__n._M_t), _M_node(__n._M_node)
 { __n._M_node = nullptr; }

 const _Key&
 _M_key() const
 { return _S_key(_M_node); }

 iterator
 _M_insert(pair<_Base_ptr, _Base_ptr> __p)
 {
   auto __it = _M_t._M_insert_node(__p.first, __p.second, _M_node);
   _M_node = nullptr;
   return __it;
 }

 iterator
 _M_insert_equal_lower()
 {
   auto __it = _M_t._M_insert_equal_lower_node(_M_node);
   _M_node = nullptr;
   return __it;
 }

 _Rb_tree& _M_t;
 _Node_ptr _M_node;
      };

    };

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    inline void
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
  _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_move_data(_Rb_tree& __x, false_type)
    {
      if (_M_get_Node_allocator() == __x._M_get_Node_allocator())
 _M_move_data(__x, true_type());
      else
 {
   constexpr bool __move = !__move_if_noexcept_cond<value_type>::value;
   _Alloc_node __an(*this);
   _M_root() = _M_copy<__move>(__x, __an);
   if constexpr (__move)
     __x.clear();
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    inline void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_move_assign(_Rb_tree& __x, true_type)
    {
      clear();
      if (__x._M_root())
 _M_move_data(__x, true_type());
      std::__alloc_on_move(_M_get_Node_allocator(),
      __x._M_get_Node_allocator());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_move_assign(_Rb_tree& __x, false_type)
    {
      if (_M_get_Node_allocator() == __x._M_get_Node_allocator())
 return _M_move_assign(__x, true_type{});



      _Reuse_or_alloc_node __roan(*this);
      _M_impl._M_reset();
      if (__x._M_root())
 {
   _M_root() = _M_copy<__as_rvalue>(__x, __roan);
   __x.clear();
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    inline _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    operator=(_Rb_tree&& __x)
    noexcept(_Node_alloc_traits::_S_nothrow_move()
      && is_nothrow_move_assignable<_Compare>::value)
    {
      _M_impl._M_key_compare = std::move(__x._M_impl._M_key_compare);
      _M_move_assign(__x,
       __bool_constant<_Node_alloc_traits::_S_nothrow_move()>());
      return *this;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    template<typename _Iterator>
      void
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_assign_unique(_Iterator __first, _Iterator __last)
      {
 _Reuse_or_alloc_node __roan(*this);
 _M_impl._M_reset();
 for (; __first != __last; ++__first)
   _M_insert_unique_(end(), *__first, __roan);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    template<typename _Iterator>
      void
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_assign_equal(_Iterator __first, _Iterator __last)
      {
 _Reuse_or_alloc_node __roan(*this);
 _M_impl._M_reset();
 for (; __first != __last; ++__first)
   _M_insert_equal_(end(), *__first, __roan);
      }


  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    operator=(const _Rb_tree& __x)
    {
      if (this != std::__addressof(__x))
 {


   if (_Node_alloc_traits::_S_propagate_on_copy_assign())
     {
       auto& __this_alloc = this->_M_get_Node_allocator();
       auto& __that_alloc = __x._M_get_Node_allocator();
       if (!_Node_alloc_traits::_S_always_equal()
    && __this_alloc != __that_alloc)
  {


    clear();
    std::__alloc_on_copy(__this_alloc, __that_alloc);
  }
     }


   _Reuse_or_alloc_node __roan(*this);
   _M_impl._M_reset();
   _M_impl._M_key_compare = __x._M_impl._M_key_compare;
   if (__x._M_root())
     _M_root() = _M_copy<__as_lvalue>(__x, __roan);
 }

      return *this;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>

    template<typename _Arg, typename _NodeGen>



      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_insert_(_Base_ptr __x, _Base_ptr __p,

   _Arg&& __v,



   _NodeGen& __node_gen)
      {
 bool __insert_left = (__x || __p == _M_end()
         || _M_impl._M_key_compare(_KeyOfValue()(__v),
       _S_key(__p)));

 _Base_ptr __z =
   __node_gen(std::forward<_Arg>(__v))->_M_base_ptr();

 _Node_traits::_S_insert_and_rebalance
   (__insert_left, __z, __p, this->_M_impl._M_header);
 ++_M_impl._M_node_count;
 return iterator(__z);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_lower(_Base_ptr __p, _Arg&& __v)



    {
      bool __insert_left = (__p == _M_end()
       || !_M_impl._M_key_compare(_S_key(__p),
             _KeyOfValue()(__v)));

      _Base_ptr __z =
 _M_create_node(std::forward<_Arg>(__v))->_M_base_ptr();
      _Node_traits::_S_insert_and_rebalance
 (__insert_left, __z, __p, this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal_lower(_Arg&& __v)



    {
      _Base_ptr __x = _M_begin();
      _Base_ptr __y = _M_end();
      while (__x)
 {
   __y = __x;
   __x = !_M_impl._M_key_compare(_S_key(__x), _KeyOfValue()(__v)) ?
  _S_left(__x) : _S_right(__x);
 }
      return _M_insert_lower(__y, std::forward<_Arg>(__v));
    }

  template<typename _Key, typename _Val, typename _KoV,
    typename _Compare, typename _Alloc>
    template<bool _MoveValues, typename _NodeGen>
      typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Base_ptr
      _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
      _M_copy(_Node_ptr __x, _Base_ptr __p, _NodeGen& __node_gen)
      {

 _Node_ptr __top = _M_clone_node<_MoveValues>(__x, __node_gen);
 _Base_ptr __top_base = __top->_M_base_ptr();
 __top->_M_parent = __p;

 try
   {
     if (__x->_M_right)
       __top->_M_right =
  _M_copy<_MoveValues>(_S_right(__x), __top_base, __node_gen);
     __p = __top_base;
     __x = _S_left(__x);

     while (__x)
       {
  _Base_ptr __y =
    _M_clone_node<_MoveValues>(__x, __node_gen)->_M_base_ptr();
  __p->_M_left = __y;
  __y->_M_parent = __p;
  if (__x->_M_right)
    __y->_M_right = _M_copy<_MoveValues>(_S_right(__x),
             __y, __node_gen);
  __p = __y;
  __x = _S_left(__x);
       }
   }
 catch(...)
   {
     _M_erase(__top);
     throw;
   }
 return __top_base;
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase(_Node_ptr __x)
    {

      while (__x)
 {
   _M_erase(_S_right(__x));
   _Node_ptr __y = _S_left(__x);
   _M_drop_node(__x);
   __x = __y;
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::_Base_ptr
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Base_ptr __x, _Base_ptr __y,
     const _Key& __k) const
    {
      while (__x)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return __y;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::_Base_ptr
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Base_ptr __x, _Base_ptr __y,
     const _Key& __k) const
    {
      while (__x)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return __y;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k)
    {
      typedef pair<iterator, iterator> _Ret;

      _Base_ptr __x = _M_begin();
      _Base_ptr __y = _M_end();
      while (__x)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Base_ptr __xu(__x);
       _Base_ptr __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return _Ret(iterator(_M_lower_bound(__x, __y, __k)),
     iterator(_M_upper_bound(__xu, __yu, __k)));
     }
 }
      return _Ret(iterator(__y), iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k) const
    {
      typedef pair<const_iterator, const_iterator> _Ret;

      _Base_ptr __x = _M_begin();
      _Base_ptr __y = _M_end();
      while (__x)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Base_ptr __xu(__x);
       _Base_ptr __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return _Ret(const_iterator(_M_lower_bound(__x, __y, __k)),
     const_iterator(_M_upper_bound(__xu, __yu, __k)));
     }
 }
      return _Ret(const_iterator(__y), const_iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    swap(_Rb_tree& __t)
    noexcept(__is_nothrow_swappable<_Compare>::value)
    {
      if (!_M_root())
 {
   if (__t._M_root())
     _M_impl._M_move_data(__t._M_impl);
 }
      else if (!__t._M_root())
 __t._M_impl._M_move_data(_M_impl);
      else
 {
   std::swap(_M_root(),__t._M_root());
   std::swap(_M_leftmost(),__t._M_leftmost());
   std::swap(_M_rightmost(),__t._M_rightmost());

   _M_root()->_M_parent = _M_end();
   __t._M_root()->_M_parent = __t._M_end();
   std::swap(this->_M_impl._M_node_count, __t._M_impl._M_node_count);
 }


      using std::swap;
      swap(this->_M_impl._M_key_compare, __t._M_impl._M_key_compare);

      _Node_alloc_traits::_S_on_swap(_M_get_Node_allocator(),
         __t._M_get_Node_allocator());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Base_ptr __x = _M_begin();
      _Base_ptr __y = _M_end();
      bool __comp = true;
      while (__x)
 {
   __y = __x;
   __comp = _M_impl._M_key_compare(__k, _S_key(__x));
   __x = __comp ? _S_left(__x) : _S_right(__x);
 }
      iterator __j = iterator(__y);
      if (__comp)
 {
   if (__j == begin())
     return _Res(__x, __y);
   else
     --__j;
 }
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 return _Res(__x, __y);
      return _Res(__j._M_node, _Base_ptr());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_equal_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Base_ptr __x = _M_begin();
      _Base_ptr __y = _M_end();
      while (__x)
 {
   __y = __x;
   __x = _M_impl._M_key_compare(__k, _S_key(__x)) ?
  _S_left(__x) : _S_right(__x);
 }
      return _Res(__x, __y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>

    template<typename _Arg>

    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_unique(_Arg&& __v)



    {
      typedef pair<iterator, bool> _Res;
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_unique_pos(_KeyOfValue()(__v));

      if (__res.second)
 {
   _Alloc_node __an(*this);
   return _Res(_M_insert_(__res.first, __res.second,
     std::forward<_Arg>(__v), __an),
        true);
 }

      return _Res(iterator(__res.first), false);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal(_Arg&& __v)



    {
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_equal_pos(_KeyOfValue()(__v));
      _Alloc_node __an(*this);
      return _M_insert_(__res.first, __res.second,
   std::forward<_Arg>(__v), __an);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_hint_unique_pos(const_iterator __position,
      const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;


      if (__position._M_node == _M_end())
 {
   if (size() > 0
       && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
     return _Res(_Base_ptr(), _M_rightmost());
   else
     return _M_get_insert_unique_pos(__k);
 }
      else if (_M_impl._M_key_compare(__k, _S_key(__position._M_node)))
 {

   iterator __before(__position._M_node);
   if (__position._M_node == _M_leftmost())
     return _Res(_M_leftmost(), _M_leftmost());
   else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
     {
       if (!_S_right(__before._M_node))
  return _Res(_Base_ptr(), __before._M_node);
       else
  return _Res(__position._M_node, __position._M_node);
     }
   else
     return _M_get_insert_unique_pos(__k);
 }
      else if (_M_impl._M_key_compare(_S_key(__position._M_node), __k))
 {

   iterator __after(__position._M_node);
   if (__position._M_node == _M_rightmost())
     return _Res(_Base_ptr(), _M_rightmost());
   else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
     {
       if (!_S_right(__position._M_node))
  return _Res(_Base_ptr(), __position._M_node);
       else
  return _Res(__after._M_node, __after._M_node);
     }
   else
     return _M_get_insert_unique_pos(__k);
 }
      else

 return _Res(__position._M_node, _Base_ptr());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>

    template<typename _Arg, typename _NodeGen>



      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_insert_unique_(const_iterator __position,

   _Arg&& __v,



   _NodeGen& __node_gen)
    {
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));

      if (__res.second)
 return _M_insert_(__res.first, __res.second,
     std::forward<_Arg>(__v),
     __node_gen);
      return iterator(__res.first);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_hint_equal_pos(const_iterator __position, const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;


      if (__position._M_node == _M_end())
 {
   if (size() > 0
       && !_M_impl._M_key_compare(__k, _S_key(_M_rightmost())))
     return _Res(_Base_ptr(), _M_rightmost());
   else
     return _M_get_insert_equal_pos(__k);
 }
      else if (!_M_impl._M_key_compare(_S_key(__position._M_node), __k))
 {

   iterator __before(__position._M_node);
   if (__position._M_node == _M_leftmost())
     return _Res(_M_leftmost(), _M_leftmost());
   else if (!_M_impl._M_key_compare(__k, _S_key((--__before)._M_node)))
     {
       if (!_S_right(__before._M_node))
  return _Res(_Base_ptr(), __before._M_node);
       else
  return _Res(__position._M_node, __position._M_node);
     }
   else
     return _M_get_insert_equal_pos(__k);
 }
      else
 {

   iterator __after(__position._M_node);
   if (__position._M_node == _M_rightmost())
     return _Res(_Base_ptr(), _M_rightmost());
   else if (!_M_impl._M_key_compare(_S_key((++__after)._M_node), __k))
     {
       if (!_S_right(__position._M_node))
  return _Res(_Base_ptr(), __position._M_node);
       else
  return _Res(__after._M_node, __after._M_node);
     }
   else
     return _Res(_Base_ptr(), _Base_ptr());
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>

    template<typename _Arg, typename _NodeGen>



      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_insert_equal_(const_iterator __position,

         _Arg&& __v,



         _NodeGen& __node_gen)
      {
 pair<_Base_ptr, _Base_ptr> __res
   = _M_get_insert_hint_equal_pos(__position, _KeyOfValue()(__v));

 if (__res.second)
   return _M_insert_(__res.first, __res.second,
       std::forward<_Arg>(__v),
       __node_gen);

 return _M_insert_equal_lower(std::forward<_Arg>(__v));
      }


  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    auto
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Node_ptr __z)
    -> iterator
    {
      bool __insert_left = (__x || __p == _M_end()
       || _M_impl._M_key_compare(_S_key(__z),
            _S_key(__p)));

      _Base_ptr __base_z = __z->_M_base_ptr();
      _Node_traits::_S_insert_and_rebalance
 (__insert_left, __base_z, __p, this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__base_z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    auto
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_lower_node(_Base_ptr __p, _Node_ptr __z)
    -> iterator
    {
      bool __insert_left = (__p == _M_end()
       || !_M_impl._M_key_compare(_S_key(__p),
             _S_key(__z)));

      _Base_ptr __base_z = __z->_M_base_ptr();
      _Node_traits::_S_insert_and_rebalance
 (__insert_left, __base_z, __p, this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__base_z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    auto
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_equal_lower_node(_Node_ptr __z)
    -> iterator
    {
      _Base_ptr __x = _M_begin();
      _Base_ptr __y = _M_end();
      while (__x)
 {
   __y = __x;
   __x = !_M_impl._M_key_compare(_S_key(__x), _S_key(__z)) ?
  _S_left(__x) : _S_right(__x);
 }
      return _M_insert_lower_node(__y, __z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_unique(_Args&&... __args)
      -> pair<iterator, bool>
      {
 _Auto_node __z(*this, std::forward<_Args>(__args)...);
 auto __res = _M_get_insert_unique_pos(__z._M_key());
 if (__res.second)
   return {__z._M_insert(__res), true};
 return {iterator(__res.first), false};
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_equal(_Args&&... __args)
      -> iterator
      {
 _Auto_node __z(*this, std::forward<_Args>(__args)...);
 auto __res = _M_get_insert_equal_pos(__z._M_key());
 return __z._M_insert(__res);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      -> iterator
      {
 _Auto_node __z(*this, std::forward<_Args>(__args)...);
 auto __res = _M_get_insert_hint_unique_pos(__pos, __z._M_key());
 if (__res.second)
   return __z._M_insert(__res);
 return iterator(__res.first);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    template<typename... _Args>
      auto
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_hint_equal(const_iterator __pos, _Args&&... __args)
      -> iterator
      {
 _Auto_node __z(*this, std::forward<_Args>(__args)...);
 auto __res = _M_get_insert_hint_equal_pos(__pos, __z._M_key());
 if (__res.second)
   return __z._M_insert(__res);
 return __z._M_insert_equal_lower();
      }



  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __position)
    {
      _Base_ptr __y = _Node_traits::_S_rebalance_for_erase
 (__position._M_node, this->_M_impl._M_header);
      _M_drop_node(static_cast<_Node&>(*__y)._M_node_ptr());
      --_M_impl._M_node_count;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __first, const_iterator __last)
    {
      if (__first == begin() && __last == end())
 clear();
      else
 while (__first != __last)
   _M_erase_aux(__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key& __x)
    {
      pair<iterator, iterator> __p = equal_range(__x);
      const size_type __old_size = size();
      _M_erase_aux(__p.first, __p.second);
      return __old_size - size();
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j(_M_lower_bound(_M_begin(), _M_end(), __k));
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k) const
    {
      const_iterator __j(_M_lower_bound(_M_begin(), _M_end(), __k));
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    count(const _Key& __k) const
    {
      pair<const_iterator, const_iterator> __p = equal_range(__k);
      const size_type __n = std::distance(__p.first, __p.second);
      return __n;
    }

  __attribute__ ((__pure__)) unsigned int
  _Rb_tree_black_count(const _Rb_tree_node_base* __node,
         const _Rb_tree_node_base* __root) throw ();

  template<typename _Key, typename _Val, typename _KeyOfValue,
    typename _Compare, typename _Alloc>
    bool
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const
    {
      if (_M_impl._M_node_count == 0 || begin() == end())
 return _M_impl._M_node_count == 0 && begin() == end()
        && this->_M_impl._M_header._M_left == _M_end()
        && this->_M_impl._M_header._M_right == _M_end();

      unsigned int __len = _Rb_tree_black_count(_M_leftmost(), _M_root());
      for (const_iterator __it = begin(); __it != end(); ++__it)
 {
   _Base_ptr __x = __it._M_node;
   _Base_ptr __L = _S_left(__x);
   _Base_ptr __R = _S_right(__x);

   if (__x->_M_color == _S_red)
     if ((__L && __L->_M_color == _S_red)
  || (__R && __R->_M_color == _S_red))
       return false;

   if (__L && _M_impl._M_key_compare(_S_key(__x), _S_key(__L)))
     return false;
   if (__R && _M_impl._M_key_compare(_S_key(__R), _S_key(__x)))
     return false;

   if (!__L && !__R && _Rb_tree_black_count(__x, _M_root()) != __len)
     return false;
 }

      if (_M_leftmost() != _Node_base::_S_minimum(_M_root()))
 return false;
      if (_M_rightmost() != _Node_base::_S_maximum(_M_root()))
 return false;
      return true;
    }



  template<typename _Key, typename _Val, typename _Sel, typename _Cmp1,
    typename _Alloc, typename _Cmp2>
    struct _Rb_tree_merge_helper<_Rb_tree<_Key, _Val, _Sel, _Cmp1, _Alloc>,
     _Cmp2>
    {
    private:
      friend class _Rb_tree<_Key, _Val, _Sel, _Cmp1, _Alloc>;

      static auto&
      _S_get_impl(_Rb_tree<_Key, _Val, _Sel, _Cmp2, _Alloc>& __tree)
      { return __tree._M_impl; }
    };



}
# 65 "/usr/include/c++/15.1.1/map" 2 3
# 1 "/usr/include/c++/15.1.1/bits/stl_map.h" 1 3
# 57 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
#define _STL_MAP_H 1
# 69 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template <typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    class multimap;
# 103 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
  template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class map
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:
# 133 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
    public:
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class map<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };
#pragma GCC diagnostic pop

    private:

      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<value_type>::other _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;


      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Pair_alloc_type> _Alloc_traits;


      template<typename _Up, typename _Vp = remove_reference_t<_Up>>
 static constexpr bool __usable_key
   = __or_v<is_same<const _Vp, const _Key>,
     __and_<is_scalar<_Vp>, is_scalar<_Key>>>;


    public:


      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;


      using node_type = typename _Rep_type::node_type;
      using insert_return_type = typename _Rep_type::insert_return_type;
# 200 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      map() = default;







      explicit
      map(const _Compare& __comp,
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a)) { }
# 222 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      map(const map&) = default;







      map(map&&) = default;
# 243 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      map(initializer_list<value_type> __l,
   const _Compare& __comp = _Compare(),
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a))
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }


      explicit
      map(const allocator_type& __a)
      : _M_t(_Pair_alloc_type(__a)) { }


      map(const map& __m, const __type_identity_t<allocator_type>& __a)
      : _M_t(__m._M_t, _Pair_alloc_type(__a)) { }


      map(map&& __m, const __type_identity_t<allocator_type>& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__m._M_t), _Pair_alloc_type(__a)) { }


      map(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Pair_alloc_type(__a))
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }


      template<typename _InputIterator>
 map(_InputIterator __first, _InputIterator __last,
     const allocator_type& __a)
 : _M_t(_Pair_alloc_type(__a))
 { _M_t._M_insert_range_unique(__first, __last); }
# 287 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      template<typename _InputIterator>
 map(_InputIterator __first, _InputIterator __last)
 : _M_t()
 { _M_t._M_insert_range_unique(__first, __last); }
# 304 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      template<typename _InputIterator>
 map(_InputIterator __first, _InputIterator __last,
     const _Compare& __comp,
     const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Pair_alloc_type(__a))
 { _M_t._M_insert_range_unique(__first, __last); }
# 337 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      ~map() = default;
# 353 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      map&
      operator=(const map&) = default;


      map&
      operator=(map&&) = default;
# 371 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      map&
      operator=(initializer_list<value_type> __l)
      {
 _M_t._M_assign_unique(__l.begin(), __l.end());
 return *this;
      }



      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }







      iterator
      begin() noexcept
      { return _M_t.begin(); }






      const_iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() noexcept
      { return _M_t.end(); }






      const_iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() noexcept
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      const_iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      const_iterator
      cend() const noexcept
      { return _M_t.end(); }






      const_reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }






      [[__nodiscard__]] bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 526 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      mapped_type&
      operator[](const key_type& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))

   __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
         std::tuple<const key_type&>(__k),
         std::tuple<>());



 return (*__i).second;
      }


      mapped_type&
      operator[](key_type&& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))
   __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
     std::forward_as_tuple(std::move(__k)),
     std::tuple<>());
 return (*__i).second;
      }
# 571 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      mapped_type&
      at(const key_type& __k)
      {
 iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }

      const mapped_type&
      at(const key_type& __k) const
      {
 const_iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }
# 609 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      template<typename... _Args>
 std::pair<iterator, bool>
 emplace(_Args&&... __args)
 {

   if constexpr (sizeof...(_Args) == 2)
     if constexpr (is_same_v<allocator_type, allocator<value_type>>)
       {
  auto&& [__a, __v] = pair<_Args&...>(__args...);
  if constexpr (__usable_key<decltype(__a)>)
    {
      const key_type& __k = __a;
      iterator __i = lower_bound(__k);
      if (__i == end() || key_comp()(__k, (*__i).first))
        {
   __i = emplace_hint(__i, std::forward<_Args>(__args)...);
   return {__i, true};
        }
      return {__i, false};
    }
       }

   return _M_t._M_emplace_unique(std::forward<_Args>(__args)...);
 }
# 659 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_unique(__pos,
          std::forward<_Args>(__args)...);
 }




      node_type
      extract(const_iterator __pos)
      {
 do { if (std::__is_constant_evaluated() && !bool(__pos != end())) std::__glibcxx_assert_fail(); } while (false);
 return _M_t.extract(__pos);
      }


      node_type
      extract(const key_type& __x)
      { return _M_t.extract(__x); }


      insert_return_type
      insert(node_type&& __nh)
      { return _M_t._M_reinsert_node_unique(std::move(__nh)); }


      iterator
      insert(const_iterator __hint, node_type&& __nh)
      { return _M_t._M_reinsert_node_hint_unique(__hint, std::move(__nh)); }

      template<typename, typename>
 friend struct std::_Rb_tree_merge_helper;

      template<typename _Cmp2>
 void
 merge(map<_Key, _Tp, _Cmp2, _Alloc>& __source)
 {
   using _Merge_helper = _Rb_tree_merge_helper<map, _Cmp2>;
   _M_t._M_merge_unique(_Merge_helper::_S_get_tree(__source));
 }

      template<typename _Cmp2>
 void
 merge(map<_Key, _Tp, _Cmp2, _Alloc>&& __source)
 { merge(__source); }

      template<typename _Cmp2>
 void
 merge(multimap<_Key, _Tp, _Cmp2, _Alloc>& __source)
 {
   using _Merge_helper = _Rb_tree_merge_helper<map, _Cmp2>;
   _M_t._M_merge_unique(_Merge_helper::_S_get_tree(__source));
 }

      template<typename _Cmp2>
 void
 merge(multimap<_Key, _Tp, _Cmp2, _Alloc>&& __source)
 { merge(__source); }
# 743 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      template <typename... _Args>
 pair<iterator, bool>
 try_emplace(const key_type& __k, _Args&&... __args)
 {
   iterator __i = lower_bound(__k);
   if (__i == end() || key_comp()(__k, (*__i).first))
     {
       __i = emplace_hint(__i, std::piecewise_construct,
     std::forward_as_tuple(__k),
     std::forward_as_tuple(
       std::forward<_Args>(__args)...));
       return {__i, true};
     }
   return {__i, false};
 }


      template <typename... _Args>
 pair<iterator, bool>
 try_emplace(key_type&& __k, _Args&&... __args)
 {
   iterator __i = lower_bound(__k);
   if (__i == end() || key_comp()(__k, (*__i).first))
     {
       __i = emplace_hint(__i, std::piecewise_construct,
     std::forward_as_tuple(std::move(__k)),
     std::forward_as_tuple(
       std::forward<_Args>(__args)...));
       return {__i, true};
     }
   return {__i, false};
 }
# 803 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      template <typename... _Args>
 iterator
 try_emplace(const_iterator __hint, const key_type& __k,
      _Args&&... __args)
 {
   iterator __i;
   auto __true_hint = _M_t._M_get_insert_hint_unique_pos(__hint, __k);
   if (__true_hint.second)
     __i = emplace_hint(iterator(__true_hint.second),
          std::piecewise_construct,
          std::forward_as_tuple(__k),
          std::forward_as_tuple(
     std::forward<_Args>(__args)...));
   else
     __i = iterator(__true_hint.first);
   return __i;
 }


      template <typename... _Args>
 iterator
 try_emplace(const_iterator __hint, key_type&& __k, _Args&&... __args)
 {
   iterator __i;
   auto __true_hint = _M_t._M_get_insert_hint_unique_pos(__hint, __k);
   if (__true_hint.second)
     __i = emplace_hint(iterator(__true_hint.second),
          std::piecewise_construct,
          std::forward_as_tuple(std::move(__k)),
          std::forward_as_tuple(
     std::forward<_Args>(__args)...));
   else
     __i = iterator(__true_hint.first);
   return __i;
 }
# 856 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      std::pair<iterator, bool>
      insert(const value_type& __x)
      { return _M_t._M_insert_unique(__x); }




      std::pair<iterator, bool>
      insert(value_type&& __x)
      { return _M_t._M_insert_unique(std::move(__x)); }

      template<typename _Pair>
 __enable_if_t<is_constructible<value_type, _Pair>::value,
        pair<iterator, bool>>
 insert(_Pair&& __x)
 {

   using _P2 = remove_reference_t<_Pair>;
   if constexpr (__is_pair<remove_const_t<_P2>>)
     if constexpr (is_same_v<allocator_type, allocator<value_type>>)
       if constexpr (__usable_key<typename _P2::first_type>)
  {
    const key_type& __k = __x.first;
    iterator __i = lower_bound(__k);
    if (__i == end() || key_comp()(__k, (*__i).first))
      {
        __i = emplace_hint(__i, std::forward<_Pair>(__x));
        return {__i, true};
      }
    return {__i, false};
  }

   return _M_t._M_emplace_unique(std::forward<_Pair>(__x));
 }
# 901 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      void
      insert(std::initializer_list<value_type> __list)
      { insert(__list.begin(), __list.end()); }
# 948 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      iterator

      insert(const_iterator __position, const value_type& __x)



      { return _M_t._M_insert_unique_(__position, __x); }




      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_t._M_insert_unique_(__position, std::move(__x)); }

      template<typename _Pair>
 __enable_if_t<is_constructible<value_type, _Pair>::value, iterator>
 insert(const_iterator __position, _Pair&& __x)
 {
   return _M_t._M_emplace_hint_unique(__position,
          std::forward<_Pair>(__x));
 }
# 981 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 { _M_t._M_insert_range_unique(__first, __last); }
# 1006 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      template <typename _Obj>
 pair<iterator, bool>
 insert_or_assign(const key_type& __k, _Obj&& __obj)
 {
   iterator __i = lower_bound(__k);
   if (__i == end() || key_comp()(__k, (*__i).first))
     {
       __i = emplace_hint(__i, std::piecewise_construct,
     std::forward_as_tuple(__k),
     std::forward_as_tuple(
       std::forward<_Obj>(__obj)));
       return {__i, true};
     }
   (*__i).second = std::forward<_Obj>(__obj);
   return {__i, false};
 }


      template <typename _Obj>
 pair<iterator, bool>
 insert_or_assign(key_type&& __k, _Obj&& __obj)
 {
   iterator __i = lower_bound(__k);
   if (__i == end() || key_comp()(__k, (*__i).first))
     {
       __i = emplace_hint(__i, std::piecewise_construct,
     std::forward_as_tuple(std::move(__k)),
     std::forward_as_tuple(
       std::forward<_Obj>(__obj)));
       return {__i, true};
     }
   (*__i).second = std::forward<_Obj>(__obj);
   return {__i, false};
 }
# 1061 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      template <typename _Obj>
 iterator
 insert_or_assign(const_iterator __hint,
    const key_type& __k, _Obj&& __obj)
 {
   iterator __i;
   auto __true_hint = _M_t._M_get_insert_hint_unique_pos(__hint, __k);
   if (__true_hint.second)
     {
       return emplace_hint(iterator(__true_hint.second),
      std::piecewise_construct,
      std::forward_as_tuple(__k),
      std::forward_as_tuple(
        std::forward<_Obj>(__obj)));
     }
   __i = iterator(__true_hint.first);
   (*__i).second = std::forward<_Obj>(__obj);
   return __i;
 }


      template <typename _Obj>
 iterator
 insert_or_assign(const_iterator __hint, key_type&& __k, _Obj&& __obj)
 {
   iterator __i;
   auto __true_hint = _M_t._M_get_insert_hint_unique_pos(__hint, __k);
   if (__true_hint.second)
     {
       return emplace_hint(iterator(__true_hint.second),
      std::piecewise_construct,
      std::forward_as_tuple(std::move(__k)),
      std::forward_as_tuple(
        std::forward<_Obj>(__obj)));
     }
   __i = iterator(__true_hint.first);
   (*__i).second = std::forward<_Obj>(__obj);
   return __i;
 }
# 1120 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }


      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(iterator __position)
      { return _M_t.erase(__position); }
# 1157 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 1177 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 1211 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      void
      swap(map& __x)
      noexcept(__is_nothrow_swappable<_Compare>::value)
      { _M_t.swap(__x._M_t); }







      void
      clear() noexcept
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 1258 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }


      template<typename _Kt>
 auto
 find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))
 { return _M_t._M_find_tr(__x); }
# 1283 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }


      template<typename _Kt>
 auto
 find(const _Kt& __x) const -> decltype(_M_t._M_find_tr(__x))
 { return _M_t._M_find_tr(__x); }
# 1304 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }


      template<typename _Kt>
 auto
 count(const _Kt& __x) const -> decltype(_M_t._M_count_tr(__x))
 { return _M_t._M_count_tr(__x); }
# 1347 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }


      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_lower_bound_tr(__x)))
 { return iterator(_M_t._M_lower_bound_tr(__x)); }
# 1372 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }


      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x) const
 -> decltype(const_iterator(_M_t._M_lower_bound_tr(__x)))
 { return const_iterator(_M_t._M_lower_bound_tr(__x)); }
# 1392 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }


      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_upper_bound_tr(__x)))
 { return iterator(_M_t._M_upper_bound_tr(__x)); }
# 1412 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }


      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x) const
 -> decltype(const_iterator(_M_t._M_upper_bound_tr(__x)))
 { return const_iterator(_M_t._M_upper_bound_tr(__x)); }
# 1441 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }


      template<typename _Kt>
 auto
 equal_range(const _Kt& __x)
 -> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))
 { return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }
# 1470 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }


      template<typename _Kt>
 auto
 equal_range(const _Kt& __x) const
 -> decltype(pair<const_iterator, const_iterator>(
       _M_t._M_equal_range_tr(__x)))
 {
   return pair<const_iterator, const_iterator>(
       _M_t._M_equal_range_tr(__x));
 }



      template<typename _K1, typename _T1, typename _C1, typename _A1>
 friend bool
 operator==(const map<_K1, _T1, _C1, _A1>&,
     const map<_K1, _T1, _C1, _A1>&);







      template<typename _K1, typename _T1, typename _C1, typename _A1>
 friend bool
 operator<(const map<_K1, _T1, _C1, _A1>&,
    const map<_K1, _T1, _C1, _A1>&);

    };




  template<typename _InputIterator,
    typename _Compare = less<__iter_key_t<_InputIterator>>,
    typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireNotAllocator<_Compare>,
    typename = _RequireAllocator<_Allocator>>
    map(_InputIterator, _InputIterator,
 _Compare = _Compare(), _Allocator = _Allocator())
    -> map<__iter_key_t<_InputIterator>, __iter_val_t<_InputIterator>,
    _Compare, _Allocator>;

  template<typename _Key, typename _Tp, typename _Compare = less<_Key>,
    typename _Allocator = allocator<pair<const _Key, _Tp>>,
    typename = _RequireNotAllocator<_Compare>,
    typename = _RequireAllocator<_Allocator>>
    map(initializer_list<pair<_Key, _Tp>>,
 _Compare = _Compare(), _Allocator = _Allocator())
    -> map<_Key, _Tp, _Compare, _Allocator>;

  template <typename _InputIterator, typename _Allocator,
     typename = _RequireInputIter<_InputIterator>,
     typename = _RequireAllocator<_Allocator>>
    map(_InputIterator, _InputIterator, _Allocator)
    -> map<__iter_key_t<_InputIterator>, __iter_val_t<_InputIterator>,
    less<__iter_key_t<_InputIterator>>, _Allocator>;

  template<typename _Key, typename _Tp, typename _Allocator,
    typename = _RequireAllocator<_Allocator>>
    map(initializer_list<pair<_Key, _Tp>>, _Allocator)
    -> map<_Key, _Tp, less<_Key>, _Allocator>;
# 1569 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,
        const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 1607 "/usr/include/c++/15.1.1/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const map<_Key, _Tp, _Compare, _Alloc>& __x,
       const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
        const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const map<_Key, _Tp, _Compare, _Alloc>& __x,
       const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
        const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
        const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }



  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(map<_Key, _Tp, _Compare, _Alloc>& __x,
  map<_Key, _Tp, _Compare, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }





  template<typename _Key, typename _Val, typename _Cmp1, typename _Alloc,
    typename _Cmp2>
    struct
    _Rb_tree_merge_helper<std::map<_Key, _Val, _Cmp1, _Alloc>,
     _Cmp2>
    {
    private:
      friend class std::map<_Key, _Val, _Cmp1, _Alloc>;

      static auto&
      _S_get_tree(std::map<_Key, _Val, _Cmp2, _Alloc>& __map)
      { return __map._M_t; }

      static auto&
      _S_get_tree(std::multimap<_Key, _Val, _Cmp2, _Alloc>& __map)
      { return __map._M_t; }
    };



}
# 66 "/usr/include/c++/15.1.1/map" 2 3
# 1 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 1 3
# 57 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
#define _STL_MULTIMAP_H 1
# 67 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template <typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    class map;
# 101 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
  template <typename _Key, typename _Tp,
     typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class multimap
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:
# 132 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
    public:
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class multimap<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };
#pragma GCC diagnostic pop

    private:

      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<value_type>::other _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;

      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Pair_alloc_type> _Alloc_traits;

    public:


      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;


      using node_type = typename _Rep_type::node_type;
# 190 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      multimap() = default;







      explicit
      multimap(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a)) { }
# 212 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      multimap(const multimap&) = default;
# 221 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      multimap(multimap&&) = default;
# 233 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      multimap(initializer_list<value_type> __l,
        const _Compare& __comp = _Compare(),
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a))
      { _M_t._M_insert_range_equal(__l.begin(), __l.end()); }


      explicit
      multimap(const allocator_type& __a)
      : _M_t(_Pair_alloc_type(__a)) { }


      multimap(const multimap& __m,
        const __type_identity_t<allocator_type>& __a)
      : _M_t(__m._M_t, _Pair_alloc_type(__a)) { }


      multimap(multimap&& __m, const __type_identity_t<allocator_type>& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__m._M_t), _Pair_alloc_type(__a)) { }


      multimap(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Pair_alloc_type(__a))
      { _M_t._M_insert_range_equal(__l.begin(), __l.end()); }


      template<typename _InputIterator>
 multimap(_InputIterator __first, _InputIterator __last,
   const allocator_type& __a)
 : _M_t(_Pair_alloc_type(__a))
 { _M_t._M_insert_range_equal(__first, __last); }
# 277 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      template<typename _InputIterator>
 multimap(_InputIterator __first, _InputIterator __last)
 : _M_t()
 { _M_t._M_insert_range_equal(__first, __last); }
# 293 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      template<typename _InputIterator>
 multimap(_InputIterator __first, _InputIterator __last,
   const _Compare& __comp,
   const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Pair_alloc_type(__a))
 { _M_t._M_insert_range_equal(__first, __last); }
# 326 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      ~multimap() = default;
# 342 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      multimap&
      operator=(const multimap&) = default;


      multimap&
      operator=(multimap&&) = default;
# 360 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      multimap&
      operator=(initializer_list<value_type> __l)
      {
 _M_t._M_assign_equal(__l.begin(), __l.end());
 return *this;
      }



      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }







      iterator
      begin() noexcept
      { return _M_t.begin(); }






      const_iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() noexcept
      { return _M_t.end(); }






      const_iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() noexcept
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      const_iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      const_iterator
      cend() const noexcept
      { return _M_t.end(); }






      const_reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }




      [[__nodiscard__]] bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 518 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      template<typename... _Args>
 iterator
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_equal(std::forward<_Args>(__args)...); }
# 545 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_equal(__pos,
         std::forward<_Args>(__args)...);
 }
# 567 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      iterator
      insert(const value_type& __x)
      { return _M_t._M_insert_equal(__x); }




      iterator
      insert(value_type&& __x)
      { return _M_t._M_insert_equal(std::move(__x)); }

      template<typename _Pair>
 __enable_if_t<is_constructible<value_type, _Pair>::value, iterator>
 insert(_Pair&& __x)
 { return _M_t._M_emplace_equal(std::forward<_Pair>(__x)); }
# 606 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      iterator

      insert(const_iterator __position, const value_type& __x)



      { return _M_t._M_insert_equal_(__position, __x); }




      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_t._M_insert_equal_(__position, std::move(__x)); }

      template<typename _Pair>
 __enable_if_t<is_constructible<value_type, _Pair&&>::value, iterator>
 insert(const_iterator __position, _Pair&& __x)
 {
   return _M_t._M_emplace_hint_equal(__position,
         std::forward<_Pair>(__x));
 }
# 640 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 { _M_t._M_insert_range_equal(__first, __last); }
# 653 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }
# 679 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      node_type
      extract(const_iterator __pos)
      {
 do { if (std::__is_constant_evaluated() && !bool(__pos != end())) std::__glibcxx_assert_fail(); } while (false);
 return _M_t.extract(__pos);
      }


      node_type
      extract(const key_type& __x)
      { return _M_t.extract(__x); }


      iterator
      insert(node_type&& __nh)
      { return _M_t._M_reinsert_node_equal(std::move(__nh)); }


      iterator
      insert(const_iterator __hint, node_type&& __nh)
      { return _M_t._M_reinsert_node_hint_equal(__hint, std::move(__nh)); }

      template<typename, typename>
 friend struct std::_Rb_tree_merge_helper;

      template<typename _Cmp2>
 void
 merge(multimap<_Key, _Tp, _Cmp2, _Alloc>& __source)
 {
   using _Merge_helper = _Rb_tree_merge_helper<multimap, _Cmp2>;
   _M_t._M_merge_equal(_Merge_helper::_S_get_tree(__source));
 }

      template<typename _Cmp2>
 void
 merge(multimap<_Key, _Tp, _Cmp2, _Alloc>&& __source)
 { merge(__source); }

      template<typename _Cmp2>
 void
 merge(map<_Key, _Tp, _Cmp2, _Alloc>& __source)
 {
   using _Merge_helper = _Rb_tree_merge_helper<multimap, _Cmp2>;
   _M_t._M_merge_equal(_Merge_helper::_S_get_tree(__source));
 }

      template<typename _Cmp2>
 void
 merge(map<_Key, _Tp, _Cmp2, _Alloc>&& __source)
 { merge(__source); }
# 749 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }


      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(iterator __position)
      { return _M_t.erase(__position); }
# 786 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 807 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 844 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      void
      swap(multimap& __x)
      noexcept(__is_nothrow_swappable<_Compare>::value)
      { _M_t.swap(__x._M_t); }







      void
      clear() noexcept
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 890 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }


      template<typename _Kt>
 auto
 find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))
 { return _M_t._M_find_tr(__x); }
# 914 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }


      template<typename _Kt>
 auto
 find(const _Kt& __x) const -> decltype(_M_t._M_find_tr(__x))
 { return _M_t._M_find_tr(__x); }
# 932 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.count(__x); }


      template<typename _Kt>
 auto
 count(const _Kt& __x) const -> decltype(_M_t._M_count_tr(__x))
 { return _M_t._M_count_tr(__x); }
# 975 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }


      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_lower_bound_tr(__x)))
 { return iterator(_M_t._M_lower_bound_tr(__x)); }
# 1000 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }


      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x) const
 -> decltype(const_iterator(_M_t._M_lower_bound_tr(__x)))
 { return const_iterator(_M_t._M_lower_bound_tr(__x)); }
# 1020 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }


      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_upper_bound_tr(__x)))
 { return iterator(_M_t._M_upper_bound_tr(__x)); }
# 1040 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }


      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x) const
 -> decltype(const_iterator(_M_t._M_upper_bound_tr(__x)))
 { return const_iterator(_M_t._M_upper_bound_tr(__x)); }
# 1067 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }


      template<typename _Kt>
 auto
 equal_range(const _Kt& __x)
 -> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))
 { return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }
# 1094 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }


      template<typename _Kt>
 auto
 equal_range(const _Kt& __x) const
 -> decltype(pair<const_iterator, const_iterator>(
       _M_t._M_equal_range_tr(__x)))
 {
   return pair<const_iterator, const_iterator>(
       _M_t._M_equal_range_tr(__x));
 }



      template<typename _K1, typename _T1, typename _C1, typename _A1>
 friend bool
 operator==(const multimap<_K1, _T1, _C1, _A1>&,
     const multimap<_K1, _T1, _C1, _A1>&);







      template<typename _K1, typename _T1, typename _C1, typename _A1>
 friend bool
 operator<(const multimap<_K1, _T1, _C1, _A1>&,
    const multimap<_K1, _T1, _C1, _A1>&);

  };



  template<typename _InputIterator,
    typename _Compare = less<__iter_key_t<_InputIterator>>,
    typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireNotAllocator<_Compare>,
    typename = _RequireAllocator<_Allocator>>
    multimap(_InputIterator, _InputIterator,
      _Compare = _Compare(), _Allocator = _Allocator())
    -> multimap<__iter_key_t<_InputIterator>, __iter_val_t<_InputIterator>,
  _Compare, _Allocator>;

  template<typename _Key, typename _Tp, typename _Compare = less<_Key>,
    typename _Allocator = allocator<pair<const _Key, _Tp>>,
    typename = _RequireNotAllocator<_Compare>,
    typename = _RequireAllocator<_Allocator>>
    multimap(initializer_list<pair<_Key, _Tp>>,
      _Compare = _Compare(), _Allocator = _Allocator())
    -> multimap<_Key, _Tp, _Compare, _Allocator>;

  template<typename _InputIterator, typename _Allocator,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireAllocator<_Allocator>>
    multimap(_InputIterator, _InputIterator, _Allocator)
    -> multimap<__iter_key_t<_InputIterator>, __iter_val_t<_InputIterator>,
  less<__iter_key_t<_InputIterator>>, _Allocator>;

  template<typename _Key, typename _Tp, typename _Allocator,
    typename = _RequireAllocator<_Allocator>>
    multimap(initializer_list<pair<_Key, _Tp>>, _Allocator)
    -> multimap<_Key, _Tp, less<_Key>, _Allocator>;
# 1192 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
        const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 1230 "/usr/include/c++/15.1.1/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
       const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
        const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
       const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
        const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
        const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }



  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,
  multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }





  template<typename _Key, typename _Val, typename _Cmp1, typename _Alloc,
    typename _Cmp2>
    struct
    _Rb_tree_merge_helper<std::multimap<_Key, _Val, _Cmp1, _Alloc>,
     _Cmp2>
    {
    private:
      friend class std::multimap<_Key, _Val, _Cmp1, _Alloc>;

      static auto&
      _S_get_tree(std::map<_Key, _Val, _Cmp2, _Alloc>& __map)
      { return __map._M_t; }

      static auto&
      _S_get_tree(std::multimap<_Key, _Val, _Cmp2, _Alloc>& __map)
      { return __map._M_t; }
    };



}
# 67 "/usr/include/c++/15.1.1/map" 2 3







#define __glibcxx_want_allocator_traits_is_always_equal 
#define __glibcxx_want_containers_ranges 
#define __glibcxx_want_erase_if 
#define __glibcxx_want_generic_associative_lookup 
#define __glibcxx_want_map_try_emplace 
#define __glibcxx_want_node_extract 
#define __glibcxx_want_nonmember_container_access 
#define __glibcxx_want_tuple_like 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 83 "/usr/include/c++/15.1.1/map" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{

  namespace pmr
  {
    template<typename _Key, typename _Tp, typename _Cmp = std::less<_Key>>
      using map
 = std::map<_Key, _Tp, _Cmp,
     polymorphic_allocator<pair<const _Key, _Tp>>>;
    template<typename _Key, typename _Tp, typename _Cmp = std::less<_Key>>
      using multimap
 = std::multimap<_Key, _Tp, _Cmp,
   polymorphic_allocator<pair<const _Key, _Tp>>>;
  }

}
# 23 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-common.h" 2

# 1 "/usr/include/c++/15.1.1/set" 1 3
# 56 "/usr/include/c++/15.1.1/set" 3
#define _GLIBCXX_SET 1
# 65 "/usr/include/c++/15.1.1/set" 3
# 1 "/usr/include/c++/15.1.1/bits/stl_set.h" 1 3
# 57 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
#define _STL_SET_H 1
# 67 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Key, typename _Compare, typename _Alloc>
    class multiset;
# 97 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
  template<typename _Key, typename _Compare = std::less<_Key>,
    typename _Alloc = std::allocator<_Key> >
    class set
    {
# 113 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      static_assert(is_same<typename remove_cv<_Key>::type, _Key>::value,
   "std::set must have a non-const, non-volatile value_type");






    public:



      typedef _Key key_type;
      typedef _Key value_type;
      typedef _Compare key_compare;
      typedef _Compare value_compare;
      typedef _Alloc allocator_type;


    private:
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Key>::other _Key_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Identity<value_type>,
         key_compare, _Key_alloc_type> _Rep_type;
      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Key_alloc_type> _Alloc_traits;

    public:


      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;



      typedef typename _Rep_type::const_iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::const_reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;



      using node_type = typename _Rep_type::node_type;
      using insert_return_type = typename _Rep_type::insert_return_type;
# 172 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      set() = default;







      explicit
      set(const _Compare& __comp,
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Key_alloc_type(__a)) { }
# 195 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      template<typename _InputIterator>
 set(_InputIterator __first, _InputIterator __last)
 : _M_t()
 { _M_t._M_insert_range_unique(__first, __last); }
# 212 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      template<typename _InputIterator>
 set(_InputIterator __first, _InputIterator __last,
     const _Compare& __comp,
     const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Key_alloc_type(__a))
 { _M_t._M_insert_range_unique(__first, __last); }
# 228 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      set(const set&) = default;







      set(set&&) = default;
# 248 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      set(initializer_list<value_type> __l,
   const _Compare& __comp = _Compare(),
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Key_alloc_type(__a))
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }


      explicit
      set(const allocator_type& __a)
      : _M_t(_Key_alloc_type(__a)) { }


      set(const set& __x, const __type_identity_t<allocator_type>& __a)
      : _M_t(__x._M_t, _Key_alloc_type(__a)) { }


      set(set&& __x, const __type_identity_t<allocator_type>& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__x._M_t), _Key_alloc_type(__a)) { }


      set(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Key_alloc_type(__a))
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }


      template<typename _InputIterator>
 set(_InputIterator __first, _InputIterator __last,
     const allocator_type& __a)
 : _M_t(_Key_alloc_type(__a))
 { _M_t._M_insert_range_unique(__first, __last); }
# 305 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      ~set() = default;
# 321 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      set&
      operator=(const set&) = default;


      set&
      operator=(set&&) = default;
# 339 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      set&
      operator=(initializer_list<value_type> __l)
      {
 _M_t._M_assign_unique(__l.begin(), __l.end());
 return *this;
      }





      key_compare
      key_comp() const
      { return _M_t.key_comp(); }

      value_compare
      value_comp() const
      { return _M_t.key_comp(); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }






      iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      iterator
      cend() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }



      [[__nodiscard__]] bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 464 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      void
      swap(set& __x)
      noexcept(__is_nothrow_swappable<_Compare>::value)
      { _M_t.swap(__x._M_t); }
# 484 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      template<typename... _Args>
 std::pair<iterator, bool>
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_unique(std::forward<_Args>(__args)...); }
# 510 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_unique(__pos,
          std::forward<_Args>(__args)...);
 }
# 532 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      std::pair<iterator, bool>
      insert(const value_type& __x)
      {
 std::pair<typename _Rep_type::iterator, bool> __p =
   _M_t._M_insert_unique(__x);
 return std::pair<iterator, bool>(__p.first, __p.second);
      }


      std::pair<iterator, bool>
      insert(value_type&& __x)
      {
 std::pair<typename _Rep_type::iterator, bool> __p =
   _M_t._M_insert_unique(std::move(__x));
 return std::pair<iterator, bool>(__p.first, __p.second);
      }
# 569 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x)
      { return _M_t._M_insert_unique_(__position, __x); }


      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_t._M_insert_unique_(__position, std::move(__x)); }
# 588 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 { _M_t._M_insert_range_unique(__first, __last); }
# 601 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }
# 630 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      node_type
      extract(const_iterator __pos)
      {
 do { if (std::__is_constant_evaluated() && !bool(__pos != end())) std::__glibcxx_assert_fail(); } while (false);
 return _M_t.extract(__pos);
      }


      node_type
      extract(const key_type& __x)
      { return _M_t.extract(__x); }


      insert_return_type
      insert(node_type&& __nh)
      { return _M_t._M_reinsert_node_unique(std::move(__nh)); }


      iterator
      insert(const_iterator __hint, node_type&& __nh)
      { return _M_t._M_reinsert_node_hint_unique(__hint, std::move(__nh)); }

      template<typename, typename>
 friend struct std::_Rb_tree_merge_helper;

      template<typename _Compare1>
 void
 merge(set<_Key, _Compare1, _Alloc>& __source)
 {
   using _Merge_helper = _Rb_tree_merge_helper<set, _Compare1>;
   _M_t._M_merge_unique(_Merge_helper::_S_get_tree(__source));
 }

      template<typename _Compare1>
 void
 merge(set<_Key, _Compare1, _Alloc>&& __source)
 { merge(__source); }

      template<typename _Compare1>
 void
 merge(multiset<_Key, _Compare1, _Alloc>& __source)
 {
   using _Merge_helper = _Rb_tree_merge_helper<set, _Compare1>;
   _M_t._M_merge_unique(_Merge_helper::_S_get_tree(__source));
 }

      template<typename _Compare1>
 void
 merge(multiset<_Key, _Compare1, _Alloc>&& __source)
 { merge(__source); }
# 698 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }
# 729 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 750 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 778 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      void
      clear() noexcept
      { _M_t.clear(); }
# 793 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }


      template<typename _Kt>
 auto
 count(const _Kt& __x) const
 -> decltype(_M_t._M_count_tr(__x))
 { return _M_t._M_count_tr(__x); }
# 839 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }

      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }


      template<typename _Kt>
 auto
 find(const _Kt& __x)
 -> decltype(iterator{_M_t._M_find_tr(__x)})
 { return iterator{_M_t._M_find_tr(__x)}; }

      template<typename _Kt>
 auto
 find(const _Kt& __x) const
 -> decltype(const_iterator{_M_t._M_find_tr(__x)})
 { return const_iterator{_M_t._M_find_tr(__x)}; }
# 874 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }

      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }


      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_lower_bound_tr(__x)))
 { return iterator(_M_t._M_lower_bound_tr(__x)); }

      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x) const
 -> decltype(const_iterator(_M_t._M_lower_bound_tr(__x)))
 { return const_iterator(_M_t._M_lower_bound_tr(__x)); }
# 904 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }

      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }


      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_upper_bound_tr(__x)))
 { return iterator(_M_t._M_upper_bound_tr(__x)); }

      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x) const
 -> decltype(const_iterator(_M_t._M_upper_bound_tr(__x)))
 { return const_iterator(_M_t._M_upper_bound_tr(__x)); }
# 943 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }

      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }


      template<typename _Kt>
 auto
 equal_range(const _Kt& __x)
 -> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))
 { return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }

      template<typename _Kt>
 auto
 equal_range(const _Kt& __x) const
 -> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))
 { return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }



      template<typename _K1, typename _C1, typename _A1>
 friend bool
 operator==(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);






      template<typename _K1, typename _C1, typename _A1>
 friend bool
 operator<(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);

    };



  template<typename _InputIterator,
    typename _Compare =
      less<typename iterator_traits<_InputIterator>::value_type>,
    typename _Allocator =
      allocator<typename iterator_traits<_InputIterator>::value_type>,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireNotAllocator<_Compare>,
    typename = _RequireAllocator<_Allocator>>
    set(_InputIterator, _InputIterator,
 _Compare = _Compare(), _Allocator = _Allocator())
    -> set<typename iterator_traits<_InputIterator>::value_type,
   _Compare, _Allocator>;

  template<typename _Key, typename _Compare = less<_Key>,
    typename _Allocator = allocator<_Key>,
    typename = _RequireNotAllocator<_Compare>,
    typename = _RequireAllocator<_Allocator>>
    set(initializer_list<_Key>,
 _Compare = _Compare(), _Allocator = _Allocator())
    -> set<_Key, _Compare, _Allocator>;

  template<typename _InputIterator, typename _Allocator,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireAllocator<_Allocator>>
    set(_InputIterator, _InputIterator, _Allocator)
    -> set<typename iterator_traits<_InputIterator>::value_type,
    less<typename iterator_traits<_InputIterator>::value_type>,
    _Allocator>;

  template<typename _Key, typename _Allocator,
    typename = _RequireAllocator<_Allocator>>
    set(initializer_list<_Key>, _Allocator)
    -> set<_Key, less<_Key>, _Allocator>;
# 1040 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator==(const set<_Key, _Compare, _Alloc>& __x,
        const set<_Key, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 1078 "/usr/include/c++/15.1.1/bits/stl_set.h" 3
  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator<(const set<_Key, _Compare, _Alloc>& __x,
       const set<_Key, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const set<_Key, _Compare, _Alloc>& __x,
        const set<_Key, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator>(const set<_Key, _Compare, _Alloc>& __x,
       const set<_Key, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const set<_Key, _Compare, _Alloc>& __x,
        const set<_Key, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const set<_Key, _Compare, _Alloc>& __x,
        const set<_Key, _Compare, _Alloc>& __y)
    { return !(__x < __y); }



  template<typename _Key, typename _Compare, typename _Alloc>
    inline void
    swap(set<_Key, _Compare, _Alloc>& __x, set<_Key, _Compare, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }





  template<typename _Val, typename _Cmp1, typename _Alloc, typename _Cmp2>
    struct
    _Rb_tree_merge_helper<std::set<_Val, _Cmp1, _Alloc>, _Cmp2>
    {
    private:
      friend class std::set<_Val, _Cmp1, _Alloc>;

      static auto&
      _S_get_tree(std::set<_Val, _Cmp2, _Alloc>& __set)
      { return __set._M_t; }

      static auto&
      _S_get_tree(std::multiset<_Val, _Cmp2, _Alloc>& __set)
      { return __set._M_t; }
    };



}
# 66 "/usr/include/c++/15.1.1/set" 2 3
# 1 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 1 3
# 57 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
#define _STL_MULTISET_H 1
# 67 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Key, typename _Compare, typename _Alloc>
    class set;
# 98 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
  template <typename _Key, typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<_Key> >
    class multiset
    {
# 114 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      static_assert(is_same<typename remove_cv<_Key>::type, _Key>::value,
   "std::multiset must have a non-const, non-volatile value_type");






    public:

      typedef _Key key_type;
      typedef _Key value_type;
      typedef _Compare key_compare;
      typedef _Compare value_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Key>::other _Key_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Identity<value_type>,
         key_compare, _Key_alloc_type> _Rep_type;

      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Key_alloc_type> _Alloc_traits;

    public:
      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;



      typedef typename _Rep_type::const_iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::const_reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;


      using node_type = typename _Rep_type::node_type;
# 168 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      multiset() = default;







      explicit
      multiset(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Key_alloc_type(__a)) { }
# 190 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      template<typename _InputIterator>
 multiset(_InputIterator __first, _InputIterator __last)
 : _M_t()
 { _M_t._M_insert_range_equal(__first, __last); }
# 206 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      template<typename _InputIterator>
 multiset(_InputIterator __first, _InputIterator __last,
   const _Compare& __comp,
   const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Key_alloc_type(__a))
 { _M_t._M_insert_range_equal(__first, __last); }
# 222 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      multiset(const multiset&) = default;
# 231 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      multiset(multiset&&) = default;
# 243 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      multiset(initializer_list<value_type> __l,
        const _Compare& __comp = _Compare(),
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Key_alloc_type(__a))
      { _M_t._M_insert_range_equal(__l.begin(), __l.end()); }


      explicit
      multiset(const allocator_type& __a)
      : _M_t(_Key_alloc_type(__a)) { }


      multiset(const multiset& __m,
        const __type_identity_t<allocator_type>& __a)
      : _M_t(__m._M_t, _Key_alloc_type(__a)) { }


      multiset(multiset&& __m, const __type_identity_t<allocator_type>& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__m._M_t), _Key_alloc_type(__a)) { }


      multiset(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Key_alloc_type(__a))
      { _M_t._M_insert_range_equal(__l.begin(), __l.end()); }


      template<typename _InputIterator>
 multiset(_InputIterator __first, _InputIterator __last,
   const allocator_type& __a)
 : _M_t(_Key_alloc_type(__a))
 { _M_t._M_insert_range_equal(__first, __last); }
# 301 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      ~multiset() = default;
# 317 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      multiset&
      operator=(const multiset&) = default;


      multiset&
      operator=(multiset&&) = default;
# 335 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      multiset&
      operator=(initializer_list<value_type> __l)
      {
 _M_t._M_assign_equal(__l.begin(), __l.end());
 return *this;
      }





      key_compare
      key_comp() const
      { return _M_t.key_comp(); }

      value_compare
      value_comp() const
      { return _M_t.key_comp(); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }






      iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      iterator
      cend() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }



      [[__nodiscard__]] bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 460 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      void
      swap(multiset& __x)
      noexcept(__is_nothrow_swappable<_Compare>::value)
      { _M_t.swap(__x._M_t); }
# 479 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      template<typename... _Args>
 iterator
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_equal(std::forward<_Args>(__args)...); }
# 505 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_equal(__pos,
         std::forward<_Args>(__args)...);
 }
# 525 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      iterator
      insert(const value_type& __x)
      { return _M_t._M_insert_equal(__x); }


      iterator
      insert(value_type&& __x)
      { return _M_t._M_insert_equal(std::move(__x)); }
# 555 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x)
      { return _M_t._M_insert_equal_(__position, __x); }


      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_t._M_insert_equal_(__position, std::move(__x)); }
# 573 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 { _M_t._M_insert_range_equal(__first, __last); }
# 586 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }
# 612 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      node_type
      extract(const_iterator __pos)
      {
 do { if (std::__is_constant_evaluated() && !bool(__pos != end())) std::__glibcxx_assert_fail(); } while (false);
 return _M_t.extract(__pos);
      }


      node_type
      extract(const key_type& __x)
      { return _M_t.extract(__x); }


      iterator
      insert(node_type&& __nh)
      { return _M_t._M_reinsert_node_equal(std::move(__nh)); }


      iterator
      insert(const_iterator __hint, node_type&& __nh)
      { return _M_t._M_reinsert_node_hint_equal(__hint, std::move(__nh)); }

      template<typename, typename>
 friend struct std::_Rb_tree_merge_helper;

      template<typename _Compare1>
 void
 merge(multiset<_Key, _Compare1, _Alloc>& __source)
 {
   using _Merge_helper = _Rb_tree_merge_helper<multiset, _Compare1>;
   _M_t._M_merge_equal(_Merge_helper::_S_get_tree(__source));
 }

      template<typename _Compare1>
 void
 merge(multiset<_Key, _Compare1, _Alloc>&& __source)
 { merge(__source); }

      template<typename _Compare1>
 void
 merge(set<_Key, _Compare1, _Alloc>& __source)
 {
   using _Merge_helper = _Rb_tree_merge_helper<multiset, _Compare1>;
   _M_t._M_merge_equal(_Merge_helper::_S_get_tree(__source));
 }

      template<typename _Compare1>
 void
 merge(set<_Key, _Compare1, _Alloc>&& __source)
 { merge(__source); }
# 680 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }
# 711 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 732 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 760 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      void
      clear() noexcept
      { _M_t.clear(); }
# 772 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.count(__x); }


      template<typename _Kt>
 auto
 count(const _Kt& __x) const -> decltype(_M_t._M_count_tr(__x))
 { return _M_t._M_count_tr(__x); }
# 817 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }

      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }


      template<typename _Kt>
 auto
 find(const _Kt& __x)
 -> decltype(iterator{_M_t._M_find_tr(__x)})
 { return iterator{_M_t._M_find_tr(__x)}; }

      template<typename _Kt>
 auto
 find(const _Kt& __x) const
 -> decltype(const_iterator{_M_t._M_find_tr(__x)})
 { return const_iterator{_M_t._M_find_tr(__x)}; }
# 852 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }

      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }


      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_lower_bound_tr(__x)))
 { return iterator(_M_t._M_lower_bound_tr(__x)); }

      template<typename _Kt>
 auto
 lower_bound(const _Kt& __x) const
 -> decltype(iterator(_M_t._M_lower_bound_tr(__x)))
 { return iterator(_M_t._M_lower_bound_tr(__x)); }
# 882 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }

      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }


      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x)
 -> decltype(iterator(_M_t._M_upper_bound_tr(__x)))
 { return iterator(_M_t._M_upper_bound_tr(__x)); }

      template<typename _Kt>
 auto
 upper_bound(const _Kt& __x) const
 -> decltype(iterator(_M_t._M_upper_bound_tr(__x)))
 { return iterator(_M_t._M_upper_bound_tr(__x)); }
# 921 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }

      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }


      template<typename _Kt>
 auto
 equal_range(const _Kt& __x)
 -> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))
 { return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }

      template<typename _Kt>
 auto
 equal_range(const _Kt& __x) const
 -> decltype(pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)))
 { return pair<iterator, iterator>(_M_t._M_equal_range_tr(__x)); }



      template<typename _K1, typename _C1, typename _A1>
 friend bool
 operator==(const multiset<_K1, _C1, _A1>&,
     const multiset<_K1, _C1, _A1>&);







      template<typename _K1, typename _C1, typename _A1>
 friend bool
 operator< (const multiset<_K1, _C1, _A1>&,
     const multiset<_K1, _C1, _A1>&);

    };



  template<typename _InputIterator,
    typename _Compare =
      less<typename iterator_traits<_InputIterator>::value_type>,
    typename _Allocator =
      allocator<typename iterator_traits<_InputIterator>::value_type>,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireNotAllocator<_Compare>,
    typename = _RequireAllocator<_Allocator>>
    multiset(_InputIterator, _InputIterator,
      _Compare = _Compare(), _Allocator = _Allocator())
    -> multiset<typename iterator_traits<_InputIterator>::value_type,
  _Compare, _Allocator>;

  template<typename _Key,
    typename _Compare = less<_Key>,
    typename _Allocator = allocator<_Key>,
    typename = _RequireNotAllocator<_Compare>,
    typename = _RequireAllocator<_Allocator>>
    multiset(initializer_list<_Key>,
      _Compare = _Compare(), _Allocator = _Allocator())
    -> multiset<_Key, _Compare, _Allocator>;

  template<typename _InputIterator, typename _Allocator,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireAllocator<_Allocator>>
    multiset(_InputIterator, _InputIterator, _Allocator)
    -> multiset<typename iterator_traits<_InputIterator>::value_type,
         less<typename iterator_traits<_InputIterator>::value_type>,
         _Allocator>;

  template<typename _Key, typename _Allocator,
    typename = _RequireAllocator<_Allocator>>
    multiset(initializer_list<_Key>, _Allocator)
    -> multiset<_Key, less<_Key>, _Allocator>;
# 1023 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator==(const multiset<_Key, _Compare, _Alloc>& __x,
        const multiset<_Key, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 1061 "/usr/include/c++/15.1.1/bits/stl_multiset.h" 3
  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator<(const multiset<_Key, _Compare, _Alloc>& __x,
       const multiset<_Key, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const multiset<_Key, _Compare, _Alloc>& __x,
        const multiset<_Key, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator>(const multiset<_Key,_Compare,_Alloc>& __x,
       const multiset<_Key,_Compare,_Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const multiset<_Key, _Compare, _Alloc>& __x,
        const multiset<_Key, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const multiset<_Key, _Compare, _Alloc>& __x,
        const multiset<_Key, _Compare, _Alloc>& __y)
    { return !(__x < __y); }



  template<typename _Key, typename _Compare, typename _Alloc>
    inline void
    swap(multiset<_Key, _Compare, _Alloc>& __x,
  multiset<_Key, _Compare, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }





  template<typename _Val, typename _Cmp1, typename _Alloc, typename _Cmp2>
    struct
    _Rb_tree_merge_helper<std::multiset<_Val, _Cmp1, _Alloc>,
     _Cmp2>
    {
    private:
      friend class std::multiset<_Val, _Cmp1, _Alloc>;

      static auto&
      _S_get_tree(std::set<_Val, _Cmp2, _Alloc>& __set)
      { return __set._M_t; }

      static auto&
      _S_get_tree(std::multiset<_Val, _Cmp2, _Alloc>& __set)
      { return __set._M_t; }
    };



}
# 67 "/usr/include/c++/15.1.1/set" 2 3







#define __glibcxx_want_allocator_traits_is_always_equal 
#define __glibcxx_want_containers_ranges 
#define __glibcxx_want_erase_if 
#define __glibcxx_want_generic_associative_lookup 
#define __glibcxx_want_node_extract 
#define __glibcxx_want_nonmember_container_access 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 81 "/usr/include/c++/15.1.1/set" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{

  namespace pmr
  {
    template<typename _Key, typename _Cmp = std::less<_Key>>
      using set = std::set<_Key, _Cmp, polymorphic_allocator<_Key>>;
    template<typename _Key, typename _Cmp = std::less<_Key>>
      using multiset = std::multiset<_Key, _Cmp, polymorphic_allocator<_Key>>;
  }

}
# 25 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-common.h" 2
# 1 "/usr/include/c++/15.1.1/sstream" 1 3
# 34 "/usr/include/c++/15.1.1/sstream" 3
#define _GLIBCXX_SSTREAM 1
# 50 "/usr/include/c++/15.1.1/sstream" 3
#define _GLIBCXX_LVAL_REF_QUAL 

#define _GLIBCXX_SSTREAM_ALWAYS_INLINE [[__gnu__::__always_inline__]]




namespace std __attribute__ ((__visibility__ ("default")))
{

namespace __cxx11 {
# 80 "/usr/include/c++/15.1.1/sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    {
      struct __xfer_bufptrs;


      using allocator_traits = std::allocator_traits<_Alloc>;
      using _Noexcept_swap
 = __or_<typename allocator_traits::propagate_on_container_swap,
  typename allocator_traits::is_always_equal>;


    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_string<char_type, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;

    protected:

      ios_base::openmode _M_mode;


      __string_type _M_string;

    public:
# 123 "/usr/include/c++/15.1.1/sstream" 3
      basic_stringbuf()
      : __streambuf_type(), _M_mode(ios_base::in | ios_base::out), _M_string()
      { }
# 134 "/usr/include/c++/15.1.1/sstream" 3
      explicit
      basic_stringbuf(ios_base::openmode __mode)
      : __streambuf_type(), _M_mode(__mode), _M_string()
      { }
# 147 "/usr/include/c++/15.1.1/sstream" 3
      explicit
      basic_stringbuf(const __string_type& __str,
        ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(),
 _M_string(__str.data(), __str.size(), __str.get_allocator())
      { _M_stringbuf_init(__mode); }


      basic_stringbuf(const basic_stringbuf&) = delete;

      basic_stringbuf(basic_stringbuf&& __rhs)
      : basic_stringbuf(std::move(__rhs), __xfer_bufptrs(__rhs, this))
      { __rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0); }
# 211 "/usr/include/c++/15.1.1/sstream" 3
      basic_stringbuf&
      operator=(const basic_stringbuf&) = delete;

      basic_stringbuf&
      operator=(basic_stringbuf&& __rhs)
      {
 __xfer_bufptrs __st{__rhs, this};
 const __streambuf_type& __base = __rhs;
 __streambuf_type::operator=(__base);
 this->pubimbue(__rhs.getloc());
 _M_mode = __rhs._M_mode;
 _M_string = std::move(__rhs._M_string);
 __rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0);
 return *this;
      }

      void
      swap(basic_stringbuf& __rhs) noexcept(_Noexcept_swap::value)
      {
 __xfer_bufptrs __l_st{*this, std::__addressof(__rhs)};
 __xfer_bufptrs __r_st{__rhs, this};
 __streambuf_type& __base = __rhs;
 __streambuf_type::swap(__base);
 __rhs.pubimbue(this->pubimbue(__rhs.getloc()));
 std::swap(_M_mode, __rhs._M_mode);
 std::swap(_M_string, __rhs._M_string);
      }
# 250 "/usr/include/c++/15.1.1/sstream" 3
      [[__nodiscard__]]
      __string_type
      str() const
      {
 __string_type __ret(_M_string.get_allocator());
 if (char_type* __hi = _M_high_mark())
   __ret.assign(this->pbase(), __hi);
 else
   __ret = _M_string;
 return __ret;
      }
# 309 "/usr/include/c++/15.1.1/sstream" 3
      void
      str(const __string_type& __s)
      {


 _M_string.assign(__s.data(), __s.size());
 _M_stringbuf_init(_M_mode);
      }
# 338 "/usr/include/c++/15.1.1/sstream" 3
    protected:

      void
      _M_stringbuf_init(ios_base::openmode __mode)
      {
 _M_mode = __mode;
 __size_type __len = 0;
 if (_M_mode & (ios_base::ate | ios_base::app))
   __len = _M_string.size();
 _M_sync(const_cast<char_type*>(_M_string.data()), 0, __len);
      }

      virtual streamsize
      showmanyc()
      {
 streamsize __ret = -1;
 if (_M_mode & ios_base::in)
   {
     _M_update_egptr();
     __ret = this->egptr() - this->gptr();
   }
 return __ret;
      }

      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = traits_type::eof());

      virtual int_type
      overflow(int_type __c = traits_type::eof());
# 382 "/usr/include/c++/15.1.1/sstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n)
      {
 if (__s && __n >= 0)
   {






     _M_string.clear();


     _M_sync(__s, __n, 0);
   }
 return this;
      }

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __sp,
       ios_base::openmode __mode = ios_base::in | ios_base::out);




      void
      _M_sync(char_type* __base, __size_type __i, __size_type __o);



      void
      _M_update_egptr()
      {
 if (char_type* __pptr = this->pptr())
   {
     char_type* __egptr = this->egptr();
     if (!__egptr || __pptr > __egptr)
       {
  if (_M_mode & ios_base::in)
    this->setg(this->eback(), this->gptr(), __pptr);
  else
    this->setg(__pptr, __pptr, __pptr);
       }
   }
      }



      void
      _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off);

    private:




      __attribute__((__always_inline__))
      char_type*
      _M_high_mark() const noexcept
      {
 if (char_type* __pptr = this->pptr())
   {
     char_type* __egptr = this->egptr();
     if (!__egptr || __pptr > __egptr)
       return __pptr;
     else
       return __egptr;
   }
 return 0;
      }





      struct __xfer_bufptrs
      {
 __xfer_bufptrs(const basic_stringbuf& __from, basic_stringbuf* __to)
 : _M_to{__to}, _M_goff{-1, -1, -1}, _M_poff{-1, -1, -1}
 {
   const _CharT* const __str = __from._M_string.data();
   const _CharT* __end = nullptr;
   if (__from.eback())
     {
       _M_goff[0] = __from.eback() - __str;
       _M_goff[1] = __from.gptr() - __str;
       _M_goff[2] = __from.egptr() - __str;
       __end = __from.egptr();
     }
   if (__from.pbase())
     {
       _M_poff[0] = __from.pbase() - __str;
       _M_poff[1] = __from.pptr() - __from.pbase();
       _M_poff[2] = __from.epptr() - __str;
       if (!__end || __from.pptr() > __end)
  __end = __from.pptr();
     }


   if (__end)
     {


       auto& __mut_from = const_cast<basic_stringbuf&>(__from);
       __mut_from._M_string._M_length(__end - __str);
     }
 }

 ~__xfer_bufptrs()
 {
   char_type* __str = const_cast<char_type*>(_M_to->_M_string.data());
   if (_M_goff[0] != -1)
     _M_to->setg(__str+_M_goff[0], __str+_M_goff[1], __str+_M_goff[2]);
   if (_M_poff[0] != -1)
     _M_to->_M_pbump(__str+_M_poff[0], __str+_M_poff[2], _M_poff[1]);
 }

 basic_stringbuf* _M_to;
 off_type _M_goff[3];
 off_type _M_poff[3];
      };
# 518 "/usr/include/c++/15.1.1/sstream" 3
      basic_stringbuf(basic_stringbuf&& __rhs, __xfer_bufptrs&&)
      : __streambuf_type(static_cast<const __streambuf_type&>(__rhs)),
      _M_mode(__rhs._M_mode), _M_string(std::move(__rhs._M_string))
      { }
# 533 "/usr/include/c++/15.1.1/sstream" 3
    };
# 551 "/usr/include/c++/15.1.1/sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_istringstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 585 "/usr/include/c++/15.1.1/sstream" 3
      basic_istringstream()
      : __istream_type(), _M_stringbuf(ios_base::in)
      { this->init(&_M_stringbuf); }
# 601 "/usr/include/c++/15.1.1/sstream" 3
      explicit
      basic_istringstream(ios_base::openmode __mode)
      : __istream_type(), _M_stringbuf(__mode | ios_base::in)
      { this->init(&_M_stringbuf); }
# 619 "/usr/include/c++/15.1.1/sstream" 3
      explicit
      basic_istringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_stringbuf(__str, __mode | ios_base::in)
      { this->init(&_M_stringbuf); }







      ~basic_istringstream()
      { }


      basic_istringstream(const basic_istringstream&) = delete;

      basic_istringstream(basic_istringstream&& __rhs)
      : __istream_type(std::move(__rhs)),
      _M_stringbuf(std::move(__rhs._M_stringbuf))
      { __istream_type::set_rdbuf(&_M_stringbuf); }
# 676 "/usr/include/c++/15.1.1/sstream" 3
      basic_istringstream&
      operator=(const basic_istringstream&) = delete;

      basic_istringstream&
      operator=(basic_istringstream&& __rhs)
      {
 __istream_type::operator=(std::move(__rhs));
 _M_stringbuf = std::move(__rhs._M_stringbuf);
 return *this;
      }

      void
      swap(basic_istringstream& __rhs)
      {
 __istream_type::swap(__rhs);
 _M_stringbuf.swap(__rhs._M_stringbuf);
      }
# 702 "/usr/include/c++/15.1.1/sstream" 3
      [[__nodiscard__]]
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      [[__nodiscard__]]
      __string_type
      str() const
      { return _M_stringbuf.str(); }
# 744 "/usr/include/c++/15.1.1/sstream" 3
      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
# 761 "/usr/include/c++/15.1.1/sstream" 3
    };
# 779 "/usr/include/c++/15.1.1/sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_ostringstream : public basic_ostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 813 "/usr/include/c++/15.1.1/sstream" 3
      basic_ostringstream()
      : __ostream_type(), _M_stringbuf(ios_base::out)
      { this->init(&_M_stringbuf); }
# 829 "/usr/include/c++/15.1.1/sstream" 3
      explicit
      basic_ostringstream(ios_base::openmode __mode)
      : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
      { this->init(&_M_stringbuf); }
# 847 "/usr/include/c++/15.1.1/sstream" 3
      explicit
      basic_ostringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_stringbuf(__str, __mode | ios_base::out)
      { this->init(&_M_stringbuf); }







      ~basic_ostringstream()
      { }


      basic_ostringstream(const basic_ostringstream&) = delete;

      basic_ostringstream(basic_ostringstream&& __rhs)
      : __ostream_type(std::move(__rhs)),
      _M_stringbuf(std::move(__rhs._M_stringbuf))
      { __ostream_type::set_rdbuf(&_M_stringbuf); }
# 904 "/usr/include/c++/15.1.1/sstream" 3
      basic_ostringstream&
      operator=(const basic_ostringstream&) = delete;

      basic_ostringstream&
      operator=(basic_ostringstream&& __rhs)
      {
 __ostream_type::operator=(std::move(__rhs));
 _M_stringbuf = std::move(__rhs._M_stringbuf);
 return *this;
      }

      void
      swap(basic_ostringstream& __rhs)
      {
 __ostream_type::swap(__rhs);
 _M_stringbuf.swap(__rhs._M_stringbuf);
      }
# 930 "/usr/include/c++/15.1.1/sstream" 3
      [[__nodiscard__]]
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      [[__nodiscard__]]
      __string_type
      str() const
      { return _M_stringbuf.str(); }
# 972 "/usr/include/c++/15.1.1/sstream" 3
      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
# 989 "/usr/include/c++/15.1.1/sstream" 3
    };
# 1007 "/usr/include/c++/15.1.1/sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 1041 "/usr/include/c++/15.1.1/sstream" 3
      basic_stringstream()
      : __iostream_type(), _M_stringbuf(ios_base::out | ios_base::in)
      { this->init(&_M_stringbuf); }
# 1055 "/usr/include/c++/15.1.1/sstream" 3
      explicit
      basic_stringstream(ios_base::openmode __m)
      : __iostream_type(), _M_stringbuf(__m)
      { this->init(&_M_stringbuf); }
# 1071 "/usr/include/c++/15.1.1/sstream" 3
      explicit
      basic_stringstream(const __string_type& __str,
    ios_base::openmode __m = ios_base::out | ios_base::in)
      : __iostream_type(), _M_stringbuf(__str, __m)
      { this->init(&_M_stringbuf); }







      ~basic_stringstream()
      { }


      basic_stringstream(const basic_stringstream&) = delete;

      basic_stringstream(basic_stringstream&& __rhs)
      : __iostream_type(std::move(__rhs)),
      _M_stringbuf(std::move(__rhs._M_stringbuf))
      { __iostream_type::set_rdbuf(&_M_stringbuf); }
# 1130 "/usr/include/c++/15.1.1/sstream" 3
      basic_stringstream&
      operator=(const basic_stringstream&) = delete;

      basic_stringstream&
      operator=(basic_stringstream&& __rhs)
      {
 __iostream_type::operator=(std::move(__rhs));
 _M_stringbuf = std::move(__rhs._M_stringbuf);
 return *this;
      }

      void
      swap(basic_stringstream& __rhs)
      {
 __iostream_type::swap(__rhs);
 _M_stringbuf.swap(__rhs._M_stringbuf);
      }
# 1156 "/usr/include/c++/15.1.1/sstream" 3
      [[__nodiscard__]]
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      [[__nodiscard__]]
      __string_type
      str() const
      { return _M_stringbuf.str(); }
# 1198 "/usr/include/c++/15.1.1/sstream" 3
      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
# 1215 "/usr/include/c++/15.1.1/sstream" 3
    };



  template <class _CharT, class _Traits, class _Allocator>
    inline void
    swap(basic_stringbuf<_CharT, _Traits, _Allocator>& __x,
  basic_stringbuf<_CharT, _Traits, _Allocator>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


  template <class _CharT, class _Traits, class _Allocator>
    inline void
    swap(basic_istringstream<_CharT, _Traits, _Allocator>& __x,
  basic_istringstream<_CharT, _Traits, _Allocator>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits, class _Allocator>
    inline void
    swap(basic_ostringstream<_CharT, _Traits, _Allocator>& __x,
  basic_ostringstream<_CharT, _Traits, _Allocator>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits, class _Allocator>
    inline void
    swap(basic_stringstream<_CharT, _Traits, _Allocator>& __x,
  basic_stringstream<_CharT, _Traits, _Allocator>& __y)
    { __x.swap(__y); }


}

}

#undef _GLIBCXX_SSTREAM_ALWAYS_INLINE
#undef _GLIBCXX_LVAL_REF_QUAL

# 1 "/usr/include/c++/15.1.1/bits/sstream.tcc" 1 3
# 35 "/usr/include/c++/15.1.1/bits/sstream.tcc" 3
#define _SSTREAM_TCC 1




#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wc++11-extensions"

namespace std __attribute__ ((__visibility__ ("default")))
{


  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    pbackfail(int_type __c)
    {
      int_type __ret = traits_type::eof();
      if (this->eback() < this->gptr())
 {


   const bool __testeof = traits_type::eq_int_type(__c, __ret);
   if (!__testeof)
     {
       const bool __testeq = traits_type::eq(traits_type::
          to_char_type(__c),
          this->gptr()[-1]);
       const bool __testout = this->_M_mode & ios_base::out;
       if (__testeq || __testout)
  {
    this->gbump(-1);
    if (!__testeq)
      *this->gptr() = traits_type::to_char_type(__c);
    __ret = __c;
  }
     }
   else
     {
       this->gbump(-1);
       __ret = traits_type::not_eof(__c);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    overflow(int_type __c)
    {
      const bool __testout = this->_M_mode & ios_base::out;
      if (__builtin_expect(!__testout, false))
 return traits_type::eof();

      const bool __testeof = traits_type::eq_int_type(__c, traits_type::eof());
      if (__builtin_expect(__testeof, false))
 return traits_type::not_eof(__c);

      const __size_type __capacity = _M_string.capacity();


      if (size_t(this->epptr() - this->pbase()) < __capacity)
 {

   char_type* __base = const_cast<char_type*>(_M_string.data());
   _M_pbump(__base, __base + __capacity, this->pptr() - this->pbase());
   if (_M_mode & ios_base::in)
     {
       const __size_type __nget = this->gptr() - this->eback();
       const __size_type __eget = this->egptr() - this->eback();
       this->setg(__base, __base + __nget, __base + __eget + 1);
     }
   *this->pptr() = traits_type::to_char_type(__c);
   this->pbump(1);
   return __c;
 }


      const __size_type __max_size = _M_string.max_size();
      const bool __testput = this->pptr() < this->epptr();
      if (__builtin_expect(!__testput && __capacity == __max_size, false))
 return traits_type::eof();



      const char_type __conv = traits_type::to_char_type(__c);
      if (!__testput)
 {
# 133 "/usr/include/c++/15.1.1/bits/sstream.tcc" 3
   const __size_type __opt_len = std::max(__size_type(2 * __capacity),
       __size_type(512));
   const __size_type __len = std::min(__opt_len, __max_size);
   __string_type __tmp(_M_string.get_allocator());
   __tmp.reserve(__len);
   if (this->pbase())
     __tmp.assign(this->pbase(), this->epptr() - this->pbase());
   __tmp.push_back(__conv);
   _M_string.swap(__tmp);
   _M_sync(const_cast<char_type*>(_M_string.data()),
    this->gptr() - this->eback(), this->pptr() - this->pbase());
 }
      else
 *this->pptr() = __conv;
      this->pbump(1);
      return __c;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = this->_M_mode & ios_base::in;
      if (__testin)
 {

   _M_update_egptr();

   if (this->gptr() < this->egptr())
     __ret = traits_type::to_int_type(*this->gptr());
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;
      const bool __testboth = __testin && __testout && __way != ios_base::cur;
      __testin &= !(__mode & ios_base::out);
      __testout &= !(__mode & ios_base::in);



      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !__off) && (__testin || __testout || __testboth))
 {
   _M_update_egptr();

   off_type __newoffi = __off;
   off_type __newoffo = __newoffi;
   if (__way == ios_base::cur)
     {
       __newoffi += this->gptr() - __beg;
       __newoffo += this->pptr() - __beg;
     }
   else if (__way == ios_base::end)
     __newoffo = __newoffi += this->egptr() - __beg;

   if ((__testin || __testboth)
       && __newoffi >= 0
       && this->egptr() - __beg >= __newoffi)
     {
       this->setg(this->eback(), this->eback() + __newoffi,
    this->egptr());
       __ret = pos_type(__newoffi);
     }
   if ((__testout || __testboth)
       && __newoffo >= 0
       && this->egptr() - __beg >= __newoffo)
     {
       _M_pbump(this->pbase(), this->epptr(), __newoffo);
       __ret = pos_type(__newoffo);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekpos(pos_type __sp, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      const bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      const bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;

      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !off_type(__sp)) && (__testin || __testout))
 {
   _M_update_egptr();

   const off_type __pos(__sp);
   const bool __testpos = (0 <= __pos
      && __pos <= this->egptr() - __beg);
   if (__testpos)
     {
       if (__testin)
  this->setg(this->eback(), this->eback() + __pos,
      this->egptr());
       if (__testout)
  _M_pbump(this->pbase(), this->epptr(), __pos);
       __ret = __sp;
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    _M_sync(char_type* __base, __size_type __i, __size_type __o)
    {
      const bool __testin = _M_mode & ios_base::in;
      const bool __testout = _M_mode & ios_base::out;
      char_type* __endg = __base + _M_string.size();
      char_type* __endp = __base + _M_string.capacity();

      if (__base != _M_string.data())
 {

   __endg += __i;
   __i = 0;
   __endp = __endg;
 }

      if (__testin)
 this->setg(__base, __base + __i, __endg);
      if (__testout)
 {
   _M_pbump(__base, __endp, __o);



   if (!__testin)
     this->setg(__endg, __endg, __endg);
 }
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off)
    {
      this->setp(__pbeg, __pend);
      while (__off > __gnu_cxx::__numeric_traits<int>::__max)
 {
   this->pbump(__gnu_cxx::__numeric_traits<int>::__max);
   __off -= __gnu_cxx::__numeric_traits<int>::__max;
 }
      this->pbump(__off);
    }




  extern template class basic_stringbuf<char>;
  extern template class basic_istringstream<char>;
  extern template class basic_ostringstream<char>;
  extern template class basic_stringstream<char>;


  extern template class basic_stringbuf<wchar_t>;
  extern template class basic_istringstream<wchar_t>;
  extern template class basic_ostringstream<wchar_t>;
  extern template class basic_stringstream<wchar_t>;




}

#pragma GCC diagnostic pop
# 1256 "/usr/include/c++/15.1.1/sstream" 2 3
# 26 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-common.h" 2






# 1 "/usr/include/c++/15.1.1/unordered_set" 1 3
# 30 "/usr/include/c++/15.1.1/unordered_set" 3
#define _GLIBCXX_UNORDERED_SET 1
# 43 "/usr/include/c++/15.1.1/unordered_set" 3
# 1 "/usr/include/c++/15.1.1/bits/unordered_set.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
#define _UNORDERED_SET_H 
# 41 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{




  template<bool _Cache>
    using __uset_traits = __detail::_Hashtable_traits<_Cache, true, true>;

  template<typename _Value,
    typename _Hash = hash<_Value>,
    typename _Pred = std::equal_to<_Value>,
      typename _Alloc = std::allocator<_Value>,
    typename _Tr = __uset_traits<__cache_default<_Value, _Hash>::value>>
    using __uset_hashtable = _Hashtable<_Value, _Value, _Alloc,
     __detail::_Identity, _Pred, _Hash,
     __detail::_Mod_range_hashing,
     __detail::_Default_ranged_hash,
     __detail::_Prime_rehash_policy, _Tr>;


  template<bool _Cache>
    using __umset_traits = __detail::_Hashtable_traits<_Cache, true, false>;

  template<typename _Value,
    typename _Hash = hash<_Value>,
    typename _Pred = std::equal_to<_Value>,
    typename _Alloc = std::allocator<_Value>,
    typename _Tr = __umset_traits<__cache_default<_Value, _Hash>::value>>
    using __umset_hashtable = _Hashtable<_Value, _Value, _Alloc,
      __detail::_Identity,
      _Pred, _Hash,
      __detail::_Mod_range_hashing,
      __detail::_Default_ranged_hash,
      __detail::_Prime_rehash_policy, _Tr>;

  template<class _Value, class _Hash, class _Pred, class _Alloc>
    class unordered_multiset;
# 103 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
  template<typename _Value,
    typename _Hash = hash<_Value>,
    typename _Pred = equal_to<_Value>,
    typename _Alloc = allocator<_Value>>
    class unordered_set
    {
      typedef __uset_hashtable<_Value, _Hash, _Pred, _Alloc> _Hashtable;
      _Hashtable _M_h;

    public:



      typedef typename _Hashtable::key_type key_type;
      typedef typename _Hashtable::value_type value_type;
      typedef typename _Hashtable::hasher hasher;
      typedef typename _Hashtable::key_equal key_equal;
      typedef typename _Hashtable::allocator_type allocator_type;




      typedef typename _Hashtable::pointer pointer;
      typedef typename _Hashtable::const_pointer const_pointer;
      typedef typename _Hashtable::reference reference;
      typedef typename _Hashtable::const_reference const_reference;
      typedef typename _Hashtable::iterator iterator;
      typedef typename _Hashtable::const_iterator const_iterator;
      typedef typename _Hashtable::local_iterator local_iterator;
      typedef typename _Hashtable::const_local_iterator const_local_iterator;
      typedef typename _Hashtable::size_type size_type;
      typedef typename _Hashtable::difference_type difference_type;



      using node_type = typename _Hashtable::node_type;
      using insert_return_type = typename _Hashtable::insert_return_type;





      unordered_set() = default;
# 154 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      explicit
      unordered_set(size_type __n,
      const hasher& __hf = hasher(),
      const key_equal& __eql = key_equal(),
      const allocator_type& __a = allocator_type())
      : _M_h(__n, __hf, __eql, __a)
      { }
# 175 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      template<typename _InputIterator>
 unordered_set(_InputIterator __first, _InputIterator __last,
        size_type __n = 0,
        const hasher& __hf = hasher(),
        const key_equal& __eql = key_equal(),
        const allocator_type& __a = allocator_type())
 : _M_h(__first, __last, __n, __hf, __eql, __a)
 { }


      unordered_set(const unordered_set&) = default;


      unordered_set(unordered_set&&) = default;





      explicit
      unordered_set(const allocator_type& __a)
      : _M_h(__a)
      { }






      unordered_set(const unordered_set& __uset,
      const allocator_type& __a)
      : _M_h(__uset._M_h, __a)
      { }






      unordered_set(unordered_set&& __uset,
      const allocator_type& __a)
 noexcept( noexcept(_Hashtable(std::move(__uset._M_h), __a)) )
      : _M_h(std::move(__uset._M_h), __a)
      { }
# 231 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      unordered_set(initializer_list<value_type> __l,
      size_type __n = 0,
      const hasher& __hf = hasher(),
      const key_equal& __eql = key_equal(),
      const allocator_type& __a = allocator_type())
      : _M_h(__l, __n, __hf, __eql, __a)
      { }

      unordered_set(size_type __n, const allocator_type& __a)
      : unordered_set(__n, hasher(), key_equal(), __a)
      { }

      unordered_set(size_type __n, const hasher& __hf,
      const allocator_type& __a)
      : unordered_set(__n, __hf, key_equal(), __a)
      { }

      template<typename _InputIterator>
 unordered_set(_InputIterator __first, _InputIterator __last,
        size_type __n,
        const allocator_type& __a)
 : unordered_set(__first, __last, __n, hasher(), key_equal(), __a)
 { }

      template<typename _InputIterator>
 unordered_set(_InputIterator __first, _InputIterator __last,
        size_type __n, const hasher& __hf,
        const allocator_type& __a)
 : unordered_set(__first, __last, __n, __hf, key_equal(), __a)
 { }

      unordered_set(initializer_list<value_type> __l,
      size_type __n,
      const allocator_type& __a)
      : unordered_set(__l, __n, hasher(), key_equal(), __a)
      { }

      unordered_set(initializer_list<value_type> __l,
      size_type __n, const hasher& __hf,
      const allocator_type& __a)
      : unordered_set(__l, __n, __hf, key_equal(), __a)
      { }
# 318 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      unordered_set&
      operator=(const unordered_set&) = default;


      unordered_set&
      operator=(unordered_set&&) = default;
# 336 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      unordered_set&
      operator=(initializer_list<value_type> __l)
      {
 _M_h = __l;
 return *this;
      }


      allocator_type
      get_allocator() const noexcept
      { return _M_h.get_allocator(); }




      [[__nodiscard__]] bool
      empty() const noexcept
      { return _M_h.empty(); }


      size_type
      size() const noexcept
      { return _M_h.size(); }


      size_type
      max_size() const noexcept
      { return _M_h.max_size(); }
# 372 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      iterator
      begin() noexcept
      { return _M_h.begin(); }

      const_iterator
      begin() const noexcept
      { return _M_h.begin(); }







      iterator
      end() noexcept
      { return _M_h.end(); }

      const_iterator
      end() const noexcept
      { return _M_h.end(); }






      const_iterator
      cbegin() const noexcept
      { return _M_h.begin(); }





      const_iterator
      cend() const noexcept
      { return _M_h.end(); }
# 428 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      template<typename... _Args>
 std::pair<iterator, bool>
 emplace(_Args&&... __args)
 { return _M_h.emplace(std::forward<_Args>(__args)...); }
# 454 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 { return _M_h.emplace_hint(__pos, std::forward<_Args>(__args)...); }
# 473 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      std::pair<iterator, bool>
      insert(const value_type& __x)
      { return _M_h.insert(__x); }

      std::pair<iterator, bool>
      insert(value_type&& __x)
      { return _M_h.insert(std::move(__x)); }
# 502 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      iterator
      insert(const_iterator __hint, const value_type& __x)
      { return _M_h.insert(__hint, __x); }

      iterator
      insert(const_iterator __hint, value_type&& __x)
      { return _M_h.insert(__hint, std::move(__x)); }
# 520 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 { _M_h.insert(__first, __last); }
# 532 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      void
      insert(initializer_list<value_type> __l)
      { _M_h.insert(__l); }
# 556 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      node_type
      extract(const_iterator __pos)
      {
 do { if (std::__is_constant_evaluated() && !bool(__pos != end())) std::__glibcxx_assert_fail(); } while (false);
 return _M_h.extract(__pos);
      }


      node_type
      extract(const key_type& __key)
      { return _M_h.extract(__key); }


      insert_return_type
      insert(node_type&& __nh)
      { return _M_h._M_reinsert_node(std::move(__nh)); }


      iterator
      insert(const_iterator, node_type&& __nh)
      { return _M_h._M_reinsert_node(std::move(__nh)).position; }
# 593 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_h.erase(__position); }


      iterator
      erase(iterator __position)
      { return _M_h.erase(__position); }
# 615 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_h.erase(__x); }
# 633 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_h.erase(__first, __last); }







      void
      clear() noexcept
      { _M_h.clear(); }
# 656 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      void
      swap(unordered_set& __x)
      noexcept( noexcept(_M_h.swap(__x._M_h)) )
      { _M_h.swap(__x._M_h); }


      template<typename, typename, typename>
 friend class std::_Hash_merge_helper;

      template<typename _H2, typename _P2>
 void
 merge(unordered_set<_Value, _H2, _P2, _Alloc>& __source)
 {
   if constexpr (is_same_v<_H2, _Hash> && is_same_v<_P2, _Pred>)
     if (std::__addressof(__source) == this) [[__unlikely__]]
       return;

   using _Merge_helper = _Hash_merge_helper<unordered_set, _H2, _P2>;
   _M_h._M_merge_unique(_Merge_helper::_S_get_table(__source));
 }

      template<typename _H2, typename _P2>
 void
 merge(unordered_set<_Value, _H2, _P2, _Alloc>&& __source)
 {
   using _Merge_helper = _Hash_merge_helper<unordered_set, _H2, _P2>;
   _M_h._M_merge_unique(_Merge_helper::_S_get_table(__source));
 }

      template<typename _H2, typename _P2>
 void
 merge(unordered_multiset<_Value, _H2, _P2, _Alloc>& __source)
 {
   using _Merge_helper = _Hash_merge_helper<unordered_set, _H2, _P2>;
   _M_h._M_merge_unique(_Merge_helper::_S_get_table(__source));
 }

      template<typename _H2, typename _P2>
 void
 merge(unordered_multiset<_Value, _H2, _P2, _Alloc>&& __source)
 { merge(__source); }






      hasher
      hash_function() const
      { return _M_h.hash_function(); }



      key_equal
      key_eq() const
      { return _M_h.key_eq(); }
# 727 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      iterator
      find(const key_type& __x)
      { return _M_h.find(__x); }
# 739 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_h.find(__x); }
# 762 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_h.count(__x); }
# 803 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_h.equal_range(__x); }
# 815 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_h.equal_range(__x); }
# 831 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      size_type
      bucket_count() const noexcept
      { return _M_h.bucket_count(); }


      size_type
      max_bucket_count() const noexcept
      { return _M_h.max_bucket_count(); }






      size_type
      bucket_size(size_type __n) const
      { return _M_h.bucket_size(__n); }






      size_type
      bucket(const key_type& __key) const
      { return _M_h.bucket(__key); }
# 865 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      local_iterator
      begin(size_type __n)
      { return _M_h.begin(__n); }

      const_local_iterator
      begin(size_type __n) const
      { return _M_h.begin(__n); }

      const_local_iterator
      cbegin(size_type __n) const
      { return _M_h.cbegin(__n); }
# 885 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      local_iterator
      end(size_type __n)
      { return _M_h.end(__n); }

      const_local_iterator
      end(size_type __n) const
      { return _M_h.end(__n); }

      const_local_iterator
      cend(size_type __n) const
      { return _M_h.cend(__n); }





      float
      load_factor() const noexcept
      { return _M_h.load_factor(); }



      float
      max_load_factor() const noexcept
      { return _M_h.max_load_factor(); }





      void
      max_load_factor(float __z)
      { _M_h.max_load_factor(__z); }
# 926 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      void
      rehash(size_type __n)
      { _M_h.rehash(__n); }
# 937 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      void
      reserve(size_type __n)
      { _M_h.reserve(__n); }

      template<typename _Value1, typename _Hash1, typename _Pred1,
        typename _Alloc1>
        friend bool
        operator==(const unordered_set<_Value1, _Hash1, _Pred1, _Alloc1>&,
     const unordered_set<_Value1, _Hash1, _Pred1, _Alloc1>&);
    };



  template<typename _InputIterator,
    typename _Hash =
      hash<typename iterator_traits<_InputIterator>::value_type>,
    typename _Pred =
      equal_to<typename iterator_traits<_InputIterator>::value_type>,
    typename _Allocator =
      allocator<typename iterator_traits<_InputIterator>::value_type>,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireNotAllocatorOrIntegral<_Hash>,
    typename = _RequireNotAllocator<_Pred>,
    typename = _RequireAllocator<_Allocator>>
    unordered_set(_InputIterator, _InputIterator,
    unordered_set<int>::size_type = {},
    _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())
    -> unordered_set<typename iterator_traits<_InputIterator>::value_type,
       _Hash, _Pred, _Allocator>;

  template<typename _Tp, typename _Hash = hash<_Tp>,
    typename _Pred = equal_to<_Tp>,
    typename _Allocator = allocator<_Tp>,
    typename = _RequireNotAllocatorOrIntegral<_Hash>,
    typename = _RequireNotAllocator<_Pred>,
    typename = _RequireAllocator<_Allocator>>
    unordered_set(initializer_list<_Tp>,
    unordered_set<int>::size_type = {},
    _Hash = _Hash(), _Pred = _Pred(), _Allocator = _Allocator())
    -> unordered_set<_Tp, _Hash, _Pred, _Allocator>;

  template<typename _InputIterator, typename _Allocator,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireAllocator<_Allocator>>
    unordered_set(_InputIterator, _InputIterator,
    unordered_set<int>::size_type, _Allocator)
    -> unordered_set<typename iterator_traits<_InputIterator>::value_type,
       hash<
         typename iterator_traits<_InputIterator>::value_type>,
       equal_to<
         typename iterator_traits<_InputIterator>::value_type>,
       _Allocator>;

  template<typename _InputIterator, typename _Hash, typename _Allocator,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireNotAllocatorOrIntegral<_Hash>,
    typename = _RequireAllocator<_Allocator>>
    unordered_set(_InputIterator, _InputIterator,
    unordered_set<int>::size_type,
    _Hash, _Allocator)
    -> unordered_set<typename iterator_traits<_InputIterator>::value_type,
       _Hash,
       equal_to<
         typename iterator_traits<_InputIterator>::value_type>,
       _Allocator>;

  template<typename _Tp, typename _Allocator,
    typename = _RequireAllocator<_Allocator>>
    unordered_set(initializer_list<_Tp>,
    unordered_set<int>::size_type, _Allocator)
    -> unordered_set<_Tp, hash<_Tp>, equal_to<_Tp>, _Allocator>;

  template<typename _Tp, typename _Hash, typename _Allocator,
    typename = _RequireNotAllocatorOrIntegral<_Hash>,
    typename = _RequireAllocator<_Allocator>>
    unordered_set(initializer_list<_Tp>,
    unordered_set<int>::size_type, _Hash, _Allocator)
    -> unordered_set<_Tp, _Hash, equal_to<_Tp>, _Allocator>;
# 1074 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
  template<typename _Value,
    typename _Hash = hash<_Value>,
    typename _Pred = equal_to<_Value>,
    typename _Alloc = allocator<_Value>>
    class unordered_multiset
    {
      typedef __umset_hashtable<_Value, _Hash, _Pred, _Alloc> _Hashtable;
      _Hashtable _M_h;

    public:



      typedef typename _Hashtable::key_type key_type;
      typedef typename _Hashtable::value_type value_type;
      typedef typename _Hashtable::hasher hasher;
      typedef typename _Hashtable::key_equal key_equal;
      typedef typename _Hashtable::allocator_type allocator_type;




      typedef typename _Hashtable::pointer pointer;
      typedef typename _Hashtable::const_pointer const_pointer;
      typedef typename _Hashtable::reference reference;
      typedef typename _Hashtable::const_reference const_reference;
      typedef typename _Hashtable::iterator iterator;
      typedef typename _Hashtable::const_iterator const_iterator;
      typedef typename _Hashtable::local_iterator local_iterator;
      typedef typename _Hashtable::const_local_iterator const_local_iterator;
      typedef typename _Hashtable::size_type size_type;
      typedef typename _Hashtable::difference_type difference_type;



      using node_type = typename _Hashtable::node_type;





      unordered_multiset() = default;
# 1124 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      explicit
      unordered_multiset(size_type __n,
    const hasher& __hf = hasher(),
    const key_equal& __eql = key_equal(),
    const allocator_type& __a = allocator_type())
      : _M_h(__n, __hf, __eql, __a)
      { }
# 1145 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      template<typename _InputIterator>
 unordered_multiset(_InputIterator __first, _InputIterator __last,
      size_type __n = 0,
      const hasher& __hf = hasher(),
      const key_equal& __eql = key_equal(),
      const allocator_type& __a = allocator_type())
 : _M_h(__first, __last, __n, __hf, __eql, __a)
 { }


      unordered_multiset(const unordered_multiset&) = default;


      unordered_multiset(unordered_multiset&&) = default;
# 1171 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      unordered_multiset(initializer_list<value_type> __l,
    size_type __n = 0,
    const hasher& __hf = hasher(),
    const key_equal& __eql = key_equal(),
    const allocator_type& __a = allocator_type())
      : _M_h(__l, __n, __hf, __eql, __a)
      { }


      unordered_multiset&
      operator=(const unordered_multiset&) = default;


      unordered_multiset&
      operator=(unordered_multiset&&) = default;





      explicit
      unordered_multiset(const allocator_type& __a)
      : _M_h(__a)
      { }






      unordered_multiset(const unordered_multiset& __umset,
    const allocator_type& __a)
      : _M_h(__umset._M_h, __a)
      { }






      unordered_multiset(unordered_multiset&& __umset,
    const allocator_type& __a)
 noexcept( noexcept(_Hashtable(std::move(__umset._M_h), __a)) )
      : _M_h(std::move(__umset._M_h), __a)
      { }

      unordered_multiset(size_type __n, const allocator_type& __a)
      : unordered_multiset(__n, hasher(), key_equal(), __a)
      { }

      unordered_multiset(size_type __n, const hasher& __hf,
    const allocator_type& __a)
      : unordered_multiset(__n, __hf, key_equal(), __a)
      { }

      template<typename _InputIterator>
 unordered_multiset(_InputIterator __first, _InputIterator __last,
      size_type __n,
      const allocator_type& __a)
 : unordered_multiset(__first, __last, __n, hasher(), key_equal(), __a)
 { }

      template<typename _InputIterator>
 unordered_multiset(_InputIterator __first, _InputIterator __last,
      size_type __n, const hasher& __hf,
      const allocator_type& __a)
 : unordered_multiset(__first, __last, __n, __hf, key_equal(), __a)
 { }

      unordered_multiset(initializer_list<value_type> __l,
    size_type __n,
    const allocator_type& __a)
      : unordered_multiset(__l, __n, hasher(), key_equal(), __a)
      { }

      unordered_multiset(initializer_list<value_type> __l,
    size_type __n, const hasher& __hf,
    const allocator_type& __a)
      : unordered_multiset(__l, __n, __hf, key_equal(), __a)
      { }
# 1308 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      unordered_multiset&
      operator=(initializer_list<value_type> __l)
      {
 _M_h = __l;
 return *this;
      }


      allocator_type
      get_allocator() const noexcept
      { return _M_h.get_allocator(); }




      [[__nodiscard__]] bool
      empty() const noexcept
      { return _M_h.empty(); }


      size_type
      size() const noexcept
      { return _M_h.size(); }


      size_type
      max_size() const noexcept
      { return _M_h.max_size(); }
# 1344 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      iterator
      begin() noexcept
      { return _M_h.begin(); }

      const_iterator
      begin() const noexcept
      { return _M_h.begin(); }







      iterator
      end() noexcept
      { return _M_h.end(); }

      const_iterator
      end() const noexcept
      { return _M_h.end(); }






      const_iterator
      cbegin() const noexcept
      { return _M_h.begin(); }





      const_iterator
      cend() const noexcept
      { return _M_h.end(); }
# 1392 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      template<typename... _Args>
 iterator
 emplace(_Args&&... __args)
 { return _M_h.emplace(std::forward<_Args>(__args)...); }
# 1414 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 { return _M_h.emplace_hint(__pos, std::forward<_Args>(__args)...); }
# 1427 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      iterator
      insert(const value_type& __x)
      { return _M_h.insert(__x); }

      iterator
      insert(value_type&& __x)
      { return _M_h.insert(std::move(__x)); }
# 1453 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      iterator
      insert(const_iterator __hint, const value_type& __x)
      { return _M_h.insert(__hint, __x); }

      iterator
      insert(const_iterator __hint, value_type&& __x)
      { return _M_h.insert(__hint, std::move(__x)); }
# 1470 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 { _M_h.insert(__first, __last); }
# 1482 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      void
      insert(initializer_list<value_type> __l)
      { _M_h.insert(__l); }
# 1514 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      node_type
      extract(const_iterator __pos)
      {
 do { if (std::__is_constant_evaluated() && !bool(__pos != end())) std::__glibcxx_assert_fail(); } while (false);
 return _M_h.extract(__pos);
      }


      node_type
      extract(const key_type& __key)
      { return _M_h.extract(__key); }


      iterator
      insert(node_type&& __nh)
      { return _M_h._M_reinsert_node_multi(cend(), std::move(__nh)); }


      iterator
      insert(const_iterator __hint, node_type&& __nh)
      { return _M_h._M_reinsert_node_multi(__hint, std::move(__nh)); }
# 1552 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_h.erase(__position); }


      iterator
      erase(iterator __position)
      { return _M_h.erase(__position); }
# 1575 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_h.erase(__x); }
# 1595 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_h.erase(__first, __last); }
# 1606 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      void
      clear() noexcept
      { _M_h.clear(); }
# 1619 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      void
      swap(unordered_multiset& __x)
      noexcept( noexcept(_M_h.swap(__x._M_h)) )
      { _M_h.swap(__x._M_h); }


      template<typename, typename, typename>
 friend class std::_Hash_merge_helper;

      template<typename _H2, typename _P2>
 void
 merge(unordered_multiset<_Value, _H2, _P2, _Alloc>& __source)
 {
   if constexpr (is_same_v<_H2, _Hash> && is_same_v<_P2, _Pred>)
     if (std::__addressof(__source) == this) [[__unlikely__]]
       return;

   using _Merge_helper
     = _Hash_merge_helper<unordered_multiset, _H2, _P2>;
   _M_h._M_merge_multi(_Merge_helper::_S_get_table(__source));
 }

      template<typename _H2, typename _P2>
 void
 merge(unordered_multiset<_Value, _H2, _P2, _Alloc>&& __source)
 {
   using _Merge_helper
     = _Hash_merge_helper<unordered_multiset, _H2, _P2>;
   _M_h._M_merge_multi(_Merge_helper::_S_get_table(__source));
 }

      template<typename _H2, typename _P2>
 void
 merge(unordered_set<_Value, _H2, _P2, _Alloc>& __source)
 {
   using _Merge_helper
     = _Hash_merge_helper<unordered_multiset, _H2, _P2>;
   _M_h._M_merge_multi(_Merge_helper::_S_get_table(__source));
 }

      template<typename _H2, typename _P2>
 void
 merge(unordered_set<_Value, _H2, _P2, _Alloc>&& __source)
 { merge(__source); }






      hasher
      hash_function() const
      { return _M_h.hash_function(); }



      key_equal
      key_eq() const
      { return _M_h.key_eq(); }
# 1693 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      iterator
      find(const key_type& __x)
      { return _M_h.find(__x); }
# 1705 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_h.find(__x); }
# 1724 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_h.count(__x); }
# 1762 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_h.equal_range(__x); }
# 1774 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_h.equal_range(__x); }
# 1790 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      size_type
      bucket_count() const noexcept
      { return _M_h.bucket_count(); }


      size_type
      max_bucket_count() const noexcept
      { return _M_h.max_bucket_count(); }






      size_type
      bucket_size(size_type __n) const
      { return _M_h.bucket_size(__n); }






      size_type
      bucket(const key_type& __key) const
      { return _M_h.bucket(__key); }
# 1824 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      local_iterator
      begin(size_type __n)
      { return _M_h.begin(__n); }

      const_local_iterator
      begin(size_type __n) const
      { return _M_h.begin(__n); }

      const_local_iterator
      cbegin(size_type __n) const
      { return _M_h.cbegin(__n); }
# 1844 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      local_iterator
      end(size_type __n)
      { return _M_h.end(__n); }

      const_local_iterator
      end(size_type __n) const
      { return _M_h.end(__n); }

      const_local_iterator
      cend(size_type __n) const
      { return _M_h.cend(__n); }





      float
      load_factor() const noexcept
      { return _M_h.load_factor(); }



      float
      max_load_factor() const noexcept
      { return _M_h.max_load_factor(); }





      void
      max_load_factor(float __z)
      { _M_h.max_load_factor(__z); }
# 1885 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      void
      rehash(size_type __n)
      { _M_h.rehash(__n); }
# 1896 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
      void
      reserve(size_type __n)
      { _M_h.reserve(__n); }

      template<typename _Value1, typename _Hash1, typename _Pred1,
        typename _Alloc1>
        friend bool
      operator==(const unordered_multiset<_Value1, _Hash1, _Pred1, _Alloc1>&,
   const unordered_multiset<_Value1, _Hash1, _Pred1, _Alloc1>&);
    };




  template<typename _InputIterator,
    typename _Hash =
      hash<typename iterator_traits<_InputIterator>::value_type>,
    typename _Pred =
      equal_to<typename iterator_traits<_InputIterator>::value_type>,
    typename _Allocator =
      allocator<typename iterator_traits<_InputIterator>::value_type>,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireNotAllocatorOrIntegral<_Hash>,
    typename = _RequireNotAllocator<_Pred>,
    typename = _RequireAllocator<_Allocator>>
    unordered_multiset(_InputIterator, _InputIterator,
         unordered_multiset<int>::size_type = {},
         _Hash = _Hash(), _Pred = _Pred(),
         _Allocator = _Allocator())
    -> unordered_multiset<typename iterator_traits<_InputIterator>::value_type,
                          _Hash, _Pred, _Allocator>;

  template<typename _Tp, typename _Hash = hash<_Tp>,
    typename _Pred = equal_to<_Tp>,
    typename _Allocator = allocator<_Tp>,
    typename = _RequireNotAllocatorOrIntegral<_Hash>,
    typename = _RequireNotAllocator<_Pred>,
    typename = _RequireAllocator<_Allocator>>
    unordered_multiset(initializer_list<_Tp>,
         unordered_multiset<int>::size_type = {},
         _Hash = _Hash(), _Pred = _Pred(),
         _Allocator = _Allocator())
    -> unordered_multiset<_Tp, _Hash, _Pred, _Allocator>;

  template<typename _InputIterator, typename _Allocator,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireAllocator<_Allocator>>
    unordered_multiset(_InputIterator, _InputIterator,
         unordered_multiset<int>::size_type, _Allocator)
    -> unordered_multiset<typename iterator_traits<_InputIterator>::value_type,
     hash<typename
          iterator_traits<_InputIterator>::value_type>,
     equal_to<typename
       iterator_traits<_InputIterator>::value_type>,
     _Allocator>;

  template<typename _InputIterator, typename _Hash, typename _Allocator,
    typename = _RequireInputIter<_InputIterator>,
    typename = _RequireNotAllocatorOrIntegral<_Hash>,
    typename = _RequireAllocator<_Allocator>>
    unordered_multiset(_InputIterator, _InputIterator,
         unordered_multiset<int>::size_type,
         _Hash, _Allocator)
    -> unordered_multiset<typename
     iterator_traits<_InputIterator>::value_type,
     _Hash,
     equal_to<
       typename
       iterator_traits<_InputIterator>::value_type>,
     _Allocator>;

  template<typename _Tp, typename _Allocator,
    typename = _RequireAllocator<_Allocator>>
    unordered_multiset(initializer_list<_Tp>,
         unordered_multiset<int>::size_type, _Allocator)
    -> unordered_multiset<_Tp, hash<_Tp>, equal_to<_Tp>, _Allocator>;

  template<typename _Tp, typename _Hash, typename _Allocator,
    typename = _RequireNotAllocatorOrIntegral<_Hash>,
    typename = _RequireAllocator<_Allocator>>
    unordered_multiset(initializer_list<_Tp>,
         unordered_multiset<int>::size_type, _Hash, _Allocator)
    -> unordered_multiset<_Tp, _Hash, equal_to<_Tp>, _Allocator>;
# 2020 "/usr/include/c++/15.1.1/bits/unordered_set.h" 3
  template<class _Value, class _Hash, class _Pred, class _Alloc>
    inline void
    swap(unordered_set<_Value, _Hash, _Pred, _Alloc>& __x,
  unordered_set<_Value, _Hash, _Pred, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }

  template<class _Value, class _Hash, class _Pred, class _Alloc>
    inline void
    swap(unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __x,
  unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }

  template<class _Value, class _Hash, class _Pred, class _Alloc>
    inline bool
    operator==(const unordered_set<_Value, _Hash, _Pred, _Alloc>& __x,
        const unordered_set<_Value, _Hash, _Pred, _Alloc>& __y)
    { return __x._M_h._M_equal(__y._M_h); }


  template<class _Value, class _Hash, class _Pred, class _Alloc>
    inline bool
    operator!=(const unordered_set<_Value, _Hash, _Pred, _Alloc>& __x,
        const unordered_set<_Value, _Hash, _Pred, _Alloc>& __y)
    { return !(__x == __y); }


  template<class _Value, class _Hash, class _Pred, class _Alloc>
    inline bool
    operator==(const unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __x,
        const unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __y)
    { return __x._M_h._M_equal(__y._M_h); }


  template<class _Value, class _Hash, class _Pred, class _Alloc>
    inline bool
    operator!=(const unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __x,
        const unordered_multiset<_Value, _Hash, _Pred, _Alloc>& __y)
    { return !(__x == __y); }






  template<typename _Val, typename _Hash1, typename _Eq1, typename _Alloc,
    typename _Hash2, typename _Eq2>
    struct _Hash_merge_helper<
      std::unordered_set<_Val, _Hash1, _Eq1, _Alloc>, _Hash2, _Eq2>
    {
    private:
      template<typename... _Tp>
 using unordered_set = std::unordered_set<_Tp...>;
      template<typename... _Tp>
 using unordered_multiset = std::unordered_multiset<_Tp...>;

      friend unordered_set<_Val, _Hash1, _Eq1, _Alloc>;

      static auto&
      _S_get_table(unordered_set<_Val, _Hash2, _Eq2, _Alloc>& __set)
      { return __set._M_h; }

      static auto&
      _S_get_table(unordered_multiset<_Val, _Hash2, _Eq2, _Alloc>& __set)
      { return __set._M_h; }
    };


  template<typename _Val, typename _Hash1, typename _Eq1, typename _Alloc,
    typename _Hash2, typename _Eq2>
    struct _Hash_merge_helper<
      std::unordered_multiset<_Val, _Hash1, _Eq1, _Alloc>,
      _Hash2, _Eq2>
    {
    private:
      template<typename... _Tp>
 using unordered_set = std::unordered_set<_Tp...>;
      template<typename... _Tp>
 using unordered_multiset = std::unordered_multiset<_Tp...>;

      friend unordered_multiset<_Val, _Hash1, _Eq1, _Alloc>;

      static auto&
      _S_get_table(unordered_set<_Val, _Hash2, _Eq2, _Alloc>& __set)
      { return __set._M_h; }

      static auto&
      _S_get_table(unordered_multiset<_Val, _Hash2, _Eq2, _Alloc>& __set)
      { return __set._M_h; }
    };



}
# 44 "/usr/include/c++/15.1.1/unordered_set" 2 3







#define __glibcxx_want_allocator_traits_is_always_equal 
#define __glibcxx_want_containers_ranges 
#define __glibcxx_want_erase_if 
#define __glibcxx_want_generic_unordered_lookup 
#define __glibcxx_want_node_extract 
#define __glibcxx_want_nonmember_container_access 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 58 "/usr/include/c++/15.1.1/unordered_set" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{

  namespace pmr
  {
    template<typename _Key, typename _Hash = std::hash<_Key>,
      typename _Pred = std::equal_to<_Key>>
      using unordered_set
 = std::unordered_set<_Key, _Hash, _Pred,
        polymorphic_allocator<_Key>>;
    template<typename _Key, typename _Hash = std::hash<_Key>,
      typename _Pred = std::equal_to<_Key>>
      using unordered_multiset
 = std::unordered_multiset<_Key, _Hash, _Pred,
      polymorphic_allocator<_Key>>;
  }

}
# 33 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-common.h" 2
# 1 "/usr/include/c++/15.1.1/utility" 1 3
# 56 "/usr/include/c++/15.1.1/utility" 3
#define _GLIBCXX_UTILITY 1
# 70 "/usr/include/c++/15.1.1/utility" 3
# 1 "/usr/include/c++/15.1.1/bits/stl_relops.h" 1 3
# 60 "/usr/include/c++/15.1.1/bits/stl_relops.h" 3
#define _STL_RELOPS_H 1

namespace std __attribute__ ((__visibility__ ("default")))
{


  namespace rel_ops
  {
# 86 "/usr/include/c++/15.1.1/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 99 "/usr/include/c++/15.1.1/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 112 "/usr/include/c++/15.1.1/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 125 "/usr/include/c++/15.1.1/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }
  }


}
# 71 "/usr/include/c++/15.1.1/utility" 2 3
# 88 "/usr/include/c++/15.1.1/utility" 3
#define __glibcxx_want_addressof_constexpr 
#define __glibcxx_want_as_const 
#define __glibcxx_want_constexpr_algorithms 
#define __glibcxx_want_constexpr_utility 
#define __glibcxx_want_exchange_function 
#define __glibcxx_want_forward_like 
#define __glibcxx_want_integer_comparison_functions 
#define __glibcxx_want_integer_sequence 
#define __glibcxx_want_ranges_zip 
#define __glibcxx_want_to_underlying 
#define __glibcxx_want_tuple_element_t 
#define __glibcxx_want_tuples_by_type 
#define __glibcxx_want_unreachable 
#define __glibcxx_want_tuple_like 
#define __glibcxx_want_constrained_equality 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 104 "/usr/include/c++/15.1.1/utility" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template <typename _Tp, typename _Up = _Tp>
   
    inline _Tp
    exchange(_Tp& __obj, _Up&& __new_val)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
      is_nothrow_assignable<_Tp&, _Up>>::value)
    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }



  template<typename _Tp>
    [[nodiscard]]
    constexpr add_const_t<_Tp>&
    as_const(_Tp& __t) noexcept
    { return __t; }

  template<typename _Tp>
    void as_const(const _Tp&&) = delete;
# 237 "/usr/include/c++/15.1.1/utility" 3

}
# 34 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-common.h" 2
# 72 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-common.h"
#define ANTLR4CPP_PUBLIC __attribute__ ((visibility ("default")))






#define ANTLR4CPP_HAVE_BUILTIN(x) __has_builtin(x)




#define ANTLR4CPP_INTERNAL_STRINGIFY(x) #x
#define ANTLR4CPP_STRINGIFY(x) ANTLR4CPP_INTERNAL_STRINGIFY(x)



#define ANTLR4CPP_USING_ABSEIL 0


# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/support/Declarations.h" 1





       


# 8 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/support/Declarations.h"
namespace antlr4 {
  class ANTLRErrorListener;
  class ANTLRErrorStrategy;
  class ANTLRFileStream;
  class ANTLRInputStream;
  class BailErrorStrategy;
  class BaseErrorListener;
  class BufferedTokenStream;
  class CharStream;
  class CommonToken;
  class CommonTokenFactory;
  class CommonTokenStream;
  class ConsoleErrorListener;
  class DefaultErrorStrategy;
  class DiagnosticErrorListener;
  class EmptyStackException;
  class FailedPredicateException;
  class IllegalArgumentException;
  class IllegalStateException;
  class InputMismatchException;
  class IntStream;
  class InterpreterRuleContext;
  class Lexer;
  class LexerInterpreter;
  class LexerNoViableAltException;
  class ListTokenSource;
  class NoSuchElementException;
  class NoViableAltException;
  class NullPointerException;
  class ParseCancellationException;
  class Parser;
  class ParserInterpreter;
  class ParserRuleContext;
  class ProxyErrorListener;
  class RecognitionException;
  class Recognizer;
  class RuleContext;
  class Token;
  template<typename Symbol> class TokenFactory;
  class TokenSource;
  class TokenStream;
  class TokenStreamRewriter;
  class UnbufferedCharStream;
  class UnbufferedTokenStream;
  class WritableToken;

  namespace misc {
    class InterpreterDataReader;
    class Interval;
    class IntervalSet;
    class MurmurHash;
    class Utils;
    class Predicate;
  }
  namespace atn {
    class ATN;
    class ATNConfig;
    class ATNConfigSet;
    class ATNDeserializationOptions;
    class ATNDeserializer;
    class ATNSerializer;
    class ATNSimulator;
    class ATNState;
    enum class ATNType;
    class ActionTransition;
    class ArrayPredictionContext;
    class AtomTransition;
    class BasicBlockStartState;
    class BasicState;
    class BlockEndState;
    class BlockStartState;
    class DecisionState;
    class EpsilonTransition;
    class LL1Analyzer;
    class LexerAction;
    class LexerActionExecutor;
    class LexerATNConfig;
    class LexerATNSimulator;
    class LexerMoreAction;
    class LexerPopModeAction;
    class LexerSkipAction;
    class LookaheadEventInfo;
    class LoopEndState;
    class NotSetTransition;
    class OrderedATNConfigSet;
    class ParseInfo;
    class ParserATNSimulator;
    class PlusBlockStartState;
    class PlusLoopbackState;
    class PrecedencePredicateTransition;
    class PredicateTransition;
    class PredictionContext;
    enum class PredictionMode;
    class PredictionModeClass;
    class RangeTransition;
    class RuleStartState;
    class RuleStopState;
    class RuleTransition;
    class SemanticContext;
    class SetTransition;
    class SingletonPredictionContext;
    class StarBlockStartState;
    class StarLoopEntryState;
    class StarLoopbackState;
    class TokensStartState;
    class Transition;
    class WildcardTransition;
  }
  namespace dfa {
    class DFA;
    class DFASerializer;
    class DFAState;
    class LexerDFASerializer;
    class Vocabulary;
  }
  namespace tree {
    class AbstractParseTreeVisitor;
    class ErrorNode;
    class ErrorNodeImpl;
    class ParseTree;
    class ParseTreeListener;
    template<typename T> class ParseTreeProperty;
    class ParseTreeVisitor;
    class ParseTreeWalker;
    class SyntaxTree;
    class TerminalNode;
    class TerminalNodeImpl;
    class Tree;
    class Trees;

    namespace pattern {
      class Chunk;
      class ParseTreeMatch;
      class ParseTreePattern;
      class ParseTreePatternMatcher;
      class RuleTagToken;
      class TagChunk;
      class TextChunk;
      class TokenTagToken;
    }

    namespace xpath {
      class XPath;
      class XPathElement;
      class XPathLexerErrorListener;
      class XPathRuleAnywhereElement;
      class XPathRuleElement;
      class XPathTokenAnywhereElement;
      class XPathTokenElement;
      class XPathWildcardAnywhereElement;
      class XPathWildcardElement;
    }
  }
}
# 93 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-common.h" 2




#undef EOF


#define INVALID_INDEX std::numeric_limits<size_t>::max()
template<class T> using Ref = std::shared_ptr<T>;
# 11 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ANTLRErrorListener.h" 1





       

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/RecognitionException.h" 1





       

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Exceptions.h" 1





       



namespace antlr4 {


  class __attribute__ ((visibility ("default"))) RuntimeException : public std::exception {
  private:
    std::string _message;
  public:
    RuntimeException(const std::string &msg = "");

    virtual const char* what() const noexcept override;
  };

  class __attribute__ ((visibility ("default"))) IllegalStateException : public RuntimeException {
  public:
    IllegalStateException(const std::string &msg = "") : RuntimeException(msg) {}
    IllegalStateException(IllegalStateException const&) = default;
    ~IllegalStateException();
    IllegalStateException& operator=(IllegalStateException const&) = default;
  };

  class __attribute__ ((visibility ("default"))) IllegalArgumentException : public RuntimeException {
  public:
    IllegalArgumentException(IllegalArgumentException const&) = default;
    IllegalArgumentException(const std::string &msg = "") : RuntimeException(msg) {}
    ~IllegalArgumentException();
    IllegalArgumentException& operator=(IllegalArgumentException const&) = default;
  };

  class __attribute__ ((visibility ("default"))) NullPointerException : public RuntimeException {
  public:
    NullPointerException(const std::string &msg = "") : RuntimeException(msg) {}
    NullPointerException(NullPointerException const&) = default;
    ~NullPointerException();
    NullPointerException& operator=(NullPointerException const&) = default;
  };

  class __attribute__ ((visibility ("default"))) IndexOutOfBoundsException : public RuntimeException {
  public:
    IndexOutOfBoundsException(const std::string &msg = "") : RuntimeException(msg) {}
    IndexOutOfBoundsException(IndexOutOfBoundsException const&) = default;
    ~IndexOutOfBoundsException();
    IndexOutOfBoundsException& operator=(IndexOutOfBoundsException const&) = default;
  };

  class __attribute__ ((visibility ("default"))) UnsupportedOperationException : public RuntimeException {
  public:
    UnsupportedOperationException(const std::string &msg = "") : RuntimeException(msg) {}
    UnsupportedOperationException(UnsupportedOperationException const&) = default;
    ~UnsupportedOperationException();
    UnsupportedOperationException& operator=(UnsupportedOperationException const&) = default;

  };

  class __attribute__ ((visibility ("default"))) EmptyStackException : public RuntimeException {
  public:
    EmptyStackException(const std::string &msg = "") : RuntimeException(msg) {}
    EmptyStackException(EmptyStackException const&) = default;
    ~EmptyStackException();
    EmptyStackException& operator=(EmptyStackException const&) = default;
  };



  class __attribute__ ((visibility ("default"))) IOException : public std::exception {
  private:
    std::string _message;

  public:
    IOException(const std::string &msg = "");

    virtual const char* what() const noexcept override;
  };

  class __attribute__ ((visibility ("default"))) CancellationException : public IllegalStateException {
  public:
    CancellationException(const std::string &msg = "") : IllegalStateException(msg) {}
    CancellationException(CancellationException const&) = default;
    ~CancellationException();
    CancellationException& operator=(CancellationException const&) = default;
  };

  class __attribute__ ((visibility ("default"))) ParseCancellationException : public CancellationException {
  public:
    ParseCancellationException(const std::string &msg = "") : CancellationException(msg) {}
    ParseCancellationException(ParseCancellationException const&) = default;
    ~ParseCancellationException();
    ParseCancellationException& operator=(ParseCancellationException const&) = default;
  };

}
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/RecognitionException.h" 2

namespace antlr4 {






  class __attribute__ ((visibility ("default"))) RecognitionException : public RuntimeException {
  private:

    Recognizer *_recognizer;
    IntStream *_input;
    ParserRuleContext *_ctx;




    Token *_offendingToken;

    size_t _offendingState;

  public:
    RecognitionException(Recognizer *recognizer, IntStream *input, ParserRuleContext *ctx,
                         Token *offendingToken = nullptr);
    RecognitionException(const std::string &message, Recognizer *recognizer, IntStream *input,
                         ParserRuleContext *ctx, Token *offendingToken = nullptr);
    RecognitionException(RecognitionException const&) = default;
    ~RecognitionException();
    RecognitionException& operator=(RecognitionException const&) = default;
# 47 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/RecognitionException.h"
    virtual size_t getOffendingState() const;

  protected:
    void setOffendingState(size_t offendingState);
# 60 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/RecognitionException.h"
  public:
    virtual misc::IntervalSet getExpectedTokens() const;
# 70 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/RecognitionException.h"
    virtual RuleContext* getCtx() const;
# 81 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/RecognitionException.h"
    virtual IntStream* getInputStream() const;

    virtual Token* getOffendingToken() const;
# 92 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/RecognitionException.h"
    virtual Recognizer* getRecognizer() const;

  private:
    void InitializeInstanceFields();
  };

}
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ANTLRErrorListener.h" 2

namespace antlrcpp {
  class BitSet;
}

namespace antlr4 {


  class __attribute__ ((visibility ("default"))) ANTLRErrorListener {
  public:
    virtual ~ANTLRErrorListener();
# 53 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ANTLRErrorListener.h"
    virtual void syntaxError(Recognizer *recognizer, Token *offendingSymbol, size_t line,
                             size_t charPositionInLine, const std::string &msg, std::exception_ptr e) = 0;
# 96 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ANTLRErrorListener.h"
    virtual void reportAmbiguity(Parser *recognizer, const dfa::DFA &dfa, size_t startIndex, size_t stopIndex, bool exact,
      const antlrcpp::BitSet &ambigAlts, atn::ATNConfigSet *configs) = 0;
# 122 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ANTLRErrorListener.h"
    virtual void reportAttemptingFullContext(Parser *recognizer, const dfa::DFA &dfa, size_t startIndex, size_t stopIndex,
      const antlrcpp::BitSet &conflictingAlts, atn::ATNConfigSet *configs) = 0;
# 163 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ANTLRErrorListener.h"
    virtual void reportContextSensitivity(Parser *recognizer, const dfa::DFA &dfa, size_t startIndex, size_t stopIndex,
      size_t prediction, atn::ATNConfigSet *configs) = 0;
  };

}
# 13 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ANTLRErrorStrategy.h" 1





       

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Token.h" 1





       

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/IntStream.h" 1





       



namespace antlr4 {
# 28 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/IntStream.h"
  class __attribute__ ((visibility ("default"))) IntStream {
  public:
    static constexpr size_t EOF = std::numeric_limits<size_t>::max();
# 41 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/IntStream.h"
    static const std::string UNKNOWN_SOURCE_NAME;

    virtual ~IntStream();
# 66 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/IntStream.h"
    virtual void consume() = 0;
# 101 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/IntStream.h"
    virtual size_t LA(ssize_t i) = 0;
# 148 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/IntStream.h"
    virtual ssize_t mark() = 0;
# 161 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/IntStream.h"
    virtual void release(ssize_t marker) = 0;
# 171 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/IntStream.h"
    virtual size_t index() = 0;
# 200 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/IntStream.h"
    virtual void seek(size_t index) = 0;







    virtual size_t size() = 0;






    virtual std::string getSourceName() const = 0;
  };

}
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Token.h" 2

namespace antlr4 {




  class __attribute__ ((visibility ("default"))) Token {
  public:
    static constexpr size_t INVALID_TYPE = 0;



    static constexpr size_t EPSILON = std::numeric_limits<size_t>::max() - 1;
    static constexpr size_t MIN_USER_TOKEN_TYPE = 1;
    static constexpr size_t EOF = IntStream::EOF;

    virtual ~Token();




    static constexpr size_t DEFAULT_CHANNEL = 0;



    static constexpr size_t HIDDEN_CHANNEL = 1;
# 47 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Token.h"
    static constexpr size_t MIN_USER_CHANNEL_VALUE = 2;


    virtual std::string getText() const = 0;


    virtual size_t getType() const = 0;


    virtual size_t getLine() const = 0;



    virtual size_t getCharPositionInLine() const = 0;




    virtual size_t getChannel() const = 0;







    virtual size_t getTokenIndex() const = 0;



    virtual size_t getStartIndex() const = 0;



    virtual size_t getStopIndex() const = 0;


    virtual TokenSource *getTokenSource() const = 0;


    virtual CharStream *getInputStream() const = 0;

    virtual std::string toString() const = 0;
  };

}
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ANTLRErrorStrategy.h" 2

namespace antlr4 {
# 29 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ANTLRErrorStrategy.h"
  class __attribute__ ((visibility ("default"))) ANTLRErrorStrategy {
  public:




    virtual ~ANTLRErrorStrategy();

    virtual void reset(Parser *recognizer) = 0;
# 57 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ANTLRErrorStrategy.h"
    virtual Token* recoverInline(Parser *recognizer) = 0;
# 70 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ANTLRErrorStrategy.h"
    virtual void recover(Parser *recognizer, std::exception_ptr e) = 0;
# 90 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ANTLRErrorStrategy.h"
    virtual void sync(Parser *recognizer) = 0;
# 103 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ANTLRErrorStrategy.h"
    virtual bool inErrorRecoveryMode(Parser *recognizer) = 0;






    virtual void reportMatch(Parser *recognizer) = 0;







    virtual void reportError(Parser *recognizer, const RecognitionException &e) = 0;
  };

}
# 14 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ANTLRFileStream.h" 1





       

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ANTLRInputStream.h" 1





       



# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/CharStream.h" 1





       


# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/misc/Interval.h" 1





       



namespace antlr4 {
namespace misc {




  constexpr size_t numericToSymbol(ssize_t v) { return static_cast<size_t>(v); }
  constexpr ssize_t symbolToNumeric(size_t v) { return static_cast<ssize_t>(v); }


  class __attribute__ ((visibility ("default"))) Interval final {
  public:
    static const Interval INVALID;


    ssize_t a;
    ssize_t b;

    constexpr Interval() : Interval(static_cast<ssize_t>(-1), static_cast<ssize_t>(-2)) {}

    constexpr explicit Interval(size_t a_, size_t b_) : Interval(symbolToNumeric(a_), symbolToNumeric(b_)) {}

    constexpr Interval(ssize_t a_, ssize_t b_) : a(a_), b(b_) {}



    constexpr size_t length() const { return b >= a ? static_cast<size_t>(b - a + 1) : 0; }

    constexpr bool operator==(const Interval &other) const { return a == other.a && b == other.b; }

    size_t hashCode() const;



    bool startsBeforeDisjoint(const Interval &other) const;



    bool startsBeforeNonDisjoint(const Interval &other) const;



    bool startsAfter(const Interval &other) const;



    bool startsAfterDisjoint(const Interval &other) const;



    bool startsAfterNonDisjoint(const Interval &other) const;



    bool disjoint(const Interval &other) const;



    bool adjacent(const Interval &other) const;

    bool properlyContains(const Interval &other) const;



    Interval Union(const Interval &other) const;



    Interval intersection(const Interval &other) const;

    std::string toString() const;
  };

}
}
# 10 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/CharStream.h" 2

namespace antlr4 {


  class __attribute__ ((visibility ("default"))) CharStream : public IntStream {
  public:
    virtual ~CharStream();
# 32 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/CharStream.h"
    virtual std::string getText(const misc::Interval &interval) = 0;

    virtual std::string toString() const = 0;
  };

}
# 11 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ANTLRInputStream.h" 2

namespace antlr4 {




  class __attribute__ ((visibility ("default"))) ANTLRInputStream : public CharStream {
  protected:


    std::u32string _data;


    size_t p;

  public:

    std::string name;

    ANTLRInputStream();

    ANTLRInputStream(std::string_view input);

    ANTLRInputStream(const char *data, size_t length);
    ANTLRInputStream(std::istream &stream);

    virtual void load(const std::string &input, bool lenient);
    virtual void load(const char *data, size_t length, bool lenient);
    virtual void load(std::istream &stream, bool lenient);

    virtual void load(const std::string &input) { load(input, false); }
    virtual void load(const char *data, size_t length) { load(data, length, false); }
    virtual void load(std::istream &stream) { load(stream, false); }




    virtual void reset();
    virtual void consume() override;
    virtual size_t LA(ssize_t i) override;
    virtual size_t LT(ssize_t i);






    virtual size_t index() override;
    virtual size_t size() override;



    virtual ssize_t mark() override;
    virtual void release(ssize_t marker) override;





    virtual void seek(size_t index) override;
    virtual std::string getText(const misc::Interval &interval) override;
    virtual std::string getSourceName() const override;
    virtual std::string toString() const override;

  private:
    void InitializeInstanceFields();
  };

}
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ANTLRFileStream.h" 2

namespace antlr4 {




  class __attribute__ ((visibility ("default"))) ANTLRFileStream : public ANTLRInputStream {
  public:
    ANTLRFileStream() = default;
    ANTLRFileStream(const std::string &) = delete;
    ANTLRFileStream(const char *data, size_t length) = delete;
    ANTLRFileStream(std::istream &stream) = delete;


    virtual void loadFromFile(const std::string &fileName);
    virtual std::string getSourceName() const override;

  private:
    std::string _fileName;
  };

}
# 15 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/BailErrorStrategy.h" 1





       

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/DefaultErrorStrategy.h" 1





       


# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/misc/IntervalSet.h" 1





       




namespace antlr4 {
namespace misc {
# 26 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/misc/IntervalSet.h"
  class __attribute__ ((visibility ("default"))) IntervalSet final {
  public:
    static IntervalSet const COMPLETE_CHAR_SET;
    static IntervalSet const EMPTY_SET;

  private:

    std::vector<Interval> _intervals;

    explicit IntervalSet(std::vector<Interval>&& intervals);

  public:
    IntervalSet();
    IntervalSet(IntervalSet const& set);
    IntervalSet(IntervalSet&& set);

    template<typename T1, typename... T_NEXT>
    IntervalSet(int, T1 t1, T_NEXT&&... next) : IntervalSet() {


      addItems(t1, std::forward<T_NEXT>(next)...);
    }

    IntervalSet& operator=(IntervalSet const& set);
    IntervalSet& operator=(IntervalSet&& set);


    static IntervalSet of(ssize_t a);


    static IntervalSet of(ssize_t a, ssize_t b);

    void clear();



    void add(ssize_t el);







    void add(ssize_t a, ssize_t b);


    static IntervalSet Or(const std::vector<IntervalSet> &sets);


    void add(const Interval &addition);
    IntervalSet& addAll(const IntervalSet &set);

    template<typename T1, typename... T_NEXT>
    void addItems(T1 t1, T_NEXT&&... next) {
      add(t1);
      addItems(std::forward<T_NEXT>(next)...);
    }

    IntervalSet complement(ssize_t minElement, ssize_t maxElement) const;






    IntervalSet complement(const IntervalSet &vocabulary) const;





    IntervalSet subtract(const IntervalSet &other) const;






    static IntervalSet subtract(const IntervalSet &left, const IntervalSet &right);

    IntervalSet Or(const IntervalSet &a) const;





    IntervalSet And(const IntervalSet &other) const;


    bool contains(size_t el) const;
    bool contains(ssize_t el) const;


    bool isEmpty() const;


    ssize_t getSingleElement() const;







    ssize_t getMaxElement() const;







    ssize_t getMinElement() const;



    std::vector<Interval> const& getIntervals() const;

    size_t hashCode() const;




    bool operator == (const IntervalSet &other) const;
    std::string toString() const;
    std::string toString(bool elemAreChar) const;

    std::string toString(const dfa::Vocabulary &vocabulary) const;

  protected:
    std::string elementName(const dfa::Vocabulary &vocabulary, ssize_t a) const;

  public:
    size_t size() const;
    std::vector<ssize_t> toList() const;
    std::set<ssize_t> toSet() const;




    ssize_t get(size_t i) const;
    void remove(size_t el);
    void remove(ssize_t el);

  private:
    void addItems() { }
  };

}
}



namespace std {
  using antlr4::misc::IntervalSet;

  template <> struct hash<IntervalSet>
  {
    size_t operator() (const IntervalSet &x) const
    {
      return x.hashCode();
    }
  };
}
# 10 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/DefaultErrorStrategy.h" 2

namespace antlr4 {





  class __attribute__ ((visibility ("default"))) DefaultErrorStrategy : public ANTLRErrorStrategy {
  public:
    DefaultErrorStrategy();
    DefaultErrorStrategy(DefaultErrorStrategy const& other) = delete;
    virtual ~DefaultErrorStrategy();

    DefaultErrorStrategy& operator = (DefaultErrorStrategy const& other) = delete;

  protected:







    bool errorRecoveryMode;







    int lastErrorIndex;

    misc::IntervalSet lastErrorStates;







  public:
    virtual void reset(Parser *recognizer) override;






  protected:
    virtual void beginErrorCondition(Parser *recognizer);




  public:
    virtual bool inErrorRecoveryMode(Parser *recognizer) override;






  protected:
    virtual void endErrorCondition(Parser *recognizer);






  public:
    virtual void reportMatch(Parser *recognizer) override;
# 101 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/DefaultErrorStrategy.h"
    virtual void reportError(Parser *recognizer, const RecognitionException &e) override;
# 110 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/DefaultErrorStrategy.h"
    virtual void recover(Parser *recognizer, std::exception_ptr e) override;
# 158 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/DefaultErrorStrategy.h"
    virtual void sync(Parser *recognizer) override;
# 168 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/DefaultErrorStrategy.h"
  protected:
    virtual void reportNoViableAlternative(Parser *recognizer, const NoViableAltException &e);
# 179 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/DefaultErrorStrategy.h"
    virtual void reportInputMismatch(Parser *recognizer, const InputMismatchException &e);
# 189 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/DefaultErrorStrategy.h"
    virtual void reportFailedPredicate(Parser *recognizer, const FailedPredicateException &e);
# 209 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/DefaultErrorStrategy.h"
    virtual void reportUnwantedToken(Parser *recognizer);
# 228 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/DefaultErrorStrategy.h"
    virtual void reportMissingToken(Parser *recognizer);

  public:
# 281 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/DefaultErrorStrategy.h"
    virtual Token* recoverInline(Parser *recognizer) override;
# 299 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/DefaultErrorStrategy.h"
  protected:
    virtual bool singleTokenInsertion(Parser *recognizer);
# 320 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/DefaultErrorStrategy.h"
    virtual Token* singleTokenDeletion(Parser *recognizer);
# 342 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/DefaultErrorStrategy.h"
    virtual Token* getMissingSymbol(Parser *recognizer);

    virtual misc::IntervalSet getExpectedTokens(Parser *recognizer);
# 355 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/DefaultErrorStrategy.h"
    virtual std::string getTokenErrorDisplay(Token *t);

    virtual std::string getSymbolText(Token *symbol);

    virtual size_t getSymbolType(Token *symbol);

    virtual std::string escapeWSAndQuote(const std::string &s) const;
# 455 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/DefaultErrorStrategy.h"
    virtual misc::IntervalSet getErrorRecoverySet(Parser *recognizer);



    virtual void consumeUntil(Parser *recognizer, const misc::IntervalSet &set);

  private:
    std::vector<std::unique_ptr<Token>> _errorSymbols;
    void InitializeInstanceFields();
  };

}
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/BailErrorStrategy.h" 2

namespace antlr4 {
# 40 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/BailErrorStrategy.h"
  class __attribute__ ((visibility ("default"))) BailErrorStrategy : public DefaultErrorStrategy {






  public:
    virtual void recover(Parser *recognizer, std::exception_ptr e) override;



    virtual Token* recoverInline(Parser *recognizer) override;



    virtual void sync(Parser *recognizer) override;
  };

}
# 17 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/BaseErrorListener.h" 1





       



namespace antlrcpp {
  class BitSet;
}

namespace antlr4 {






  class __attribute__ ((visibility ("default"))) BaseErrorListener : public ANTLRErrorListener {

    virtual void syntaxError(Recognizer *recognizer, Token * offendingSymbol, size_t line, size_t charPositionInLine,
      const std::string &msg, std::exception_ptr e) override;

    virtual void reportAmbiguity(Parser *recognizer, const dfa::DFA &dfa, size_t startIndex, size_t stopIndex, bool exact,
      const antlrcpp::BitSet &ambigAlts, atn::ATNConfigSet *configs) override;

    virtual void reportAttemptingFullContext(Parser *recognizer, const dfa::DFA &dfa, size_t startIndex, size_t stopIndex,
      const antlrcpp::BitSet &conflictingAlts, atn::ATNConfigSet *configs) override;

    virtual void reportContextSensitivity(Parser *recognizer, const dfa::DFA &dfa, size_t startIndex, size_t stopIndex,
      size_t prediction, atn::ATNConfigSet *configs) override;
  };

}
# 18 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/BufferedTokenStream.h" 1





       

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/TokenStream.h" 1





       



namespace antlr4 {




  class __attribute__ ((visibility ("default"))) TokenStream : public IntStream {
# 24 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/TokenStream.h"
  public:
    virtual ~TokenStream();

    virtual Token* LT(ssize_t k) = 0;
# 46 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/TokenStream.h"
    virtual Token* get(size_t index) const = 0;


    virtual TokenSource* getTokenSource() const = 0;
# 71 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/TokenStream.h"
    virtual std::string getText(const misc::Interval &interval) = 0;
# 85 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/TokenStream.h"
    virtual std::string getText() = 0;
# 104 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/TokenStream.h"
    virtual std::string getText(RuleContext *ctx) = 0;
# 134 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/TokenStream.h"
    virtual std::string getText(Token *start, Token *stop) = 0;
  };

}
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/BufferedTokenStream.h" 2

namespace antlr4 {
# 24 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/BufferedTokenStream.h"
  class __attribute__ ((visibility ("default"))) BufferedTokenStream : public TokenStream {
  public:
    BufferedTokenStream(TokenSource *tokenSource);
    BufferedTokenStream(const BufferedTokenStream& other) = delete;

    BufferedTokenStream& operator = (const BufferedTokenStream& other) = delete;

    virtual TokenSource* getTokenSource() const override;
    virtual size_t index() override;
    virtual ssize_t mark() override;

    virtual void release(ssize_t marker) override;
    virtual void reset();
    virtual void seek(size_t index) override;

    virtual size_t size() override;
    virtual void consume() override;

    virtual Token* get(size_t i) const override;


    virtual std::vector<Token *> get(size_t start, size_t stop);

    virtual size_t LA(ssize_t i) override;
    virtual Token* LT(ssize_t k) override;


    virtual void setTokenSource(TokenSource *tokenSource);
    virtual std::vector<Token *> getTokens();
    virtual std::vector<Token *> getTokens(size_t start, size_t stop);






    virtual std::vector<Token *> getTokens(size_t start, size_t stop, const std::vector<size_t> &types);
    virtual std::vector<Token *> getTokens(size_t start, size_t stop, size_t ttype);




    virtual std::vector<Token *> getHiddenTokensToRight(size_t tokenIndex, ssize_t channel);






    virtual std::vector<Token *> getHiddenTokensToRight(size_t tokenIndex);






    virtual std::vector<Token *> getHiddenTokensToLeft(size_t tokenIndex, ssize_t channel);





    virtual std::vector<Token *> getHiddenTokensToLeft(size_t tokenIndex);

    virtual std::string getSourceName() const override;
    virtual std::string getText() override;
    virtual std::string getText(const misc::Interval &interval) override;
    virtual std::string getText(RuleContext *ctx) override;
    virtual std::string getText(Token *start, Token *stop) override;


    virtual void fill();

  protected:



    TokenSource *_tokenSource;






    std::vector<std::unique_ptr<Token>> _tokens;
# 123 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/BufferedTokenStream.h"
    size_t _p;
# 138 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/BufferedTokenStream.h"
    bool _fetchedEOF;







    virtual bool sync(size_t i);





    virtual size_t fetch(size_t n);

    virtual Token* LB(size_t k);
# 167 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/BufferedTokenStream.h"
    virtual ssize_t adjustSeekIndex(size_t i);
    void lazyInit();
    virtual void setup();







    virtual ssize_t nextTokenOnChannel(size_t i, size_t channel);
# 189 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/BufferedTokenStream.h"
    virtual ssize_t previousTokenOnChannel(size_t i, size_t channel);

    virtual std::vector<Token *> filterForChannel(size_t from, size_t to, ssize_t channel);

    bool isInitialized() const;

  private:
    bool _needSetup;
    void InitializeInstanceFields();
  };

}
# 19 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/CommonToken.h" 1





       

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/WritableToken.h" 1





       



namespace antlr4 {

  class __attribute__ ((visibility ("default"))) WritableToken : public Token {
  public:
    virtual ~WritableToken();
    virtual void setText(const std::string &text) = 0;
    virtual void setType(size_t ttype) = 0;
    virtual void setLine(size_t line) = 0;
    virtual void setCharPositionInLine(size_t pos) = 0;
    virtual void setChannel(size_t channel) = 0;
    virtual void setTokenIndex(size_t index) = 0;
  };

}
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/CommonToken.h" 2

namespace antlr4 {

  class __attribute__ ((visibility ("default"))) CommonToken : public WritableToken {
  protected:




    static const std::pair<TokenSource *, CharStream *> EMPTY_SOURCE;




    size_t _type;




    size_t _line;





    size_t _charPositionInLine;





    size_t _channel;
# 53 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/CommonToken.h"
    std::pair<TokenSource *, CharStream *> _source;







    std::string _text;





    size_t _index;





    size_t _start;





    size_t _stop;

  public:





    CommonToken(size_t type);
    CommonToken(std::pair<TokenSource*, CharStream*> source, size_t type, size_t channel, size_t start, size_t stop);
# 97 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/CommonToken.h"
    CommonToken(size_t type, const std::string &text);
# 112 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/CommonToken.h"
    CommonToken(Token *oldToken);

    virtual size_t getType() const override;
# 125 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/CommonToken.h"
    virtual void setText(const std::string &text) override;
    virtual std::string getText() const override;

    virtual void setLine(size_t line) override;
    virtual size_t getLine() const override;

    virtual size_t getCharPositionInLine() const override;
    virtual void setCharPositionInLine(size_t charPositionInLine) override;

    virtual size_t getChannel() const override;
    virtual void setChannel(size_t channel) override;

    virtual void setType(size_t type) override;

    virtual size_t getStartIndex() const override;
    virtual void setStartIndex(size_t start);

    virtual size_t getStopIndex() const override;
    virtual void setStopIndex(size_t stop);

    virtual size_t getTokenIndex() const override;
    virtual void setTokenIndex(size_t index) override;

    virtual TokenSource *getTokenSource() const override;
    virtual CharStream *getInputStream() const override;

    virtual std::string toString() const override;

    virtual std::string toString(Recognizer *r) const;
  private:
    void InitializeInstanceFields();
  };

}
# 21 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/CommonTokenFactory.h" 1





       

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/TokenFactory.h" 1





       



namespace antlr4 {




  template<typename Symbol>
  class __attribute__ ((visibility ("default"))) TokenFactory {
  public:
    virtual ~TokenFactory() {}




    virtual std::unique_ptr<Symbol> create(std::pair<TokenSource *, CharStream *> source, size_t type, const std::string &text,
      size_t channel, size_t start, size_t stop, size_t line, size_t charPositionInLine) = 0;


    virtual std::unique_ptr<Symbol> create(size_t type, const std::string &text) = 0;
  };

}
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/CommonTokenFactory.h" 2

namespace antlr4 {





  class __attribute__ ((visibility ("default"))) CommonTokenFactory : public TokenFactory<CommonToken> {
  public:







    static const std::unique_ptr<TokenFactory<CommonToken>> DEFAULT;

  protected:
# 43 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/CommonTokenFactory.h"
    const bool copyText;

  public:
# 56 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/CommonTokenFactory.h"
    CommonTokenFactory(bool copyText);
# 66 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/CommonTokenFactory.h"
    CommonTokenFactory();

    virtual std::unique_ptr<CommonToken> create(std::pair<TokenSource*, CharStream*> source, size_t type,
      const std::string &text, size_t channel, size_t start, size_t stop, size_t line, size_t charPositionInLine) override;

    virtual std::unique_ptr<CommonToken> create(size_t type, const std::string &text) override;
  };

}
# 22 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/CommonTokenStream.h" 1





       



namespace antlr4 {
# 36 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/CommonTokenStream.h"
  class __attribute__ ((visibility ("default"))) CommonTokenStream : public BufferedTokenStream {
  public:






    CommonTokenStream(TokenSource *tokenSource);
# 56 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/CommonTokenStream.h"
    CommonTokenStream(TokenSource *tokenSource, size_t channel);

    virtual Token* LT(ssize_t k) override;


    virtual int getNumberOfOnChannelTokens();

  protected:







    size_t channel;

    virtual ssize_t adjustSeekIndex(size_t i) override;

    virtual Token* LB(size_t k) override;

  };

}
# 23 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ConsoleErrorListener.h" 1





       



namespace antlr4 {

  class __attribute__ ((visibility ("default"))) ConsoleErrorListener : public BaseErrorListener {
  public:



    static ConsoleErrorListener INSTANCE;
# 31 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ConsoleErrorListener.h"
    virtual void syntaxError(Recognizer *recognizer, Token * offendingSymbol, size_t line, size_t charPositionInLine,
                             const std::string &msg, std::exception_ptr e) override;
  };

}
# 24 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/DiagnosticErrorListener.h" 1





       



namespace antlr4 {
# 33 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/DiagnosticErrorListener.h"
  class __attribute__ ((visibility ("default"))) DiagnosticErrorListener : public BaseErrorListener {



  protected:
    const bool exactOnly;





  public:
    DiagnosticErrorListener();







    DiagnosticErrorListener(bool exactOnly);

    virtual void reportAmbiguity(Parser *recognizer, const dfa::DFA &dfa, size_t startIndex, size_t stopIndex, bool exact,
      const antlrcpp::BitSet &ambigAlts, atn::ATNConfigSet *configs) override;

    virtual void reportAttemptingFullContext(Parser *recognizer, const dfa::DFA &dfa, size_t startIndex, size_t stopIndex,
      const antlrcpp::BitSet &conflictingAlts, atn::ATNConfigSet *configs) override;

    virtual void reportContextSensitivity(Parser *recognizer, const dfa::DFA &dfa, size_t startIndex, size_t stopIndex,
      size_t prediction, atn::ATNConfigSet *configs) override;

  protected:
    virtual std::string getDecisionDescription(Parser *recognizer, const dfa::DFA &dfa);
# 77 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/DiagnosticErrorListener.h"
    virtual antlrcpp::BitSet getConflictingAlts(const antlrcpp::BitSet &reportedAlts, atn::ATNConfigSet *configs);
  };

}
# 26 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/FailedPredicateException.h" 1





       



namespace antlr4 {





  class __attribute__ ((visibility ("default"))) FailedPredicateException : public RecognitionException {
  public:
    explicit FailedPredicateException(Parser *recognizer);
    FailedPredicateException(Parser *recognizer, const std::string &predicate);
    FailedPredicateException(Parser *recognizer, const std::string &predicate, const std::string &message);

    virtual size_t getRuleIndex();
    virtual size_t getPredIndex();
    virtual std::string getPredicate();

  private:
    size_t _ruleIndex;
    size_t _predicateIndex;
    std::string _predicate;
  };

}
# 28 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/InputMismatchException.h" 1





       



namespace antlr4 {





  class __attribute__ ((visibility ("default"))) InputMismatchException : public RecognitionException {
  public:
    InputMismatchException(Parser *recognizer);
    InputMismatchException(InputMismatchException const&) = default;
    ~InputMismatchException();
    InputMismatchException& operator=(InputMismatchException const&) = default;
  };

}
# 29 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/InterpreterRuleContext.h" 1





       

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ParserRuleContext.h" 1





       

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/RuleContext.h" 1





       

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/ParseTree.h" 1





       

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/support/Any.h" 1







       



namespace antlrcpp {

  using Any = std::any;

}
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/ParseTree.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/ParseTreeType.h" 1





       





namespace antlr4 {
namespace tree {

  enum class ParseTreeType : size_t {
    TERMINAL = 1,
    ERROR = 2,
    RULE = 3,
  };

}
}
# 10 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/ParseTree.h" 2

namespace antlr4 {
namespace tree {
# 21 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/ParseTree.h"
  class __attribute__ ((visibility ("default"))) ParseTree {
  public:
    ParseTree(ParseTree const&) = delete;

    virtual ~ParseTree() = default;

    ParseTree& operator=(ParseTree const&) = delete;



    ParseTree *parent = nullptr;







    std::vector<ParseTree *> children;



    virtual std::string toStringTree(bool pretty = false) = 0;
    virtual std::string toString() = 0;



    virtual std::string toStringTree(Parser *parser, bool pretty = false) = 0;

    virtual bool operator == (const ParseTree &other) const;



    virtual std::any accept(ParseTreeVisitor *visitor) = 0;




    virtual std::string getText() = 0;
# 77 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/ParseTree.h"
    virtual misc::Interval getSourceInterval() = 0;

    ParseTreeType getTreeType() const { return _treeType; }

  protected:
    explicit ParseTree(ParseTreeType treeType) : _treeType(treeType) {}

  private:
    const ParseTreeType _treeType;
  };


  class __attribute__ ((visibility ("default"))) ParseTreeTracker {
  public:
    template<typename T, typename ... Args>
    T* createInstance(Args&& ... args) {
      static_assert(std::is_base_of<ParseTree, T>::value, "Argument must be a parse tree type");
      T* result = new T(args...);
      _allocated.push_back(result);
      return result;
    }

    void reset() {
      for (auto * entry : _allocated)
        delete entry;
      _allocated.clear();
    }

  private:
    std::vector<ParseTree *> _allocated;
  };


}
}
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/RuleContext.h" 2

namespace antlr4 {
# 62 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/RuleContext.h"
  class __attribute__ ((visibility ("default"))) RuleContext : public tree::ParseTree {
  public:
    static bool is(const tree::ParseTree &parseTree) { return parseTree.getTreeType() == tree::ParseTreeType::RULE; }

    static bool is(const tree::ParseTree *parseTree) { return parseTree != nullptr && is(*parseTree); }




    size_t invokingState;

    RuleContext();
    RuleContext(RuleContext *parent, size_t invokingState);

    virtual int depth();


    virtual bool isEmpty();



    virtual misc::Interval getSourceInterval() override;

    virtual std::string getText() override;

    virtual size_t getRuleIndex() const;
# 98 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/RuleContext.h"
    virtual size_t getAltNumber() const;
# 108 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/RuleContext.h"
    virtual void setAltNumber(size_t altNumber);

    virtual std::any accept(tree::ParseTreeVisitor *visitor) override;






    virtual std::string toStringTree(Parser *recog, bool pretty = false) override;





    virtual std::string toStringTree(std::vector<std::string> &ruleNames, bool pretty = false);

    virtual std::string toStringTree(bool pretty = false) override;
    virtual std::string toString() override;
    std::string toString(Recognizer *recog);
    std::string toString(const std::vector<std::string> &ruleNames);


    std::string toString(Recognizer *recog, RuleContext *stop);

    virtual std::string toString(const std::vector<std::string> &ruleNames, RuleContext *stop);

    bool operator == (const RuleContext &other) { return this == &other; }

  private:
    void InitializeInstanceFields();
  };

}
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ParserRuleContext.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/support/CPPUtils.h" 1





       



namespace antlrcpp {

  __attribute__ ((visibility ("default"))) std::string join(const std::vector<std::string> &strings, const std::string &separator);
  __attribute__ ((visibility ("default"))) std::map<std::string, size_t> toMap(const std::vector<std::string> &keys);
  __attribute__ ((visibility ("default"))) std::string escapeWhitespace(std::string str, bool escapeSpaces);
  __attribute__ ((visibility ("default"))) std::string toHexString(const int t);
  __attribute__ ((visibility ("default"))) std::string arrayToString(const std::vector<std::string> &data);
  __attribute__ ((visibility ("default"))) std::string replaceString(const std::string &s, const std::string &from, const std::string &to);
  __attribute__ ((visibility ("default"))) std::vector<std::string> split(const std::string &s, const std::string &sep, int count);
  __attribute__ ((visibility ("default"))) std::string indent(const std::string &s, const std::string &indentation, bool includingFirst = true);


  template <typename OnEnd>
  struct FinalAction {
    FinalAction(OnEnd f) : _cleanUp { std::move(f) } {}
    FinalAction(FinalAction &&other) :
 _cleanUp(std::move(other._cleanUp)), _enabled(other._enabled) {
      other._enabled = false;
    }
    ~FinalAction() { if (_enabled) _cleanUp(); }

    void disable() { _enabled = false; }
  private:
    OnEnd _cleanUp;
    bool _enabled {true};
  };

  template <typename OnEnd>
  FinalAction<OnEnd> finally(OnEnd f) {
    return FinalAction<OnEnd>(std::move(f));
  }


  template <typename T1, typename T2>
  inline bool is(T2 *obj) {
    return dynamic_cast<typename std::add_const<T1>::type>(obj) != nullptr;
  }

  template <typename T1, typename T2>
  inline bool is(Ref<T2> const& obj) {
    return dynamic_cast<T1 *>(obj.get()) != nullptr;
  }

  template <typename T>
  std::string toString(const T &o) {
    std::stringstream ss;


    ss << typeid(o).name() << "@" << std::hex << reinterpret_cast<uintptr_t>(&o);
    return ss.str();
  }


  __attribute__ ((visibility ("default"))) std::string what(std::exception_ptr eptr = std::current_exception());

}
# 10 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ParserRuleContext.h" 2

namespace antlr4 {
# 36 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ParserRuleContext.h"
  class __attribute__ ((visibility ("default"))) ParserRuleContext : public RuleContext {
  public:
    static ParserRuleContext EMPTY;
# 61 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ParserRuleContext.h"
    Token *start;
    Token *stop;



    std::exception_ptr exception;

    ParserRuleContext();
    ParserRuleContext(ParserRuleContext *parent, size_t invokingStateNumber);





    virtual void copyFrom(ParserRuleContext *ctx);




    virtual void enterRule(tree::ParseTreeListener *listener);
    virtual void exitRule(tree::ParseTreeListener *listener);


    tree::TerminalNode* addChild(tree::TerminalNode *t);
    RuleContext* addChild(RuleContext *ruleInvocation);




    void removeLastChild();

    tree::TerminalNode* getToken(size_t ttype, std::size_t i) const;

    std::vector<tree::TerminalNode*> getTokens(size_t ttype) const;

    template<typename T>
    T* getRuleContext(size_t i) const {
      static_assert(std::is_base_of_v<RuleContext, T>, "T must be derived from RuleContext");
      size_t j = 0;
      for (auto *child : children) {
        if (RuleContext::is(child)) {
          if (auto *typedChild = dynamic_cast<T*>(child); typedChild != nullptr) {
            if (j++ == i) {
              return typedChild;
            }
          }
        }
      }
      return nullptr;
    }

    template<typename T>
    std::vector<T*> getRuleContexts() const {
      static_assert(std::is_base_of_v<RuleContext, T>, "T must be derived from RuleContext");
      std::vector<T*> contexts;
      for (auto *child : children) {
        if (RuleContext::is(child)) {
          if (auto *typedChild = dynamic_cast<T*>(child); typedChild != nullptr) {
            contexts.push_back(typedChild);
          }
        }
      }
      return contexts;
    }

    virtual misc::Interval getSourceInterval() override;






    Token* getStart() const;






    Token* getStop() const;



    virtual std::string toInfoString(Parser *recognizer);
  };

}
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/InterpreterRuleContext.h" 2

namespace antlr4 {
# 24 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/InterpreterRuleContext.h"
  class __attribute__ ((visibility ("default"))) InterpreterRuleContext : public ParserRuleContext {
  public:
    InterpreterRuleContext();
# 36 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/InterpreterRuleContext.h"
    InterpreterRuleContext(ParserRuleContext *parent, size_t invokingStateNumber, size_t ruleIndex);

    virtual size_t getRuleIndex() const override;

  protected:

    const size_t _ruleIndex = std::numeric_limits<size_t>::max();
};

}
# 31 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Lexer.h" 1





       

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Recognizer.h" 1





       

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ProxyErrorListener.h" 1





       




namespace antlr4 {




  class __attribute__ ((visibility ("default"))) ProxyErrorListener : public ANTLRErrorListener {
  private:
    std::set<ANTLRErrorListener *> _delegates;

  public:
    void addErrorListener(ANTLRErrorListener *listener);
    void removeErrorListener(ANTLRErrorListener *listener);
    void removeErrorListeners();

    void syntaxError(Recognizer *recognizer, Token *offendingSymbol, size_t line, size_t charPositionInLine,
                     const std::string &msg, std::exception_ptr e) override;

    virtual void reportAmbiguity(Parser *recognizer, const dfa::DFA &dfa, size_t startIndex, size_t stopIndex, bool exact,
                                 const antlrcpp::BitSet &ambigAlts, atn::ATNConfigSet *configs) override;

    virtual void reportAttemptingFullContext(Parser *recognizer, const dfa::DFA &dfa, size_t startIndex, size_t stopIndex,
      const antlrcpp::BitSet &conflictingAlts, atn::ATNConfigSet *configs) override;

    virtual void reportContextSensitivity(Parser *recognizer, const dfa::DFA &dfa, size_t startIndex, size_t stopIndex,
                                          size_t prediction, atn::ATNConfigSet *configs) override;
  };

}
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Recognizer.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/support/Casts.h" 1





       

# 1 "/usr/include/c++/15.1.1/cassert" 1 3
# 46 "/usr/include/c++/15.1.1/cassert" 3
# 1 "/usr/include/assert.h" 1 3 4
# 24 "/usr/include/assert.h" 3 4
#undef _ASSERT_H
#undef assert
#undef __ASSERT_VOID_CAST


#undef assert_perror




#define _ASSERT_H 1



#define __ASSERT_VOID_CAST static_cast<void>
# 64 "/usr/include/assert.h" 3 4

# 64 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     noexcept (true) __attribute__ ((__noreturn__)) __attribute__ ((__cold__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     noexcept (true) __attribute__ ((__noreturn__)) __attribute__ ((__cold__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     noexcept (true) __attribute__ ((__noreturn__)) __attribute__ ((__cold__));


}







#define __ASSERT_FILE __builtin_FILE ()
#define __ASSERT_LINE __builtin_LINE ()






#define assert(expr) (static_cast <bool> (expr) ? void (0) : __assert_fail (#expr, __ASSERT_FILE, __ASSERT_LINE, __ASSERT_FUNCTION))
# 125 "/usr/include/assert.h" 3 4
#define assert_perror(errnum) (!(errnum) ? __ASSERT_VOID_CAST (0) : __assert_perror_fail ((errnum), __FILE__, __LINE__, __ASSERT_FUNCTION))
# 137 "/usr/include/assert.h" 3 4
#define __ASSERT_FUNCTION __extension__ __PRETTY_FUNCTION__
# 47 "/usr/include/c++/15.1.1/cassert" 2 3
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/support/Casts.h" 2




# 12 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/support/Casts.h"
namespace antlrcpp {

  template <typename To, typename From>
  To downCast(From* from) {
    static_assert(std::is_pointer_v<To>, "Target type not a pointer.");
    static_assert(std::is_base_of_v<From, std::remove_pointer_t<To>>, "Target type not derived from source type.");

    
# 19 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/support/Casts.h" 3 4
   (static_cast <bool> (
# 19 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/support/Casts.h"
   from == nullptr || dynamic_cast<To>(from) != nullptr
# 19 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/support/Casts.h" 3 4
   ) ? void (0) : __assert_fail (
# 19 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/support/Casts.h"
   "from == nullptr || dynamic_cast<To>(from) != nullptr"
# 19 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/support/Casts.h" 3 4
   , __builtin_FILE (), __builtin_LINE (), __extension__ __PRETTY_FUNCTION__))
# 19 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/support/Casts.h"
                                                               ;

    return static_cast<To>(from);
  }

  template <typename To, typename From>
  To downCast(From& from) {
    static_assert(std::is_lvalue_reference_v<To>, "Target type not a lvalue reference.");
    static_assert(std::is_base_of_v<From, std::remove_reference_t<To>>, "Target type not derived from source type.");

    
# 29 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/support/Casts.h" 3 4
   (static_cast <bool> (
# 29 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/support/Casts.h"
   dynamic_cast<std::add_pointer_t<std::remove_reference_t<To>>>(std::addressof(from)) != nullptr
# 29 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/support/Casts.h" 3 4
   ) ? void (0) : __assert_fail (
# 29 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/support/Casts.h"
   "dynamic_cast<std::add_pointer_t<std::remove_reference_t<To>>>(std::addressof(from)) != nullptr"
# 29 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/support/Casts.h" 3 4
   , __builtin_FILE (), __builtin_LINE (), __extension__ __PRETTY_FUNCTION__))
# 29 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/support/Casts.h"
                                                                                                         ;

    return static_cast<To>(from);
  }

}
# 10 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Recognizer.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/SerializedATNView.h" 1





       



# 1 "/usr/include/c++/15.1.1/cstring" 1 3
# 40 "/usr/include/c++/15.1.1/cstring" 3
#define _GLIBCXX_CSTRING 1





#define __glibcxx_want_freestanding_cstring 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 48 "/usr/include/c++/15.1.1/cstring" 2 3



#undef memchr
#undef memcmp
#undef memcpy
#undef memmove
#undef memset
#undef strcat
#undef strchr
#undef strcmp
#undef strcoll
#undef strcpy
#undef strcspn
#undef strerror
#undef strlen
#undef strncat
#undef strncmp
#undef strncpy
#undef strpbrk
#undef strrchr
#undef strspn
#undef strstr
#undef strtok
#undef strxfrm


# 74 "/usr/include/c++/15.1.1/cstring" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::memchr;
  using ::memcmp;
  using ::memcpy;
  using ::memmove;
  using ::memset;
  using ::strcat;
  using ::strcmp;
  using ::strcoll;
  using ::strcpy;
  using ::strcspn;
  using ::strerror;
  using ::strlen;
  using ::strncat;
  using ::strncmp;
  using ::strncpy;
  using ::strspn;

  using ::strtok;

  using ::strxfrm;
  using ::strchr;
  using ::strpbrk;
  using ::strrchr;
  using ::strstr;
# 127 "/usr/include/c++/15.1.1/cstring" 3

}
}
# 11 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/SerializedATNView.h" 2




# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/misc/MurmurHash.h" 1





       







# 13 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/misc/MurmurHash.h"
namespace antlr4 {
namespace misc {

  class __attribute__ ((visibility ("default"))) MurmurHash final {
  private:
    static constexpr size_t DEFAULT_SEED = 0;



  public:
    static size_t initialize() { return initialize(DEFAULT_SEED); }


    static size_t initialize(size_t seed) { return seed; }





    static size_t update(size_t hash, size_t value);
# 41 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/misc/MurmurHash.h"
    template <class T>
    static size_t update(size_t hash, Ref<T> const& value) {
      return update(hash, value != nullptr ? value->hashCode() : 0);
    }

    template <class T>
    static size_t update(size_t hash, T *value) {
      return update(hash, value != nullptr ? value->hashCode() : 0);
    }

    static size_t update(size_t hash, const void *data, size_t size);

    template <typename T>
    static size_t update(size_t hash, const T *data, size_t size) {
      return update(hash, static_cast<const void*>(data), size * sizeof(std::remove_reference_t<T>));
    }
# 65 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/misc/MurmurHash.h"
    static size_t finish(size_t hash, size_t entryCount);







    template<typename T>
    static size_t hashCode(const std::vector<Ref<T>> &data, size_t seed = DEFAULT_SEED) {
      size_t hash = initialize(seed);
      for (auto &entry : data) {
        hash = update(hash, entry);
      }
      return finish(hash, data.size());
    }

    static size_t hashCode(const void *data, size_t size, size_t seed = DEFAULT_SEED) {
      size_t hash = initialize(seed);
      hash = update(hash, data, size);
      return finish(hash, size);
    }

    template <typename T>
    static size_t hashCode(const T *data, size_t size, size_t seed = DEFAULT_SEED) {
      return hashCode(static_cast<const void*>(data), size * sizeof(std::remove_reference_t<T>), seed);
    }

  private:
    MurmurHash() = delete;

    MurmurHash(const MurmurHash&) = delete;

    MurmurHash& operator=(const MurmurHash&) = delete;
  };

}
}
# 16 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/SerializedATNView.h" 2

namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) SerializedATNView final {
  public:
    using value_type = int32_t;
    using size_type = size_t;
    using difference_type = ptrdiff_t;
    using reference = int32_t&;
    using const_reference = const int32_t&;
    using pointer = int32_t*;
    using const_pointer = const int32_t*;
    using iterator = const_pointer;
    using const_iterator = const_pointer;
    using reverse_iterator = std::reverse_iterator<iterator>;
    using const_reverse_iterator = std::reverse_iterator<const_iterator>;

    SerializedATNView() = default;

    SerializedATNView(const_pointer data, size_type size) : _data(data), _size(size) {}

    SerializedATNView(const std::vector<int32_t> &serializedATN) : _data(serializedATN.data()), _size(serializedATN.size()) {}

    SerializedATNView(const SerializedATNView&) = default;

    SerializedATNView& operator=(const SerializedATNView&) = default;

    const_iterator begin() const { return data(); }

    const_iterator cbegin() const { return data(); }

    const_iterator end() const { return data() + size(); }

    const_iterator cend() const { return data() + size(); }

    const_reverse_iterator rbegin() const { return const_reverse_iterator(end()); }

    const_reverse_iterator crbegin() const { return const_reverse_iterator(cend()); }

    const_reverse_iterator rend() const { return const_reverse_iterator(begin()); }

    const_reverse_iterator crend() const { return const_reverse_iterator(cbegin()); }

    bool empty() const { return size() == 0; }

    const_pointer data() const { return _data; }

    size_type size() const { return _size; }

    size_type size_bytes() const { return size() * sizeof(value_type); }

    const_reference operator[](size_type index) const { return _data[index]; }

  private:
    const_pointer _data = nullptr;
    size_type _size = 0;
  };

  inline bool operator==(const SerializedATNView &lhs, const SerializedATNView &rhs) {
    return (lhs.data() == rhs.data() && lhs.size() == rhs.size()) ||
           (lhs.size() == rhs.size() && std::memcmp(lhs.data(), rhs.data(), lhs.size_bytes()) == 0);
  }

  inline bool operator!=(const SerializedATNView &lhs, const SerializedATNView &rhs) {
    return !operator==(lhs, rhs);
  }

  inline bool operator<(const SerializedATNView &lhs, const SerializedATNView &rhs) {
    int diff = std::memcmp(lhs.data(), rhs.data(), std::min(lhs.size_bytes(), rhs.size_bytes()));
    return diff < 0 || (diff == 0 && lhs.size() < rhs.size());
  }

}
}

namespace std {

  template <>
  struct hash<::antlr4::atn::SerializedATNView> {
    size_t operator()(const ::antlr4::atn::SerializedATNView &serializedATNView) const {
      return ::antlr4::misc::MurmurHash::hashCode(serializedATNView.data(), serializedATNView.size());
    }
  };

}
# 11 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Recognizer.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/internal/Synchronization.h" 1
# 26 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/internal/Synchronization.h"
       



# 1 "/usr/include/c++/15.1.1/mutex" 1 3
# 30 "/usr/include/c++/15.1.1/mutex" 3
#define _GLIBCXX_MUTEX 1
# 45 "/usr/include/c++/15.1.1/mutex" 3
# 1 "/usr/include/c++/15.1.1/bits/chrono.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/chrono.h" 3
#define _GLIBCXX_CHRONO_H 1







# 1 "/usr/include/c++/15.1.1/ratio" 1 3
# 31 "/usr/include/c++/15.1.1/ratio" 3
#define _GLIBCXX_RATIO 1
# 44 "/usr/include/c++/15.1.1/ratio" 3
#define __glibcxx_want_ratio 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 46 "/usr/include/c++/15.1.1/ratio" 2 3


# 47 "/usr/include/c++/15.1.1/ratio" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 61 "/usr/include/c++/15.1.1/ratio" 3
  template<intmax_t _Pn>
    struct __static_sign
    : integral_constant<intmax_t, (_Pn < 0) ? -1 : 1>
    { };

  template<intmax_t _Pn>
    struct __static_abs
    : integral_constant<intmax_t, _Pn * __static_sign<_Pn>::value>
    { };

  template<intmax_t _Pn, intmax_t _Qn>
    struct __static_gcd
    : __static_gcd<_Qn, (_Pn % _Qn)>
    { };

  template<intmax_t _Pn>
    struct __static_gcd<_Pn, 0>
    : integral_constant<intmax_t, __static_abs<_Pn>::value>
    { };

  template<intmax_t _Qn>
    struct __static_gcd<0, _Qn>
    : integral_constant<intmax_t, __static_abs<_Qn>::value>
    { };







  template<intmax_t _Pn, intmax_t _Qn>
    struct __safe_multiply
    {
    private:
      static const uintmax_t __c = uintmax_t(1) << (sizeof(intmax_t) * 4);

      static const uintmax_t __a0 = __static_abs<_Pn>::value % __c;
      static const uintmax_t __a1 = __static_abs<_Pn>::value / __c;
      static const uintmax_t __b0 = __static_abs<_Qn>::value % __c;
      static const uintmax_t __b1 = __static_abs<_Qn>::value / __c;

      static_assert(__a1 == 0 || __b1 == 0,
      "overflow in multiplication");
      static_assert(__a0 * __b1 + __b0 * __a1 < (__c >> 1),
      "overflow in multiplication");
      static_assert(__b0 * __a0 <= 0x7fffffffffffffffL,
      "overflow in multiplication");
      static_assert((__a0 * __b1 + __b0 * __a1) * __c
      <= 0x7fffffffffffffffL - __b0 * __a0,
      "overflow in multiplication");

    public:
      static const intmax_t value = _Pn * _Qn;
    };



  template<uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2>
    struct __big_less
    : integral_constant<bool, (__hi1 < __hi2
          || (__hi1 == __hi2 && __lo1 < __lo2))>
    { };

  template<uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2>
    struct __big_add
    {
      static constexpr uintmax_t __lo = __lo1 + __lo2;
      static constexpr uintmax_t __hi = (__hi1 + __hi2 +
      (__lo1 + __lo2 < __lo1));
    };


  template<uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2>
    struct __big_sub
    {
      static_assert(!__big_less<__hi1, __lo1, __hi2, __lo2>::value,
      "Internal library error");
      static constexpr uintmax_t __lo = __lo1 - __lo2;
      static constexpr uintmax_t __hi = (__hi1 - __hi2 -
      (__lo1 < __lo2));
    };


  template<uintmax_t __x, uintmax_t __y>
    struct __big_mul
    {
    private:
      static constexpr uintmax_t __c = uintmax_t(1) << (sizeof(intmax_t) * 4);
      static constexpr uintmax_t __x0 = __x % __c;
      static constexpr uintmax_t __x1 = __x / __c;
      static constexpr uintmax_t __y0 = __y % __c;
      static constexpr uintmax_t __y1 = __y / __c;
      static constexpr uintmax_t __x0y0 = __x0 * __y0;
      static constexpr uintmax_t __x0y1 = __x0 * __y1;
      static constexpr uintmax_t __x1y0 = __x1 * __y0;
      static constexpr uintmax_t __x1y1 = __x1 * __y1;
      static constexpr uintmax_t __mix = __x0y1 + __x1y0;
      static constexpr uintmax_t __mix_lo = __mix * __c;
      static constexpr uintmax_t __mix_hi
      = __mix / __c + ((__mix < __x0y1) ? __c : 0);
      typedef __big_add<__mix_hi, __mix_lo, __x1y1, __x0y0> _Res;
    public:
      static constexpr uintmax_t __hi = _Res::__hi;
      static constexpr uintmax_t __lo = _Res::__lo;
    };



  template<uintmax_t __n1, uintmax_t __n0, uintmax_t __d>
    struct __big_div_impl
    {
    private:
      static_assert(__d >= (uintmax_t(1) << (sizeof(intmax_t) * 8 - 1)),
      "Internal library error");
      static_assert(__n1 < __d, "Internal library error");
      static constexpr uintmax_t __c = uintmax_t(1) << (sizeof(intmax_t) * 4);
      static constexpr uintmax_t __d1 = __d / __c;
      static constexpr uintmax_t __d0 = __d % __c;

      static constexpr uintmax_t __q1x = __n1 / __d1;
      static constexpr uintmax_t __r1x = __n1 % __d1;
      static constexpr uintmax_t __m = __q1x * __d0;
      static constexpr uintmax_t __r1y = __r1x * __c + __n0 / __c;
      static constexpr uintmax_t __r1z = __r1y + __d;
      static constexpr uintmax_t __r1
      = ((__r1y < __m) ? ((__r1z >= __d) && (__r1z < __m))
  ? (__r1z + __d) : __r1z : __r1y) - __m;
      static constexpr uintmax_t __q1
      = __q1x - ((__r1y < __m)
   ? ((__r1z >= __d) && (__r1z < __m)) ? 2 : 1 : 0);
      static constexpr uintmax_t __q0x = __r1 / __d1;
      static constexpr uintmax_t __r0x = __r1 % __d1;
      static constexpr uintmax_t __n = __q0x * __d0;
      static constexpr uintmax_t __r0y = __r0x * __c + __n0 % __c;
      static constexpr uintmax_t __r0z = __r0y + __d;
      static constexpr uintmax_t __r0
      = ((__r0y < __n) ? ((__r0z >= __d) && (__r0z < __n))
  ? (__r0z + __d) : __r0z : __r0y) - __n;
      static constexpr uintmax_t __q0
      = __q0x - ((__r0y < __n) ? ((__r0z >= __d)
      && (__r0z < __n)) ? 2 : 1 : 0);

    public:
      static constexpr uintmax_t __quot = __q1 * __c + __q0;
      static constexpr uintmax_t __rem = __r0;

    private:
      typedef __big_mul<__quot, __d> _Prod;
      typedef __big_add<_Prod::__hi, _Prod::__lo, 0, __rem> _Sum;
      static_assert(_Sum::__hi == __n1 && _Sum::__lo == __n0,
      "Internal library error");
  };

  template<uintmax_t __n1, uintmax_t __n0, uintmax_t __d>
    struct __big_div
    {
    private:
      static_assert(__d != 0, "Internal library error");
      static_assert(sizeof (uintmax_t) == sizeof (unsigned long long),
      "This library calls __builtin_clzll on uintmax_t, which "
      "is unsafe on your platform. Please complain to "
      "http://gcc.gnu.org/bugzilla/");
      static constexpr int __shift = __builtin_clzll(__d);
      static constexpr int __coshift_ = sizeof(uintmax_t) * 8 - __shift;
      static constexpr int __coshift = (__shift != 0) ? __coshift_ : 0;
      static constexpr uintmax_t __c1 = uintmax_t(1) << __shift;
      static constexpr uintmax_t __c2 = uintmax_t(1) << __coshift;
      static constexpr uintmax_t __new_d = __d * __c1;
      static constexpr uintmax_t __new_n0 = __n0 * __c1;
      static constexpr uintmax_t __n1_shifted = (__n1 % __d) * __c1;
      static constexpr uintmax_t __n0_top = (__shift != 0) ? (__n0 / __c2) : 0;
      static constexpr uintmax_t __new_n1 = __n1_shifted + __n0_top;
      typedef __big_div_impl<__new_n1, __new_n0, __new_d> _Res;

    public:
      static constexpr uintmax_t __quot_hi = __n1 / __d;
      static constexpr uintmax_t __quot_lo = _Res::__quot;
      static constexpr uintmax_t __rem = _Res::__rem / __c1;

    private:
      typedef __big_mul<__quot_lo, __d> _P0;
      typedef __big_mul<__quot_hi, __d> _P1;
      typedef __big_add<_P0::__hi, _P0::__lo, _P1::__lo, __rem> _Sum;

      static_assert(_P1::__hi == 0, "Internal library error");
      static_assert(_Sum::__hi >= _P0::__hi, "Internal library error");

      static_assert(_Sum::__hi == __n1 && _Sum::__lo == __n0,
      "Internal library error");
      static_assert(__rem < __d, "Internal library error");
    };
# 270 "/usr/include/c++/15.1.1/ratio" 3
  template<intmax_t _Num, intmax_t _Den = 1>
    struct ratio
    {
      static_assert(_Den != 0, "denominator cannot be zero");
      static_assert(_Num >= -0x7fffffffffffffffL && _Den >= -0x7fffffffffffffffL,
      "out of range");


      static constexpr intmax_t num =
        _Num * __static_sign<_Den>::value / __static_gcd<_Num, _Den>::value;

      static constexpr intmax_t den =
        __static_abs<_Den>::value / __static_gcd<_Num, _Den>::value;

      typedef ratio<num, den> type;
    };
# 297 "/usr/include/c++/15.1.1/ratio" 3
  template<typename _Tp>
    struct __is_ratio
    : std::false_type
    { };

  template<intmax_t _Num, intmax_t _Den>
    struct __is_ratio<ratio<_Num, _Den>>
    : std::true_type
    { };


  template<typename _Tp>
    constexpr bool __is_ratio_v = false;
  template<intmax_t _Num, intmax_t _Den>
    constexpr bool __is_ratio_v<ratio<_Num, _Den>> = true;


  template<typename _R1, typename _R2>
    constexpr bool
    __are_both_ratios() noexcept
    {

      if constexpr (__is_ratio_v<_R1>)
 if constexpr (__is_ratio_v<_R2>)
   return true;
      return false;



    }

  template<typename _R1, typename _R2>
    struct __ratio_multiply
    {
      static_assert(std::__are_both_ratios<_R1, _R2>(),
      "both template arguments must be a std::ratio");

    private:
      static const intmax_t __gcd1 =
        __static_gcd<_R1::num, _R2::den>::value;
      static const intmax_t __gcd2 =
        __static_gcd<_R2::num, _R1::den>::value;

    public:
      typedef ratio<
        __safe_multiply<(_R1::num / __gcd1),
                        (_R2::num / __gcd2)>::value,
        __safe_multiply<(_R1::den / __gcd2),
                        (_R2::den / __gcd1)>::value> type;

      static constexpr intmax_t num = type::num;
      static constexpr intmax_t den = type::den;
    };
# 362 "/usr/include/c++/15.1.1/ratio" 3
  template<typename _R1, typename _R2>
    using ratio_multiply = typename __ratio_multiply<_R1, _R2>::type;



  template<typename _R1, typename _R2>
    struct __ratio_divide
    {
      static_assert(_R2::num != 0, "division by 0");

      typedef typename __ratio_multiply<
        _R1,
        ratio<_R2::den, _R2::num>>::type type;

      static constexpr intmax_t num = type::num;
      static constexpr intmax_t den = type::den;
    };
# 391 "/usr/include/c++/15.1.1/ratio" 3
  template<typename _R1, typename _R2>
    using ratio_divide = typename __ratio_divide<_R1, _R2>::type;


  template<typename _R1, typename _R2>
    struct ratio_equal
    : integral_constant<bool, _R1::num == _R2::num && _R1::den == _R2::den>
    {
      static_assert(std::__are_both_ratios<_R1, _R2>(),
      "both template arguments must be a std::ratio");
    };


  template<typename _R1, typename _R2>
    struct ratio_not_equal
    : integral_constant<bool, !ratio_equal<_R1, _R2>::value>
    { };




  template<typename _R1, typename _R2,
           typename _Left = __big_mul<_R1::num,_R2::den>,
           typename _Right = __big_mul<_R2::num,_R1::den> >
    struct __ratio_less_impl_1
    : integral_constant<bool, __big_less<_Left::__hi, _Left::__lo,
           _Right::__hi, _Right::__lo>::value>
    { };

  template<typename _R1, typename _R2,
    bool = (_R1::num == 0 || _R2::num == 0
     || (__static_sign<_R1::num>::value
         != __static_sign<_R2::num>::value)),
    bool = (__static_sign<_R1::num>::value == -1
     && __static_sign<_R2::num>::value == -1)>
    struct __ratio_less_impl
    : __ratio_less_impl_1<_R1, _R2>::type
    { };

  template<typename _R1, typename _R2>
    struct __ratio_less_impl<_R1, _R2, true, false>
    : integral_constant<bool, _R1::num < _R2::num>
    { };

  template<typename _R1, typename _R2>
    struct __ratio_less_impl<_R1, _R2, false, true>
    : __ratio_less_impl_1<ratio<-_R2::num, _R2::den>,
           ratio<-_R1::num, _R1::den> >::type
    { };




  template<typename _R1, typename _R2>
    struct ratio_less
    : __ratio_less_impl<_R1, _R2>::type
    {
      static_assert(std::__are_both_ratios<_R1, _R2>(),
      "both template arguments must be a std::ratio");
    };


  template<typename _R1, typename _R2>
    struct ratio_less_equal
    : integral_constant<bool, !ratio_less<_R2, _R1>::value>
    { };


  template<typename _R1, typename _R2>
    struct ratio_greater
    : integral_constant<bool, ratio_less<_R2, _R1>::value>
    { };


  template<typename _R1, typename _R2>
    struct ratio_greater_equal
    : integral_constant<bool, !ratio_less<_R1, _R2>::value>
    { };


  template <typename _R1, typename _R2>
    inline constexpr bool ratio_equal_v = ratio_equal<_R1, _R2>::value;
  template <typename _R1, typename _R2>
    inline constexpr bool ratio_not_equal_v = ratio_not_equal<_R1, _R2>::value;
  template <typename _R1, typename _R2>
    inline constexpr bool ratio_less_v = ratio_less<_R1, _R2>::value;
  template <typename _R1, typename _R2>
    inline constexpr bool ratio_less_equal_v
      = ratio_less_equal<_R1, _R2>::value;
  template <typename _R1, typename _R2>
    inline constexpr bool ratio_greater_v = ratio_greater<_R1, _R2>::value;
  template <typename _R1, typename _R2>
    inline constexpr bool ratio_greater_equal_v
      = ratio_greater_equal<_R1, _R2>::value;




  template<typename _R1, typename _R2,
      bool = (_R1::num >= 0),
      bool = (_R2::num >= 0),
      bool = ratio_less<ratio<__static_abs<_R1::num>::value, _R1::den>,
        ratio<__static_abs<_R2::num>::value, _R2::den> >::value>
    struct __ratio_add_impl
    {
    private:
      typedef typename __ratio_add_impl<
        ratio<-_R1::num, _R1::den>,
        ratio<-_R2::num, _R2::den> >::type __t;
    public:
      typedef ratio<-__t::num, __t::den> type;
    };


  template<typename _R1, typename _R2, bool __b>
    struct __ratio_add_impl<_R1, _R2, true, true, __b>
    {
    private:
      static constexpr uintmax_t __g = __static_gcd<_R1::den, _R2::den>::value;
      static constexpr uintmax_t __d2 = _R2::den / __g;
      typedef __big_mul<_R1::den, __d2> __d;
      typedef __big_mul<_R1::num, _R2::den / __g> __x;
      typedef __big_mul<_R2::num, _R1::den / __g> __y;
      typedef __big_add<__x::__hi, __x::__lo, __y::__hi, __y::__lo> __n;
      static_assert(__n::__hi >= __x::__hi, "Internal library error");
      typedef __big_div<__n::__hi, __n::__lo, __g> __ng;
      static constexpr uintmax_t __g2 = __static_gcd<__ng::__rem, __g>::value;
      typedef __big_div<__n::__hi, __n::__lo, __g2> __n_final;
      static_assert(__n_final::__rem == 0, "Internal library error");
      static_assert(__n_final::__quot_hi == 0 &&
        __n_final::__quot_lo <= 0x7fffffffffffffffL, "overflow in addition");
      typedef __big_mul<_R1::den / __g2, __d2> __d_final;
      static_assert(__d_final::__hi == 0 &&
        __d_final::__lo <= 0x7fffffffffffffffL, "overflow in addition");
    public:
      typedef ratio<__n_final::__quot_lo, __d_final::__lo> type;
    };

  template<typename _R1, typename _R2>
    struct __ratio_add_impl<_R1, _R2, false, true, true>
    : __ratio_add_impl<_R2, _R1>
    { };


  template<typename _R1, typename _R2>
    struct __ratio_add_impl<_R1, _R2, true, false, false>
    {
    private:
      static constexpr uintmax_t __g = __static_gcd<_R1::den, _R2::den>::value;
      static constexpr uintmax_t __d2 = _R2::den / __g;
      typedef __big_mul<_R1::den, __d2> __d;
      typedef __big_mul<_R1::num, _R2::den / __g> __x;
      typedef __big_mul<-_R2::num, _R1::den / __g> __y;
      typedef __big_sub<__x::__hi, __x::__lo, __y::__hi, __y::__lo> __n;
      typedef __big_div<__n::__hi, __n::__lo, __g> __ng;
      static constexpr uintmax_t __g2 = __static_gcd<__ng::__rem, __g>::value;
      typedef __big_div<__n::__hi, __n::__lo, __g2> __n_final;
      static_assert(__n_final::__rem == 0, "Internal library error");
      static_assert(__n_final::__quot_hi == 0 &&
        __n_final::__quot_lo <= 0x7fffffffffffffffL, "overflow in addition");
      typedef __big_mul<_R1::den / __g2, __d2> __d_final;
      static_assert(__d_final::__hi == 0 &&
        __d_final::__lo <= 0x7fffffffffffffffL, "overflow in addition");
    public:
      typedef ratio<__n_final::__quot_lo, __d_final::__lo> type;
    };

  template<typename _R1, typename _R2>
    struct __ratio_add
    {
      static_assert(std::__are_both_ratios<_R1, _R2>(),
      "both template arguments must be a std::ratio");

      typedef typename __ratio_add_impl<_R1, _R2>::type type;
      static constexpr intmax_t num = type::num;
      static constexpr intmax_t den = type::den;
    };
# 580 "/usr/include/c++/15.1.1/ratio" 3
  template<typename _R1, typename _R2>
    using ratio_add = typename __ratio_add<_R1, _R2>::type;



  template<typename _R1, typename _R2>
    struct __ratio_subtract
    {
      typedef typename __ratio_add<
        _R1,
        ratio<-_R2::num, _R2::den>>::type type;

      static constexpr intmax_t num = type::num;
      static constexpr intmax_t den = type::den;
    };
# 607 "/usr/include/c++/15.1.1/ratio" 3
  template<typename _R1, typename _R2>
    using ratio_subtract = typename __ratio_subtract<_R1, _R2>::type;
# 620 "/usr/include/c++/15.1.1/ratio" 3
  using atto = ratio< 1, 1000000000000000000>;
  using femto = ratio< 1, 1000000000000000>;
  using pico = ratio< 1, 1000000000000>;
  using nano = ratio< 1, 1000000000>;
  using micro = ratio< 1, 1000000>;
  using milli = ratio< 1, 1000>;
  using centi = ratio< 1, 100>;
  using deci = ratio< 1, 10>;
  using deca = ratio< 10, 1>;
  using hecto = ratio< 100, 1>;
  using kilo = ratio< 1000, 1>;
  using mega = ratio< 1000000, 1>;
  using giga = ratio< 1000000000, 1>;
  using tera = ratio< 1000000000000, 1>;
  using peta = ratio< 1000000000000000, 1>;
  using exa = ratio< 1000000000000000000, 1>;
# 648 "/usr/include/c++/15.1.1/ratio" 3

}
# 40 "/usr/include/c++/15.1.1/bits/chrono.h" 2 3



# 1 "/usr/include/c++/15.1.1/ctime" 1 3
# 40 "/usr/include/c++/15.1.1/ctime" 3
#define _GLIBCXX_CTIME 1
# 50 "/usr/include/c++/15.1.1/ctime" 3
#undef clock
#undef difftime
#undef mktime
#undef time
#undef asctime
#undef ctime
#undef gmtime
#undef localtime
#undef strftime

namespace std
{
  using ::clock_t;
  using ::time_t;
  using ::tm;

  using ::clock;
  using ::difftime;
  using ::mktime;
  using ::time;
  using ::asctime;
  using ::ctime;
  using ::gmtime;
  using ::localtime;
  using ::strftime;
}


#undef timespec_get
namespace std
{
  using ::timespec;
  using ::timespec_get;
}
# 44 "/usr/include/c++/15.1.1/bits/chrono.h" 2 3







# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 52 "/usr/include/c++/15.1.1/bits/chrono.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  namespace filesystem { struct __file_clock; };


  namespace chrono
  {




    template<typename _Rep, typename _Period = ratio<1>>
      class duration;


    template<typename _Clock, typename _Dur = typename _Clock::duration>
      class time_point;

  }
# 83 "/usr/include/c++/15.1.1/bits/chrono.h" 3
  template<typename _CT, typename _Period1, typename _Period2, typename = void>
    struct __duration_common_type
    { };

  template<typename _CT, typename _Period1, typename _Period2>
    struct __duration_common_type<_CT, _Period1, _Period2,
      __void_t<typename _CT::type>>
    {
    private:
      using __gcd_num = __static_gcd<_Period1::num, _Period2::num>;
      using __gcd_den = __static_gcd<_Period1::den, _Period2::den>;
      using __cr = typename _CT::type;
      using __r = ratio<__gcd_num::value,
   (_Period1::den / __gcd_den::value) * _Period2::den>;

    public:
      using type = chrono::duration<__cr, typename __r::type>;
    };







  template<typename _Rep1, typename _Period1, typename _Rep2, typename _Period2>
    struct common_type<chrono::duration<_Rep1, _Period1>,
         chrono::duration<_Rep2, _Period2>>
    : __duration_common_type<common_type<_Rep1, _Rep2>,
        typename _Period1::type,
        typename _Period2::type>
    { };


  template<typename _Rep, typename _Period>
    struct common_type<chrono::duration<_Rep, _Period>,
         chrono::duration<_Rep, _Period>>
    {
      using type = chrono::duration<typename common_type<_Rep>::type,
        typename _Period::type>;
    };


  template<typename _Rep, typename _Period>
    struct common_type<chrono::duration<_Rep, _Period>>
    {
      using type = chrono::duration<typename common_type<_Rep>::type,
        typename _Period::type>;
    };






  template<typename _CT, typename _Clock, typename = void>
    struct __timepoint_common_type
    { };

  template<typename _CT, typename _Clock>
    struct __timepoint_common_type<_CT, _Clock, __void_t<typename _CT::type>>
    {
      using type = chrono::time_point<_Clock, typename _CT::type>;
    };







  template<typename _Clock, typename _Duration1, typename _Duration2>
    struct common_type<chrono::time_point<_Clock, _Duration1>,
         chrono::time_point<_Clock, _Duration2>>
    : __timepoint_common_type<common_type<_Duration1, _Duration2>, _Clock>
    { };


  template<typename _Clock, typename _Duration>
    struct common_type<chrono::time_point<_Clock, _Duration>,
         chrono::time_point<_Clock, _Duration>>
    { using type = chrono::time_point<_Clock, _Duration>; };


  template<typename _Clock, typename _Duration>
    struct common_type<chrono::time_point<_Clock, _Duration>>
    { using type = chrono::time_point<_Clock, _Duration>; };




  namespace chrono
  {






    template<typename _ToDur, typename _CF, typename _CR,
      bool _NumIsOne = false, bool _DenIsOne = false>
      struct __duration_cast_impl
      {
 template<typename _Rep, typename _Period>
   static constexpr _ToDur
   __cast(const duration<_Rep, _Period>& __d)
   {
     typedef typename _ToDur::rep __to_rep;
     return _ToDur(static_cast<__to_rep>(static_cast<_CR>(__d.count())
       * static_cast<_CR>(_CF::num)
       / static_cast<_CR>(_CF::den)));
   }
      };

    template<typename _ToDur, typename _CF, typename _CR>
      struct __duration_cast_impl<_ToDur, _CF, _CR, true, true>
      {
 template<typename _Rep, typename _Period>
   static constexpr _ToDur
   __cast(const duration<_Rep, _Period>& __d)
   {
     typedef typename _ToDur::rep __to_rep;
     return _ToDur(static_cast<__to_rep>(__d.count()));
   }
      };

    template<typename _ToDur, typename _CF, typename _CR>
      struct __duration_cast_impl<_ToDur, _CF, _CR, true, false>
      {
 template<typename _Rep, typename _Period>
   static constexpr _ToDur
   __cast(const duration<_Rep, _Period>& __d)
   {
     typedef typename _ToDur::rep __to_rep;
     return _ToDur(static_cast<__to_rep>(
       static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
   }
      };

    template<typename _ToDur, typename _CF, typename _CR>
      struct __duration_cast_impl<_ToDur, _CF, _CR, false, true>
      {
 template<typename _Rep, typename _Period>
   static constexpr _ToDur
   __cast(const duration<_Rep, _Period>& __d)
   {
     typedef typename _ToDur::rep __to_rep;
     return _ToDur(static_cast<__to_rep>(
       static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
   }
      };

    template<typename _Tp>
      struct __is_duration
      : std::false_type
      { };

    template<typename _Rep, typename _Period>
      struct __is_duration<duration<_Rep, _Period>>
      : std::true_type
      { };

    template<typename _Tp>
      using __enable_if_is_duration
 = typename enable_if<__is_duration<_Tp>::value, _Tp>::type;

    template<typename _Tp>
      using __disable_if_is_duration
 = typename enable_if<!__is_duration<_Tp>::value, _Tp>::type;


    template<typename _Tp>
      inline constexpr bool __is_duration_v = false;
    template<typename _Rep, typename _Period>
      inline constexpr bool __is_duration_v<duration<_Rep, _Period>> = true;
    template<typename _Tp>
      inline constexpr bool __is_time_point_v = false;
    template<typename _Clock, typename _Dur>
      inline constexpr bool __is_time_point_v<time_point<_Clock, _Dur>> = true;
# 276 "/usr/include/c++/15.1.1/bits/chrono.h" 3
    template<typename _ToDur, typename _Rep, typename _Period>
      [[__nodiscard__]]
      constexpr __enable_if_is_duration<_ToDur>
      duration_cast(const duration<_Rep, _Period>& __d)
      {

 if constexpr (is_same_v<_ToDur, duration<_Rep, _Period>>)
   return __d;
 else
   {

   using __to_period = typename _ToDur::period;
   using __to_rep = typename _ToDur::rep;
   using __cf = ratio_divide<_Period, __to_period>;
   using __cr = typename common_type<__to_rep, _Rep, intmax_t>::type;
   using __dc = __duration_cast_impl<_ToDur, __cf, __cr,
         __cf::num == 1, __cf::den == 1>;
   return __dc::__cast(__d);

   }

      }
# 310 "/usr/include/c++/15.1.1/bits/chrono.h" 3
    template<typename _Rep>
      struct treat_as_floating_point
      : is_floating_point<_Rep>
      { };


    template <typename _Rep>
      inline constexpr bool treat_as_floating_point_v =
 treat_as_floating_point<_Rep>::value;

    template<>
      inline constexpr bool treat_as_floating_point_v<int> = false;
    template<>
      inline constexpr bool treat_as_floating_point_v<long> = false;
    template<>
      inline constexpr bool treat_as_floating_point_v<long long> = false;
    template<>
      inline constexpr bool treat_as_floating_point_v<float> = true;
    template<>
      inline constexpr bool treat_as_floating_point_v<double> = true;
    template<>
      inline constexpr bool treat_as_floating_point_v<long double> = true;
# 390 "/usr/include/c++/15.1.1/bits/chrono.h" 3
    template<typename _ToDur, typename _Rep, typename _Period>
      [[nodiscard]] constexpr __enable_if_is_duration<_ToDur>
      floor(const duration<_Rep, _Period>& __d)
      {
 auto __to = chrono::duration_cast<_ToDur>(__d);
 if (__to > __d)
   return __to - _ToDur{1};
 return __to;
      }
# 410 "/usr/include/c++/15.1.1/bits/chrono.h" 3
    template<typename _ToDur, typename _Rep, typename _Period>
      [[nodiscard]] constexpr __enable_if_is_duration<_ToDur>
      ceil(const duration<_Rep, _Period>& __d)
      {
 auto __to = chrono::duration_cast<_ToDur>(__d);
 if (__to < __d)
   return __to + _ToDur{1};
 return __to;
      }
# 431 "/usr/include/c++/15.1.1/bits/chrono.h" 3
    template <typename _ToDur, typename _Rep, typename _Period>
      [[nodiscard]] constexpr
      enable_if_t<
 __and_<__is_duration<_ToDur>,
        __not_<treat_as_floating_point<typename _ToDur::rep>>>::value,
 _ToDur>
      round(const duration<_Rep, _Period>& __d)
      {
 _ToDur __t0 = chrono::floor<_ToDur>(__d);
 _ToDur __t1 = __t0 + _ToDur{1};
 auto __diff0 = __d - __t0;
 auto __diff1 = __t1 - __d;
 if (__diff0 == __diff1)
   {
     if (__t0.count() & 1)
       return __t1;
     return __t0;
   }
 else if (__diff0 < __diff1)
   return __t0;
 return __t1;
      }







    template<typename _Rep, typename _Period>
      [[nodiscard]] constexpr
      enable_if_t<numeric_limits<_Rep>::is_signed, duration<_Rep, _Period>>
      abs(duration<_Rep, _Period> __d)
      {
 if (__d >= __d.zero())
   return __d;
 return -__d;
      }


    namespace __detail { using chrono::ceil; }
# 498 "/usr/include/c++/15.1.1/bits/chrono.h" 3
    template<typename _Rep>
      struct duration_values
      {
 static constexpr _Rep
 zero() noexcept
 { return _Rep(0); }

 static constexpr _Rep
 max() noexcept
 { return numeric_limits<_Rep>::max(); }

 static constexpr _Rep
 min() noexcept
 { return numeric_limits<_Rep>::lowest(); }
      };

    template<typename _Rep, typename _Period>
      class duration
      {
 static_assert(!__is_duration<_Rep>::value,
        "rep cannot be a std::chrono::duration");
 static_assert(__is_ratio<_Period>::value,
        "period must be a specialization of std::ratio");
 static_assert(_Period::num > 0, "period must be positive");

 template<typename _Rep2>
   using __is_float = treat_as_floating_point<_Rep2>;

 static constexpr intmax_t
 _S_gcd(intmax_t __m, intmax_t __n) noexcept
 {



   do
     {
       intmax_t __rem = __m % __n;
       __m = __n;
       __n = __rem;
     }
   while (__n != 0);
   return __m;





 }





 template<typename _R1, typename _R2,
   intmax_t __gcd1 = _S_gcd(_R1::num, _R2::num),
   intmax_t __gcd2 = _S_gcd(_R1::den, _R2::den)>
   using __divide = ratio<(_R1::num / __gcd1) * (_R2::den / __gcd2),
     (_R1::den / __gcd2) * (_R2::num / __gcd1)>;


 template<typename _Period2>
   using __is_harmonic
     = __bool_constant<__divide<_Period2, _Period>::den == 1>;

      public:

 using rep = _Rep;
 using period = typename _Period::type;


 constexpr duration() = default;

 duration(const duration&) = default;



 template<typename _Rep2, typename = _Require<
   is_convertible<const _Rep2&, rep>,
   __or_<__is_float<rep>, __not_<__is_float<_Rep2>>>>>
   constexpr explicit duration(const _Rep2& __rep)
   : __r(static_cast<rep>(__rep)) { }

 template<typename _Rep2, typename _Period2, typename = _Require<
   is_convertible<const _Rep2&, rep>,
   __or_<__is_float<rep>,
         __and_<__is_harmonic<_Period2>,
         __not_<__is_float<_Rep2>>>>>>
   constexpr duration(const duration<_Rep2, _Period2>& __d)
   : __r(duration_cast<duration>(__d).count()) { }

 ~duration() = default;
 duration& operator=(const duration&) = default;


 constexpr rep
 count() const
 { return __r; }



 constexpr duration<typename common_type<rep>::type, period>
 operator+() const
 { return duration<typename common_type<rep>::type, period>(__r); }

 constexpr duration<typename common_type<rep>::type, period>
 operator-() const
 { return duration<typename common_type<rep>::type, period>(-__r); }

 constexpr duration&
 operator++()
 {
   ++__r;
   return *this;
 }

 constexpr duration
 operator++(int)
 { return duration(__r++); }

 constexpr duration&
 operator--()
 {
   --__r;
   return *this;
 }

 constexpr duration
 operator--(int)
 { return duration(__r--); }

 constexpr duration&
 operator+=(const duration& __d)
 {
   __r += __d.count();
   return *this;
 }

 constexpr duration&
 operator-=(const duration& __d)
 {
   __r -= __d.count();
   return *this;
 }

 constexpr duration&
 operator*=(const rep& __rhs)
 {
   __r *= __rhs;
   return *this;
 }

 constexpr duration&
 operator/=(const rep& __rhs)
 {
   __r /= __rhs;
   return *this;
 }


 template<typename _Rep2 = rep>
   constexpr
   __enable_if_t<!treat_as_floating_point<_Rep2>::value, duration&>
   operator%=(const rep& __rhs)
   {
     __r %= __rhs;
     return *this;
   }

 template<typename _Rep2 = rep>
   constexpr
   __enable_if_t<!treat_as_floating_point<_Rep2>::value, duration&>
   operator%=(const duration& __d)
   {
     __r %= __d.count();
     return *this;
   }


 static constexpr duration
 zero() noexcept
 { return duration(duration_values<rep>::zero()); }

 static constexpr duration
 min() noexcept
 { return duration(duration_values<rep>::min()); }

 static constexpr duration
 max() noexcept
 { return duration(duration_values<rep>::max()); }

      private:
 rep __r;
      };





    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr typename common_type<duration<_Rep1, _Period1>,
         duration<_Rep2, _Period2>>::type
      operator+(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __cd;
 return __cd(__cd(__lhs).count() + __cd(__rhs).count());
      }


    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr typename common_type<duration<_Rep1, _Period1>,
         duration<_Rep2, _Period2>>::type
      operator-(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __cd;
 return __cd(__cd(__lhs).count() - __cd(__rhs).count());
      }
# 731 "/usr/include/c++/15.1.1/bits/chrono.h" 3
    template<typename _Rep1, typename _Rep2,
      typename _CRep = typename common_type<_Rep1, _Rep2>::type>
      using __common_rep_t = typename
 enable_if<is_convertible<const _Rep2&, _CRep>::value, _CRep>::type;
# 743 "/usr/include/c++/15.1.1/bits/chrono.h" 3
    template<typename _Rep1, typename _Period, typename _Rep2>
      constexpr duration<__common_rep_t<_Rep1, _Rep2>, _Period>
      operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
      {
 typedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>
   __cd;
 return __cd(__cd(__d).count() * __s);
      }

    template<typename _Rep1, typename _Rep2, typename _Period>
      constexpr duration<__common_rep_t<_Rep2, _Rep1>, _Period>
      operator*(const _Rep1& __s, const duration<_Rep2, _Period>& __d)
      { return __d * __s; }

    template<typename _Rep1, typename _Period, typename _Rep2>
      constexpr
      duration<__common_rep_t<_Rep1, __disable_if_is_duration<_Rep2>>, _Period>
      operator/(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
      {
 typedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>
   __cd;
 return __cd(__cd(__d).count() / __s);
      }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr typename common_type<_Rep1, _Rep2>::type
      operator/(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __cd;
 return __cd(__lhs).count() / __cd(__rhs).count();
      }


    template<typename _Rep1, typename _Period, typename _Rep2>
      constexpr
      duration<__common_rep_t<_Rep1, __disable_if_is_duration<_Rep2>>, _Period>
      operator%(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
      {
 typedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>
   __cd;
 return __cd(__cd(__d).count() % __s);
      }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr typename common_type<duration<_Rep1, _Period1>,
         duration<_Rep2, _Period2>>::type
      operator%(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __cd;
 return __cd(__cd(__lhs).count() % __cd(__rhs).count());
      }
# 811 "/usr/include/c++/15.1.1/bits/chrono.h" 3
    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator==(const duration<_Rep1, _Period1>& __lhs,
   const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __ct;
 return __ct(__lhs).count() == __ct(__rhs).count();
      }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator<(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __ct;
 return __ct(__lhs).count() < __ct(__rhs).count();
      }
# 848 "/usr/include/c++/15.1.1/bits/chrono.h" 3
    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator!=(const duration<_Rep1, _Period1>& __lhs,
   const duration<_Rep2, _Period2>& __rhs)
      { return !(__lhs == __rhs); }


    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator<=(const duration<_Rep1, _Period1>& __lhs,
   const duration<_Rep2, _Period2>& __rhs)
      { return !(__rhs < __lhs); }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator>(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      { return __rhs < __lhs; }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator>=(const duration<_Rep1, _Period1>& __lhs,
   const duration<_Rep2, _Period2>& __rhs)
      { return !(__lhs < __rhs); }





#define _GLIBCXX_CHRONO_INT64_T int64_t
# 892 "/usr/include/c++/15.1.1/bits/chrono.h" 3
    using nanoseconds = duration<int64_t, nano>;


    using microseconds = duration<int64_t, micro>;


    using milliseconds = duration<int64_t, milli>;


    using seconds = duration<int64_t>;


    using minutes = duration<int64_t, ratio< 60>>;


    using hours = duration<int64_t, ratio<3600>>;
# 923 "/usr/include/c++/15.1.1/bits/chrono.h" 3
#undef _GLIBCXX_CHRONO_INT64_T

    template<typename _Clock, typename _Dur>
      class time_point
      {
 static_assert(__is_duration<_Dur>::value,
     "duration must be a specialization of std::chrono::duration");

      public:
 typedef _Clock clock;
 typedef _Dur duration;
 typedef typename duration::rep rep;
 typedef typename duration::period period;

 constexpr time_point() : __d(duration::zero())
 { }

 constexpr explicit time_point(const duration& __dur)
 : __d(__dur)
 { }


 template<typename _Dur2,
   typename = _Require<is_convertible<_Dur2, _Dur>>>
   constexpr time_point(const time_point<clock, _Dur2>& __t)
   : __d(__t.time_since_epoch())
   { }


 constexpr duration
 time_since_epoch() const
 { return __d; }
# 981 "/usr/include/c++/15.1.1/bits/chrono.h" 3
 constexpr time_point&
 operator+=(const duration& __dur)
 {
   __d += __dur;
   return *this;
 }

 constexpr time_point&
 operator-=(const duration& __dur)
 {
   __d -= __dur;
   return *this;
 }


 static constexpr time_point
 min() noexcept
 { return time_point(duration::min()); }

 static constexpr time_point
 max() noexcept
 { return time_point(duration::max()); }

      private:
 duration __d;
      };
# 1020 "/usr/include/c++/15.1.1/bits/chrono.h" 3
    template<typename _ToDur, typename _Clock, typename _Dur>
      [[__nodiscard__]] constexpr
      __enable_if_t<__is_duration<_ToDur>::value, time_point<_Clock, _ToDur>>
      time_point_cast(const time_point<_Clock, _Dur>& __t)
      {
 typedef time_point<_Clock, _ToDur> __time_point;
 return __time_point(duration_cast<_ToDur>(__t.time_since_epoch()));
      }
# 1042 "/usr/include/c++/15.1.1/bits/chrono.h" 3
    template<typename _ToDur, typename _Clock, typename _Dur>
      [[nodiscard]] constexpr
      enable_if_t<__is_duration_v<_ToDur>, time_point<_Clock, _ToDur>>
      floor(const time_point<_Clock, _Dur>& __tp)
      {
 return time_point<_Clock, _ToDur>{
     chrono::floor<_ToDur>(__tp.time_since_epoch())};
      }
# 1063 "/usr/include/c++/15.1.1/bits/chrono.h" 3
    template<typename _ToDur, typename _Clock, typename _Dur>
      [[nodiscard]] constexpr
      enable_if_t<__is_duration_v<_ToDur>, time_point<_Clock, _ToDur>>
      ceil(const time_point<_Clock, _Dur>& __tp)
      {
 return time_point<_Clock, _ToDur>{
     chrono::ceil<_ToDur>(__tp.time_since_epoch())};
      }
# 1085 "/usr/include/c++/15.1.1/bits/chrono.h" 3
    template<typename _ToDur, typename _Clock, typename _Dur>
      [[nodiscard]] constexpr
      enable_if_t<__is_duration_v<_ToDur>
      && !treat_as_floating_point_v<typename _ToDur::rep>,
    time_point<_Clock, _ToDur>>
      round(const time_point<_Clock, _Dur>& __tp)
      {
 return time_point<_Clock, _ToDur>{
     chrono::round<_ToDur>(__tp.time_since_epoch())};
      }






    template<typename _Clock, typename _Dur1,
      typename _Rep2, typename _Period2>
      constexpr time_point<_Clock,
 typename common_type<_Dur1, duration<_Rep2, _Period2>>::type>
      operator+(const time_point<_Clock, _Dur1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<_Dur1,__dur2>::type __ct;
 typedef time_point<_Clock, __ct> __time_point;
 return __time_point(__lhs.time_since_epoch() + __rhs);
      }


    template<typename _Rep1, typename _Period1,
      typename _Clock, typename _Dur2>
      constexpr time_point<_Clock,
 typename common_type<duration<_Rep1, _Period1>, _Dur2>::type>
      operator+(const duration<_Rep1, _Period1>& __lhs,
  const time_point<_Clock, _Dur2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef typename common_type<__dur1,_Dur2>::type __ct;
 typedef time_point<_Clock, __ct> __time_point;
 return __time_point(__rhs.time_since_epoch() + __lhs);
      }


    template<typename _Clock, typename _Dur1,
      typename _Rep2, typename _Period2>
      constexpr time_point<_Clock,
 typename common_type<_Dur1, duration<_Rep2, _Period2>>::type>
      operator-(const time_point<_Clock, _Dur1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<_Dur1,__dur2>::type __ct;
 typedef time_point<_Clock, __ct> __time_point;
 return __time_point(__lhs.time_since_epoch() -__rhs);
      }


    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr typename common_type<_Dur1, _Dur2>::type
      operator-(const time_point<_Clock, _Dur1>& __lhs,
  const time_point<_Clock, _Dur2>& __rhs)
      { return __lhs.time_since_epoch() - __rhs.time_since_epoch(); }







    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator==(const time_point<_Clock, _Dur1>& __lhs,
   const time_point<_Clock, _Dur2>& __rhs)
      { return __lhs.time_since_epoch() == __rhs.time_since_epoch(); }
# 1169 "/usr/include/c++/15.1.1/bits/chrono.h" 3
    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator!=(const time_point<_Clock, _Dur1>& __lhs,
   const time_point<_Clock, _Dur2>& __rhs)
      { return !(__lhs == __rhs); }


    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator<(const time_point<_Clock, _Dur1>& __lhs,
  const time_point<_Clock, _Dur2>& __rhs)
      { return __lhs.time_since_epoch() < __rhs.time_since_epoch(); }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator<=(const time_point<_Clock, _Dur1>& __lhs,
   const time_point<_Clock, _Dur2>& __rhs)
      { return !(__rhs < __lhs); }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator>(const time_point<_Clock, _Dur1>& __lhs,
  const time_point<_Clock, _Dur2>& __rhs)
      { return __rhs < __lhs; }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator>=(const time_point<_Clock, _Dur1>& __lhs,
   const time_point<_Clock, _Dur2>& __rhs)
      { return !(__lhs < __rhs); }
# 1222 "/usr/include/c++/15.1.1/bits/chrono.h" 3
inline namespace _V2 {







    struct system_clock
    {
      typedef chrono::nanoseconds duration;
      typedef duration::rep rep;
      typedef duration::period period;
      typedef chrono::time_point<system_clock, duration> time_point;

      static_assert(system_clock::duration::min()
      < system_clock::duration::zero(),
      "a clock's minimum duration cannot be less than its epoch");

      static constexpr bool is_steady = false;

      static time_point
      now() noexcept;


      static std::time_t
      to_time_t(const time_point& __t) noexcept
      {
 return std::time_t(duration_cast<chrono::seconds>
      (__t.time_since_epoch()).count());
      }

      static time_point
      from_time_t(std::time_t __t) noexcept
      {
 typedef chrono::time_point<system_clock, seconds> __from;
 return time_point_cast<system_clock::duration>
        (__from(chrono::seconds(__t)));
      }
    };
# 1270 "/usr/include/c++/15.1.1/bits/chrono.h" 3
    struct steady_clock
    {
      typedef chrono::nanoseconds duration;
      typedef duration::rep rep;
      typedef duration::period period;
      typedef chrono::time_point<steady_clock, duration> time_point;

      static constexpr bool is_steady = true;

      static time_point
      now() noexcept;
    };
# 1292 "/usr/include/c++/15.1.1/bits/chrono.h" 3
    using high_resolution_clock = system_clock;

}
# 1327 "/usr/include/c++/15.1.1/bits/chrono.h" 3
  }


  inline namespace literals
  {
# 1356 "/usr/include/c++/15.1.1/bits/chrono.h" 3
  inline namespace chrono_literals
  {



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wliteral-suffix"

    template<typename _Dur, char... _Digits>
      constexpr _Dur __check_overflow()
      {
 using _Val = __parse_int::_Parse_int<_Digits...>;
 constexpr typename _Dur::rep __repval = _Val::value;
 static_assert(__repval >= 0 && __repval == _Val::value,
        "literal value cannot be represented by duration type");
 return _Dur(__repval);
      }



    constexpr chrono::duration<long double, ratio<3600,1>>
    operator""h(long double __hours)
    { return chrono::duration<long double, ratio<3600,1>>{__hours}; }


    template <char... _Digits>
      constexpr chrono::hours
      operator""h()
      { return __check_overflow<chrono::hours, _Digits...>(); }


    constexpr chrono::duration<long double, ratio<60,1>>
    operator""min(long double __mins)
    { return chrono::duration<long double, ratio<60,1>>{__mins}; }


    template <char... _Digits>
      constexpr chrono::minutes
      operator""min()
      { return __check_overflow<chrono::minutes, _Digits...>(); }


    constexpr chrono::duration<long double>
    operator""s(long double __secs)
    { return chrono::duration<long double>{__secs}; }


    template <char... _Digits>
      constexpr chrono::seconds
      operator""s()
      { return __check_overflow<chrono::seconds, _Digits...>(); }


    constexpr chrono::duration<long double, milli>
    operator""ms(long double __msecs)
    { return chrono::duration<long double, milli>{__msecs}; }


    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }


    constexpr chrono::duration<long double, micro>
    operator""us(long double __usecs)
    { return chrono::duration<long double, micro>{__usecs}; }


    template <char... _Digits>
      constexpr chrono::microseconds
      operator""us()
      { return __check_overflow<chrono::microseconds, _Digits...>(); }


    constexpr chrono::duration<long double, nano>
    operator""ns(long double __nsecs)
    { return chrono::duration<long double, nano>{__nsecs}; }


    template <char... _Digits>
      constexpr chrono::nanoseconds
      operator""ns()
      { return __check_overflow<chrono::nanoseconds, _Digits...>(); }

#pragma GCC diagnostic pop

  }
  }

  namespace chrono
  {
    using namespace literals::chrono_literals;
  }



  namespace filesystem
  {
    struct __file_clock
    {
      using duration = chrono::nanoseconds;
      using rep = duration::rep;
      using period = duration::period;
      using time_point = chrono::time_point<__file_clock>;
      static constexpr bool is_steady = false;

      static time_point
      now() noexcept
      { return _S_from_sys(chrono::system_clock::now()); }
# 1482 "/usr/include/c++/15.1.1/bits/chrono.h" 3
    private:
      using __sys_clock = chrono::system_clock;




      static constexpr chrono::seconds _S_epoch_diff{6437664000};

    protected:

      template<typename _Dur>
 static
 chrono::time_point<__file_clock, common_type_t<_Dur, chrono::seconds>>
 _S_from_sys(const chrono::time_point<__sys_clock, _Dur>& __t) noexcept
 {
   using _CDur = common_type_t<_Dur, chrono::seconds>;
   using __file_time = chrono::time_point<__file_clock, _CDur>;
   return __file_time{__t.time_since_epoch()} - _S_epoch_diff;
 }


      template<typename _Dur>
 static
 chrono::time_point<__sys_clock, common_type_t<_Dur, chrono::seconds>>
 _S_to_sys(const chrono::time_point<__file_clock, _Dur>& __t) noexcept
 {
   using _CDur = common_type_t<_Dur, chrono::seconds>;
   using __sys_time = chrono::time_point<__sys_clock, _CDur>;
   return __sys_time{__t.time_since_epoch()} + _S_epoch_diff;
 }
    };
  }



}
# 46 "/usr/include/c++/15.1.1/mutex" 2 3



# 1 "/usr/include/c++/15.1.1/bits/std_mutex.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/std_mutex.h" 3
#define _GLIBCXX_MUTEX_H 1
# 45 "/usr/include/c++/15.1.1/bits/std_mutex.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 61 "/usr/include/c++/15.1.1/bits/std_mutex.h" 3
  class __mutex_base
  {
  protected:
    typedef __gthread_mutex_t __native_type;


    __native_type _M_mutex = { { 0, 0, 0, 0, PTHREAD_MUTEX_TIMED_NP, 0, 0, { __null, __null } } };

    constexpr __mutex_base() noexcept = default;
# 82 "/usr/include/c++/15.1.1/bits/std_mutex.h" 3
    __mutex_base(const __mutex_base&) = delete;
    __mutex_base& operator=(const __mutex_base&) = delete;
  };
# 98 "/usr/include/c++/15.1.1/bits/std_mutex.h" 3
  class mutex : private __mutex_base
  {
  public:
    typedef __native_type* native_handle_type;


    constexpr

    mutex() noexcept = default;
    ~mutex() = default;

    mutex(const mutex&) = delete;
    mutex& operator=(const mutex&) = delete;

    void
    lock()
    {
      int __e = __gthread_mutex_lock(&_M_mutex);


      if (__e)
 __throw_system_error(__e);
    }

    [[__nodiscard__]]
    bool
    try_lock() noexcept
    {

      return !__gthread_mutex_trylock(&_M_mutex);
    }

    void
    unlock()
    {

      __gthread_mutex_unlock(&_M_mutex);
    }

    native_handle_type
    native_handle() noexcept
    { return &_M_mutex; }
  };




  class __condvar
  {
    using timespec = __gthread_time_t;

  public:
    __condvar() noexcept
    {



    }

    ~__condvar()
    {
      int __e __attribute__((__unused__)) = __gthread_cond_destroy(&_M_cond);
      do { if (std::__is_constant_evaluated() && !bool(__e != 16)) std::__glibcxx_assert_fail(); } while (false);
    }

    __condvar(const __condvar&) = delete;
    __condvar& operator=(const __condvar&) = delete;

    __gthread_cond_t* native_handle() noexcept { return &_M_cond; }


    void
    wait(mutex& __m)
    {
      int __e __attribute__((__unused__))
 = __gthread_cond_wait(&_M_cond, __m.native_handle());
      do { if (std::__is_constant_evaluated() && !bool(__e == 0)) std::__glibcxx_assert_fail(); } while (false);
    }

    void
    wait_until(mutex& __m, timespec& __abs_time)
    {
      __gthread_cond_timedwait(&_M_cond, __m.native_handle(), &__abs_time);
    }


    void
    wait_until(mutex& __m, clockid_t __clock, timespec& __abs_time)
    {
      pthread_cond_clockwait(&_M_cond, __m.native_handle(), __clock,
        &__abs_time);
    }


    void
    notify_one() noexcept
    {
      int __e __attribute__((__unused__)) = __gthread_cond_signal(&_M_cond);
      do { if (std::__is_constant_evaluated() && !bool(__e == 0)) std::__glibcxx_assert_fail(); } while (false);
    }

    void
    notify_all() noexcept
    {
      int __e __attribute__((__unused__)) = __gthread_cond_broadcast(&_M_cond);
      do { if (std::__is_constant_evaluated() && !bool(__e == 0)) std::__glibcxx_assert_fail(); } while (false);
    }

  protected:

    __gthread_cond_t _M_cond = { { {0}, {0}, {0, 0}, 0, 0, {0, 0}, 0, 0 } };



  };





  struct defer_lock_t { explicit defer_lock_t() = default; };


  struct try_to_lock_t { explicit try_to_lock_t() = default; };



  struct adopt_lock_t { explicit adopt_lock_t() = default; };


  inline constexpr defer_lock_t defer_lock { };


  inline constexpr try_to_lock_t try_to_lock { };


  inline constexpr adopt_lock_t adopt_lock { };
# 244 "/usr/include/c++/15.1.1/bits/std_mutex.h" 3
  template<typename _Mutex>
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      [[__nodiscard__]]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }

      [[__nodiscard__]]
      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { }

      ~lock_guard()
      { _M_device.unlock(); }

      lock_guard(const lock_guard&) = delete;
      lock_guard& operator=(const lock_guard&) = delete;

    private:
      mutex_type& _M_device;
    };



}
# 50 "/usr/include/c++/15.1.1/mutex" 2 3
# 1 "/usr/include/c++/15.1.1/bits/unique_lock.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/unique_lock.h" 3
#define _GLIBCXX_UNIQUE_LOCK_H 1
# 46 "/usr/include/c++/15.1.1/bits/unique_lock.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 61 "/usr/include/c++/15.1.1/bits/unique_lock.h" 3
  template<typename _Mutex>
    class unique_lock
    {
    public:
      typedef _Mutex mutex_type;

      unique_lock() noexcept
      : _M_device(0), _M_owns(false)
      { }

      [[__nodiscard__]]
      explicit unique_lock(mutex_type& __m)
      : _M_device(std::__addressof(__m)), _M_owns(false)
      {
 lock();
 _M_owns = true;
      }

      unique_lock(mutex_type& __m, defer_lock_t) noexcept
      : _M_device(std::__addressof(__m)), _M_owns(false)
      { }

      [[__nodiscard__]]
      unique_lock(mutex_type& __m, try_to_lock_t)
      : _M_device(std::__addressof(__m)), _M_owns(_M_device->try_lock())
      { }

      [[__nodiscard__]]
      unique_lock(mutex_type& __m, adopt_lock_t) noexcept
      : _M_device(std::__addressof(__m)), _M_owns(true)
      {

      }

      template<typename _Clock, typename _Duration>
 [[__nodiscard__]]
 unique_lock(mutex_type& __m,
      const chrono::time_point<_Clock, _Duration>& __atime)
 : _M_device(std::__addressof(__m)),
   _M_owns(_M_device->try_lock_until(__atime))
 { }

      template<typename _Rep, typename _Period>
 [[__nodiscard__]]
 unique_lock(mutex_type& __m,
      const chrono::duration<_Rep, _Period>& __rtime)
 : _M_device(std::__addressof(__m)),
   _M_owns(_M_device->try_lock_for(__rtime))
 { }

      ~unique_lock()
      {
 if (_M_owns)
   unlock();
      }

      unique_lock(const unique_lock&) = delete;
      unique_lock& operator=(const unique_lock&) = delete;

      unique_lock(unique_lock&& __u) noexcept
      : _M_device(__u._M_device), _M_owns(__u._M_owns)
      {
 __u._M_device = 0;
 __u._M_owns = false;
      }

      unique_lock& operator=(unique_lock&& __u) noexcept
      {


 unique_lock(std::move(__u)).swap(*this);
 return *this;
      }

      void
      lock()
      {
 if (!_M_device)
   __throw_system_error(int(errc::operation_not_permitted));
 else if (_M_owns)
   __throw_system_error(int(errc::resource_deadlock_would_occur));
 else
   {
     _M_device->lock();
     _M_owns = true;
   }
      }

      [[__nodiscard__]]
      bool
      try_lock()
      {
 if (!_M_device)
   __throw_system_error(int(errc::operation_not_permitted));
 else if (_M_owns)
   __throw_system_error(int(errc::resource_deadlock_would_occur));
 else
   {
     _M_owns = _M_device->try_lock();
     return _M_owns;
   }
      }

      template<typename _Clock, typename _Duration>
 [[__nodiscard__]]
 bool
 try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)
 {
   if (!_M_device)
     __throw_system_error(int(errc::operation_not_permitted));
   else if (_M_owns)
     __throw_system_error(int(errc::resource_deadlock_would_occur));
   else
     {
       _M_owns = _M_device->try_lock_until(__atime);
       return _M_owns;
     }
 }

      template<typename _Rep, typename _Period>
 [[__nodiscard__]]
 bool
 try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)
 {
   if (!_M_device)
     __throw_system_error(int(errc::operation_not_permitted));
   else if (_M_owns)
     __throw_system_error(int(errc::resource_deadlock_would_occur));
   else
     {
       _M_owns = _M_device->try_lock_for(__rtime);
       return _M_owns;
     }
  }

      void
      unlock()
      {
 if (!_M_owns)
   __throw_system_error(int(errc::operation_not_permitted));
 else if (_M_device)
   {
     _M_device->unlock();
     _M_owns = false;
   }
      }

      void
      swap(unique_lock& __u) noexcept
      {
 std::swap(_M_device, __u._M_device);
 std::swap(_M_owns, __u._M_owns);
      }

      mutex_type*
      release() noexcept
      {
 mutex_type* __ret = _M_device;
 _M_device = 0;
 _M_owns = false;
 return __ret;
      }

      [[__nodiscard__]]
      bool
      owns_lock() const noexcept
      { return _M_owns; }

      explicit operator bool() const noexcept
      { return owns_lock(); }

      [[__nodiscard__]]
      mutex_type*
      mutex() const noexcept
      { return _M_device; }

    private:
      mutex_type* _M_device;
      bool _M_owns;
    };



  template<typename _Mutex>
    inline void
    swap(unique_lock<_Mutex>& __x, unique_lock<_Mutex>& __y) noexcept
    { __x.swap(__y); }


}
# 51 "/usr/include/c++/15.1.1/mutex" 2 3
# 61 "/usr/include/c++/15.1.1/mutex" 3
#define __glibcxx_want_scoped_lock 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 63 "/usr/include/c++/15.1.1/mutex" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 77 "/usr/include/c++/15.1.1/mutex" 3
  class __recursive_mutex_base
  {
  protected:
    typedef __gthread_recursive_mutex_t __native_type;

    __recursive_mutex_base(const __recursive_mutex_base&) = delete;
    __recursive_mutex_base& operator=(const __recursive_mutex_base&) = delete;


    __native_type _M_mutex = { { 0, 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP, 0, 0, { __null, __null } } };

    __recursive_mutex_base() = default;
# 101 "/usr/include/c++/15.1.1/mutex" 3
  };
# 113 "/usr/include/c++/15.1.1/mutex" 3
  class recursive_mutex : private __recursive_mutex_base
  {
  public:
    typedef __native_type* native_handle_type;

    recursive_mutex() = default;
    ~recursive_mutex() = default;

    recursive_mutex(const recursive_mutex&) = delete;
    recursive_mutex& operator=(const recursive_mutex&) = delete;

    void
    lock()
    {
      int __e = __gthread_recursive_mutex_lock(&_M_mutex);


      if (__e)
 __throw_system_error(__e);
    }

    [[__nodiscard__]]
    bool
    try_lock() noexcept
    {

      return !__gthread_recursive_mutex_trylock(&_M_mutex);
    }

    void
    unlock()
    {

      __gthread_recursive_mutex_unlock(&_M_mutex);
    }

    native_handle_type
    native_handle() noexcept
    { return &_M_mutex; }
  };




  template<typename _Derived>
    class __timed_mutex_impl
    {
    protected:
      template<typename _Rep, typename _Period>
 bool
 _M_try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)
 {

   using __clock = chrono::steady_clock;




   auto __rt = chrono::duration_cast<__clock::duration>(__rtime);
   if (ratio_greater<__clock::period, _Period>())
     ++__rt;
   return _M_try_lock_until(__clock::now() + __rt);
 }

      template<typename _Duration>
 bool
 _M_try_lock_until(const chrono::time_point<chrono::system_clock,
         _Duration>& __atime)
 {
   auto __s = chrono::time_point_cast<chrono::seconds>(__atime);
   auto __ns = chrono::duration_cast<chrono::nanoseconds>(__atime - __s);

   __gthread_time_t __ts = {
     static_cast<std::time_t>(__s.time_since_epoch().count()),
     static_cast<long>(__ns.count())
   };

   return static_cast<_Derived*>(this)->_M_timedlock(__ts);
 }


      template<typename _Duration>
 bool
 _M_try_lock_until(const chrono::time_point<chrono::steady_clock,
         _Duration>& __atime)
 {
   auto __s = chrono::time_point_cast<chrono::seconds>(__atime);
   auto __ns = chrono::duration_cast<chrono::nanoseconds>(__atime - __s);

   __gthread_time_t __ts = {
     static_cast<std::time_t>(__s.time_since_epoch().count()),
     static_cast<long>(__ns.count())
   };

   return static_cast<_Derived*>(this)->_M_clocklock(1,
           __ts);
 }


      template<typename _Clock, typename _Duration>
 bool
 _M_try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)
 {






   auto __now = _Clock::now();
   do {
     auto __rtime = __atime - __now;
     if (_M_try_lock_for(__rtime))
       return true;
     __now = _Clock::now();
   } while (__atime > __now);
   return false;
 }
    };
# 242 "/usr/include/c++/15.1.1/mutex" 3
  class timed_mutex
  : private __mutex_base, public __timed_mutex_impl<timed_mutex>
  {
  public:
    typedef __native_type* native_handle_type;

    timed_mutex() = default;
    ~timed_mutex() = default;

    timed_mutex(const timed_mutex&) = delete;
    timed_mutex& operator=(const timed_mutex&) = delete;

    void
    lock()
    {
      int __e = __gthread_mutex_lock(&_M_mutex);


      if (__e)
 __throw_system_error(__e);
    }

    [[__nodiscard__]]
    bool
    try_lock() noexcept
    {

      return !__gthread_mutex_trylock(&_M_mutex);
    }

    template <class _Rep, class _Period>
      [[__nodiscard__]]
      bool
      try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)
      { return _M_try_lock_for(__rtime); }

    template <class _Clock, class _Duration>
      [[__nodiscard__]]
      bool
      try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)
      { return _M_try_lock_until(__atime); }

    void
    unlock()
    {

      __gthread_mutex_unlock(&_M_mutex);
    }

    native_handle_type
    native_handle() noexcept
    { return &_M_mutex; }

    private:
      friend class __timed_mutex_impl<timed_mutex>;

      bool
      _M_timedlock(const __gthread_time_t& __ts)
      { return !__gthread_mutex_timedlock(&_M_mutex, &__ts); }


      bool
      _M_clocklock(clockid_t __clockid, const __gthread_time_t& __ts)
      { return !pthread_mutex_clocklock(&_M_mutex, __clockid, &__ts); }

  };
# 319 "/usr/include/c++/15.1.1/mutex" 3
  class recursive_timed_mutex
  : private __recursive_mutex_base,
    public __timed_mutex_impl<recursive_timed_mutex>
  {
  public:
    typedef __native_type* native_handle_type;

    recursive_timed_mutex() = default;
    ~recursive_timed_mutex() = default;

    recursive_timed_mutex(const recursive_timed_mutex&) = delete;
    recursive_timed_mutex& operator=(const recursive_timed_mutex&) = delete;

    void
    lock()
    {
      int __e = __gthread_recursive_mutex_lock(&_M_mutex);


      if (__e)
 __throw_system_error(__e);
    }

    [[__nodiscard__]]
    bool
    try_lock() noexcept
    {

      return !__gthread_recursive_mutex_trylock(&_M_mutex);
    }

    template <class _Rep, class _Period>
      [[__nodiscard__]]
      bool
      try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)
      { return _M_try_lock_for(__rtime); }

    template <class _Clock, class _Duration>
      [[__nodiscard__]]
      bool
      try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)
      { return _M_try_lock_until(__atime); }

    void
    unlock()
    {

      __gthread_recursive_mutex_unlock(&_M_mutex);
    }

    native_handle_type
    native_handle() noexcept
    { return &_M_mutex; }

    private:
      friend class __timed_mutex_impl<recursive_timed_mutex>;

      bool
      _M_timedlock(const __gthread_time_t& __ts)
      { return !__gthread_recursive_mutex_timedlock(&_M_mutex, &__ts); }


      bool
      _M_clocklock(clockid_t __clockid, const __gthread_time_t& __ts)
      { return !pthread_mutex_clocklock(&_M_mutex, __clockid, &__ts); }

  };
# 566 "/usr/include/c++/15.1.1/mutex" 3
  namespace __detail
  {

    template<typename _Lockable>
      inline int
      __try_lock_impl(_Lockable& __l)
      {
 if (unique_lock<_Lockable> __lock{__l, try_to_lock})
   {
     __lock.release();
     return -1;
   }
 else
   return 0;
      }



    template<typename _L0, typename... _Lockables>
      inline int
      __try_lock_impl(_L0& __l0, _Lockables&... __lockables)
      {

 if constexpr ((is_same_v<_L0, _Lockables> && ...))
   {
     constexpr int _Np = 1 + sizeof...(_Lockables);
     unique_lock<_L0> __locks[_Np] = {
  {__l0, defer_lock}, {__lockables, defer_lock}...
     };
     for (int __i = 0; __i < _Np; ++__i)
       {
  if (!__locks[__i].try_lock())
    {
      const int __failed = __i;
      while (__i--)
        __locks[__i].unlock();
      return __failed;
    }
       }
     for (auto& __l : __locks)
       __l.release();
     return -1;
   }
 else

 if (unique_lock<_L0> __lock{__l0, try_to_lock})
   {
     int __idx = __detail::__try_lock_impl(__lockables...);
     if (__idx == -1)
       {
  __lock.release();
  return -1;
       }
     return __idx + 1;
   }
 else
   return 0;
      }

  }
# 638 "/usr/include/c++/15.1.1/mutex" 3
  template<typename _L1, typename _L2, typename... _L3>
    [[__nodiscard__]]
    inline int
    try_lock(_L1& __l1, _L2& __l2, _L3&... __l3)
    {
      return __detail::__try_lock_impl(__l1, __l2, __l3...);
    }


  namespace __detail
  {





    template<typename _L0, typename... _L1>
      void
      __lock_impl(int& __i, int __depth, _L0& __l0, _L1&... __l1)
      {
 while (__i >= __depth)
   {
     if (__i == __depth)
       {
  int __failed = 1;
  {
    unique_lock<_L0> __first(__l0);
    __failed += __detail::__try_lock_impl(__l1...);
    if (!__failed)
      {
        __i = -1;
        __first.release();
        return;
      }
  }

  __gthread_yield();

  constexpr auto __n = 1 + sizeof...(_L1);
  __i = (__depth + __failed) % __n;
       }
     else
       __detail::__lock_impl(__i, __depth + 1, __l1..., __l0);
   }
      }

  }
# 698 "/usr/include/c++/15.1.1/mutex" 3
  template<typename _L1, typename _L2, typename... _L3>
    void
    lock(_L1& __l1, _L2& __l2, _L3&... __l3)
    {

      if constexpr (is_same_v<_L1, _L2> && (is_same_v<_L1, _L3> && ...))
 {
   constexpr int _Np = 2 + sizeof...(_L3);
   unique_lock<_L1> __locks[] = {
       {__l1, defer_lock}, {__l2, defer_lock}, {__l3, defer_lock}...
   };
   int __first = 0;
   do {
     __locks[__first].lock();
     for (int __j = 1; __j < _Np; ++__j)
       {
  const int __idx = (__first + __j) % _Np;
  if (!__locks[__idx].try_lock())
    {
      for (int __k = __j; __k != 0; --__k)
        __locks[(__first + __k - 1) % _Np].unlock();
      __first = __idx;
      break;
    }
       }
   } while (!__locks[__first].owns_lock());

   for (auto& __l : __locks)
     __l.release();
 }
      else

 {
   int __i = 0;
   __detail::__lock_impl(__i, 0, __l1, __l2, __l3...);
 }
    }
# 745 "/usr/include/c++/15.1.1/mutex" 3
  template<typename... _MutexTypes>
    class scoped_lock
    {
    public:

      [[nodiscard]]
      explicit scoped_lock(_MutexTypes&... __m) : _M_devices(std::tie(__m...))
      { std::lock(__m...); }

      [[nodiscard]]
      explicit scoped_lock(adopt_lock_t, _MutexTypes&... __m) noexcept
      : _M_devices(std::tie(__m...))
      { }

      ~scoped_lock()
      { std::apply([](auto&... __m) { (__m.unlock(), ...); }, _M_devices); }

      scoped_lock(const scoped_lock&) = delete;
      scoped_lock& operator=(const scoped_lock&) = delete;

    private:
      tuple<_MutexTypes&...> _M_devices;
    };

  template<>
    class scoped_lock<>
    {
    public:
      explicit scoped_lock() = default;
      explicit scoped_lock(adopt_lock_t) noexcept { }
      ~scoped_lock() = default;

      scoped_lock(const scoped_lock&) = delete;
      scoped_lock& operator=(const scoped_lock&) = delete;
    };

  template<typename _Mutex>
    class scoped_lock<_Mutex>
    {
    public:
      using mutex_type = _Mutex;

      [[nodiscard]]
      explicit scoped_lock(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }

      [[nodiscard]]
      explicit scoped_lock(adopt_lock_t, mutex_type& __m) noexcept
      : _M_device(__m)
      { }

      ~scoped_lock()
      { _M_device.unlock(); }

      scoped_lock(const scoped_lock&) = delete;
      scoped_lock& operator=(const scoped_lock&) = delete;

    private:
      mutex_type& _M_device;
    };




  struct once_flag
  {
    constexpr once_flag() noexcept = default;


    once_flag(const once_flag&) = delete;

    once_flag& operator=(const once_flag&) = delete;

  private:


    __gthread_once_t _M_once = 0;

    struct _Prepare_execution;

    template<typename _Callable, typename... _Args>
      friend void
      call_once(once_flag& __once, _Callable&& __f, _Args&&... __args);
  };





  extern __thread void* __once_callable;
  extern __thread void (*__once_call)();


  struct once_flag::_Prepare_execution
  {
    template<typename _Callable>
      explicit
      _Prepare_execution(_Callable& __c)
      {

 __once_callable = std::__addressof(__c);

 __once_call = [] { (*static_cast<_Callable*>(__once_callable))(); };
      }

    ~_Prepare_execution()
    {

      __once_callable = nullptr;
      __once_call = nullptr;
    }

    _Prepare_execution(const _Prepare_execution&) = delete;
    _Prepare_execution& operator=(const _Prepare_execution&) = delete;
  };
# 902 "/usr/include/c++/15.1.1/mutex" 3
  extern "C" void __once_proxy(void);


  template<typename _Callable, typename... _Args>
    void
    call_once(once_flag& __once, _Callable&& __f, _Args&&... __args)
    {

      auto __callable = [&] {
   std::__invoke(std::forward<_Callable>(__f),
   std::forward<_Args>(__args)...);
      };

      once_flag::_Prepare_execution __exec(__callable);


      if (int __e = __gthread_once(&__once._M_once, &__once_proxy))
 __throw_system_error(__e);
    }
# 1023 "/usr/include/c++/15.1.1/mutex" 3

}
# 31 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/internal/Synchronization.h" 2
# 1 "/usr/include/c++/15.1.1/shared_mutex" 1 3
# 30 "/usr/include/c++/15.1.1/shared_mutex" 3
#define _GLIBCXX_SHARED_MUTEX 1
# 46 "/usr/include/c++/15.1.1/shared_mutex" 3
#define __glibcxx_want_shared_mutex 
#define __glibcxx_want_shared_timed_mutex 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 49 "/usr/include/c++/15.1.1/shared_mutex" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 66 "/usr/include/c++/15.1.1/shared_mutex" 3
  class shared_mutex;


  class shared_timed_mutex;





#define _GLIBCXX_GTHRW(name) __gthrw(pthread_ ## name); inline int __glibcxx_ ## name (pthread_rwlock_t *__rwlock) { if (__gthread_active_p ()) return __gthrw_(pthread_ ## name) (__rwlock); else return 0; }
# 85 "/usr/include/c++/15.1.1/shared_mutex" 3
  ; inline int __glibcxx_rwlock_rdlock (pthread_rwlock_t *__rwlock) { if (__gthread_active_p ()) return pthread_rwlock_rdlock (__rwlock); else return 0; }
  ; inline int __glibcxx_rwlock_tryrdlock (pthread_rwlock_t *__rwlock) { if (__gthread_active_p ()) return pthread_rwlock_tryrdlock (__rwlock); else return 0; }
  ; inline int __glibcxx_rwlock_wrlock (pthread_rwlock_t *__rwlock) { if (__gthread_active_p ()) return pthread_rwlock_wrlock (__rwlock); else return 0; }
  ; inline int __glibcxx_rwlock_trywrlock (pthread_rwlock_t *__rwlock) { if (__gthread_active_p ()) return pthread_rwlock_trywrlock (__rwlock); else return 0; }
  ; inline int __glibcxx_rwlock_unlock (pthread_rwlock_t *__rwlock) { if (__gthread_active_p ()) return pthread_rwlock_unlock (__rwlock); else return 0; }
# 103 "/usr/include/c++/15.1.1/shared_mutex" 3
   ;
  inline int
  __glibcxx_rwlock_timedrdlock (pthread_rwlock_t *__rwlock,
    const timespec *__ts)
  {
    if (__gthread_active_p ())
      return pthread_rwlock_timedrdlock (__rwlock, __ts);
    else
      return 0;
  }
   ;
  inline int
  __glibcxx_rwlock_timedwrlock (pthread_rwlock_t *__rwlock,
    const timespec *__ts)
  {
    if (__gthread_active_p ())
      return pthread_rwlock_timedwrlock (__rwlock, __ts);
    else
      return 0;
  }
# 159 "/usr/include/c++/15.1.1/shared_mutex" 3
  class __shared_mutex_pthread
  {
    friend class shared_timed_mutex;


    pthread_rwlock_t _M_rwlock = { { 0, 0, 0, 0, 0, 0, 0, 0, 0, { 0, 0, 0, 0, 0, 0, 0 }, 0, PTHREAD_RWLOCK_DEFAULT_NP } };

  public:
    __shared_mutex_pthread() = default;
    ~__shared_mutex_pthread() = default;
# 194 "/usr/include/c++/15.1.1/shared_mutex" 3
    __shared_mutex_pthread(const __shared_mutex_pthread&) = delete;
    __shared_mutex_pthread& operator=(const __shared_mutex_pthread&) = delete;

    void
    lock()
    {
      int __ret = __glibcxx_rwlock_wrlock(&_M_rwlock);
      if (__ret == 35)
 __throw_system_error(int(errc::resource_deadlock_would_occur));

      do { if (std::__is_constant_evaluated() && !bool(__ret == 0)) std::__glibcxx_assert_fail(); } while (false);
    }

    bool
    try_lock()
    {
      int __ret = __glibcxx_rwlock_trywrlock(&_M_rwlock);
      if (__ret == 16) return false;

      do { if (std::__is_constant_evaluated() && !bool(__ret == 0)) std::__glibcxx_assert_fail(); } while (false);
      return true;
    }

    void
    unlock()
    {
      int __ret __attribute((__unused__)) = __glibcxx_rwlock_unlock(&_M_rwlock);

      do { if (std::__is_constant_evaluated() && !bool(__ret == 0)) std::__glibcxx_assert_fail(); } while (false);
    }



    void
    lock_shared()
    {
      int __ret;




      do
 __ret = __glibcxx_rwlock_rdlock(&_M_rwlock);
      while (__ret == 11);
      if (__ret == 35)
 __throw_system_error(int(errc::resource_deadlock_would_occur));

      do { if (std::__is_constant_evaluated() && !bool(__ret == 0)) std::__glibcxx_assert_fail(); } while (false);
    }

    bool
    try_lock_shared()
    {
      int __ret = __glibcxx_rwlock_tryrdlock(&_M_rwlock);



      if (__ret == 16 || __ret == 11) return false;

      do { if (std::__is_constant_evaluated() && !bool(__ret == 0)) std::__glibcxx_assert_fail(); } while (false);
      return true;
    }

    void
    unlock_shared()
    {
      unlock();
    }

    void* native_handle() { return &_M_rwlock; }
  };
# 416 "/usr/include/c++/15.1.1/shared_mutex" 3
  class shared_mutex
  {
  public:
    shared_mutex() = default;
    ~shared_mutex() = default;

    shared_mutex(const shared_mutex&) = delete;
    shared_mutex& operator=(const shared_mutex&) = delete;



    void lock() { _M_impl.lock(); }
    [[nodiscard]] bool try_lock() { return _M_impl.try_lock(); }
    void unlock() { _M_impl.unlock(); }



    void lock_shared() { _M_impl.lock_shared(); }
    [[nodiscard]] bool try_lock_shared() { return _M_impl.try_lock_shared(); }
    void unlock_shared() { _M_impl.unlock_shared(); }


    typedef void* native_handle_type;
    native_handle_type native_handle() { return _M_impl.native_handle(); }

  private:
    __shared_mutex_pthread _M_impl;




  };




  using __shared_timed_mutex_base = __shared_mutex_pthread;






  class shared_timed_mutex
  : private __shared_timed_mutex_base
  {
    using _Base = __shared_timed_mutex_base;



    using __clock_t = chrono::steady_clock;




  public:
    shared_timed_mutex() = default;
    ~shared_timed_mutex() = default;

    shared_timed_mutex(const shared_timed_mutex&) = delete;
    shared_timed_mutex& operator=(const shared_timed_mutex&) = delete;



    void lock() { _Base::lock(); }
    [[__nodiscard__]] bool try_lock() { return _Base::try_lock(); }
    void unlock() { _Base::unlock(); }

    template<typename _Rep, typename _Period>
      [[__nodiscard__]]
      bool
      try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)
      {
 auto __rt = chrono::duration_cast<__clock_t::duration>(__rtime);
 if (ratio_greater<__clock_t::period, _Period>())
   ++__rt;
 return try_lock_until(__clock_t::now() + __rt);
      }



    void lock_shared() { _Base::lock_shared(); }
    [[__nodiscard__]]
    bool try_lock_shared() { return _Base::try_lock_shared(); }
    void unlock_shared() { _Base::unlock_shared(); }

    template<typename _Rep, typename _Period>
      [[__nodiscard__]]
      bool
      try_lock_shared_for(const chrono::duration<_Rep, _Period>& __rtime)
      {
 auto __rt = chrono::duration_cast<__clock_t::duration>(__rtime);
 if (ratio_greater<__clock_t::period, _Period>())
   ++__rt;
 return try_lock_shared_until(__clock_t::now() + __rt);
      }





    template<typename _Duration>
      [[__nodiscard__]]
      bool
      try_lock_until(const chrono::time_point<chrono::system_clock,
       _Duration>& __atime)
      {
 auto __s = chrono::time_point_cast<chrono::seconds>(__atime);
 auto __ns = chrono::duration_cast<chrono::nanoseconds>(__atime - __s);

 __gthread_time_t __ts =
   {
     static_cast<std::time_t>(__s.time_since_epoch().count()),
     static_cast<long>(__ns.count())
   };

 int __ret = __glibcxx_rwlock_timedwrlock(&_M_rwlock, &__ts);


 if (__ret == 110 || __ret == 35)
   return false;

 do { if (std::__is_constant_evaluated() && !bool(__ret == 0)) std::__glibcxx_assert_fail(); } while (false);
 return true;
      }


    template<typename _Duration>
      [[__nodiscard__]]
      bool
      try_lock_until(const chrono::time_point<chrono::steady_clock,
     _Duration>& __atime)
      {
 auto __s = chrono::time_point_cast<chrono::seconds>(__atime);
 auto __ns = chrono::duration_cast<chrono::nanoseconds>(__atime - __s);

 __gthread_time_t __ts =
   {
     static_cast<std::time_t>(__s.time_since_epoch().count()),
     static_cast<long>(__ns.count())
   };

 int __ret = pthread_rwlock_clockwrlock(&_M_rwlock, 1,
            &__ts);


 if (__ret == 110 || __ret == 35)
   return false;

 do { if (std::__is_constant_evaluated() && !bool(__ret == 0)) std::__glibcxx_assert_fail(); } while (false);
 return true;
      }


    template<typename _Clock, typename _Duration>
      [[__nodiscard__]]
      bool
      try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)
      {






 typename _Clock::time_point __now = _Clock::now();
 do {
     auto __rtime = __atime - __now;
     if (try_lock_for(__rtime))
       return true;
     __now = _Clock::now();
 } while (__atime > __now);
 return false;
      }



    template<typename _Duration>
      [[__nodiscard__]]
      bool
      try_lock_shared_until(const chrono::time_point<chrono::system_clock,
       _Duration>& __atime)
      {
 auto __s = chrono::time_point_cast<chrono::seconds>(__atime);
 auto __ns = chrono::duration_cast<chrono::nanoseconds>(__atime - __s);

 __gthread_time_t __ts =
   {
     static_cast<std::time_t>(__s.time_since_epoch().count()),
     static_cast<long>(__ns.count())
   };

 int __ret;
# 622 "/usr/include/c++/15.1.1/shared_mutex" 3
 do
   __ret = __glibcxx_rwlock_timedrdlock(&_M_rwlock, &__ts);
 while (__ret == 11 || __ret == 35);
 if (__ret == 110)
   return false;

 do { if (std::__is_constant_evaluated() && !bool(__ret == 0)) std::__glibcxx_assert_fail(); } while (false);
 return true;
      }


    template<typename _Duration>
      [[__nodiscard__]]
      bool
      try_lock_shared_until(const chrono::time_point<chrono::steady_clock,
       _Duration>& __atime)
      {
 auto __s = chrono::time_point_cast<chrono::seconds>(__atime);
 auto __ns = chrono::duration_cast<chrono::nanoseconds>(__atime - __s);

 __gthread_time_t __ts =
   {
     static_cast<std::time_t>(__s.time_since_epoch().count()),
     static_cast<long>(__ns.count())
   };

 int __ret = pthread_rwlock_clockrdlock(&_M_rwlock, 1,
            &__ts);


 if (__ret == 110 || __ret == 35)
   return false;

 do { if (std::__is_constant_evaluated() && !bool(__ret == 0)) std::__glibcxx_assert_fail(); } while (false);
 return true;
      }


    template<typename _Clock, typename _Duration>
      [[__nodiscard__]]
      bool
      try_lock_shared_until(const chrono::time_point<_Clock,
           _Duration>& __atime)
      {






 typename _Clock::time_point __now = _Clock::now();
 do {
     auto __rtime = __atime - __now;
     if (try_lock_shared_for(__rtime))
       return true;
     __now = _Clock::now();
 } while (__atime > __now);
 return false;
      }
# 728 "/usr/include/c++/15.1.1/shared_mutex" 3
  };



  template<typename _Mutex>
    class shared_lock
    {
    public:
      typedef _Mutex mutex_type;



      shared_lock() noexcept : _M_pm(nullptr), _M_owns(false) { }

      explicit
      shared_lock(mutex_type& __m)
      : _M_pm(std::__addressof(__m)), _M_owns(true)
      { __m.lock_shared(); }

      shared_lock(mutex_type& __m, defer_lock_t) noexcept
      : _M_pm(std::__addressof(__m)), _M_owns(false) { }

      shared_lock(mutex_type& __m, try_to_lock_t)
      : _M_pm(std::__addressof(__m)), _M_owns(__m.try_lock_shared()) { }

      shared_lock(mutex_type& __m, adopt_lock_t)
      : _M_pm(std::__addressof(__m)), _M_owns(true) { }

      template<typename _Clock, typename _Duration>
 shared_lock(mutex_type& __m,
      const chrono::time_point<_Clock, _Duration>& __abs_time)
      : _M_pm(std::__addressof(__m)),
 _M_owns(__m.try_lock_shared_until(__abs_time)) { }

      template<typename _Rep, typename _Period>
 shared_lock(mutex_type& __m,
      const chrono::duration<_Rep, _Period>& __rel_time)
      : _M_pm(std::__addressof(__m)),
 _M_owns(__m.try_lock_shared_for(__rel_time)) { }

      ~shared_lock()
      {
 if (_M_owns)
   _M_pm->unlock_shared();
      }

      shared_lock(shared_lock const&) = delete;
      shared_lock& operator=(shared_lock const&) = delete;

      shared_lock(shared_lock&& __sl) noexcept : shared_lock()
      { swap(__sl); }

      shared_lock&
      operator=(shared_lock&& __sl) noexcept
      {


 shared_lock(std::move(__sl)).swap(*this);
 return *this;
      }

      void
      lock()
      {
 _M_lockable();
 _M_pm->lock_shared();
 _M_owns = true;
      }

      [[__nodiscard__]]
      bool
      try_lock()
      {
 _M_lockable();
 return _M_owns = _M_pm->try_lock_shared();
      }

      template<typename _Rep, typename _Period>
 [[__nodiscard__]]
 bool
 try_lock_for(const chrono::duration<_Rep, _Period>& __rel_time)
 {
   _M_lockable();
   return _M_owns = _M_pm->try_lock_shared_for(__rel_time);
 }

      template<typename _Clock, typename _Duration>
 [[__nodiscard__]]
 bool
 try_lock_until(const chrono::time_point<_Clock, _Duration>& __abs_time)
 {
   _M_lockable();
   return _M_owns = _M_pm->try_lock_shared_until(__abs_time);
 }

      void
      unlock()
      {
 if (!_M_owns)
   __throw_system_error(int(errc::operation_not_permitted));
 _M_pm->unlock_shared();
 _M_owns = false;
      }



      void
      swap(shared_lock& __u) noexcept
      {
 std::swap(_M_pm, __u._M_pm);
 std::swap(_M_owns, __u._M_owns);
      }

      mutex_type*
      release() noexcept
      {
 _M_owns = false;
 return std::__exchange(_M_pm, nullptr);
      }



      [[__nodiscard__]]
      bool owns_lock() const noexcept { return _M_owns; }

      explicit operator bool() const noexcept { return _M_owns; }

      [[__nodiscard__]]
      mutex_type* mutex() const noexcept { return _M_pm; }

    private:
      void
      _M_lockable() const
      {
 if (_M_pm == nullptr)
   __throw_system_error(int(errc::operation_not_permitted));
 if (_M_owns)
   __throw_system_error(int(errc::resource_deadlock_would_occur));
      }

      mutex_type* _M_pm;
      bool _M_owns;
    };



  template<typename _Mutex>
    void
    swap(shared_lock<_Mutex>& __x, shared_lock<_Mutex>& __y) noexcept
    { __x.swap(__y); }



}
# 32 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/internal/Synchronization.h" 2
# 40 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/internal/Synchronization.h"
#define ANTLR4CPP_NO_THREAD_SAFTEY_ANALYSIS 








# 48 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/internal/Synchronization.h"
namespace antlr4::internal {


  class __attribute__ ((visibility ("default"))) Mutex final {
  public:
    Mutex() = default;


    Mutex(const Mutex&) = delete;
    Mutex(Mutex&&) = delete;


    Mutex& operator=(const Mutex&) = delete;
    Mutex& operator=(Mutex&&) = delete;

    void lock() ;

    bool try_lock() ;

    void unlock() ;

  private:



    std::mutex _impl;

  };

  template <typename Mutex>
  using UniqueLock = std::unique_lock<Mutex>;


  class __attribute__ ((visibility ("default"))) SharedMutex final {
  public:
    SharedMutex() = default;


    SharedMutex(const SharedMutex&) = delete;
    SharedMutex(SharedMutex&&) = delete;


    SharedMutex& operator=(const SharedMutex&) = delete;
    SharedMutex& operator=(SharedMutex&&) = delete;

    void lock() ;

    bool try_lock() ;

    void unlock() ;

    void lock_shared() ;

    bool try_lock_shared() ;

    void unlock_shared() ;

  private:



    std::shared_mutex _impl;

  };

  template <typename Mutex>
  using SharedLock = std::shared_lock<Mutex>;

  class OnceFlag;

  template <typename Callable, typename... Args>
  void call_once(OnceFlag &onceFlag, Callable &&callable, Args&&... args);


  class __attribute__ ((visibility ("default"))) OnceFlag final {
  public:
    constexpr OnceFlag() = default;


    OnceFlag(const OnceFlag&) = delete;
    OnceFlag(OnceFlag&&) = delete;


    OnceFlag& operator=(const OnceFlag&) = delete;
    OnceFlag& operator=(OnceFlag&&) = delete;

  private:
    template <typename Callable, typename... Args>
    friend void call_once(OnceFlag &onceFlag, Callable &&callable, Args&&... args);




    std::once_flag _impl;

  };

  template <typename Callable, typename... Args>
  void call_once(OnceFlag &onceFlag, Callable &&callable, Args&&... args) {



    std::call_once(onceFlag._impl, std::forward<Callable>(callable), std::forward<Args>(args)...);

  }

}
# 12 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Recognizer.h" 2

namespace antlr4 {

  class __attribute__ ((visibility ("default"))) Recognizer {
  public:
    static constexpr size_t EOF = std::numeric_limits<size_t>::max();

    Recognizer();
    Recognizer(Recognizer const&) = delete;
    virtual ~Recognizer();

    Recognizer& operator=(Recognizer const&) = delete;

    virtual std::vector<std::string> const& getRuleNames() const = 0;







    virtual dfa::Vocabulary const& getVocabulary() const = 0;






    virtual std::map<std::string_view, size_t> getTokenTypeMap();






    virtual std::map<std::string, size_t> getRuleIndexMap();

    virtual size_t getTokenType(std::string_view tokenName);
# 58 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Recognizer.h"
    virtual atn::SerializedATNView getSerializedATN() const {
      throw "there is no serialized ATN";
    }





    virtual std::string getGrammarFileName() const = 0;



    template <class T>
    T* getInterpreter() const {
      return antlrcpp::downCast<T *>(_interpreter);
    }







    void setInterpreter(atn::ATNSimulator *interpreter);


    virtual std::string getErrorHeader(RecognitionException *e);
# 99 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Recognizer.h"
    virtual std::string getTokenErrorDisplay(Token *t);


    virtual void addErrorListener(ANTLRErrorListener *listener);

    virtual void removeErrorListener(ANTLRErrorListener *listener);

    virtual void removeErrorListeners();

    virtual ProxyErrorListener& getErrorListenerDispatch();



    virtual bool sempred(RuleContext *localctx, size_t ruleIndex, size_t actionIndex);

    virtual bool precpred(RuleContext *localctx, int precedence);

    virtual void action(RuleContext *localctx, size_t ruleIndex, size_t actionIndex);

    size_t getState() const { return _stateNumber; }


    virtual const atn::ATN& getATN() const = 0;
# 131 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Recognizer.h"
    void setState(size_t atnState) { _stateNumber = atnState; }

    virtual IntStream* getInputStream() = 0;

    virtual void setInputStream(IntStream *input) = 0;

    virtual TokenFactory<CommonToken>* getTokenFactory() = 0;

    template<typename T1>
    void setTokenFactory(TokenFactory<T1> *input);

  protected:
    atn::ATNSimulator *_interpreter;


    internal::Mutex _mutex;

  private:
    static std::map<const dfa::Vocabulary*, std::map<std::string_view, size_t>> _tokenTypeMapCache;
    static std::map<std::vector<std::string>, std::map<std::string, size_t>> _ruleIndexMapCache;

    ProxyErrorListener _proxListener;

    size_t _stateNumber;

    void InitializeInstanceFields();

  };

}
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Lexer.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/TokenSource.h" 1





       



namespace antlr4 {
# 27 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/TokenSource.h"
  class __attribute__ ((visibility ("default"))) TokenSource {
  public:
    virtual ~TokenSource();





    virtual std::unique_ptr<Token> nextToken() = 0;







    virtual size_t getLine() const = 0;







    virtual size_t getCharPositionInLine() = 0;
# 60 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/TokenSource.h"
    virtual CharStream* getInputStream() = 0;






    virtual std::string getSourceName() = 0;






    template<typename T1>
    void setTokenFactory(TokenFactory<T1> * ) {}






    virtual TokenFactory<CommonToken>* getTokenFactory() = 0;
  };

}
# 10 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Lexer.h" 2



namespace antlr4 {





  class __attribute__ ((visibility ("default"))) Lexer : public Recognizer, public TokenSource {
  public:
    static constexpr size_t DEFAULT_MODE = 0;
    static constexpr size_t MORE = std::numeric_limits<size_t>::max() - 1;
    static constexpr size_t SKIP = std::numeric_limits<size_t>::max() - 2;

    static constexpr size_t DEFAULT_TOKEN_CHANNEL = Token::DEFAULT_CHANNEL;
    static constexpr size_t HIDDEN = Token::HIDDEN_CHANNEL;
    static constexpr size_t MIN_CHAR_VALUE = 0;
    static constexpr size_t MAX_CHAR_VALUE = 0x10FFFF;

    CharStream *_input;

  protected:

    TokenFactory<CommonToken> *_factory;

  public:
# 48 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Lexer.h"
    std::unique_ptr<Token> token;






    size_t tokenStartCharIndex;



    size_t tokenStartLine;


    size_t tokenStartCharPositionInLine;



    bool hitEOF;


    size_t channel;


    size_t type;


    std::vector<size_t> modeStack;
    size_t mode;

    Lexer();
    Lexer(CharStream *input);
    virtual ~Lexer() {}

    virtual void reset();


    virtual std::unique_ptr<Token> nextToken() override;






    virtual void skip();
    virtual void more();
    virtual void setMode(size_t m);
    virtual void pushMode(size_t m);
    virtual size_t popMode();

    template<typename T1>
    void setTokenFactory(TokenFactory<T1> *factory) {
      this->_factory = factory;
    }

    virtual TokenFactory<CommonToken>* getTokenFactory() override;


    virtual void setInputStream(IntStream *input) override;

    virtual std::string getSourceName() override;

    virtual CharStream* getInputStream() override;





    virtual void emit(std::unique_ptr<Token> newToken);






    virtual Token* emit();

    virtual Token* emitEOF();

    virtual size_t getLine() const override;

    virtual size_t getCharPositionInLine() override;

    virtual void setLine(size_t line);

    virtual void setCharPositionInLine(size_t charPositionInLine);


    virtual size_t getCharIndex();



    virtual std::string getText();



    virtual void setText(const std::string &text);


    virtual std::unique_ptr<Token> getToken();

    virtual void setToken(std::unique_ptr<Token> newToken);

    virtual void setType(size_t ttype);

    virtual size_t getType();

    virtual void setChannel(size_t newChannel);

    virtual size_t getChannel();

    virtual const std::vector<std::string>& getChannelNames() const = 0;

    virtual const std::vector<std::string>& getModeNames() const = 0;



    virtual std::vector<std::unique_ptr<Token>> getAllTokens();

    virtual void recover(const LexerNoViableAltException &e);

    virtual void notifyListeners(const LexerNoViableAltException &e);

    virtual std::string getErrorDisplay(const std::string &s);





    virtual void recover(RecognitionException *re);






    virtual size_t getNumberOfSyntaxErrors();

  protected:


    std::string _text;

  private:
    size_t _syntaxErrors;
    void InitializeInstanceFields();
  };

}
# 32 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/LexerInterpreter.h" 1





       


# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionContext.h" 1





       




# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATN.h" 1





       
# 15 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATN.h"
#define ANTLR4CPP_ATN_DECLARED 

namespace antlr4 {
namespace atn {

  class LexerATNSimulator;
  class ParserATNSimulator;

  class __attribute__ ((visibility ("default"))) ATN {
  public:
    static constexpr size_t INVALID_ALT_NUMBER = 0;


    ATN();

    ATN(ATNType grammarType, size_t maxTokenType);

    ATN(const ATN&) = delete;

    ATN(ATN&&) = delete;

    ~ATN();

    ATN& operator=(const ATN&) = delete;

    ATN& operator=(ATN&&) = delete;

    std::vector<ATNState *> states;




    std::vector<DecisionState *> decisionToState;


    std::vector<RuleStartState *> ruleToStartState;


    std::vector<RuleStopState *> ruleToStopState;


    ATNType grammarType;


    size_t maxTokenType;
# 68 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATN.h"
    std::vector<size_t> ruleToTokenType;



    std::vector<Ref<const LexerAction>> lexerActions;

    std::vector<TokensStartState *> modeToStartState;







    misc::IntervalSet nextTokens(ATNState *s, RuleContext *ctx) const;






    misc::IntervalSet const& nextTokens(ATNState *s) const;

    void addState(ATNState *state);

    void removeState(ATNState *state);

    int defineDecisionState(DecisionState *s);

    DecisionState *getDecisionState(size_t decision) const;

    size_t getNumberOfDecisions() const;
# 119 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATN.h"
    misc::IntervalSet getExpectedTokens(size_t stateNumber, RuleContext *context) const;

    std::string toString() const;

  private:
    friend class LexerATNSimulator;
    friend class ParserATNSimulator;

    mutable internal::Mutex _mutex;
    mutable internal::SharedMutex _stateMutex;
    mutable internal::SharedMutex _edgeMutex;
  };

}
}
# 12 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionContext.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNState.h" 1





       


# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/Transition.h" 1





       


# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/TransitionType.h" 1





       






namespace antlr4 {
namespace atn {


  enum class TransitionType : size_t {
    EPSILON = 1,
    RANGE = 2,
    RULE = 3,
    PREDICATE = 4,
    ATOM = 5,
    ACTION = 6,
    SET = 7,
    NOT_SET = 8,
    WILDCARD = 9,
    PRECEDENCE = 10,
  };

  __attribute__ ((visibility ("default"))) std::string transitionTypeName(TransitionType transitionType);

}
}
# 10 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/Transition.h" 2

namespace antlr4 {
namespace atn {
# 27 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/Transition.h"
  class __attribute__ ((visibility ("default"))) Transition {
  public:


    ATNState *target;

    virtual ~Transition() = default;

    TransitionType getTransitionType() const { return _transitionType; }
# 46 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/Transition.h"
    virtual bool isEpsilon() const;
    virtual misc::IntervalSet label() const;
    virtual bool matches(size_t symbol, size_t minVocabSymbol, size_t maxVocabSymbol) const = 0;

    virtual std::string toString() const;

    Transition(Transition const&) = delete;
    Transition& operator=(Transition const&) = delete;

  protected:
    Transition(TransitionType transitionType, ATNState *target);

  private:
    const TransitionType _transitionType;
  };

  using ConstTransitionPtr = std::unique_ptr<const Transition>;

}
}
# 10 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNState.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNStateType.h" 1





       






namespace antlr4 {
namespace atn {


  enum class ATNStateType : size_t {
    INVALID = 0,
    BASIC = 1,
    RULE_START = 2,
    BLOCK_START = 3,
    PLUS_BLOCK_START = 4,
    STAR_BLOCK_START = 5,
    TOKEN_START = 6,
    RULE_STOP = 7,
    BLOCK_END = 8,
    STAR_LOOP_BACK = 9,
    STAR_LOOP_ENTRY = 10,
    PLUS_LOOP_BACK = 11,
    LOOP_END = 12,
  };

  __attribute__ ((visibility ("default"))) std::string atnStateTypeName(ATNStateType atnStateType);

}
}
# 11 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNState.h" 2

namespace antlr4 {
namespace atn {
# 84 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNState.h"
  class __attribute__ ((visibility ("default"))) ATNState {
  public:
    static constexpr size_t INITIAL_NUM_TRANSITIONS = 4;
    static constexpr size_t INVALID_STATE_NUMBER = std::numeric_limits<size_t>::max();

    size_t stateNumber = INVALID_STATE_NUMBER;
    size_t ruleIndex = 0;
    bool epsilonOnlyTransitions = false;


    std::vector<ConstTransitionPtr> transitions;

    ATNState() = delete;

    ATNState(ATNState const&) = delete;

    ATNState(ATNState&&) = delete;

    virtual ~ATNState() = default;

    ATNState& operator=(ATNState const&) = delete;

    ATNState& operator=(ATNState&&) = delete;

    void addTransition(ConstTransitionPtr e);
    void addTransition(size_t index, ConstTransitionPtr e);
    ConstTransitionPtr removeTransition(size_t index);

    virtual size_t hashCode() const;
    virtual bool equals(const ATNState &other) const;

    virtual bool isNonGreedyExitState() const;
    virtual std::string toString() const;

    ATNStateType getStateType() const { return _stateType; }

  protected:
    explicit ATNState(ATNStateType stateType) : _stateType(stateType) {}

  private:


    misc::IntervalSet _nextTokenWithinRule;
    std::atomic<bool> _nextTokenUpdated { false };

    const ATNStateType _stateType;

    friend class ATN;
  };

  inline bool operator==(const ATNState &lhs, const ATNState &rhs) { return lhs.equals(rhs); }

  inline bool operator!=(const ATNState &lhs, const ATNState &rhs) { return !operator==(lhs, rhs); }

}
}
# 13 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionContext.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionContextType.h" 1





       





namespace antlr4 {
namespace atn {

  enum class PredictionContextType : size_t {
    SINGLETON = 1,
    ARRAY = 2,
  };

}
}
# 14 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionContext.h" 2

namespace antlr4 {

  class RuleContext;

namespace atn {

  class ATN;
  class ArrayPredictionContext;
  class SingletonPredictionContext;
  class PredictionContextCache;
  class PredictionContextMergeCache;

  class __attribute__ ((visibility ("default"))) PredictionContext {
  public:


    static const Ref<const PredictionContext> EMPTY;







    static constexpr size_t EMPTY_RETURN_STATE = std::numeric_limits<size_t>::max() - 9;


    static Ref<const PredictionContext> merge(Ref<const PredictionContext> a,
                                              Ref<const PredictionContext> b,
                                              bool rootIsWildcard,
                                              PredictionContextMergeCache *mergeCache);
# 81 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionContext.h"
    static Ref<const PredictionContext> mergeSingletons(Ref<const SingletonPredictionContext> a,
                                                        Ref<const SingletonPredictionContext> b,
                                                        bool rootIsWildcard,
                                                        PredictionContextMergeCache *mergeCache);
# 124 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionContext.h"
    static Ref<const PredictionContext> mergeRoot(Ref<const SingletonPredictionContext> a,
                                                  Ref<const SingletonPredictionContext> b,
                                                  bool rootIsWildcard);
# 147 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionContext.h"
    static Ref<const PredictionContext> mergeArrays(Ref<const ArrayPredictionContext> a,
                                                    Ref<const ArrayPredictionContext> b,
                                                    bool rootIsWildcard,
                                                    PredictionContextMergeCache *mergeCache);

    static std::string toDOTString(const Ref<const PredictionContext> &context);

    static Ref<const PredictionContext> getCachedContext(const Ref<const PredictionContext> &context,
                                                         PredictionContextCache &contextCache);

    static std::vector<Ref<const PredictionContext>> getAllContextNodes(const Ref<const PredictionContext> &context);



    static Ref<const PredictionContext> fromRuleContext(const ATN &atn, RuleContext *outerContext);

    PredictionContext(const PredictionContext&) = delete;

    virtual ~PredictionContext() = default;

    PredictionContext& operator=(const PredictionContext&) = delete;
    PredictionContext& operator=(PredictionContext&&) = delete;

    PredictionContextType getContextType() const { return _contextType; }

    virtual size_t size() const = 0;
    virtual const Ref<const PredictionContext>& getParent(size_t index) const = 0;
    virtual size_t getReturnState(size_t index) const = 0;


    virtual bool isEmpty() const = 0;
    bool hasEmptyPath() const;

    size_t hashCode() const;

    virtual bool equals(const PredictionContext &other) const = 0;

    virtual std::string toString() const = 0;

    std::vector<std::string> toStrings(Recognizer *recognizer, int currentState) const;
    std::vector<std::string> toStrings(Recognizer *recognizer,
                                       const Ref<const PredictionContext> &stop,
                                       int currentState) const;

  protected:
    explicit PredictionContext(PredictionContextType contextType);

    PredictionContext(PredictionContext&& other);

    virtual size_t hashCodeImpl() const = 0;

    size_t cachedHashCode() const { return _hashCode.load(std::memory_order_relaxed); }

  private:
    const PredictionContextType _contextType;
    mutable std::atomic<size_t> _hashCode;
  };

  inline bool operator==(const PredictionContext &lhs, const PredictionContext &rhs) {
    return lhs.equals(rhs);
  }

  inline bool operator!=(const PredictionContext &lhs, const PredictionContext &rhs) {
    return !operator==(lhs, rhs);
  }

}
}

namespace std {

  template <>
  struct hash<::antlr4::atn::PredictionContext> {
    size_t operator()(const ::antlr4::atn::PredictionContext &predictionContext) const {
      return predictionContext.hashCode();
    }
  };

}
# 10 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/LexerInterpreter.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionContextCache.h" 1
# 26 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionContextCache.h"
       


# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/FlatHashSet.h" 1
# 26 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/FlatHashSet.h"
       
# 41 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/FlatHashSet.h"
namespace antlr4 {
# 50 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/FlatHashSet.h"
  template <typename Key,
            typename Hash = std::hash<Key>,
            typename Equal = std::equal_to<Key>,
            typename Allocator = std::allocator<Key>>
  using FlatHashSet = std::unordered_set<Key, Hash, Equal, Allocator>;


}
# 30 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionContextCache.h" 2

namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) PredictionContextCache final {
  public:
    PredictionContextCache() = default;

    PredictionContextCache(const PredictionContextCache&) = delete;
    PredictionContextCache(PredictionContextCache&&) = delete;

    PredictionContextCache& operator=(const PredictionContextCache&) = delete;
    PredictionContextCache& operator=(PredictionContextCache&&) = delete;

    void put(const Ref<const PredictionContext> &value);

    Ref<const PredictionContext> get(const Ref<const PredictionContext> &value) const;

  private:
    struct __attribute__ ((visibility ("default"))) PredictionContextHasher final {
      size_t operator()(const Ref<const PredictionContext> &predictionContext) const;
    };

    struct __attribute__ ((visibility ("default"))) PredictionContextComparer final {
      bool operator()(const Ref<const PredictionContext> &lhs,
                      const Ref<const PredictionContext> &rhs) const;
    };

    FlatHashSet<Ref<const PredictionContext>,
                PredictionContextHasher, PredictionContextComparer> _data;
  };

}
}
# 11 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/LexerInterpreter.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Vocabulary.h" 1





       



namespace antlr4 {
namespace dfa {



  class __attribute__ ((visibility ("default"))) Vocabulary final {
  public:






    [[deprecated("Use the default constructor of Vocabulary instead.")]] static const Vocabulary EMPTY_VOCABULARY;

    Vocabulary() {}

    Vocabulary(const Vocabulary&) = default;
# 40 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Vocabulary.h"
    Vocabulary(std::vector<std::string> literalNames, std::vector<std::string> symbolicNames);
# 58 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Vocabulary.h"
    Vocabulary(std::vector<std::string> literalNames, std::vector<std::string> symbolicNames,
               std::vector<std::string> displayNames);





    constexpr size_t getMaxTokenType() const { return _maxTokenType; }
# 102 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Vocabulary.h"
    std::string_view getLiteralName(size_t tokenType) const;
# 146 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Vocabulary.h"
    std::string_view getSymbolicName(size_t tokenType) const;
# 167 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Vocabulary.h"
    std::string getDisplayName(size_t tokenType) const;

  private:
    std::vector<std::string> const _literalNames;
    std::vector<std::string> const _symbolicNames;
    std::vector<std::string> const _displayNames;
    const size_t _maxTokenType = 0;
  };

}
}
# 12 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/LexerInterpreter.h" 2

namespace antlr4 {

  class __attribute__ ((visibility ("default"))) LexerInterpreter : public Lexer {
  public:
    LexerInterpreter(const std::string &grammarFileName, const dfa::Vocabulary &vocabulary,
                     const std::vector<std::string> &ruleNames, const std::vector<std::string> &channelNames,
                     const std::vector<std::string> &modeNames, const atn::ATN &atn, CharStream *input);

    ~LexerInterpreter();

    virtual const atn::ATN& getATN() const override;
    virtual std::string getGrammarFileName() const override;
    virtual const std::vector<std::string>& getRuleNames() const override;
    virtual const std::vector<std::string>& getChannelNames() const override;
    virtual const std::vector<std::string>& getModeNames() const override;

    virtual const dfa::Vocabulary& getVocabulary() const override;

  protected:
    const std::string _grammarFileName;
    const atn::ATN &_atn;

    const std::vector<std::string> &_ruleNames;
    const std::vector<std::string> &_channelNames;
    const std::vector<std::string> &_modeNames;
    std::vector<dfa::DFA> _decisionToDFA;

    atn::PredictionContextCache _sharedContextCache;

  private:
    dfa::Vocabulary _vocabulary;
  };

}
# 33 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/LexerNoViableAltException.h" 1





       


# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h" 1





       

# 1 "/usr/include/c++/15.1.1/cassert" 1 3
# 46 "/usr/include/c++/15.1.1/cassert" 3
# 1 "/usr/include/assert.h" 1 3 4
# 24 "/usr/include/assert.h" 3 4
#undef _ASSERT_H
#undef assert
#undef __ASSERT_VOID_CAST


#undef assert_perror




#define _ASSERT_H 1



#define __ASSERT_VOID_CAST static_cast<void>
# 64 "/usr/include/assert.h" 3 4

# 64 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     noexcept (true) __attribute__ ((__noreturn__)) __attribute__ ((__cold__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     noexcept (true) __attribute__ ((__noreturn__)) __attribute__ ((__cold__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     noexcept (true) __attribute__ ((__noreturn__)) __attribute__ ((__cold__));


}







#define __ASSERT_FILE __builtin_FILE ()
#define __ASSERT_LINE __builtin_LINE ()






#define assert(expr) (static_cast <bool> (expr) ? void (0) : __assert_fail (#expr, __ASSERT_FILE, __ASSERT_LINE, __ASSERT_FUNCTION))
# 125 "/usr/include/assert.h" 3 4
#define assert_perror(errnum) (!(errnum) ? __ASSERT_VOID_CAST (0) : __assert_perror_fail ((errnum), __FILE__, __LINE__, __ASSERT_FUNCTION))
# 137 "/usr/include/assert.h" 3 4
#define __ASSERT_FUNCTION __extension__ __PRETTY_FUNCTION__
# 47 "/usr/include/c++/15.1.1/cassert" 2 3
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/support/BitSet.h" 1





       




# 10 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/support/BitSet.h"
namespace antlrcpp {

  class __attribute__ ((visibility ("default"))) BitSet : public std::bitset<2048> {
  public:
    size_t nextSetBit(size_t pos) const {
      for (size_t i = pos; i < size(); i++){
        if (test(i)) {
          return i;
        }
      }

      return std::numeric_limits<size_t>::max();
    }


    friend std::wostream& operator << (std::wostream& os, const BitSet& obj)
    {
      os << "{";
      size_t total = obj.count();
      for (size_t i = 0; i < obj.size(); i++){
        if (obj.test(i)){
          os << i;
          --total;
          if (total > 1){
            os << ", ";
          }
        }
      }

      os << "}";
      return os;
    }

    static std::string subStringRepresentation(const std::vector<BitSet>::iterator &begin,
                                                const std::vector<BitSet>::iterator &end) {
      std::string result;
      std::vector<BitSet>::iterator vectorIterator;

      for (vectorIterator = begin; vectorIterator != end; vectorIterator++) {
        result += vectorIterator->toString();
      }

      result += end->toString();

      return result;
    }

    std::string toString() const {
      std::stringstream stream;
      stream << "{";
      bool valueAdded = false;
      for (size_t i = 0; i < size(); ++i){
        if (test(i)){
          if (valueAdded) {
            stream << ", ";
          }
          stream << i;
          valueAdded = true;
        }
      }

      stream << "}";
      return stream.str();
    }

  };
}
# 11 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfig.h" 1





       

# 1 "/usr/include/c++/15.1.1/cassert" 1 3
# 46 "/usr/include/c++/15.1.1/cassert" 3
# 1 "/usr/include/assert.h" 1 3 4
# 24 "/usr/include/assert.h" 3 4
#undef _ASSERT_H
#undef assert
#undef __ASSERT_VOID_CAST


#undef assert_perror




#define _ASSERT_H 1



#define __ASSERT_VOID_CAST static_cast<void>
# 64 "/usr/include/assert.h" 3 4

# 64 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     noexcept (true) __attribute__ ((__noreturn__)) __attribute__ ((__cold__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     noexcept (true) __attribute__ ((__noreturn__)) __attribute__ ((__cold__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     noexcept (true) __attribute__ ((__noreturn__)) __attribute__ ((__cold__));


}







#define __ASSERT_FILE __builtin_FILE ()
#define __ASSERT_LINE __builtin_LINE ()






#define assert(expr) (static_cast <bool> (expr) ? void (0) : __assert_fail (#expr, __ASSERT_FILE, __ASSERT_LINE, __ASSERT_FUNCTION))
# 125 "/usr/include/assert.h" 3 4
#define assert_perror(errnum) (!(errnum) ? __ASSERT_VOID_CAST (0) : __assert_perror_fail ((errnum), __FILE__, __LINE__, __ASSERT_FUNCTION))
# 137 "/usr/include/assert.h" 3 4
#define __ASSERT_FUNCTION __extension__ __PRETTY_FUNCTION__
# 47 "/usr/include/c++/15.1.1/cassert" 2 3
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfig.h" 2


# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/SemanticContext.h" 1





       



# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/SemanticContextType.h" 1





       






# 12 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/SemanticContextType.h"
namespace antlr4 {
namespace atn {

  enum class SemanticContextType : size_t {
    PREDICATE = 1,
    PRECEDENCE = 2,
    AND = 3,
    OR = 4,
  };

}
}
# 11 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/SemanticContext.h" 2

namespace antlr4 {
namespace atn {







  class __attribute__ ((visibility ("default"))) SemanticContext : public std::enable_shared_from_this<SemanticContext> {
  public:
    virtual ~SemanticContext() = default;

    SemanticContextType getContextType() const { return _contextType; }
# 40 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/SemanticContext.h"
    virtual bool eval(Recognizer *parser, RuleContext *parserCallStack) const = 0;
# 60 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/SemanticContext.h"
    virtual Ref<const SemanticContext> evalPrecedence(Recognizer *parser, RuleContext *parserCallStack) const;

    virtual size_t hashCode() const = 0;

    virtual bool equals(const SemanticContext &other) const = 0;

    virtual std::string toString() const = 0;

    static Ref<const SemanticContext> And(Ref<const SemanticContext> a, Ref<const SemanticContext> b);


    static Ref<const SemanticContext> Or(Ref<const SemanticContext> a, Ref<const SemanticContext> b);

    class Empty;
    class Predicate;
    class PrecedencePredicate;
    class Operator;
    class AND;
    class OR;

  protected:
    explicit SemanticContext(SemanticContextType contextType) : _contextType(contextType) {}

  private:
    const SemanticContextType _contextType;
  };

  inline bool operator==(const SemanticContext &lhs, const SemanticContext &rhs) {
    return lhs.equals(rhs);
  }

  inline bool operator!=(const SemanticContext &lhs, const SemanticContext &rhs) {
    return !operator==(lhs, rhs);
  }

  class __attribute__ ((visibility ("default"))) SemanticContext::Empty : public SemanticContext{
  public:




    static const Ref<const SemanticContext> Instance;
  };

  class __attribute__ ((visibility ("default"))) SemanticContext::Predicate final : public SemanticContext {
  public:
    static bool is(const SemanticContext &semanticContext) { return semanticContext.getContextType() == SemanticContextType::PREDICATE; }

    static bool is(const SemanticContext *semanticContext) { return semanticContext != nullptr && is(*semanticContext); }

    const size_t ruleIndex;
    const size_t predIndex;
    const bool isCtxDependent;

    Predicate(size_t ruleIndex, size_t predIndex, bool isCtxDependent);

    bool eval(Recognizer *parser, RuleContext *parserCallStack) const override;
    size_t hashCode() const override;
    bool equals(const SemanticContext &other) const override;
    std::string toString() const override;
  };

  class __attribute__ ((visibility ("default"))) SemanticContext::PrecedencePredicate final : public SemanticContext {
  public:
    static bool is(const SemanticContext &semanticContext) { return semanticContext.getContextType() == SemanticContextType::PRECEDENCE; }

    static bool is(const SemanticContext *semanticContext) { return semanticContext != nullptr && is(*semanticContext); }

    const int precedence;

    explicit PrecedencePredicate(int precedence);

    bool eval(Recognizer *parser, RuleContext *parserCallStack) const override;
    Ref<const SemanticContext> evalPrecedence(Recognizer *parser, RuleContext *parserCallStack) const override;
    size_t hashCode() const override;
    bool equals(const SemanticContext &other) const override;
    std::string toString() const override;
  };







  class __attribute__ ((visibility ("default"))) SemanticContext::Operator : public SemanticContext {
  public:
    static bool is(const SemanticContext &semanticContext) {
      const auto contextType = semanticContext.getContextType();
      return contextType == SemanticContextType::AND || contextType == SemanticContextType::OR;
    }

    static bool is(const SemanticContext *semanticContext) { return semanticContext != nullptr && is(*semanticContext); }
# 163 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/SemanticContext.h"
    virtual const std::vector<Ref<const SemanticContext>>& getOperands() const = 0;

  protected:
    using SemanticContext::SemanticContext;
  };





  class __attribute__ ((visibility ("default"))) SemanticContext::AND final : public SemanticContext::Operator {
  public:
    static bool is(const SemanticContext &semanticContext) { return semanticContext.getContextType() == SemanticContextType::AND; }

    static bool is(const SemanticContext *semanticContext) { return semanticContext != nullptr && is(*semanticContext); }

    AND(Ref<const SemanticContext> a, Ref<const SemanticContext> b) ;

    const std::vector<Ref<const SemanticContext>>& getOperands() const override;





    bool eval(Recognizer *parser, RuleContext *parserCallStack) const override;
    Ref<const SemanticContext> evalPrecedence(Recognizer *parser, RuleContext *parserCallStack) const override;
    size_t hashCode() const override;
    bool equals(const SemanticContext &other) const override;
    std::string toString() const override;

  private:
    std::vector<Ref<const SemanticContext>> _opnds;
  };





  class __attribute__ ((visibility ("default"))) SemanticContext::OR final : public SemanticContext::Operator {
  public:
    static bool is(const SemanticContext &semanticContext) { return semanticContext.getContextType() == SemanticContextType::OR; }

    static bool is(const SemanticContext *semanticContext) { return semanticContext != nullptr && is(*semanticContext); }

    OR(Ref<const SemanticContext> a, Ref<const SemanticContext> b);

    const std::vector<Ref<const SemanticContext>>& getOperands() const override;





    bool eval(Recognizer *parser, RuleContext *parserCallStack) const override;
    Ref<const SemanticContext> evalPrecedence(Recognizer *parser, RuleContext *parserCallStack) const override;
    size_t hashCode() const override;
    bool equals(const SemanticContext &other) const override;
    std::string toString() const override;

  private:
    std::vector<Ref<const SemanticContext>> _opnds;
  };

}
}

namespace std {

  template <>
  struct hash<::antlr4::atn::SemanticContext> {
    size_t operator()(const ::antlr4::atn::SemanticContext &semanticContext) const {
      return semanticContext.hashCode();
    }
  };

}
# 12 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfig.h" 2

namespace antlr4 {
namespace atn {
# 24 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfig.h"
  class __attribute__ ((visibility ("default"))) ATNConfig {
  public:
    struct Hasher
    {
      size_t operator()(Ref<ATNConfig> const& k) const {
        return k->hashCode();
      }

      size_t operator()(ATNConfig const& k) const {
        return k.hashCode();
      }
    };

    struct Comparer {
      bool operator()(Ref<ATNConfig> const& lhs, Ref<ATNConfig> const& rhs) const {
        return (lhs == rhs) || (*lhs == *rhs);
      }

      bool operator()(ATNConfig const& lhs, ATNConfig const& rhs) const {
        return (&lhs == &rhs) || (lhs == rhs);
      }
    };

    using Set = std::unordered_set<Ref<ATNConfig>, Hasher, Comparer>;


    ATNState *state = nullptr;


    const size_t alt = 0;






    Ref<const PredictionContext> context;
# 85 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfig.h"
    size_t reachesIntoOuterContext = 0;


    Ref<const SemanticContext> semanticContext;

    ATNConfig(ATNState *state, size_t alt, Ref<const PredictionContext> context);
    ATNConfig(ATNState *state, size_t alt, Ref<const PredictionContext> context, Ref<const SemanticContext> semanticContext);

    ATNConfig(ATNConfig const& other, Ref<const SemanticContext> semanticContext);
    ATNConfig(ATNConfig const& other, ATNState *state);
    ATNConfig(ATNConfig const& other, ATNState *state, Ref<const SemanticContext> semanticContext);
    ATNConfig(ATNConfig const& other, ATNState *state, Ref<const PredictionContext> context);
    ATNConfig(ATNConfig const& other, ATNState *state, Ref<const PredictionContext> context, Ref<const SemanticContext> semanticContext);

    ATNConfig(ATNConfig const&) = default;

    ATNConfig(ATNConfig&&) = default;

    virtual ~ATNConfig() = default;

    virtual size_t hashCode() const;






    size_t getOuterContextDepth() const;
    bool isPrecedenceFilterSuppressed() const;
    void setPrecedenceFilterSuppressed(bool value);




    bool operator==(const ATNConfig &other) const;
    bool operator!=(const ATNConfig &other) const;

    virtual std::string toString() const;
    std::string toString(bool showAlt) const;

  private:
    ATNConfig(ATNState *state, size_t alt, Ref<const PredictionContext> context, size_t reachesIntoOuterContext, Ref<const SemanticContext> semanticContext);
  };

}
}




namespace std {
  using antlr4::atn::ATNConfig;

  template <> struct hash<ATNConfig>
  {
    size_t operator() (const ATNConfig &x) const
    {
      return x.hashCode();
    }
  };

  template <> struct hash<std::vector<Ref<ATNConfig>>>
  {
    size_t operator() (const std::vector<Ref<ATNConfig>> &vector) const
    {
      std::size_t seed = 0;
      for (const auto &config : vector) {
        seed ^= config->hashCode() + 0x9e3779b9 + (seed << 6) + (seed >> 2);
      }
      return seed;
    }
  };
}
# 13 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h" 2


namespace antlr4 {
namespace atn {



  class __attribute__ ((visibility ("default"))) ATNConfigSet {
  public:

    std::vector<Ref<ATNConfig>> configs;



    size_t uniqueAlt = 0;






    antlrcpp::BitSet conflictingAlts;



    bool hasSemanticContext = false;
    bool dipsIntoOuterContext = false;




    const bool fullCtx = true;

    ATNConfigSet();

    ATNConfigSet(const ATNConfigSet &other);

    ATNConfigSet(ATNConfigSet&&) = delete;

    explicit ATNConfigSet(bool fullCtx);

    virtual ~ATNConfigSet() = default;

    bool add(const Ref<ATNConfig> &config);
# 68 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h"
    bool add(const Ref<ATNConfig> &config, PredictionContextMergeCache *mergeCache);

    bool addAll(const ATNConfigSet &other);

    std::vector<ATNState*> getStates() const;
# 82 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h"
    antlrcpp::BitSet getAlts() const;
    std::vector<Ref<const SemanticContext>> getPredicates() const;

    const Ref<ATNConfig>& get(size_t i) const;

    void optimizeConfigs(ATNSimulator *interpreter);

    size_t size() const;
    bool isEmpty() const;
    void clear();
    bool isReadonly() const;
    void setReadonly(bool readonly);

    virtual size_t hashCode() const;

    virtual bool equals(const ATNConfigSet &other) const;

    virtual std::string toString() const;

  private:
    struct ATNConfigHasher final {
      const ATNConfigSet* atnConfigSet;

      size_t operator()(const ATNConfig *other) const {
        
# 106 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h" 3 4
       (static_cast <bool> (
# 106 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h"
       other != nullptr
# 106 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h" 3 4
       ) ? void (0) : __assert_fail (
# 106 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h"
       "other != nullptr"
# 106 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h" 3 4
       , __builtin_FILE (), __builtin_LINE (), __extension__ __PRETTY_FUNCTION__))
# 106 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h"
                               ;
        return atnConfigSet->hashCode(*other);
      }
    };

    struct ATNConfigComparer final {
      const ATNConfigSet* atnConfigSet;

      bool operator()(const ATNConfig *lhs, const ATNConfig *rhs) const {
        
# 115 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h" 3 4
       (static_cast <bool> (
# 115 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h"
       lhs != nullptr
# 115 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h" 3 4
       ) ? void (0) : __assert_fail (
# 115 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h"
       "lhs != nullptr"
# 115 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h" 3 4
       , __builtin_FILE (), __builtin_LINE (), __extension__ __PRETTY_FUNCTION__))
# 115 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h"
                             ;
        
# 116 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h" 3 4
       (static_cast <bool> (
# 116 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h"
       rhs != nullptr
# 116 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h" 3 4
       ) ? void (0) : __assert_fail (
# 116 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h"
       "rhs != nullptr"
# 116 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h" 3 4
       , __builtin_FILE (), __builtin_LINE (), __extension__ __PRETTY_FUNCTION__))
# 116 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNConfigSet.h"
                             ;
        return atnConfigSet->equals(*lhs, *rhs);
      }
    };

    mutable std::atomic<size_t> _cachedHashCode = 0;






    bool _readonly = false;

    virtual size_t hashCode(const ATNConfig &atnConfig) const;

    virtual bool equals(const ATNConfig &lhs, const ATNConfig &rhs) const;

    using LookupContainer = FlatHashSet<ATNConfig*, ATNConfigHasher, ATNConfigComparer>;



    LookupContainer _configLookup;
  };

  inline bool operator==(const ATNConfigSet &lhs, const ATNConfigSet &rhs) { return lhs.equals(rhs); }

  inline bool operator!=(const ATNConfigSet &lhs, const ATNConfigSet &rhs) { return !operator==(lhs, rhs); }

}
}

namespace std {

template <>
struct hash<::antlr4::atn::ATNConfigSet> {
  size_t operator()(const ::antlr4::atn::ATNConfigSet &atnConfigSet) const {
    return atnConfigSet.hashCode();
  }
};

}
# 10 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/LexerNoViableAltException.h" 2

namespace antlr4 {

  class __attribute__ ((visibility ("default"))) LexerNoViableAltException : public RecognitionException {
  public:
    LexerNoViableAltException(Lexer *lexer, CharStream *input, size_t startIndex,
                              atn::ATNConfigSet *deadEndConfigs);

    virtual size_t getStartIndex();
    virtual atn::ATNConfigSet* getDeadEndConfigs();
    virtual std::string toString();

  private:

    const size_t _startIndex;


    atn::ATNConfigSet *_deadEndConfigs;

  };

}
# 34 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ListTokenSource.h" 1





       




namespace antlr4 {







  class __attribute__ ((visibility ("default"))) ListTokenSource : public TokenSource {
  protected:


    std::vector<std::unique_ptr<Token>> tokens;

  private:






    const std::string sourceName;

  protected:



    size_t i;

  private:


    TokenFactory<CommonToken> *_factory = CommonTokenFactory::DEFAULT.get();

  public:






    ListTokenSource(std::vector<std::unique_ptr<Token>> tokens);
    ListTokenSource(const ListTokenSource& other) = delete;

    ListTokenSource& operator = (const ListTokenSource& other) = delete;
# 69 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ListTokenSource.h"
    ListTokenSource(std::vector<std::unique_ptr<Token>> tokens_, const std::string &sourceName_);

    virtual size_t getCharPositionInLine() override;
    virtual std::unique_ptr<Token> nextToken() override;
    virtual size_t getLine() const override;
    virtual CharStream* getInputStream() override;
    virtual std::string getSourceName() override;

    template<typename T1>
    void setTokenFactory(TokenFactory<T1> *factory) {
      this->_factory = factory;
    }

    virtual TokenFactory<CommonToken>* getTokenFactory() override;

  private:
    void InitializeInstanceFields();
  };

}
# 35 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/NoViableAltException.h" 1





       





namespace antlr4 {





  class __attribute__ ((visibility ("default"))) NoViableAltException : public RecognitionException {
  public:
    NoViableAltException(Parser *recognizer);
    NoViableAltException(Parser *recognizer, TokenStream *input,Token *startToken,
      Token *offendingToken, atn::ATNConfigSet *deadEndConfigs, ParserRuleContext *ctx, bool deleteConfigs);
    ~NoViableAltException();

    virtual Token* getStartToken() const;
    virtual atn::ATNConfigSet* getDeadEndConfigs() const;

  private:



    Ref<atn::ATNConfigSet> _deadEndConfigs;





    Token *_startToken;

  };

}
# 36 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Parser.h" 1





       


# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/ParseTreeListener.h" 1





       



namespace antlr4 {
namespace tree {
# 24 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/ParseTreeListener.h"
  class __attribute__ ((visibility ("default"))) ParseTreeListener {
  public:
    virtual ~ParseTreeListener();

    virtual void visitTerminal(TerminalNode *node) = 0;
    virtual void visitErrorNode(ErrorNode *node) = 0;
    virtual void enterEveryRule(ParserRuleContext *ctx) = 0;
    virtual void exitEveryRule(ParserRuleContext *ctx) = 0;

    bool operator == (const ParseTreeListener &other) {
      return this == &other;
    }
  };

}
}
# 10 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Parser.h" 2





namespace antlr4 {


  class __attribute__ ((visibility ("default"))) Parser : public Recognizer {
  public:

    class TraceListener : public tree::ParseTreeListener {
    public:
      TraceListener(Parser *outerInstance);
      virtual ~TraceListener();

      virtual void enterEveryRule(ParserRuleContext *ctx) override;
      virtual void visitTerminal(tree::TerminalNode *node) override;
      virtual void visitErrorNode(tree::ErrorNode *node) override;
      virtual void exitEveryRule(ParserRuleContext *ctx) override;

    private:
      Parser *const outerInstance;
    };

    class TrimToSizeListener : public tree::ParseTreeListener {
    public:
      static TrimToSizeListener INSTANCE;

      virtual ~TrimToSizeListener();

      virtual void enterEveryRule(ParserRuleContext *ctx) override;
      virtual void visitTerminal(tree::TerminalNode *node) override;
      virtual void visitErrorNode(tree::ErrorNode *node) override;
      virtual void exitEveryRule(ParserRuleContext *ctx) override;
    };

    Parser(TokenStream *input);
    virtual ~Parser();


    virtual void reset();
# 71 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Parser.h"
    virtual Token* match(size_t ttype);
# 89 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Parser.h"
    virtual Token* matchWildcard();
# 106 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Parser.h"
    virtual void setBuildParseTree(bool buildParseTrees);







    virtual bool getBuildParseTree();







    virtual void setTrimParseTree(bool trimParseTrees);



    virtual bool getTrimParseTree();

    virtual std::vector<tree::ParseTreeListener *> getParseListeners();
# 158 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Parser.h"
    virtual void addParseListener(tree::ParseTreeListener *listener);
# 169 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Parser.h"
    virtual void removeParseListener(tree::ParseTreeListener *listener);





    virtual void removeParseListeners();





    virtual void triggerEnterRuleEvent();





    virtual void triggerExitRuleEvent();






    virtual size_t getNumberOfSyntaxErrors();

    virtual TokenFactory<CommonToken>* getTokenFactory() override;



    template<typename T1>
    void setTokenFactory(TokenFactory<T1> *factory) {
      _input->getTokenSource()->setTokenFactory(factory);
    }



    virtual const atn::ATN& getATNWithBypassAlts();
# 220 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Parser.h"
    virtual tree::pattern::ParseTreePattern compileParseTreePattern(const std::string &pattern, int patternRuleIndex);





    virtual tree::pattern::ParseTreePattern compileParseTreePattern(const std::string &pattern, int patternRuleIndex,
                                                                    Lexer *lexer);

    virtual Ref<ANTLRErrorStrategy> getErrorHandler();
    virtual void setErrorHandler(Ref<ANTLRErrorStrategy> const& handler);

    virtual IntStream* getInputStream() override;
    void setInputStream(IntStream *input) override;

    virtual TokenStream* getTokenStream();


    virtual void setTokenStream(TokenStream *input);





    virtual Token* getCurrentToken();

    void notifyErrorListeners(const std::string &msg);

    virtual void notifyErrorListeners(Token *offendingToken, const std::string &msg, std::exception_ptr e);
# 269 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Parser.h"
    virtual Token* consume();



    virtual void enterRule(ParserRuleContext *localctx, size_t state, size_t ruleIndex);

    void exitRule();

    virtual void enterOuterAlt(ParserRuleContext *localctx, size_t altNum);







    int getPrecedence() const;



    virtual void enterRecursionRule(ParserRuleContext *localctx, size_t ruleIndex);
    virtual void enterRecursionRule(ParserRuleContext *localctx, size_t state, size_t ruleIndex, int precedence);




    virtual void pushNewRecursionContext(ParserRuleContext *localctx, size_t state, size_t ruleIndex);
    virtual void unrollRecursionContexts(ParserRuleContext *parentctx);
    virtual ParserRuleContext* getInvokingContext(size_t ruleIndex);
    virtual ParserRuleContext* getContext();
    virtual void setContext(ParserRuleContext *ctx);
    virtual bool precpred(RuleContext *localctx, int precedence) override;
    virtual bool inContext(const std::string &context);
# 316 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Parser.h"
    virtual bool isExpectedToken(size_t symbol);

    bool isMatchedEOF() const;







    virtual misc::IntervalSet getExpectedTokens();

    virtual misc::IntervalSet getExpectedTokensWithinCurrentRule();


    virtual size_t getRuleIndex(const std::string &ruleName);

    virtual ParserRuleContext* getRuleContext();
# 343 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Parser.h"
    virtual std::vector<std::string> getRuleInvocationStack();

    virtual std::vector<std::string> getRuleInvocationStack(RuleContext *p);



    virtual std::vector<std::string> getDFAStrings();



    virtual void dumpDFA();

    virtual std::string getSourceName();

    atn::ParseInfo getParseInfo() const;




    void setProfile(bool profile);





    virtual void setTrace(bool trace);







    bool isTrace() const;

    tree::ParseTreeTracker& getTreeTracker() { return _tracker; }
# 390 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Parser.h"
    tree::TerminalNode *createTerminalNode(Token *t);
# 402 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Parser.h"
    tree::ErrorNode *createErrorNode(Token *t);

  protected:



    ParserRuleContext *_ctx;



    Ref<ANTLRErrorStrategy> _errHandler;






    TokenStream *_input;

    std::vector<int> _precedenceStack;







    bool _buildParseTrees;




    std::vector<tree::ParseTreeListener *> _parseListeners;





    size_t _syntaxErrors;


    bool _matchedEOF;

    virtual void addContextToParseTree();


    tree::ParseTreeTracker _tracker;

  private:





    TraceListener *_tracer;

    void InitializeInstanceFields();
  };

}
# 37 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ParserInterpreter.h" 1





       
# 15 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ParserInterpreter.h"
namespace antlr4 {
# 31 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ParserInterpreter.h"
  class __attribute__ ((visibility ("default"))) ParserInterpreter : public Parser {
  public:
    ParserInterpreter(const std::string &grammarFileName, const dfa::Vocabulary &vocabulary,
                      const std::vector<std::string> &ruleNames, const atn::ATN &atn, TokenStream *input);
    ~ParserInterpreter();

    virtual void reset() override;

    virtual const atn::ATN& getATN() const override;

    virtual const dfa::Vocabulary& getVocabulary() const override;

    virtual const std::vector<std::string>& getRuleNames() const override;
    virtual std::string getGrammarFileName() const override;


    virtual ParserRuleContext* parse(size_t startRuleIndex);

    virtual void enterRecursionRule(ParserRuleContext *localctx, size_t state, size_t ruleIndex, int precedence) override;
# 92 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ParserInterpreter.h"
    void addDecisionOverride(int decision, int tokenIndex, int forcedAlt);

    Ref<InterpreterRuleContext> getOverrideDecisionRoot() const;
# 104 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ParserInterpreter.h"
    InterpreterRuleContext* getRootContext();

  protected:
    const std::string _grammarFileName;
    const atn::ATN &_atn;

    std::vector<std::string> _ruleNames;

    std::vector<dfa::DFA> _decisionToDFA;
    atn::PredictionContextCache _sharedContextCache;
# 128 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/ParserInterpreter.h"
    std::stack<std::pair<ParserRuleContext *, size_t>> _parentContextStack;




    int _overrideDecision = -1;
    size_t _overrideDecisionInputIndex = std::numeric_limits<size_t>::max();
    size_t _overrideDecisionAlt = std::numeric_limits<size_t>::max();
    bool _overrideDecisionReached = false;





    Ref<InterpreterRuleContext> _overrideDecisionRoot;
    InterpreterRuleContext* _rootContext;

    virtual atn::ATNState *getATNState();
    virtual void visitState(atn::ATNState *p);





    size_t visitDecisionState(atn::DecisionState *p);




    InterpreterRuleContext* createInterpreterRuleContext(ParserRuleContext *parent, size_t invokingStateNumber, size_t ruleIndex);

    virtual void visitRuleStopState(atn::ATNState *p);





    void recover(RecognitionException &e);
    Token* recoverInline();

  private:
    const dfa::Vocabulary &_vocabulary;
    std::unique_ptr<Token> _errorToken;
  };

}
# 38 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2





# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/RuleContextWithAltNum.h" 1





       



namespace antlr4 {
# 21 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/RuleContextWithAltNum.h"
  class __attribute__ ((visibility ("default"))) RuleContextWithAltNum : public ParserRuleContext {
  public:
    size_t altNum = 0;

    RuleContextWithAltNum();
    RuleContextWithAltNum(ParserRuleContext *parent, int invokingStateNumber);

    virtual size_t getAltNumber() const override;
    virtual void setAltNumber(size_t altNum) override;
  };

}
# 44 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/RuntimeMetaData.h" 1





       



namespace antlr4 {
# 41 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/RuntimeMetaData.h"
  class __attribute__ ((visibility ("default"))) RuntimeMetaData {
  public:
# 72 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/RuntimeMetaData.h"
    static const std::string VERSION;
# 83 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/RuntimeMetaData.h"
    static std::string getRuntimeVersion();
# 142 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/RuntimeMetaData.h"
    static void checkVersion(const std::string &generatingToolVersion, const std::string &compileTimeVersion);
# 152 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/RuntimeMetaData.h"
    static std::string getMajorMinorVersion(const std::string &version);
  };

}
# 45 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2




# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/TokenStreamRewriter.h" 1





       



namespace antlr4 {
# 88 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/TokenStreamRewriter.h"
  class __attribute__ ((visibility ("default"))) TokenStreamRewriter {
  public:
    static const std::string DEFAULT_PROGRAM_NAME;
    static constexpr size_t PROGRAM_INIT_SIZE = 100;
    static constexpr size_t MIN_TOKEN_INDEX = 0;

    TokenStreamRewriter(TokenStream *tokens);
    virtual ~TokenStreamRewriter();

    TokenStream *getTokenStream();

    virtual void rollback(size_t instructionIndex);




    virtual void rollback(const std::string &programName, size_t instructionIndex);

    virtual void deleteProgram();


    virtual void deleteProgram(const std::string &programName);
    virtual void insertAfter(Token *t, const std::string& text);
    virtual void insertAfter(size_t index, const std::string& text);
    virtual void insertAfter(const std::string &programName, Token *t, const std::string& text);
    virtual void insertAfter(const std::string &programName, size_t index, const std::string& text);

    virtual void insertBefore(Token *t, const std::string& text);
    virtual void insertBefore(size_t index, const std::string& text);
    virtual void insertBefore(const std::string &programName, Token *t, const std::string& text);
    virtual void insertBefore(const std::string &programName, size_t index, const std::string& text);

    virtual void replace(size_t index, const std::string& text);
    virtual void replace(size_t from, size_t to, const std::string& text);
    virtual void replace(Token *indexT, const std::string& text);
    virtual void replace(Token *from, Token *to, const std::string& text);
    virtual void replace(const std::string &programName, size_t from, size_t to, const std::string& text);
    virtual void replace(const std::string &programName, Token *from, Token *to, const std::string& text);

    virtual void Delete(size_t index);
    virtual void Delete(size_t from, size_t to);
    virtual void Delete(Token *indexT);
    virtual void Delete(Token *from, Token *to);
    virtual void Delete(const std::string &programName, size_t from, size_t to);
    virtual void Delete(const std::string &programName, Token *from, Token *to);

    virtual size_t getLastRewriteTokenIndex();



    virtual std::string getText();




    std::string getText(std::string programName);
# 153 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/TokenStreamRewriter.h"
    virtual std::string getText(const misc::Interval &interval);

    virtual std::string getText(const std::string &programName, const misc::Interval &interval);

  protected:
    class RewriteOperation {
    public:

      size_t index;
      std::string text;


      size_t instructionIndex;

      RewriteOperation(TokenStreamRewriter *outerInstance, size_t index);
      RewriteOperation(TokenStreamRewriter *outerInstance, size_t index, const std::string& text);
      virtual ~RewriteOperation();




      virtual size_t execute(std::string *buf);
      virtual std::string toString();

    private:
      TokenStreamRewriter *const outerInstance;
      void InitializeInstanceFields();
    };

    class InsertBeforeOp : public RewriteOperation {
    private:
      TokenStreamRewriter *const outerInstance;

    public:
      InsertBeforeOp(TokenStreamRewriter *outerInstance, size_t index, const std::string& text);

      virtual size_t execute(std::string *buf) override;
    };

    class ReplaceOp : public RewriteOperation {
    private:
      TokenStreamRewriter *const outerInstance;

    public:
      size_t lastIndex;

      ReplaceOp(TokenStreamRewriter *outerInstance, size_t from, size_t to, const std::string& text);
      virtual size_t execute(std::string *buf) override;
      virtual std::string toString() override;

    private:
      void InitializeInstanceFields();
    };


    TokenStream *const tokens;




    std::map<std::string, std::vector<RewriteOperation*>> _programs;



    std::map<std::string, size_t> _lastRewriteTokenIndexes;
    virtual size_t getLastRewriteTokenIndex(const std::string &programName);
    virtual void setLastRewriteTokenIndex(const std::string &programName, size_t i);
    virtual std::vector<RewriteOperation*>& getProgram(const std::string &name);
# 272 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/TokenStreamRewriter.h"
    virtual std::unordered_map<size_t, RewriteOperation*> reduceToSingleOperationPerIndex(std::vector<RewriteOperation*> &rewrites);

    virtual std::string catOpText(std::string *a, std::string *b);


    template <typename T>
    std::vector<T *> getKindOfOps(std::vector<RewriteOperation *> rewrites, size_t before) {
      std::vector<T *> ops;
      for (size_t i = 0; i < before && i < rewrites.size(); i++) {
        T *op = dynamic_cast<T *>(rewrites[i]);
        if (op == nullptr) {
          continue;
        }
        ops.push_back(op);
      }
      return ops;
    }

  private:
    std::vector<RewriteOperation *>& initializeProgram(const std::string &name);

  };

}
# 50 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/UnbufferedCharStream.h" 1





       



namespace antlr4 {





  class __attribute__ ((visibility ("default"))) UnbufferedCharStream : public CharStream {
  public:

    std::string name;

    explicit UnbufferedCharStream(std::wistream &input);

    void consume() override;
    size_t LA(ssize_t i) override;
# 33 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/UnbufferedCharStream.h"
    ssize_t mark() override;




    void release(ssize_t marker) override;
    size_t index() override;





    void seek(size_t index) override;
    size_t size() override;
    std::string getSourceName() const override;
    std::string getText(const misc::Interval &interval) override;

    std::string toString() const override;

  protected:




    std::u32string _data;
    typedef char32_t storage_type;







    size_t _p;







    size_t _numMarkers;


    size_t _lastChar;





    size_t _lastCharBufferStart;







    size_t _currentCharIndex;

    std::wistream &_input;







    virtual void sync(size_t want);






    virtual size_t fill(size_t n);



    virtual char32_t nextChar();
    virtual void add(char32_t c);
    size_t getBufferStartIndex() const;
  };

}
# 51 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/UnbufferedTokenStream.h" 1





       



namespace antlr4 {

  class __attribute__ ((visibility ("default"))) UnbufferedTokenStream : public TokenStream {
  public:
    UnbufferedTokenStream(TokenSource *tokenSource);
    UnbufferedTokenStream(TokenSource *tokenSource, int bufferSize);
    UnbufferedTokenStream(const UnbufferedTokenStream& other) = delete;
    virtual ~UnbufferedTokenStream();

    UnbufferedTokenStream& operator = (const UnbufferedTokenStream& other) = delete;

    virtual Token* get(size_t i) const override;
    virtual Token* LT(ssize_t i) override;
    virtual size_t LA(ssize_t i) override;

    virtual TokenSource* getTokenSource() const override;

    virtual std::string getText(const misc::Interval &interval) override;
    virtual std::string getText() override;
    virtual std::string getText(RuleContext *ctx) override;
    virtual std::string getText(Token *start, Token *stop) override;

    virtual void consume() override;
# 41 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/UnbufferedTokenStream.h"
    virtual ssize_t mark() override;
    virtual void release(ssize_t marker) override;
    virtual size_t index() override;
    virtual void seek(size_t index) override;
    virtual size_t size() override;
    virtual std::string getSourceName() const override;

  protected:



    TokenSource *_tokenSource;







    std::vector<std::unique_ptr<Token>> _tokens;







    size_t _p;







    int _numMarkers;




    Token *_lastToken;





    Token *_lastTokenBufferStart;
# 97 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/UnbufferedTokenStream.h"
    size_t _currentTokenIndex;

    virtual void sync(ssize_t want);






    virtual size_t fill(size_t n);
    virtual void add(std::unique_ptr<Token> t);

    size_t getBufferStartIndex() const;

  private:
    void InitializeInstanceFields();
  };

}
# 52 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Version.h" 1
# 26 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/Version.h"
       



#define ANTLRCPP_VERSION_MAJOR 4
#define ANTLRCPP_VERSION_MINOR 13
#define ANTLRCPP_VERSION_PATCH 2

#define ANTLRCPP_MAKE_VERSION(major,minor,patch) ((major) * 100000 + (minor) * 1000 + (patch))

#define ANTLRCPP_VERSION ANTLRCPP_MAKE_VERSION(ANTLR4CPP_VERSION_MAJOR, ANTLR4CPP_VERSION_MINOR, ANTLR4CPP_VERSION_PATCH)


#define ANTLRCPP_VERSION_STRING ANTLR4CPP_STRINGIFY(ANTLR4CPP_VERSION_MAJOR) "." ANTLR4CPP_STRINGIFY(ANTLR4CPP_VERSION_MINOR) "." ANTLR4CPP_STRINGIFY(ANTLR4CPP_VERSION_PATCH)
# 53 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2






# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNDeserializationOptions.h" 1





       



namespace antlr4 {
namespace atn {

class __attribute__ ((visibility ("default"))) ATNDeserializationOptions final {
public:
  ATNDeserializationOptions()
    : _readOnly(false), _verifyATN(true), _generateRuleBypassTransitions(false) {}


  ATNDeserializationOptions(ATNDeserializationOptions *options);

  ATNDeserializationOptions(const ATNDeserializationOptions&) = default;

  ATNDeserializationOptions& operator=(const ATNDeserializationOptions&) = default;

  static const ATNDeserializationOptions& getDefaultOptions();

  bool isReadOnly() const { return _readOnly; }

  void makeReadOnly();

  bool isVerifyATN() const { return _verifyATN; }

  void setVerifyATN(bool verify);

  bool isGenerateRuleBypassTransitions() const { return _generateRuleBypassTransitions; }

  void setGenerateRuleBypassTransitions(bool generate);

private:
  void throwIfReadOnly() const;

  bool _readOnly;
  bool _verifyATN;
  bool _generateRuleBypassTransitions;
};

}
}
# 60 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNDeserializer.h" 1





       



# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerAction.h" 1





       

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerActionType.h" 1





       



namespace antlr4 {
namespace atn {







  enum class LexerActionType : size_t {



    CHANNEL = 0,



    CUSTOM,



    MODE,



    MORE,



    POP_MODE,



    PUSH_MODE,



    SKIP,



    TYPE,

    INDEXED_CUSTOM,
  };

}
}
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerAction.h" 2


namespace antlr4 {
namespace atn {
# 22 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerAction.h"
  class __attribute__ ((visibility ("default"))) LexerAction {
  public:
    virtual ~LexerAction() = default;
# 34 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerAction.h"
    LexerActionType getActionType() const { return _actionType; }
# 49 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerAction.h"
    bool isPositionDependent() const { return _positionDependent; }
# 58 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerAction.h"
    virtual void execute(Lexer *lexer) const = 0;

    size_t hashCode() const;

    virtual bool equals(const LexerAction &other) const = 0;

    virtual std::string toString() const = 0;

  protected:
    LexerAction(LexerActionType actionType, bool positionDependent)
        : _actionType(actionType), _hashCode(0), _positionDependent(positionDependent) {}

    virtual size_t hashCodeImpl() const = 0;

    size_t cachedHashCode() const { return _hashCode.load(std::memory_order_relaxed); }

  private:
    const LexerActionType _actionType;
    mutable std::atomic<size_t> _hashCode;
    const bool _positionDependent;
  };

  inline bool operator==(const LexerAction &lhs, const LexerAction &rhs) {
    return lhs.equals(rhs);
  }

  inline bool operator!=(const LexerAction &lhs, const LexerAction &rhs) {
    return !operator==(lhs, rhs);
  }

}
}

namespace std {

  template <>
  struct hash<::antlr4::atn::LexerAction> {
    size_t operator()(const ::antlr4::atn::LexerAction &lexerAction) const {
      return lexerAction.hashCode();
    }
  };

}
# 11 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNDeserializer.h" 2


namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) ATNDeserializer final {
  public:
    static constexpr size_t SERIALIZED_VERSION = 4;

    ATNDeserializer();

    explicit ATNDeserializer(ATNDeserializationOptions deserializationOptions);

    std::unique_ptr<ATN> deserialize(SerializedATNView input) const;
    void verifyATN(const ATN &atn) const;

  private:
    const ATNDeserializationOptions _deserializationOptions;
  };

}
}
# 61 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNSimulator.h" 1





       







namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) ATNSimulator {
  public:

    static const Ref<dfa::DFAState> ERROR;
    const ATN &atn;

    ATNSimulator(const ATN &atn, PredictionContextCache &sharedContextCache);

    virtual ~ATNSimulator() = default;

    virtual void reset() = 0;
# 40 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNSimulator.h"
    virtual void clearDFA();

    PredictionContextCache& getSharedContextCache() const;
    Ref<const PredictionContext> getCachedContext(const Ref<const PredictionContext> &context);

  protected:
# 67 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNSimulator.h"
    PredictionContextCache &_sharedContextCache;
  };

}
}
# 62 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ATNType.h" 1





       



namespace antlr4 {
namespace atn {


  enum class ATNType {
    LEXER = 0,
    PARSER = 1,
  };

}
}
# 64 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ActionTransition.h" 1





       



namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) ActionTransition final : public Transition {
  public:
    static bool is(const Transition &transition) { return transition.getTransitionType() == TransitionType::ACTION; }

    static bool is(const Transition *transition) { return transition != nullptr && is(*transition); }

    const size_t ruleIndex;
    const size_t actionIndex;
    const bool isCtxDependent;

    ActionTransition(ATNState *target, size_t ruleIndex);

    ActionTransition(ATNState *target, size_t ruleIndex, size_t actionIndex, bool isCtxDependent);

    virtual bool isEpsilon() const override;

    virtual bool matches(size_t symbol, size_t minVocabSymbol, size_t maxVocabSymbol) const override;

    virtual std::string toString() const override;
  };

}
}
# 65 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/AmbiguityInfo.h" 1





       

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/DecisionEventInfo.h" 1





       



namespace antlr4 {
namespace atn {
# 28 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/DecisionEventInfo.h"
  class __attribute__ ((visibility ("default"))) DecisionEventInfo {
  public:




    const size_t decision;






    const ATNConfigSet *configs;




    const TokenStream *input;





    const size_t startIndex;




    const size_t stopIndex;





    const bool fullCtx;

    DecisionEventInfo(size_t decision, ATNConfigSet *configs, TokenStream *input, size_t startIndex,
                      size_t stopIndex, bool fullCtx);
  };

}
}
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/AmbiguityInfo.h" 2


namespace antlr4 {
namespace atn {
# 42 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/AmbiguityInfo.h"
  class __attribute__ ((visibility ("default"))) AmbiguityInfo : public DecisionEventInfo {
  public:

    antlrcpp::BitSet ambigAlts;
# 63 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/AmbiguityInfo.h"
    AmbiguityInfo(size_t decision, ATNConfigSet *configs, const antlrcpp::BitSet &ambigAlts, TokenStream *input,
                  size_t startIndex, size_t stopIndex, bool fullCtx);
  };

}
}
# 66 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ArrayPredictionContext.h" 1






       



namespace antlr4 {
namespace atn {

  class SingletonPredictionContext;

  class __attribute__ ((visibility ("default"))) ArrayPredictionContext final : public PredictionContext {
  public:
    static bool is(const PredictionContext &predictionContext) { return predictionContext.getContextType() == PredictionContextType::ARRAY; }

    static bool is(const PredictionContext *predictionContext) { return predictionContext != nullptr && is(*predictionContext); }






    std::vector<Ref<const PredictionContext>> parents;


    std::vector<size_t> returnStates;

    explicit ArrayPredictionContext(const SingletonPredictionContext &predictionContext);

    ArrayPredictionContext(std::vector<Ref<const PredictionContext>> parents, std::vector<size_t> returnStates);

    ArrayPredictionContext(ArrayPredictionContext&&) = default;

    bool isEmpty() const override;
    size_t size() const override;
    const Ref<const PredictionContext>& getParent(size_t index) const override;
    size_t getReturnState(size_t index) const override;
    bool equals(const PredictionContext &other) const override;
    std::string toString() const override;

  protected:
    size_t hashCodeImpl() const override;
  };

}
}
# 67 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/AtomTransition.h" 1





       



namespace antlr4 {
namespace atn {


  class __attribute__ ((visibility ("default"))) AtomTransition final : public Transition {
  public:
    static bool is(const Transition &transition) { return transition.getTransitionType() == TransitionType::ATOM; }

    static bool is(const Transition *transition) { return transition != nullptr && is(*transition); }



    const size_t _label;

    AtomTransition(ATNState *target, size_t label);

    virtual misc::IntervalSet label() const override;
    virtual bool matches(size_t symbol, size_t minVocabSymbol, size_t maxVocabSymbol) const override;

    virtual std::string toString() const override;
  };

}
}
# 68 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/BasicBlockStartState.h" 1





       


# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/BlockStartState.h" 1





       

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/DecisionState.h" 1





       



namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) DecisionState : public ATNState {
  public:
    static bool is(const ATNState &atnState) {
      const auto stateType = atnState.getStateType();
      return (stateType >= ATNStateType::BLOCK_START && stateType <= ATNStateType::TOKEN_START) ||
              stateType == ATNStateType::PLUS_LOOP_BACK ||
              stateType == ATNStateType::STAR_LOOP_ENTRY;
    }

    static bool is(const ATNState *atnState) { return atnState != nullptr && is(*atnState); }

    int decision = -1;
    bool nonGreedy = false;

    virtual std::string toString() const override;

  protected:
    using ATNState::ATNState;
  };

}
}
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/BlockStartState.h" 2

namespace antlr4 {
namespace atn {


  class __attribute__ ((visibility ("default"))) BlockStartState : public DecisionState {
  public:
    static bool is(const ATNState &atnState) {
      const auto stateType = atnState.getStateType();
      return stateType >= ATNStateType::BLOCK_START && stateType <= ATNStateType::STAR_BLOCK_START;
    }

    static bool is(const ATNState *atnState) { return atnState != nullptr && is(*atnState); }

    BlockEndState *endState = nullptr;

  protected:
    using DecisionState::DecisionState;
  };

}
}
# 10 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/BasicBlockStartState.h" 2

namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) BasicBlockStartState final : public BlockStartState {
  public:
    static bool is(const ATNState &atnState) { return atnState.getStateType() == ATNStateType::BLOCK_START; }

    static bool is(const ATNState *atnState) { return atnState != nullptr && is(*atnState); }

    BasicBlockStartState() : BlockStartState(ATNStateType::BLOCK_START) {}
  };

}
}
# 69 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/BasicState.h" 1





       



namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) BasicState final : public ATNState {
  public:
    static bool is(const ATNState &atnState) { return atnState.getStateType() == ATNStateType::BASIC; }

    static bool is(const ATNState *atnState) { return atnState != nullptr && is(*atnState); }

    BasicState() : ATNState(ATNStateType::BASIC) {}
  };

}
}
# 70 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/BlockEndState.h" 1





       



namespace antlr4 {
namespace atn {


  class __attribute__ ((visibility ("default"))) BlockEndState final : public ATNState {
  public:
    static bool is(const ATNState &atnState) { return atnState.getStateType() == ATNStateType::BLOCK_END; }

    static bool is(const ATNState *atnState) { return atnState != nullptr && is(*atnState); }

    BlockStartState *startState = nullptr;

    BlockEndState() : ATNState(ATNStateType::BLOCK_END) {}
  };

}
}
# 71 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ContextSensitivityInfo.h" 1





       



namespace antlr4 {
namespace atn {
# 30 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ContextSensitivityInfo.h"
  class __attribute__ ((visibility ("default"))) ContextSensitivityInfo : public DecisionEventInfo {
  public:
# 43 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ContextSensitivityInfo.h"
    ContextSensitivityInfo(size_t decision, ATNConfigSet *configs, TokenStream *input, size_t startIndex, size_t stopIndex);
  };

}
}
# 73 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/DecisionInfo.h" 1





       



# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredicateEvalInfo.h" 1





       



namespace antlr4 {
namespace atn {
# 20 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredicateEvalInfo.h"
  class __attribute__ ((visibility ("default"))) PredicateEvalInfo : public DecisionEventInfo {
  public:

    const Ref<const SemanticContext> semctx;







    const size_t predictedAlt;


    const bool evalResult;
# 57 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredicateEvalInfo.h"
    PredicateEvalInfo(size_t decision, TokenStream *input, size_t startIndex, size_t stopIndex,
                      Ref<const SemanticContext> semctx, bool evalResult, size_t predictedAlt, bool fullCtx);
  };

}
}
# 11 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/DecisionInfo.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ErrorInfo.h" 1





       



namespace antlr4 {
namespace atn {
# 23 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ErrorInfo.h"
  class __attribute__ ((visibility ("default"))) ErrorInfo : public DecisionEventInfo {
  public:
# 38 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ErrorInfo.h"
    ErrorInfo(size_t decision, ATNConfigSet *configs, TokenStream *input, size_t startIndex, size_t stopIndex,
              bool fullCtx);
  };

}
}
# 12 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/DecisionInfo.h" 2

namespace antlr4 {
namespace atn {

  class LookaheadEventInfo;
# 31 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/DecisionInfo.h"
  class __attribute__ ((visibility ("default"))) DecisionInfo {
  public:



    const size_t decision;





    long long invocations = 0;
# 58 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/DecisionInfo.h"
    long long timeInPrediction = 0;







    long long SLL_TotalLook = 0;






    long long SLL_MinLook = 0;






    long long SLL_MaxLook = 0;



    Ref<LookaheadEventInfo> SLL_MaxLookEvent;






    long long LL_TotalLook = 0;
# 100 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/DecisionInfo.h"
    long long LL_MinLook = 0;
# 109 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/DecisionInfo.h"
    long long LL_MaxLook = 0;





    Ref<LookaheadEventInfo> LL_MaxLookEvent;






    std::vector<ContextSensitivityInfo> contextSensitivities;







    std::vector<ErrorInfo> errors;






    std::vector<AmbiguityInfo> ambiguities;







    std::vector<PredicateEvalInfo> predicateEvals;
# 162 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/DecisionInfo.h"
    long long SLL_ATNTransitions = 0;
# 173 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/DecisionInfo.h"
    long long SLL_DFATransitions = 0;
# 186 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/DecisionInfo.h"
    long long LL_Fallback = 0;
# 203 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/DecisionInfo.h"
    long long LL_ATNTransitions = 0;
# 214 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/DecisionInfo.h"
    long long LL_DFATransitions = 0;






    explicit DecisionInfo(size_t decision);

    std::string toString() const;
  };

}
}
# 75 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/EpsilonTransition.h" 1





       



namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) EpsilonTransition final : public Transition {
  public:
    static bool is(const Transition &transition) { return transition.getTransitionType() == TransitionType::EPSILON; }

    static bool is(const Transition *transition) { return transition != nullptr && is(*transition); }

    explicit EpsilonTransition(ATNState *target);
    EpsilonTransition(ATNState *target, size_t outermostPrecedenceReturn);
# 30 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/EpsilonTransition.h"
    size_t outermostPrecedenceReturn() const;

    virtual bool isEpsilon() const override;
    virtual bool matches(size_t symbol, size_t minVocabSymbol, size_t maxVocabSymbol) const override;

    virtual std::string toString() const override;

  private:
    const size_t _outermostPrecedenceReturn;
  };

}
}
# 77 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LL1Analyzer.h" 1





       






namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) LL1Analyzer final {
  public:


    static constexpr size_t HIT_PRED = Token::INVALID_TYPE;

    explicit LL1Analyzer(const atn::ATN &atn) : _atn(atn) {}
# 33 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LL1Analyzer.h"
    std::vector<misc::IntervalSet> getDecisionLookahead(ATNState *s) const;
# 50 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LL1Analyzer.h"
    misc::IntervalSet LOOK(ATNState *s, RuleContext *ctx) const;
# 69 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LL1Analyzer.h"
    misc::IntervalSet LOOK(ATNState *s, ATNState *stopState, RuleContext *ctx) const;

  private:
    const atn::ATN &_atn;
  };

}
}
# 79 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerATNConfig.h" 1





       



namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) LexerATNConfig final : public ATNConfig {
  public:
    LexerATNConfig(ATNState *state, int alt, Ref<const PredictionContext> context);
    LexerATNConfig(ATNState *state, int alt, Ref<const PredictionContext> context, Ref<const LexerActionExecutor> lexerActionExecutor);

    LexerATNConfig(LexerATNConfig const& other, ATNState *state);
    LexerATNConfig(LexerATNConfig const& other, ATNState *state, Ref<const LexerActionExecutor> lexerActionExecutor);
    LexerATNConfig(LexerATNConfig const& other, ATNState *state, Ref<const PredictionContext> context);





    const Ref<const LexerActionExecutor>& getLexerActionExecutor() const { return _lexerActionExecutor; }
    bool hasPassedThroughNonGreedyDecision() const { return _passedThroughNonGreedyDecision; }

    virtual size_t hashCode() const override;

    bool operator==(const LexerATNConfig& other) const;

  private:



    const Ref<const LexerActionExecutor> _lexerActionExecutor;
    const bool _passedThroughNonGreedyDecision = false;

    static bool checkNonGreedyDecision(LexerATNConfig const& source, ATNState *target);
  };

}
}
# 80 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerATNSimulator.h" 1





       







namespace antlr4 {
namespace atn {


  class __attribute__ ((visibility ("default"))) LexerATNSimulator : public ATNSimulator {
  protected:
    struct __attribute__ ((visibility ("default"))) SimState final {
      size_t index = std::numeric_limits<size_t>::max();
      size_t line = 0;
      size_t charPos = std::numeric_limits<size_t>::max();
      dfa::DFAState *dfaState = nullptr;

      void reset();
    };

  public:
    static constexpr size_t MIN_DFA_EDGE = 0;
    static constexpr size_t MAX_DFA_EDGE = 127;

  protected:
# 50 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerATNSimulator.h"
    Lexer *const _recog;





    size_t _startIndex;


    size_t _line;


    size_t _charPositionInLine;

  public:
    std::vector<dfa::DFA> &_decisionToDFA;

  protected:
    size_t _mode;


    SimState _prevAccept;

  public:
    LexerATNSimulator(const ATN &atn, std::vector<dfa::DFA> &decisionToDFA, PredictionContextCache &sharedContextCache);
    LexerATNSimulator(Lexer *recog, const ATN &atn, std::vector<dfa::DFA> &decisionToDFA, PredictionContextCache &sharedContextCache);
    virtual ~LexerATNSimulator() = default;

    virtual void copyState(LexerATNSimulator *simulator);
    virtual size_t match(CharStream *input, size_t mode);
    virtual void reset() override;

    virtual void clearDFA() override;

  protected:
    virtual size_t matchATN(CharStream *input);
    virtual size_t execATN(CharStream *input, dfa::DFAState *ds0);
# 98 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerATNSimulator.h"
    virtual dfa::DFAState *getExistingTargetState(dfa::DFAState *s, size_t t);
# 111 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerATNSimulator.h"
    virtual dfa::DFAState *computeTargetState(CharStream *input, dfa::DFAState *s, size_t t);

    virtual size_t failOrAccept(CharStream *input, ATNConfigSet *reach, size_t t);






    void getReachableConfigSet(CharStream *input, ATNConfigSet *closure_,
                               ATNConfigSet *reach, size_t t);

    virtual void accept(CharStream *input, const Ref<const LexerActionExecutor> &lexerActionExecutor, size_t startIndex, size_t index,
                        size_t line, size_t charPos);

    virtual ATNState *getReachableTarget(const Transition *trans, size_t t);

    virtual std::unique_ptr<ATNConfigSet> computeStartState(CharStream *input, ATNState *p);
# 139 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerATNSimulator.h"
    virtual bool closure(CharStream *input, const Ref<LexerATNConfig> &config, ATNConfigSet *configs,
                         bool currentAltReachedAcceptState, bool speculative, bool treatEofAsEpsilon);


    virtual Ref<LexerATNConfig> getEpsilonTarget(CharStream *input, const Ref<LexerATNConfig> &config, const Transition *t,
      ATNConfigSet *configs, bool speculative, bool treatEofAsEpsilon);
# 166 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerATNSimulator.h"
    virtual bool evaluatePredicate(CharStream *input, size_t ruleIndex, size_t predIndex, bool speculative);

    virtual void captureSimState(CharStream *input, dfa::DFAState *dfaState);
    virtual dfa::DFAState* addDFAEdge(dfa::DFAState *from, size_t t, ATNConfigSet *q);
    virtual void addDFAEdge(dfa::DFAState *p, size_t t, dfa::DFAState *q);







    virtual dfa::DFAState *addDFAState(ATNConfigSet *configs);

    virtual dfa::DFAState *addDFAState(ATNConfigSet *configs, bool suppressEdge);

  public:
    dfa::DFA& getDFA(size_t mode);


    virtual std::string getText(CharStream *input);
    virtual size_t getLine() const;
    virtual void setLine(size_t line);
    virtual size_t getCharPositionInLine();
    virtual void setCharPositionInLine(size_t charPositionInLine);
    virtual void consume(CharStream *input);
    virtual std::string getTokenName(size_t t);

  private:
    void InitializeInstanceFields();
  };

}
}
# 81 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerActionExecutor.h" 1





       




namespace antlr4 {
namespace atn {







  class __attribute__ ((visibility ("default"))) LexerActionExecutor final : public std::enable_shared_from_this<LexerActionExecutor> {
  public:



    explicit LexerActionExecutor(std::vector<Ref<const LexerAction>> lexerActions);
# 41 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerActionExecutor.h"
    static Ref<const LexerActionExecutor> append(const Ref<const LexerActionExecutor> &lexerActionExecutor,
                                                 Ref<const LexerAction> lexerAction);
# 72 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerActionExecutor.h"
    Ref<const LexerActionExecutor> fixOffsetBeforeMatch(int offset) const;




    const std::vector<Ref<const LexerAction>>& getLexerActions() const;
# 97 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerActionExecutor.h"
    void execute(Lexer *lexer, CharStream *input, size_t startIndex) const;

    size_t hashCode() const;

    bool equals(const LexerActionExecutor &other) const;

  private:
    const std::vector<Ref<const LexerAction>> _lexerActions;
    mutable std::atomic<size_t> _hashCode;
  };

  inline bool operator==(const LexerActionExecutor &lhs, const LexerActionExecutor &rhs) {
    return lhs.equals(rhs);
  }

  inline bool operator!=(const LexerActionExecutor &lhs, const LexerActionExecutor &rhs) {
    return !operator==(lhs, rhs);
  }

}
}

namespace std {

  template <>
  struct hash<::antlr4::atn::LexerActionExecutor> {
    size_t operator()(const ::antlr4::atn::LexerActionExecutor &lexerActionExecutor) const {
      return lexerActionExecutor.hashCode();
    }
  };

}
# 83 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerChannelAction.h" 1





       




namespace antlr4 {
namespace atn {

  using antlr4::Lexer;
# 23 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerChannelAction.h"
  class __attribute__ ((visibility ("default"))) LexerChannelAction final : public LexerAction {
  public:
    static bool is(const LexerAction &lexerAction) { return lexerAction.getActionType() == LexerActionType::CHANNEL; }

    static bool is(const LexerAction *lexerAction) { return lexerAction != nullptr && is(*lexerAction); }




    explicit LexerChannelAction(int channel);





    int getChannel() const { return _channel; }







    void execute(Lexer *lexer) const override;

    bool equals(const LexerAction &other) const override;
    std::string toString() const override;

  protected:
    size_t hashCodeImpl() const override;

  private:
    const int _channel;
  };

}
}
# 85 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerCustomAction.h" 1





       




namespace antlr4 {
namespace atn {
# 27 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerCustomAction.h"
  class __attribute__ ((visibility ("default"))) LexerCustomAction final : public LexerAction {
  public:
    static bool is(const LexerAction &lexerAction) { return lexerAction.getActionType() == LexerActionType::CUSTOM; }

    static bool is(const LexerAction *lexerAction) { return lexerAction != nullptr && is(*lexerAction); }
# 41 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerCustomAction.h"
    LexerCustomAction(size_t ruleIndex, size_t actionIndex);





    size_t getRuleIndex() const { return _ruleIndex; }





    size_t getActionIndex() const { return _actionIndex; }







    void execute(Lexer *lexer) const override;

    bool equals(const LexerAction &other) const override;
    std::string toString() const override;

  protected:
    size_t hashCodeImpl() const override;

  private:
    const size_t _ruleIndex;
    const size_t _actionIndex;
  };

}
}
# 86 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerIndexedCustomAction.h" 1





       




namespace antlr4 {
namespace atn {
# 27 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerIndexedCustomAction.h"
  class __attribute__ ((visibility ("default"))) LexerIndexedCustomAction final : public LexerAction {
  public:
    static bool is(const LexerAction &lexerAction) { return lexerAction.getActionType() == LexerActionType::INDEXED_CUSTOM; }

    static bool is(const LexerAction *lexerAction) { return lexerAction != nullptr && is(*lexerAction); }
# 45 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerIndexedCustomAction.h"
    LexerIndexedCustomAction(int offset, Ref<const LexerAction> action);
# 54 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerIndexedCustomAction.h"
    int getOffset() const { return _offset; }





    const Ref<const LexerAction>& getAction() const { return _action; }

    void execute(Lexer *lexer) const override;
    bool equals(const LexerAction &other) const override;
    std::string toString() const override;

  protected:
    size_t hashCodeImpl() const override;

  private:
    const Ref<const LexerAction> _action;
    const int _offset;
  };

}
}
# 87 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerModeAction.h" 1





       




namespace antlr4 {
namespace atn {
# 21 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerModeAction.h"
  class __attribute__ ((visibility ("default"))) LexerModeAction final : public LexerAction {
  public:
    static bool is(const LexerAction &lexerAction) { return lexerAction.getActionType() == LexerActionType::MODE; }

    static bool is(const LexerAction *lexerAction) { return lexerAction != nullptr && is(*lexerAction); }




    explicit LexerModeAction(int mode);





    int getMode() const { return _mode; }







    void execute(Lexer *lexer) const override;

    bool equals(const LexerAction &obj) const override;
    std::string toString() const override;

  protected:
    size_t hashCodeImpl() const override;

  private:
    const int _mode;
  };

}
}
# 88 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerMoreAction.h" 1





       




namespace antlr4 {
namespace atn {
# 23 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerMoreAction.h"
  class __attribute__ ((visibility ("default"))) LexerMoreAction final : public LexerAction {
  public:
    static bool is(const LexerAction &lexerAction) { return lexerAction.getActionType() == LexerActionType::MORE; }

    static bool is(const LexerAction *lexerAction) { return lexerAction != nullptr && is(*lexerAction); }




    static const Ref<const LexerMoreAction>& getInstance();






    void execute(Lexer *lexer) const override;

    bool equals(const LexerAction &obj) const override;
    std::string toString() const override;

  protected:
    size_t hashCodeImpl() const override;

  private:

    LexerMoreAction() : LexerAction(LexerActionType::MORE, false) {}
  };

}
}
# 89 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerPopModeAction.h" 1





       




namespace antlr4 {
namespace atn {
# 23 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerPopModeAction.h"
  class __attribute__ ((visibility ("default"))) LexerPopModeAction final : public LexerAction {
  public:
    static bool is(const LexerAction &lexerAction) { return lexerAction.getActionType() == LexerActionType::POP_MODE; }

    static bool is(const LexerAction *lexerAction) { return lexerAction != nullptr && is(*lexerAction); }




    static const Ref<const LexerPopModeAction>& getInstance();






    void execute(Lexer *lexer) const override;

    bool equals(const LexerAction &other) const override;
    std::string toString() const override;

  protected:
    size_t hashCodeImpl() const override;

  private:

    LexerPopModeAction() : LexerAction(LexerActionType::POP_MODE, false) {}
  };

}
}
# 90 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerPushModeAction.h" 1





       




namespace antlr4 {
namespace atn {
# 21 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerPushModeAction.h"
  class __attribute__ ((visibility ("default"))) LexerPushModeAction final : public LexerAction {
  public:
    static bool is(const LexerAction &lexerAction) { return lexerAction.getActionType() == LexerActionType::PUSH_MODE; }

    static bool is(const LexerAction *lexerAction) { return lexerAction != nullptr && is(*lexerAction); }




    explicit LexerPushModeAction(int mode);





    int getMode() const { return _mode; }







    void execute(Lexer *lexer) const override;

    bool equals(const LexerAction &obj) const override;
    std::string toString() const override;

  protected:
    size_t hashCodeImpl() const override;

  private:
    const int _mode;
  };

}
}
# 91 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerSkipAction.h" 1





       




namespace antlr4 {
namespace atn {
# 23 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerSkipAction.h"
  class __attribute__ ((visibility ("default"))) LexerSkipAction final : public LexerAction {
  public:
    static bool is(const LexerAction &lexerAction) { return lexerAction.getActionType() == LexerActionType::SKIP; }

    static bool is(const LexerAction *lexerAction) { return lexerAction != nullptr && is(*lexerAction); }


    static const Ref<const LexerSkipAction>& getInstance();






    void execute(Lexer *lexer) const override;

    bool equals(const LexerAction &obj) const override;
    std::string toString() const override;

  protected:
    size_t hashCodeImpl() const override;

  private:

    LexerSkipAction() : LexerAction(LexerActionType::SKIP, false) {}
  };

}
}
# 92 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LexerTypeAction.h" 1





       




namespace antlr4 {
namespace atn {



  class __attribute__ ((visibility ("default"))) LexerTypeAction final : public LexerAction {
  public:
    static bool is(const LexerAction &lexerAction) { return lexerAction.getActionType() == LexerActionType::TYPE; }

    static bool is(const LexerAction *lexerAction) { return lexerAction != nullptr && is(*lexerAction); }




    explicit LexerTypeAction(int type);




    int getType() const { return _type; }







    void execute(Lexer *lexer) const override;

    bool equals(const LexerAction &obj) const override;
    std::string toString() const override;

  protected:
    size_t hashCodeImpl() const override;

  private:
    const int _type;
  };

}
}
# 93 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LookaheadEventInfo.h" 1





       



namespace antlr4 {
namespace atn {



  class __attribute__ ((visibility ("default"))) LookaheadEventInfo : public DecisionEventInfo {
  public:




    size_t predictedAlt = 0;
# 37 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LookaheadEventInfo.h"
    LookaheadEventInfo(size_t decision, ATNConfigSet *configs, size_t predictedAlt, TokenStream *input, size_t startIndex,
                       size_t stopIndex, bool fullCtx);
  };

}
}
# 94 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/LoopEndState.h" 1





       



namespace antlr4 {
namespace atn {


  class __attribute__ ((visibility ("default"))) LoopEndState final : public ATNState {
  public:
    static bool is(const ATNState &atnState) { return atnState.getStateType() == ATNStateType::LOOP_END; }

    static bool is(const ATNState *atnState) { return atnState != nullptr && is(*atnState); }

    ATNState *loopBackState = nullptr;

    LoopEndState() : ATNState(ATNStateType::LOOP_END) {}
  };

}
}
# 95 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/NotSetTransition.h" 1





       

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/SetTransition.h" 1





       



namespace antlr4 {
namespace atn {



  class __attribute__ ((visibility ("default"))) SetTransition : public Transition {
  public:
    static bool is(const Transition &transition) {
      const auto transitionType = transition.getTransitionType();
      return transitionType == TransitionType::SET || transitionType == TransitionType::NOT_SET;
    }

    static bool is(const Transition *transition) { return transition != nullptr && is(*transition); }

    const misc::IntervalSet set;

    SetTransition(ATNState *target, misc::IntervalSet set) : SetTransition(TransitionType::SET, target, std::move(set)) {}

    virtual misc::IntervalSet label() const override;
    virtual bool matches(size_t symbol, size_t minVocabSymbol, size_t maxVocabSymbol) const override;

    virtual std::string toString() const override;

  protected:
    SetTransition(TransitionType transitionType, ATNState *target, misc::IntervalSet set);
  };

}
}
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/NotSetTransition.h" 2

namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) NotSetTransition final : public SetTransition {
  public:
    static bool is(const Transition &transition) { return transition.getTransitionType() == TransitionType::NOT_SET; }

    static bool is(const Transition *transition) { return transition != nullptr && is(*transition); }

    NotSetTransition(ATNState *target, misc::IntervalSet set);

    virtual bool matches(size_t symbol, size_t minVocabSymbol, size_t maxVocabSymbol) const override;

    virtual std::string toString() const override;
  };

}
}
# 96 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/OrderedATNConfigSet.h" 1





       




namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) OrderedATNConfigSet final : public ATNConfigSet {
  public:
    OrderedATNConfigSet() = default;

  private:
    size_t hashCode(const ATNConfig &atnConfig) const override;

    bool equals(const ATNConfig &lhs, const ATNConfig &rhs) const override;
  };

}
}
# 97 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParseInfo.h" 1





       



namespace antlr4 {
namespace atn {

  class ProfilingATNSimulator;



  class __attribute__ ((visibility ("default"))) ParseInfo {
  public:
    ParseInfo(ProfilingATNSimulator *atnSimulator);
    ParseInfo(ParseInfo const&) = default;
    virtual ~ParseInfo();

    ParseInfo& operator=(ParseInfo const&) = default;







    virtual std::vector<DecisionInfo> getDecisionInfo();
# 40 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParseInfo.h"
    virtual std::vector<size_t> getLLDecisions();






    virtual long long getTotalTimeInPrediction();






    virtual long long getTotalSLLLookaheadOps();






    virtual long long getTotalLLLookaheadOps();





    virtual long long getTotalSLLATNLookaheadOps();





    virtual long long getTotalLLATNLookaheadOps();
# 83 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParseInfo.h"
    virtual long long getTotalATNLookaheadOps();





    virtual size_t getDFASize();





    virtual size_t getDFASize(size_t decision);

  protected:
    const ProfilingATNSimulator *_atnSimulator;
  };

}
}
# 98 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulator.h" 1





       

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionMode.h" 1





       



namespace antlr4 {
namespace atn {






  enum class PredictionMode {
# 40 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionMode.h"
    SLL,
# 60 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionMode.h"
    LL,
# 79 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionMode.h"
    LL_EXACT_AMBIG_DETECTION
  };

  class __attribute__ ((visibility ("default"))) PredictionModeClass {
  public:
# 176 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionMode.h"
    static bool hasSLLConflictTerminatingPrediction(PredictionMode mode, ATNConfigSet *configs);
# 188 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionMode.h"
    static bool hasConfigInRuleStopState(ATNConfigSet *configs);
# 200 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionMode.h"
    static bool allConfigsInRuleStopStates(ATNConfigSet *configs);
# 343 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionMode.h"
    static size_t resolvesToJustOneViableAlt(const std::vector<antlrcpp::BitSet> &altsets);
# 354 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionMode.h"
    static bool allSubsetsConflict(const std::vector<antlrcpp::BitSet> &altsets);
# 365 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionMode.h"
    static bool hasNonConflictingAltSet(const std::vector<antlrcpp::BitSet> &altsets);
# 376 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionMode.h"
    static bool hasConflictingAltSet(const std::vector<antlrcpp::BitSet> &altsets);







    static bool allSubsetsEqual(const std::vector<antlrcpp::BitSet> &altsets);







    static size_t getUniqueAlt(const std::vector<antlrcpp::BitSet> &altsets);
# 402 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionMode.h"
    static antlrcpp::BitSet getAlts(const std::vector<antlrcpp::BitSet> &altsets);


    static antlrcpp::BitSet getAlts(ATNConfigSet *configs);
# 417 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionMode.h"
    static std::vector<antlrcpp::BitSet> getConflictingAltSubsets(ATNConfigSet *configs);
# 428 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionMode.h"
    static std::unordered_map<ATNState*, antlrcpp::BitSet> getStateToAltMap(ATNConfigSet *configs);

    static bool hasStateAssociatedWithOneAlt(ATNConfigSet *configs);

    static size_t getSingleViableAlt(const std::vector<antlrcpp::BitSet> &altsets);
  };

}
}
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulator.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/dfa/DFAState.h" 1





       




# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/FlatHashMap.h" 1
# 26 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/FlatHashMap.h"
       
# 41 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/FlatHashMap.h"
namespace antlr4 {
# 50 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/FlatHashMap.h"
  template <typename Key, typename Value,
            typename Hash = std::hash<Key>,
            typename Equal = std::equal_to<Key>,
            typename Allocator = std::allocator<std::pair<const Key, Value>>>
  using FlatHashMap = std::unordered_map<Key, Value, Hash, Equal, Allocator>;


}
# 12 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/dfa/DFAState.h" 2

namespace antlr4 {
namespace dfa {
# 41 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/dfa/DFAState.h"
  class __attribute__ ((visibility ("default"))) DFAState final {
  public:
    struct __attribute__ ((visibility ("default"))) PredPrediction final {
    public:
      Ref<const atn::SemanticContext> pred;
      int alt;

      PredPrediction() = delete;

      PredPrediction(const PredPrediction&) = default;
      PredPrediction(PredPrediction&&) = default;

      PredPrediction(Ref<const atn::SemanticContext> pred, int alt) : pred(std::move(pred)), alt(alt) {}

      PredPrediction& operator=(const PredPrediction&) = default;
      PredPrediction& operator=(PredPrediction&&) = default;

      std::string toString() const;
    };

    std::unique_ptr<atn::ATNConfigSet> configs;





    FlatHashMap<size_t, DFAState*> edges;




    size_t prediction = 0;

    Ref<const atn::LexerActionExecutor> lexerActionExecutor;
# 89 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/dfa/DFAState.h"
    std::vector<PredPrediction> predicates;

    int stateNumber = -1;

    bool isAcceptState = false;







    bool requiresFullContext = false;


    DFAState() = default;

    explicit DFAState(int stateNumber) : stateNumber(stateNumber) {}

    explicit DFAState(std::unique_ptr<atn::ATNConfigSet> configs) : configs(std::move(configs)) {}





    std::set<size_t> getAltSet() const;

    size_t hashCode() const;
# 129 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/dfa/DFAState.h"
    bool equals(const DFAState &other) const;

    std::string toString() const;
  };

  inline bool operator==(const DFAState &lhs, const DFAState &rhs) {
    return lhs.equals(rhs);
  }

  inline bool operator!=(const DFAState &lhs, const DFAState &rhs) {
    return !operator==(lhs, rhs);
  }

}
}

namespace std {

  template <>
  struct hash<::antlr4::dfa::DFAState> {
    size_t operator()(const ::antlr4::dfa::DFAState &dfaState) const {
      return dfaState.hashCode();
    }
  };

}
# 10 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulator.h" 2


# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionContextMergeCache.h" 1
# 26 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionContextMergeCache.h"
       




# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionContextMergeCacheOptions.h" 1
# 26 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionContextMergeCacheOptions.h"
       







namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) PredictionContextMergeCacheOptions final {
  public:
    PredictionContextMergeCacheOptions() = default;

    size_t getMaxSize() const { return _maxSize; }

    bool hasMaxSize() const { return getMaxSize() != std::numeric_limits<size_t>::max(); }

    PredictionContextMergeCacheOptions& setMaxSize(size_t maxSize) {
      _maxSize = maxSize;
      return *this;
    }

    size_t getClearEveryN() const {
      return _clearEveryN;
    }

    bool hasClearEveryN() const { return getClearEveryN() != 0; }

    PredictionContextMergeCacheOptions& setClearEveryN(uint64_t clearEveryN) {
      _clearEveryN = clearEveryN;
      return *this;
    }

    PredictionContextMergeCacheOptions& neverClear() {
      return setClearEveryN(0);
    }

  private:
    size_t _maxSize = std::numeric_limits<size_t>::max();
    uint64_t _clearEveryN = 1;
  };

}
}
# 32 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredictionContextMergeCache.h" 2


namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) PredictionContextMergeCache final {
  public:
    PredictionContextMergeCache()
        : PredictionContextMergeCache(PredictionContextMergeCacheOptions()) {}

    explicit PredictionContextMergeCache(const PredictionContextMergeCacheOptions &options);

    PredictionContextMergeCache(const PredictionContextMergeCache&) = delete;
    PredictionContextMergeCache(PredictionContextMergeCache&&) = delete;

    PredictionContextMergeCache& operator=(const PredictionContextMergeCache&) = delete;
    PredictionContextMergeCache& operator=(PredictionContextMergeCache&&) = delete;

    Ref<const PredictionContext> put(const Ref<const PredictionContext> &key1,
                                     const Ref<const PredictionContext> &key2,
                                     Ref<const PredictionContext> value);

    Ref<const PredictionContext> get(const Ref<const PredictionContext> &key1,
                                     const Ref<const PredictionContext> &key2) const;

    const PredictionContextMergeCacheOptions& getOptions() const { return _options; }

    void clear();

  private:
    using PredictionContextPair = std::pair<const PredictionContext*, const PredictionContext*>;

    struct __attribute__ ((visibility ("default"))) PredictionContextHasher final {
      size_t operator()(const PredictionContextPair &value) const;
    };

    struct __attribute__ ((visibility ("default"))) PredictionContextComparer final {
      bool operator()(const PredictionContextPair &lhs, const PredictionContextPair &rhs) const;
    };

    struct __attribute__ ((visibility ("default"))) Entry final {
      std::pair<Ref<const PredictionContext>, Ref<const PredictionContext>> key;
      Ref<const PredictionContext> value;
      Entry *prev = nullptr;
      Entry *next = nullptr;
    };

    void moveToFront(Entry *entry) const;

    void pushToFront(Entry *entry);

    void remove(Entry *entry);

    void compact(const Entry *preserve);

    using Container = FlatHashMap<PredictionContextPair, std::unique_ptr<Entry>,
                                  PredictionContextHasher, PredictionContextComparer>;

    const PredictionContextMergeCacheOptions _options;

    Container _entries;

    mutable Entry *_head = nullptr;
    mutable Entry *_tail = nullptr;

    size_t _size = 0;
  };

}
}
# 13 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulator.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulatorOptions.h" 1
# 26 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulatorOptions.h"
       



namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) ParserATNSimulatorOptions final {
  public:
    ParserATNSimulatorOptions& setPredictionContextMergeCacheOptions(
        PredictionContextMergeCacheOptions predictionContextMergeCacheOptions) {
      _predictionContextMergeCacheOptions = std::move(predictionContextMergeCacheOptions);
      return *this;
    }

    const PredictionContextMergeCacheOptions& getPredictionContextMergeCacheOptions() const {
      return _predictionContextMergeCacheOptions;
    }

  private:
    PredictionContextMergeCacheOptions _predictionContextMergeCacheOptions;
  };

}
}
# 14 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulator.h" 2



namespace antlr4 {
namespace atn {
# 247 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulator.h"
  class __attribute__ ((visibility ("default"))) ParserATNSimulator : public ATNSimulator {
  public:

    ParserATNSimulator(const ATN &atn, std::vector<dfa::DFA> &decisionToDFA,
                       PredictionContextCache &sharedContextCache);

    ParserATNSimulator(Parser *parser, const ATN &atn, std::vector<dfa::DFA> &decisionToDFA,
                       PredictionContextCache &sharedContextCache);

    ParserATNSimulator(Parser *parser, const ATN &atn, std::vector<dfa::DFA> &decisionToDFA,
                       PredictionContextCache &sharedContextCache,
                       const ParserATNSimulatorOptions &options);

    virtual void reset() override;
    virtual void clearDFA() override;
    virtual size_t adaptivePredict(TokenStream *input, size_t decision, ParserRuleContext *outerContext);

    static const bool TURN_OFF_LR_LOOP_ENTRY_BRANCH_OPT;

    std::vector<dfa::DFA> &decisionToDFA;
# 354 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulator.h"
    bool canDropLoopEntryEdgeInLeftRecursiveRule(ATNConfig *config) const;
    virtual std::string getRuleName(size_t index);

    virtual Ref<ATNConfig> precedenceTransition(Ref<ATNConfig> const& config, const PrecedencePredicateTransition *pt,
                                                bool collectPredicates, bool inContext, bool fullCtx);

    void setPredictionMode(PredictionMode newMode);
    PredictionMode getPredictionMode();

    Parser* getParser();

    virtual std::string getTokenName(size_t t);

    virtual std::string getLookaheadName(TokenStream *input);






    virtual void dumpDeadEndConfigs(NoViableAltException &nvae);

  protected:
    Parser *const parser;
# 388 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulator.h"
    PredictionContextMergeCache mergeCache;
    size_t _mergeCacheCounter = 0;


    TokenStream *_input;
    size_t _startIndex;
    ParserRuleContext *_outerContext;
    dfa::DFA *_dfa;
# 428 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulator.h"
    virtual size_t execATN(dfa::DFA &dfa, dfa::DFAState *s0, TokenStream *input, size_t startIndex,
                           ParserRuleContext *outerContext);
# 441 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulator.h"
    virtual dfa::DFAState* getExistingTargetState(dfa::DFAState *previousD, size_t t);
# 454 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulator.h"
    virtual dfa::DFAState *computeTargetState(dfa::DFA &dfa, dfa::DFAState *previousD, size_t t);

    virtual void predicateDFAState(dfa::DFAState *dfaState, DecisionState *decisionState);


    virtual size_t execATNWithFullContext(dfa::DFA &dfa, dfa::DFAState *D, ATNConfigSet *s0,
                                          TokenStream *input, size_t startIndex, ParserRuleContext *outerContext);

    virtual std::unique_ptr<ATNConfigSet> computeReachSet(ATNConfigSet *closure, size_t t, bool fullCtx);
# 483 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulator.h"
    virtual ATNConfigSet* removeAllConfigsNotInRuleStopState(ATNConfigSet *configs, bool lookToEndOfRule);

    virtual std::unique_ptr<ATNConfigSet> computeStartState(ATNState *p, RuleContext *ctx, bool fullCtx);
# 654 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulator.h"
    std::unique_ptr<ATNConfigSet> applyPrecedenceFilter(ATNConfigSet *configs);

    virtual ATNState *getReachableTarget(const Transition *trans, size_t ttype);

    virtual std::vector<Ref<const SemanticContext>> getPredsForAmbigAlts(const antlrcpp::BitSet &ambigAlts,
                                                                   ATNConfigSet *configs, size_t nalts);

    std::vector<dfa::DFAState::PredPrediction> getPredicatePredictions(const antlrcpp::BitSet &ambigAlts,
                                                                       const std::vector<Ref<const SemanticContext>> &altToPred);
# 710 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulator.h"
    size_t getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(ATNConfigSet *configs,
                                                                   ParserRuleContext *outerContext);

    virtual size_t getAltThatFinishedDecisionEntryRule(ATNConfigSet *configs);
# 724 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulator.h"
    std::pair<ATNConfigSet *, ATNConfigSet *> splitAccordingToSemanticValidity(ATNConfigSet *configs,
                                                                               ParserRuleContext *outerContext);
# 734 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulator.h"
    antlrcpp::BitSet evalSemanticContext(const std::vector<dfa::DFAState::PredPrediction> &predPredictions,
                                         ParserRuleContext *outerContext, bool complete);
# 767 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulator.h"
    virtual bool evalSemanticContext(Ref<const SemanticContext> const& pred, ParserRuleContext *parserCallStack,
                                     size_t alt, bool fullCtx);







    virtual void closure(Ref<ATNConfig> const& config, ATNConfigSet *configs, ATNConfig::Set &closureBusy,
                         bool collectPredicates, bool fullCtx, bool treatEofAsEpsilon);

    virtual void closureCheckingStopState(Ref<ATNConfig> const& config, ATNConfigSet *configs, ATNConfig::Set &closureBusy,
                                          bool collectPredicates, bool fullCtx, int depth, bool treatEofAsEpsilon);


    virtual void closure_(Ref<ATNConfig> const& config, ATNConfigSet *configs, ATNConfig::Set &closureBusy,
                          bool collectPredicates, bool fullCtx, int depth, bool treatEofAsEpsilon);

    virtual Ref<ATNConfig> getEpsilonTarget(Ref<ATNConfig> const& config, const Transition *t, bool collectPredicates,
                                            bool inContext, bool fullCtx, bool treatEofAsEpsilon);
    virtual Ref<ATNConfig> actionTransition(Ref<ATNConfig> const& config, const ActionTransition *t);

    virtual Ref<ATNConfig> predTransition(Ref<ATNConfig> const& config, const PredicateTransition *pt, bool collectPredicates,
                                          bool inContext, bool fullCtx);

    virtual Ref<ATNConfig> ruleTransition(Ref<ATNConfig> const& config, const RuleTransition *t);
# 804 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulator.h"
    virtual antlrcpp::BitSet getConflictingAlts(ATNConfigSet *configs);
# 843 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulator.h"
    virtual antlrcpp::BitSet getConflictingAltsOrUniqueAlt(ATNConfigSet *configs);

    virtual NoViableAltException noViableAlt(TokenStream *input, ParserRuleContext *outerContext,
                                              ATNConfigSet *configs, size_t startIndex, bool deleteConfigs);

    static size_t getUniqueAlt(ATNConfigSet *configs);
# 869 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulator.h"
    virtual dfa::DFAState *addDFAEdge(dfa::DFA &dfa, dfa::DFAState *from, ssize_t t, dfa::DFAState *to);
# 885 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ParserATNSimulator.h"
    virtual dfa::DFAState *addDFAState(dfa::DFA &dfa, dfa::DFAState *D);

    virtual void reportAttemptingFullContext(dfa::DFA &dfa, const antlrcpp::BitSet &conflictingAlts,
      ATNConfigSet *configs, size_t startIndex, size_t stopIndex);

    virtual void reportContextSensitivity(dfa::DFA &dfa, size_t prediction, ATNConfigSet *configs,
                                          size_t startIndex, size_t stopIndex);


    virtual void reportAmbiguity(dfa::DFA &dfa,
                                 dfa::DFAState *D,
                                 size_t startIndex, size_t stopIndex,
                                 bool exact,
                                 const antlrcpp::BitSet &ambigAlts,
                                 ATNConfigSet *configs);

  private:

    PredictionMode _mode;

    static bool getLrLoopSetting();
    void InitializeInstanceFields();
  };

}
}
# 99 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PlusBlockStartState.h" 1





       



namespace antlr4 {
namespace atn {





  class __attribute__ ((visibility ("default"))) PlusBlockStartState final : public BlockStartState {
  public:
    static bool is(const ATNState &atnState) { return atnState.getStateType() == ATNStateType::PLUS_BLOCK_START; }

    static bool is(const ATNState *atnState) { return atnState != nullptr && is(*atnState); }

    PlusLoopbackState *loopBackState = nullptr;

    PlusBlockStartState() : BlockStartState(ATNStateType::PLUS_BLOCK_START) {}
  };

}
}
# 101 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PlusLoopbackState.h" 1





       



namespace antlr4 {
namespace atn {



  class __attribute__ ((visibility ("default"))) PlusLoopbackState final : public DecisionState {
  public:
    static bool is(const ATNState &atnState) { return atnState.getStateType() == ATNStateType::PLUS_LOOP_BACK; }

    static bool is(const ATNState *atnState) { return atnState != nullptr && is(*atnState); }

    PlusLoopbackState() : DecisionState(ATNStateType::PLUS_LOOP_BACK) {}
  };

}
}
# 102 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PrecedencePredicateTransition.h" 1





       




namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) PrecedencePredicateTransition final : public Transition {
  public:
    static bool is(const Transition &transition) { return transition.getTransitionType() == TransitionType::PRECEDENCE; }

    static bool is(const Transition *transition) { return transition != nullptr && is(*transition); }

    PrecedencePredicateTransition(ATNState *target, int precedence);

    int getPrecedence() const { return _predicate->precedence; }

    bool isEpsilon() const override;
    bool matches(size_t symbol, size_t minVocabSymbol, size_t maxVocabSymbol) const override;
    std::string toString() const override;

    const Ref<const SemanticContext::PrecedencePredicate>& getPredicate() const { return _predicate; }

  private:
    const std::shared_ptr<const SemanticContext::PrecedencePredicate> _predicate;
  };

}
}
# 103 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/PredicateTransition.h" 1





       




namespace antlr4 {
namespace atn {






  class __attribute__ ((visibility ("default"))) PredicateTransition final : public Transition {
  public:
    static bool is(const Transition &transition) { return transition.getTransitionType() == TransitionType::PREDICATE; }

    static bool is(const Transition *transition) { return transition != nullptr && is(*transition); }

    PredicateTransition(ATNState *target, size_t ruleIndex, size_t predIndex, bool isCtxDependent);

    size_t getRuleIndex() const {
      return _predicate->ruleIndex;
    }

    size_t getPredIndex() const {
      return _predicate->predIndex;
    }

    bool isCtxDependent() const {
      return _predicate->isCtxDependent;
    }

    bool isEpsilon() const override;
    bool matches(size_t symbol, size_t minVocabSymbol, size_t maxVocabSymbol) const override;
    std::string toString() const override;

    const Ref<const SemanticContext::Predicate>& getPredicate() const { return _predicate; }

  private:
    const std::shared_ptr<const SemanticContext::Predicate> _predicate;
  };

}
}
# 105 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2





# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ProfilingATNSimulator.h" 1





       




namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) ProfilingATNSimulator : public ParserATNSimulator {
  public:
    explicit ProfilingATNSimulator(Parser *parser);

    virtual size_t adaptivePredict(TokenStream *input, size_t decision, ParserRuleContext *outerContext) override;

    virtual std::vector<DecisionInfo> getDecisionInfo() const;
    virtual dfa::DFAState* getCurrentState() const;

  protected:
    std::vector<DecisionInfo> _decisions;

    int _sllStopIndex = 0;
    int _llStopIndex = 0;

    size_t _currentDecision = 0;
    dfa::DFAState *_currentState;
# 44 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/ProfilingATNSimulator.h"
    size_t conflictingAltResolvedBySLL = 0;

    virtual dfa::DFAState* getExistingTargetState(dfa::DFAState *previousD, size_t t) override;
    virtual dfa::DFAState* computeTargetState(dfa::DFA &dfa, dfa::DFAState *previousD, size_t t) override;
    virtual std::unique_ptr<ATNConfigSet> computeReachSet(ATNConfigSet *closure, size_t t, bool fullCtx) override;
    virtual bool evalSemanticContext(Ref<const SemanticContext> const& pred, ParserRuleContext *parserCallStack,
                                     size_t alt, bool fullCtx) override;
    virtual void reportAttemptingFullContext(dfa::DFA &dfa, const antlrcpp::BitSet &conflictingAlts, ATNConfigSet *configs,
                                             size_t startIndex, size_t stopIndex) override;
    virtual void reportContextSensitivity(dfa::DFA &dfa, size_t prediction, ATNConfigSet *configs,
                                          size_t startIndex, size_t stopIndex) override;
    virtual void reportAmbiguity(dfa::DFA &dfa, dfa::DFAState *D, size_t startIndex, size_t stopIndex, bool exact,
                                 const antlrcpp::BitSet &ambigAlts, ATNConfigSet *configs) override;
  };

}
}
# 111 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/RangeTransition.h" 1





       



namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) RangeTransition final : public Transition {
  public:
    static bool is(const Transition &transition) { return transition.getTransitionType() == TransitionType::RANGE; }

    static bool is(const Transition *transition) { return transition != nullptr && is(*transition); }

    const size_t from;
    const size_t to;

    RangeTransition(ATNState *target, size_t from, size_t to);

    virtual misc::IntervalSet label() const override;
    virtual bool matches(size_t symbol, size_t minVocabSymbol, size_t maxVocabSymbol) const override;

    virtual std::string toString() const override;
  };

}
}
# 112 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/RuleStartState.h" 1





       



namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) RuleStartState final : public ATNState {
  public:
    static bool is(const ATNState &atnState) { return atnState.getStateType() == ATNStateType::RULE_START; }

    static bool is(const ATNState *atnState) { return atnState != nullptr && is(*atnState); }

    RuleStopState *stopState = nullptr;
    bool isLeftRecursiveRule = false;

    RuleStartState() : ATNState(ATNStateType::RULE_START) {}
  };

}
}
# 113 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/RuleStopState.h" 1





       



namespace antlr4 {
namespace atn {





  class __attribute__ ((visibility ("default"))) RuleStopState final : public ATNState {
  public:
    static bool is(const ATNState &atnState) { return atnState.getStateType() == ATNStateType::RULE_STOP; }

    static bool is(const ATNState *atnState) { return atnState != nullptr && is(*atnState); }

    RuleStopState() : ATNState(ATNStateType::RULE_STOP) {}
  };

}
}
# 114 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/RuleTransition.h" 1





       



namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) RuleTransition final : public Transition {
  public:
    static bool is(const Transition &transition) { return transition.getTransitionType() == TransitionType::RULE; }

    static bool is(const Transition *transition) { return transition != nullptr && is(*transition); }


    const size_t ruleIndex;

    const int precedence;


    ATNState *followState;



    RuleTransition(RuleStartState *ruleStart, size_t ruleIndex, ATNState *followState);

    RuleTransition(RuleStartState *ruleStart, size_t ruleIndex, int precedence, ATNState *followState);
    RuleTransition(RuleTransition const&) = delete;
    RuleTransition& operator=(RuleTransition const&) = delete;

    virtual bool isEpsilon() const override;
    virtual bool matches(size_t symbol, size_t minVocabSymbol, size_t maxVocabSymbol) const override;

    virtual std::string toString() const override;
  };

}
}
# 115 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2



# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/SingletonPredictionContext.h" 1





       



namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) SingletonPredictionContext final : public PredictionContext {
  public:
    static bool is(const PredictionContext &predictionContext) { return predictionContext.getContextType() == PredictionContextType::SINGLETON; }

    static bool is(const PredictionContext *predictionContext) { return predictionContext != nullptr && is(*predictionContext); }

    static Ref<const SingletonPredictionContext> create(Ref<const PredictionContext> parent, size_t returnState);






    const Ref<const PredictionContext> parent;
    const size_t returnState;

    SingletonPredictionContext(Ref<const PredictionContext> parent, size_t returnState);

    bool isEmpty() const override;
    size_t size() const override;
    const Ref<const PredictionContext>& getParent(size_t index) const override;
    size_t getReturnState(size_t index) const override;
    bool equals(const PredictionContext &other) const override;
    std::string toString() const override;

  protected:
    size_t hashCodeImpl() const override;
  };

}
}
# 119 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/StarBlockStartState.h" 1





       



namespace antlr4 {
namespace atn {


  class __attribute__ ((visibility ("default"))) StarBlockStartState final : public BlockStartState {
  public:
    static bool is(const ATNState &atnState) { return atnState.getStateType() == ATNStateType::STAR_BLOCK_START; }

    static bool is(const ATNState *atnState) { return atnState != nullptr && is(*atnState); }

    StarBlockStartState() : BlockStartState(ATNStateType::STAR_BLOCK_START) {}
  };

}
}
# 120 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/StarLoopEntryState.h" 1





       



namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) StarLoopEntryState final : public DecisionState {
  public:
    static bool is(const ATNState &atnState) { return atnState.getStateType() == ATNStateType::STAR_LOOP_ENTRY; }

    static bool is(const ATNState *atnState) { return atnState != nullptr && is(*atnState); }
# 29 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/StarLoopEntryState.h"
    bool isPrecedenceDecision = false;

    StarLoopbackState *loopBackState = nullptr;

    StarLoopEntryState() : DecisionState(ATNStateType::STAR_LOOP_ENTRY) {}
  };

}
}
# 121 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/StarLoopbackState.h" 1





       



namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) StarLoopbackState final : public ATNState {
  public:
    static bool is(const ATNState &atnState) { return atnState.getStateType() == ATNStateType::STAR_LOOP_BACK; }

    static bool is(const ATNState *atnState) { return atnState != nullptr && is(*atnState); }

    StarLoopbackState() : ATNState(ATNStateType::STAR_LOOP_BACK) {}

    StarLoopEntryState *getLoopEntryState() const;
  };

}
}
# 122 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/TokensStartState.h" 1





       



namespace antlr4 {
namespace atn {


  class __attribute__ ((visibility ("default"))) TokensStartState final : public DecisionState {
  public:
    static bool is(const ATNState &atnState) { return atnState.getStateType() == ATNStateType::TOKEN_START; }

    static bool is(const ATNState *atnState) { return atnState != nullptr && is(*atnState); }

    TokensStartState() : DecisionState(ATNStateType::TOKEN_START) {}
  };

}
}
# 123 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/atn/WildcardTransition.h" 1





       



namespace antlr4 {
namespace atn {

  class __attribute__ ((visibility ("default"))) WildcardTransition final : public Transition {
  public:
    static bool is(const Transition &transition) { return transition.getTransitionType() == TransitionType::WILDCARD; }

    static bool is(const Transition *transition) { return transition != nullptr && is(*transition); }

    explicit WildcardTransition(ATNState *target);

    virtual bool matches(size_t symbol, size_t minVocabSymbol, size_t maxVocabSymbol) const override;

    virtual std::string toString() const override;
  };

}
}
# 125 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/dfa/DFA.h" 1





       



namespace antlr4 {
namespace dfa {

  class __attribute__ ((visibility ("default"))) DFA final {
  private:
    struct DFAStateHasher final {
      size_t operator()(const DFAState *dfaState) const {
        return dfaState->hashCode();
      }
    };

    struct DFAStateComparer final {
      bool operator()(const DFAState *lhs, const DFAState *rhs) const {
        return lhs == rhs || *lhs == *rhs;
      }
    };

  public:




    atn::DecisionState *atnStartState;
    std::unordered_set<DFAState*, DFAStateHasher, DFAStateComparer> states;
    DFAState *s0;
    size_t decision;

    explicit DFA(atn::DecisionState *atnStartState);
    DFA(atn::DecisionState *atnStartState, size_t decision);
    DFA(const DFA &other) = delete;
    DFA(DFA &&other);
    ~DFA();
# 54 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/dfa/DFA.h"
    bool isPrecedenceDfa() const;
# 66 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/dfa/DFA.h"
    DFAState* getPrecedenceStartState(int precedence) const;
# 78 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/dfa/DFA.h"
    void setPrecedenceStartState(int precedence, DFAState *startState);


    std::vector<DFAState *> getStates() const;

    std::string toString(const Vocabulary &vocabulary) const;

    std::string toLexerString() const;

  private:




    bool _precedenceDfa;
  };

}
}
# 126 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/dfa/DFASerializer.h" 1





       



namespace antlr4 {
namespace dfa {


  class __attribute__ ((visibility ("default"))) DFASerializer {
  public:
    DFASerializer(const DFA *dfa, const Vocabulary &vocabulary);

    virtual ~DFASerializer() = default;

    std::string toString() const;

  protected:
    virtual std::string getEdgeLabel(size_t i) const;
    std::string getStateString(DFAState *s) const;

  private:
    const DFA *_dfa;
    const Vocabulary &_vocabulary;
  };

}
}
# 127 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/dfa/LexerDFASerializer.h" 1





       



namespace antlr4 {
namespace dfa {

  class __attribute__ ((visibility ("default"))) LexerDFASerializer final : public DFASerializer {
  public:
    explicit LexerDFASerializer(const DFA *dfa);

  protected:
    std::string getEdgeLabel(size_t i) const override;
  };

}
}
# 129 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/misc/InterpreterDataReader.h" 1





       





namespace antlr4 {
namespace misc {

  struct InterpreterData {
    std::unique_ptr<atn::ATN> atn;
    dfa::Vocabulary vocabulary;
    std::vector<std::string> ruleNames;
    std::vector<std::string> channels;
    std::vector<std::string> modes;

    InterpreterData() {};
    InterpreterData(std::vector<std::string> const& literalNames, std::vector<std::string> const& symbolicNames);
  };


  class __attribute__ ((visibility ("default"))) InterpreterDataReader {
  public:
    static InterpreterData parseFile(std::string const& fileName);
  };

}
}
# 130 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2



# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/misc/Predicate.h" 1





       



namespace antlr4 {
namespace misc {

  class __attribute__ ((visibility ("default"))) Predicate {
  public:
    virtual ~Predicate();

    virtual bool test(tree::ParseTree *t) = 0;
  };

}
}
# 134 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/support/Arrays.h" 1





       



namespace antlrcpp {

  class __attribute__ ((visibility ("default"))) Arrays {
  public:

    static std::string listToString(const std::vector<std::string> &list, const std::string &separator);

    template <typename T>
    static bool equals(const std::vector<T> &a, const std::vector<T> &b) {
      if (a.size() != b.size())
        return false;

      for (size_t i = 0; i < a.size(); ++i)
        if (!(a[i] == b[i]))
          return false;

      return true;
    }

    template <typename T>
    static bool equals(const std::vector<T *> &a, const std::vector<T *> &b) {
      if (a.size() != b.size())
        return false;

      for (size_t i = 0; i < a.size(); ++i) {
        if (!a[i] && !b[i])
          continue;
        if (!a[i] || !b[i])
          return false;
        if (a[i] == b[i])
          continue;

        if (!(*a[i] == *b[i]))
          return false;
      }

      return true;
    }

    template <typename T>
    static bool equals(const std::vector<Ref<T>> &a, const std::vector<Ref<T>> &b) {
      if (a.size() != b.size())
        return false;

      for (size_t i = 0; i < a.size(); ++i) {
        if (!a[i] && !b[i])
          continue;
        if (!a[i] || !b[i])
          return false;
        if (a[i] == b[i])
          continue;

        if (!(*a[i] == *b[i]))
          return false;
      }

      return true;
    }

    template <typename T>
    static bool equals(const std::vector<std::unique_ptr<T>> &a, const std::vector<std::unique_ptr<T>> &b) {
      if (a.size() != b.size())
        return false;

      for (size_t i = 0; i < a.size(); ++i) {
        if (!a[i] && !b[i])
          continue;
        if (!a[i] || !b[i])
          return false;
        if (a[i] == b[i])
          continue;

        if (!(*a[i] == *b[i]))
          return false;
      }

      return true;
    }

    template <typename T>
    static std::string toString(const std::vector<T> &source) {
      std::string result = "[";
      bool firstEntry = true;
      for (auto &value : source) {
        result += value.toString();
        if (firstEntry) {
          result += ", ";
          firstEntry = false;
        }
      }
      return result + "]";
    }

    template <typename T>
    static std::string toString(const std::vector<Ref<T>> &source) {
      std::string result = "[";
      bool firstEntry = true;
      for (auto &value : source) {
        result += value->toString();
        if (firstEntry) {
          result += ", ";
          firstEntry = false;
        }
      }
      return result + "]";
    }

    template <typename T>
    static std::string toString(const std::vector<std::unique_ptr<T>> &source) {
      std::string result = "[";
      bool firstEntry = true;
      for (auto &value : source) {
        result += value->toString();
        if (firstEntry) {
          result += ", ";
          firstEntry = false;
        }
      }
      return result + "]";
    }

    template <typename T>
    static std::string toString(const std::vector<T *> &source) {
      std::string result = "[";
      bool firstEntry = true;
      for (auto value : source) {
        result += value->toString();
        if (firstEntry) {
          result += ", ";
          firstEntry = false;
        }
      }
      return result + "]";
    }

  };

  template <>
  std::string Arrays::toString(const std::vector<antlr4::tree::ParseTree *> &source);
}
# 136 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2



# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/AbstractParseTreeVisitor.h" 1





       


# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/ParseTreeVisitor.h" 1





       



namespace antlr4 {
namespace tree {
# 21 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/ParseTreeVisitor.h"
  class __attribute__ ((visibility ("default"))) ParseTreeVisitor {
  public:
    virtual ~ParseTreeVisitor();






    virtual std::any visit(ParseTree *tree) = 0;







    virtual std::any visitChildren(ParseTree *node) = 0;






    virtual std::any visitTerminal(TerminalNode *node) = 0;






    virtual std::any visitErrorNode(ErrorNode *node) = 0;

  };

}
}
# 10 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/AbstractParseTreeVisitor.h" 2

namespace antlr4 {
namespace tree {

  class __attribute__ ((visibility ("default"))) AbstractParseTreeVisitor : public ParseTreeVisitor {
  public:


    virtual std::any visit(ParseTree *tree) override {
      return tree->accept(this);
    }
# 35 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/AbstractParseTreeVisitor.h"
    virtual std::any visitChildren(ParseTree *node) override {
      std::any result = defaultResult();
      size_t n = node->children.size();
      for (size_t i = 0; i < n; i++) {
        if (!shouldVisitNextChild(node, result)) {
          break;
        }

        std::any childResult = node->children[i]->accept(this);
        result = aggregateResult(std::move(result), std::move(childResult));
      }

      return result;
    }



    virtual std::any visitTerminal(TerminalNode * ) override {
      return defaultResult();
    }



    virtual std::any visitErrorNode(ErrorNode * ) override {
      return defaultResult();
    }

  protected:
# 73 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/AbstractParseTreeVisitor.h"
    virtual std::any defaultResult() {
      return std::any();
    }
# 95 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/AbstractParseTreeVisitor.h"
    virtual std::any aggregateResult(std::any , std::any nextResult) {
      return nextResult;
    }
# 122 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/AbstractParseTreeVisitor.h"
    virtual bool shouldVisitNextChild(ParseTree * , const std::any & ) {
      return true;
    }

  };

}
}
# 140 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/ErrorNode.h" 1





       

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/TerminalNode.h" 1





       



namespace antlr4 {
namespace tree {

  class __attribute__ ((visibility ("default"))) TerminalNode : public ParseTree {
  public:
    static bool is(const tree::ParseTree &parseTree) {
      const auto treeType = parseTree.getTreeType();
      return treeType == ParseTreeType::TERMINAL || treeType == ParseTreeType::ERROR;
    }

    static bool is(const tree::ParseTree *parseTree) { return parseTree != nullptr && is(*parseTree); }

    virtual Token* getSymbol() const = 0;
# 33 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/TerminalNode.h"
    virtual void setParent(RuleContext *parent) = 0;

  protected:
    using ParseTree::ParseTree;
  };

}
}
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/ErrorNode.h" 2

namespace antlr4 {
namespace tree {

  class __attribute__ ((visibility ("default"))) ErrorNode : public TerminalNode {
  public:
    static bool is(const tree::ParseTree &parseTree) { return parseTree.getTreeType() == tree::ParseTreeType::ERROR; }

    static bool is(const tree::ParseTree *parseTree) { return parseTree != nullptr && is(*parseTree); }

  protected:
    using TerminalNode::TerminalNode;
  };

}
}
# 141 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/ErrorNodeImpl.h" 1





       


# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/TerminalNodeImpl.h" 1





       



namespace antlr4 {
namespace tree {

  class __attribute__ ((visibility ("default"))) TerminalNodeImpl : public TerminalNode {
  public:
    Token *symbol;

    explicit TerminalNodeImpl(Token *symbol) : TerminalNode(ParseTreeType::TERMINAL), symbol(symbol) {}

    virtual Token* getSymbol() const override;
    virtual void setParent(RuleContext *parent) override;
    virtual misc::Interval getSourceInterval() override;

    virtual std::any accept(ParseTreeVisitor *visitor) override;

    virtual std::string getText() override;
    virtual std::string toStringTree(Parser *parser, bool pretty = false) override;
    virtual std::string toString() override;
    virtual std::string toStringTree(bool pretty = false) override;
  };

}
}
# 10 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/ErrorNodeImpl.h" 2




namespace antlr4 {
namespace tree {
# 24 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/ErrorNodeImpl.h"
  class __attribute__ ((visibility ("default"))) ErrorNodeImpl : public ErrorNode {
  public:
    Token *symbol;

    explicit ErrorNodeImpl(Token *symbol) : ErrorNode(ParseTreeType::ERROR), symbol(symbol) {}

    virtual Token* getSymbol() const override;
    virtual void setParent(RuleContext *parent) override;
    virtual misc::Interval getSourceInterval() override;

    virtual std::any accept(ParseTreeVisitor *visitor) override;

    virtual std::string getText() override;
    virtual std::string toStringTree(Parser *parser, bool pretty = false) override;
    virtual std::string toString() override;
    virtual std::string toStringTree(bool pretty = false) override;
  };

}
}
# 142 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2


# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/ParseTreeProperty.h" 1





       



namespace antlr4 {
namespace tree {
# 29 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/ParseTreeProperty.h"
  template<typename V>
  class __attribute__ ((visibility ("default"))) ParseTreeProperty {
  public:
    virtual ~ParseTreeProperty() {}
    virtual V get(ParseTree *node) {
      return _annotations[node];
    }
    virtual void put(ParseTree *node, V value) {
      _annotations[node] = value;
    }
    virtual V removeFrom(ParseTree *node) {
      auto value = _annotations[node];
      _annotations.erase(node);
      return value;
    }

  protected:
    std::map<ParseTree*, V> _annotations;
  };

}
}
# 145 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/ParseTreeWalker.h" 1





       



namespace antlr4 {
namespace tree {

  class __attribute__ ((visibility ("default"))) ParseTreeWalker {
  public:
    static ParseTreeWalker &DEFAULT;

    virtual ~ParseTreeWalker() = default;
# 29 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/ParseTreeWalker.h"
    virtual void walk(ParseTreeListener *listener, ParseTree *t) const;

  protected:
# 41 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/ParseTreeWalker.h"
    virtual void enterRule(ParseTreeListener *listener, ParseTree *r) const;
# 51 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/ParseTreeWalker.h"
    virtual void exitRule(ParseTreeListener *listener, ParseTree *r) const;
  };

}
}
# 147 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2


# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/Trees.h" 1





       





namespace antlr4 {
namespace tree {


  class __attribute__ ((visibility ("default"))) Trees {
  public:



    static std::string toStringTree(ParseTree *t, bool pretty = false);




    static std::string toStringTree(ParseTree *t, Parser *recog, bool pretty = false);




    static std::string toStringTree(ParseTree *t, const std::vector<std::string> &ruleNames, bool pretty = false);
    static std::string getNodeText(ParseTree *t, Parser *recog);
    static std::string getNodeText(ParseTree *t, const std::vector<std::string> &ruleNames);



    static std::vector<ParseTree *> getAncestors(ParseTree *t);






    static bool isAncestorOf(ParseTree *t, ParseTree *u);
    static std::vector<ParseTree *> findAllTokenNodes(ParseTree *t, size_t ttype);
    static std::vector<ParseTree *> findAllRuleNodes(ParseTree *t, size_t ruleIndex);
    static std::vector<ParseTree *> findAllNodes(ParseTree *t, size_t index, bool findTokens);





    static std::vector<ParseTree *> getDescendants(ParseTree *t);


    static std::vector<ParseTree *> descendants(ParseTree *t);






    static ParserRuleContext* getRootOfSubtreeEnclosingRegion(ParseTree *t,
                                                              size_t startTokenIndex,
                                                              size_t stopTokenIndex);





    static ParseTree* findNodeSuchThat(ParseTree *t, Ref<misc::Predicate> const& pred);

  private:
    Trees();
  };

}
}
# 150 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/Chunk.h" 1





       



namespace antlr4 {
namespace tree {
namespace pattern {
# 25 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/Chunk.h"
  class __attribute__ ((visibility ("default"))) Chunk {
  public:
    Chunk() = default;
    Chunk(Chunk const&) = default;
    virtual ~Chunk();

    Chunk& operator=(Chunk const&) = default;




    virtual std::string toString() {
      std::string str;
      return str;
    }
  };

}
}
}
# 151 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/ParseTreeMatch.h" 1





       



namespace antlr4 {
namespace tree {
namespace pattern {


  class __attribute__ ((visibility ("default"))) ParseTreeMatch {
  private:

    ParseTree *_tree;


    const ParseTreePattern &_pattern;


    std::map<std::string, std::vector<ParseTree *>> _labels;


    ParseTree *_mismatchedNode;

  public:
# 44 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/ParseTreeMatch.h"
    ParseTreeMatch(ParseTree *tree, ParseTreePattern const& pattern,
                   const std::map<std::string, std::vector<ParseTree *>> &labels, ParseTree *mismatchedNode);
    ParseTreeMatch(ParseTreeMatch const&) = default;
    virtual ~ParseTreeMatch();
# 64 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/ParseTreeMatch.h"
    virtual ParseTree* get(const std::string &label);
# 88 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/ParseTreeMatch.h"
    virtual std::vector<ParseTree *> getAll(const std::string &label);
# 99 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/ParseTreeMatch.h"
    virtual std::map<std::string, std::vector<ParseTree *>>& getLabels();






    virtual ParseTree* getMismatchedNode();






    virtual bool succeeded();





    virtual const ParseTreePattern& getPattern();





    virtual ParseTree* getTree();

    virtual std::string toString();
  };

}
}
}
# 152 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/ParseTreePattern.h" 1





       



namespace antlr4 {
namespace tree {
namespace pattern {





  class __attribute__ ((visibility ("default"))) ParseTreePattern {
  public:
# 29 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/ParseTreePattern.h"
    ParseTreePattern(ParseTreePatternMatcher *matcher, const std::string &pattern, int patternRuleIndex,
                     ParseTree *patternTree);
    ParseTreePattern(ParseTreePattern const&) = default;
    virtual ~ParseTreePattern();
# 41 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/ParseTreePattern.h"
    virtual ParseTreeMatch match(ParseTree *tree);







    virtual bool matches(ParseTree *tree);
# 59 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/ParseTreePattern.h"
    virtual std::vector<ParseTreeMatch> findAll(ParseTree *tree, const std::string &xpath);






    virtual ParseTreePatternMatcher *getMatcher() const;





    virtual std::string getPattern() const;







    virtual int getPatternRuleIndex() const;







    virtual ParseTree* getPatternTree() const;

  private:
    const int patternRuleIndex;


    const std::string _pattern;


    ParseTree *_patternTree;


    ParseTreePatternMatcher *const _matcher;
  };

}
}
}
# 153 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/ParseTreePatternMatcher.h" 1





       



namespace antlr4 {
namespace tree {
namespace pattern {
# 71 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/ParseTreePatternMatcher.h"
  class __attribute__ ((visibility ("default"))) ParseTreePatternMatcher {
  public:
    class CannotInvokeStartRule : public RuntimeException {
    public:
      CannotInvokeStartRule(const RuntimeException &e);
      ~CannotInvokeStartRule();
    };



    class StartRuleDoesNotConsumeFullPattern : public RuntimeException {
    public:
      StartRuleDoesNotConsumeFullPattern() = default;
      StartRuleDoesNotConsumeFullPattern(StartRuleDoesNotConsumeFullPattern const&) = default;
      ~StartRuleDoesNotConsumeFullPattern();

      StartRuleDoesNotConsumeFullPattern& operator=(StartRuleDoesNotConsumeFullPattern const&) = default;
    };





    ParseTreePatternMatcher(Lexer *lexer, Parser *parser);
    virtual ~ParseTreePatternMatcher();
# 107 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/ParseTreePatternMatcher.h"
    virtual void setDelimiters(const std::string &start, const std::string &stop, const std::string &escapeLeft);



    virtual bool matches(ParseTree *tree, const std::string &pattern, int patternRuleIndex);





    virtual bool matches(ParseTree *tree, const ParseTreePattern &pattern);






    virtual ParseTreeMatch match(ParseTree *tree, const std::string &pattern, int patternRuleIndex);







    virtual ParseTreeMatch match(ParseTree *tree, const ParseTreePattern &pattern);





    virtual ParseTreePattern compile(const std::string &pattern, int patternRuleIndex);





    virtual Lexer* getLexer();





    virtual Parser* getParser();



    virtual std::vector<std::unique_ptr<Token>> tokenize(const std::string &pattern);


    virtual std::vector<Chunk> split(const std::string &pattern);

  protected:
    std::string _start;
    std::string _stop;
    std::string _escape;
# 171 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/ParseTreePatternMatcher.h"
    virtual ParseTree* matchImpl(ParseTree *tree, ParseTree *patternTree, std::map<std::string, std::vector<ParseTree *>> &labels);


    virtual RuleTagToken* getRuleTagToken(ParseTree *t);

  private:
    Lexer *_lexer;
    Parser *_parser;

    void InitializeInstanceFields();
  };

}
}
}
# 154 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/RuleTagToken.h" 1





       



namespace antlr4 {
namespace tree {
namespace pattern {






  class __attribute__ ((visibility ("default"))) RuleTagToken : public Token {



  private:
    const std::string ruleName;



    const size_t bypassTokenType;


    const std::string label;

  public:
# 43 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/RuleTagToken.h"
    RuleTagToken(const std::string &ruleName, int bypassTokenType);
# 56 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/RuleTagToken.h"
    RuleTagToken(const std::string &ruleName, size_t bypassTokenType, const std::string &label);





    std::string getRuleName() const;






    std::string getLabel() const;






    virtual size_t getChannel() const override;







    virtual std::string getText() const override;



    virtual size_t getType() const override;


    virtual size_t getLine() const override;


    virtual size_t getCharPositionInLine() const override;


    virtual size_t getTokenIndex() const override;


    virtual size_t getStartIndex() const override;


    virtual size_t getStopIndex() const override;


    virtual TokenSource *getTokenSource() const override;


    virtual CharStream *getInputStream() const override;


    virtual std::string toString() const override;
  };

}
}
}
# 155 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/TagChunk.h" 1





       



namespace antlr4 {
namespace tree {
namespace pattern {
# 28 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/TagChunk.h"
  class __attribute__ ((visibility ("default"))) TagChunk : public Chunk {
  public:
# 39 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/TagChunk.h"
    TagChunk(const std::string &tag);
    virtual ~TagChunk();
# 53 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/TagChunk.h"
    TagChunk(const std::string &label, const std::string &tag);





    std::string getTag();






    std::string getLabel();






    virtual std::string toString() override;

  private:

    const std::string _tag;



    const std::string _label;
  };

}
}
}
# 156 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/TextChunk.h" 1





       



namespace antlr4 {
namespace tree {
namespace pattern {





  class __attribute__ ((visibility ("default"))) TextChunk : public Chunk {
  private:



    const std::string text;






  public:
    TextChunk(const std::string &text);
    virtual ~TextChunk();





    std::string getText();







    virtual std::string toString() override;
  };

}
}
}
# 157 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/TokenTagToken.h" 1





       



namespace antlr4 {
namespace tree {
namespace pattern {






  class __attribute__ ((visibility ("default"))) TokenTagToken : public CommonToken {



  private:
    const std::string tokenName;



    const std::string label;







  public:
    TokenTagToken(const std::string &tokenName, int type);
# 47 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/pattern/TokenTagToken.h"
    TokenTagToken(const std::string &tokenName, int type, const std::string &label);




    std::string getTokenName() const;






    std::string getLabel() const;







    virtual std::string getText() const override;







    virtual std::string toString() const override;
  };

}
}
}
# 158 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/xpath/XPath.h" 1





       



namespace antlr4 {
namespace tree {
namespace xpath {
# 56 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/xpath/XPath.h"
  class __attribute__ ((visibility ("default"))) XPath {
  public:
    static const std::string WILDCARD;
    static const std::string NOT;

    XPath(Parser *parser, const std::string &path);
    virtual ~XPath() {}


    virtual std::vector<std::unique_ptr<XPathElement>> split(const std::string &path);

    static std::vector<ParseTree *> findAll(ParseTree *tree, std::string const& xpath, Parser *parser);




    virtual std::vector<ParseTree *> evaluate(ParseTree *t);

  protected:
    std::string _path;
    Parser *_parser;




    virtual std::unique_ptr<XPathElement> getXPathElement(Token *wordToken, bool anywhere);
  };

}
}
}
# 159 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/xpath/XPathElement.h" 1





       



namespace antlr4 {
namespace tree {
  class ParseTree;

namespace xpath {

  class __attribute__ ((visibility ("default"))) XPathElement {
  public:


    XPathElement(const std::string &nodeName);
    XPathElement(XPathElement const&) = default;
    virtual ~XPathElement();

    XPathElement& operator=(XPathElement const&) = default;



    virtual std::vector<ParseTree *> evaluate(ParseTree *t);
    virtual std::string toString() const;

    void setInvert(bool value);

  protected:
    std::string _nodeName;
    bool _invert = false;
  };

}
}
}
# 160 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/xpath/XPathLexer.h" 1



       







class XPathLexer : public antlr4::Lexer {
public:
  enum {
    TOKEN_REF = 1, RULE_REF = 2, ANYWHERE = 3, ROOT = 4, WILDCARD = 5, BANG = 6,
    ID = 7, STRING = 8
  };

  explicit XPathLexer(antlr4::CharStream *input);

  ~XPathLexer() override;


  std::string getGrammarFileName() const override;

  const std::vector<std::string>& getRuleNames() const override;

  const std::vector<std::string>& getChannelNames() const override;

  const std::vector<std::string>& getModeNames() const override;

  const antlr4::dfa::Vocabulary& getVocabulary() const override;

  antlr4::atn::SerializedATNView getSerializedATN() const override;

  const antlr4::atn::ATN& getATN() const override;

  void action(antlr4::RuleContext *context, size_t ruleIndex, size_t actionIndex) override;




  static void initialize();

private:


  void IDAction(antlr4::RuleContext *context, size_t actionIndex);



};
# 161 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/xpath/XPathLexerErrorListener.h" 1





       



namespace antlr4 {
namespace tree {
namespace xpath {

  class __attribute__ ((visibility ("default"))) XPathLexerErrorListener : public BaseErrorListener {
  public:
    virtual void syntaxError(Recognizer *recognizer, Token *offendingSymbol, size_t line,
      size_t charPositionInLine, const std::string &msg, std::exception_ptr e) override;
  };

}
}
}
# 162 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/xpath/XPathRuleAnywhereElement.h" 1





       



namespace antlr4 {
namespace tree {
namespace xpath {


  class __attribute__ ((visibility ("default"))) XPathRuleAnywhereElement : public XPathElement {
  public:
    XPathRuleAnywhereElement(const std::string &ruleName, int ruleIndex);

    virtual std::vector<ParseTree *> evaluate(ParseTree *t) override;

  protected:
    int _ruleIndex = 0;
  };

}
}
}
# 163 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/xpath/XPathRuleElement.h" 1





       



namespace antlr4 {
namespace tree {
namespace xpath {

  class __attribute__ ((visibility ("default"))) XPathRuleElement : public XPathElement {
  public:
    XPathRuleElement(const std::string &ruleName, size_t ruleIndex);

    virtual std::vector<ParseTree *> evaluate(ParseTree *t) override;

  protected:
    size_t _ruleIndex = 0;
  };

}
}
}
# 164 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/xpath/XPathTokenAnywhereElement.h" 1





       



namespace antlr4 {
namespace tree {
namespace xpath {

  class __attribute__ ((visibility ("default"))) XPathTokenAnywhereElement : public XPathElement {
  protected:
    int tokenType = 0;
  public:
    XPathTokenAnywhereElement(const std::string &tokenName, int tokenType);

    virtual std::vector<ParseTree *> evaluate(ParseTree *t) override;
  };

}
}
}
# 165 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/xpath/XPathTokenElement.h" 1





       



namespace antlr4 {
namespace tree {
namespace xpath {

  class __attribute__ ((visibility ("default"))) XPathTokenElement : public XPathElement {
  public:
    XPathTokenElement(const std::string &tokenName, size_t tokenType);

    virtual std::vector<ParseTree *> evaluate(ParseTree *t) override;

  protected:
    size_t _tokenType = 0;
  };

}
}
}
# 166 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/xpath/XPathWildcardAnywhereElement.h" 1





       



namespace antlr4 {
namespace tree {
namespace xpath {

  class __attribute__ ((visibility ("default"))) XPathWildcardAnywhereElement : public XPathElement {
  public:
    XPathWildcardAnywhereElement();

    virtual std::vector<ParseTree *> evaluate(ParseTree *t) override;
  };

}
}
}
# 167 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/tree/xpath/XPathWildcardElement.h" 1





       



namespace antlr4 {
namespace tree {
namespace xpath {

  class __attribute__ ((visibility ("default"))) XPathWildcardElement : public XPathElement {
  public:
    XPathWildcardElement();

    virtual std::vector<ParseTree *> evaluate(ParseTree *t) override;
  };

}
}
}
# 168 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/include/antlr4-runtime.h" 2
# 8 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/gen/parser_antlr4.h" 2




class parser_antlr4 : public antlr4::Parser {
public:
  enum {
    IF = 1, THEN = 2, DO = 3, WHILE = 4, FOR = 5, FROM = 6, TO = 7, ELSE = 8,
    END = 9, ENDIF = 10, ENDWHILE = 11, ENDFOR = 12, BREAK = 13, CONTINUE = 14,
    SUBROUTINE = 15, M99 = 16, PERCENT = 17, DIGIT = 18, LETTER = 19, DOLLAR = 20,
    PLUS = 21, MINUS = 22, DOT = 23, LEFT_BRACKET = 24, RIGHT_BRACKET = 25,
    POWER = 26, SLASH = 27, MODULO = 28, TIMES = 29, LOGICAL_AND = 30, EXCLUSIVE_OR = 31,
    NON_EXCLUSIVE_OR = 32, EQ = 33, NE = 34, LT = 35, LE = 36, GT = 37,
    GE = 38, ABSOLUTE_VALUE = 39, ARC_COSINE = 40, ARC_SINE = 41, COSINE = 42,
    E_RAISED_TO = 43, FIX_DOWN = 44, FIX_UP = 45, NATURAL_LOG_OF = 46, ROUND_OPERATION = 47,
    SINE = 48, SQUARE_ROOT = 49, TANGENT = 50, ARC_TANGENT = 51, PARAMETER_SIGN = 52,
    EQUAL_SIGN = 53, COMMENT = 54, NAMED_PARAMETER = 55, EOL = 56, WS = 57
  };

  enum {
    RuleBlock = 0, RuleStatement = 1, RuleSubroutine = 2, RuleM99 = 3, RuleLine = 4,
    RuleIf_statement = 5, RuleWhile_statement = 6, RuleDo_while_statement = 7,
    RuleFor_statement = 8, RuleBreak_statement = 9, RuleContinue_statement = 10,
    RuleBlock_delete = 11, RuleLine_number = 12, RuleSegment = 13, RuleMid_line_word = 14,
    RuleMid_line_letter = 15, RuleReal_value = 16, RuleReal_number = 17,
    RuleExpression = 18, RuleLogical_or_expression = 19, RuleLogical_xor_expression = 20,
    RuleLogical_and_expression = 21, RuleEquality_expression = 22, RuleRelational_expression = 23,
    RuleAdditive_expression = 24, RuleMultiplicative_expression = 25, RulePower_expression = 26,
    RuleUnary_expression = 27, RulePrimary = 28, RuleUnary_combo = 29, RuleOrdinary_unary_combo = 30,
    RuleOrdinary_unary_operation = 31, RuleArc_tangent_combo = 32, RuleParameter_setting = 33,
    RuleParameter_value = 34, RuleComment = 35
  };

  explicit parser_antlr4(antlr4::TokenStream *input);

  parser_antlr4(antlr4::TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options);

  ~parser_antlr4() override;

  std::string getGrammarFileName() const override;

  const antlr4::atn::ATN& getATN() const override;

  const std::vector<std::string>& getRuleNames() const override;

  const antlr4::dfa::Vocabulary& getVocabulary() const override;

  antlr4::atn::SerializedATNView getSerializedATN() const override;


  class BlockContext;
  class StatementContext;
  class SubroutineContext;
  class M99Context;
  class LineContext;
  class If_statementContext;
  class While_statementContext;
  class Do_while_statementContext;
  class For_statementContext;
  class Break_statementContext;
  class Continue_statementContext;
  class Block_deleteContext;
  class Line_numberContext;
  class SegmentContext;
  class Mid_line_wordContext;
  class Mid_line_letterContext;
  class Real_valueContext;
  class Real_numberContext;
  class ExpressionContext;
  class Logical_or_expressionContext;
  class Logical_xor_expressionContext;
  class Logical_and_expressionContext;
  class Equality_expressionContext;
  class Relational_expressionContext;
  class Additive_expressionContext;
  class Multiplicative_expressionContext;
  class Power_expressionContext;
  class Unary_expressionContext;
  class PrimaryContext;
  class Unary_comboContext;
  class Ordinary_unary_comboContext;
  class Ordinary_unary_operationContext;
  class Arc_tangent_comboContext;
  class Parameter_settingContext;
  class Parameter_valueContext;
  class CommentContext;

  class BlockContext : public antlr4::ParserRuleContext {
  public:
    BlockContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    std::vector<antlr4::tree::TerminalNode *> PERCENT();
    antlr4::tree::TerminalNode* PERCENT(size_t i);
    std::vector<antlr4::tree::TerminalNode *> EOL();
    antlr4::tree::TerminalNode* EOL(size_t i);
    std::vector<StatementContext *> statement();
    StatementContext* statement(size_t i);

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  BlockContext* block();

  class StatementContext : public antlr4::ParserRuleContext {
  public:
    StatementContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    LineContext *line();
    If_statementContext *if_statement();
    While_statementContext *while_statement();
    Do_while_statementContext *do_while_statement();
    For_statementContext *for_statement();
    Break_statementContext *break_statement();
    Continue_statementContext *continue_statement();
    SubroutineContext *subroutine();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  StatementContext* statement();

  class SubroutineContext : public antlr4::ParserRuleContext {
  public:
    SubroutineContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    antlr4::tree::TerminalNode *SUBROUTINE();
    Real_valueContext *real_value();
    BlockContext *block();
    M99Context *m99();
    std::vector<antlr4::tree::TerminalNode *> EOL();
    antlr4::tree::TerminalNode* EOL(size_t i);

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  SubroutineContext* subroutine();

  class M99Context : public antlr4::ParserRuleContext {
  public:
    M99Context(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    antlr4::tree::TerminalNode *M99();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  M99Context* m99();

  class LineContext : public antlr4::ParserRuleContext {
  public:
    LineContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    Block_deleteContext *block_delete();
    Line_numberContext *line_number();
    std::vector<SegmentContext *> segment();
    SegmentContext* segment(size_t i);
    std::vector<antlr4::tree::TerminalNode *> EOL();
    antlr4::tree::TerminalNode* EOL(size_t i);

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  LineContext* line();

  class If_statementContext : public antlr4::ParserRuleContext {
  public:
    If_statementContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    std::vector<antlr4::tree::TerminalNode *> IF();
    antlr4::tree::TerminalNode* IF(size_t i);
    std::vector<ExpressionContext *> expression();
    ExpressionContext* expression(size_t i);
    std::vector<BlockContext *> block();
    BlockContext* block(size_t i);
    antlr4::tree::TerminalNode *ENDIF();
    antlr4::tree::TerminalNode *END();
    std::vector<antlr4::tree::TerminalNode *> EOL();
    antlr4::tree::TerminalNode* EOL(size_t i);
    std::vector<antlr4::tree::TerminalNode *> ELSE();
    antlr4::tree::TerminalNode* ELSE(size_t i);

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  If_statementContext* if_statement();

  class While_statementContext : public antlr4::ParserRuleContext {
  public:
    While_statementContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    antlr4::tree::TerminalNode *WHILE();
    ExpressionContext *expression();
    BlockContext *block();
    antlr4::tree::TerminalNode *ENDWHILE();
    antlr4::tree::TerminalNode *END();
    std::vector<antlr4::tree::TerminalNode *> EOL();
    antlr4::tree::TerminalNode* EOL(size_t i);

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  While_statementContext* while_statement();

  class Do_while_statementContext : public antlr4::ParserRuleContext {
  public:
    Do_while_statementContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    antlr4::tree::TerminalNode *DO();
    BlockContext *block();
    antlr4::tree::TerminalNode *WHILE();
    ExpressionContext *expression();
    antlr4::tree::TerminalNode *END();
    antlr4::tree::TerminalNode *ENDWHILE();
    std::vector<antlr4::tree::TerminalNode *> EOL();
    antlr4::tree::TerminalNode* EOL(size_t i);

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Do_while_statementContext* do_while_statement();

  class For_statementContext : public antlr4::ParserRuleContext {
  public:
    For_statementContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    antlr4::tree::TerminalNode *FOR();
    Parameter_valueContext *parameter_value();
    antlr4::tree::TerminalNode *FROM();
    std::vector<ExpressionContext *> expression();
    ExpressionContext* expression(size_t i);
    antlr4::tree::TerminalNode *TO();
    BlockContext *block();
    antlr4::tree::TerminalNode *ENDFOR();
    antlr4::tree::TerminalNode *END();
    std::vector<antlr4::tree::TerminalNode *> EOL();
    antlr4::tree::TerminalNode* EOL(size_t i);

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  For_statementContext* for_statement();

  class Break_statementContext : public antlr4::ParserRuleContext {
  public:
    Break_statementContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    antlr4::tree::TerminalNode *BREAK();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Break_statementContext* break_statement();

  class Continue_statementContext : public antlr4::ParserRuleContext {
  public:
    Continue_statementContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    antlr4::tree::TerminalNode *CONTINUE();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Continue_statementContext* continue_statement();

  class Block_deleteContext : public antlr4::ParserRuleContext {
  public:
    Block_deleteContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    antlr4::tree::TerminalNode *SLASH();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Block_deleteContext* block_delete();

  class Line_numberContext : public antlr4::ParserRuleContext {
  public:
    Line_numberContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    std::vector<antlr4::tree::TerminalNode *> DIGIT();
    antlr4::tree::TerminalNode* DIGIT(size_t i);

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Line_numberContext* line_number();

  class SegmentContext : public antlr4::ParserRuleContext {
  public:
    SegmentContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    Mid_line_wordContext *mid_line_word();
    Parameter_settingContext *parameter_setting();
    CommentContext *comment();
    M99Context *m99();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  SegmentContext* segment();

  class Mid_line_wordContext : public antlr4::ParserRuleContext {
  public:
    Mid_line_wordContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    Mid_line_letterContext *mid_line_letter();
    Real_valueContext *real_value();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Mid_line_wordContext* mid_line_word();

  class Mid_line_letterContext : public antlr4::ParserRuleContext {
  public:
    Mid_line_letterContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    antlr4::tree::TerminalNode *LETTER();
    antlr4::tree::TerminalNode *DOLLAR();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Mid_line_letterContext* mid_line_letter();

  class Real_valueContext : public antlr4::ParserRuleContext {
  public:
    Real_valueContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    Unary_comboContext *unary_combo();
    Parameter_valueContext *parameter_value();
    ExpressionContext *expression();
    Real_numberContext *real_number();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Real_valueContext* real_value();

  class Real_numberContext : public antlr4::ParserRuleContext {
  public:
    Real_numberContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    std::vector<antlr4::tree::TerminalNode *> DIGIT();
    antlr4::tree::TerminalNode* DIGIT(size_t i);
    antlr4::tree::TerminalNode *DOT();
    antlr4::tree::TerminalNode *PLUS();
    antlr4::tree::TerminalNode *MINUS();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Real_numberContext* real_number();

  class ExpressionContext : public antlr4::ParserRuleContext {
  public:
    ExpressionContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    Logical_or_expressionContext *logical_or_expression();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  ExpressionContext* expression();

  class Logical_or_expressionContext : public antlr4::ParserRuleContext {
  public:
    Logical_or_expressionContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    Logical_xor_expressionContext *logical_xor_expression();
    Logical_or_expressionContext *logical_or_expression();
    antlr4::tree::TerminalNode *NON_EXCLUSIVE_OR();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Logical_or_expressionContext* logical_or_expression();
  Logical_or_expressionContext* logical_or_expression(int precedence);
  class Logical_xor_expressionContext : public antlr4::ParserRuleContext {
  public:
    Logical_xor_expressionContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    Logical_and_expressionContext *logical_and_expression();
    Logical_xor_expressionContext *logical_xor_expression();
    antlr4::tree::TerminalNode *EXCLUSIVE_OR();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Logical_xor_expressionContext* logical_xor_expression();
  Logical_xor_expressionContext* logical_xor_expression(int precedence);
  class Logical_and_expressionContext : public antlr4::ParserRuleContext {
  public:
    Logical_and_expressionContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    Equality_expressionContext *equality_expression();
    Logical_and_expressionContext *logical_and_expression();
    antlr4::tree::TerminalNode *LOGICAL_AND();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Logical_and_expressionContext* logical_and_expression();
  Logical_and_expressionContext* logical_and_expression(int precedence);
  class Equality_expressionContext : public antlr4::ParserRuleContext {
  public:
    Equality_expressionContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    Relational_expressionContext *relational_expression();
    Equality_expressionContext *equality_expression();
    antlr4::tree::TerminalNode *EQ();
    antlr4::tree::TerminalNode *NE();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Equality_expressionContext* equality_expression();
  Equality_expressionContext* equality_expression(int precedence);
  class Relational_expressionContext : public antlr4::ParserRuleContext {
  public:
    Relational_expressionContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    Additive_expressionContext *additive_expression();
    Relational_expressionContext *relational_expression();
    antlr4::tree::TerminalNode *LT();
    antlr4::tree::TerminalNode *LE();
    antlr4::tree::TerminalNode *GT();
    antlr4::tree::TerminalNode *GE();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Relational_expressionContext* relational_expression();
  Relational_expressionContext* relational_expression(int precedence);
  class Additive_expressionContext : public antlr4::ParserRuleContext {
  public:
    Additive_expressionContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    Multiplicative_expressionContext *multiplicative_expression();
    Additive_expressionContext *additive_expression();
    antlr4::tree::TerminalNode *PLUS();
    antlr4::tree::TerminalNode *MINUS();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Additive_expressionContext* additive_expression();
  Additive_expressionContext* additive_expression(int precedence);
  class Multiplicative_expressionContext : public antlr4::ParserRuleContext {
  public:
    Multiplicative_expressionContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    Power_expressionContext *power_expression();
    Multiplicative_expressionContext *multiplicative_expression();
    antlr4::tree::TerminalNode *TIMES();
    antlr4::tree::TerminalNode *SLASH();
    antlr4::tree::TerminalNode *MODULO();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Multiplicative_expressionContext* multiplicative_expression();
  Multiplicative_expressionContext* multiplicative_expression(int precedence);
  class Power_expressionContext : public antlr4::ParserRuleContext {
  public:
    Power_expressionContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    Unary_expressionContext *unary_expression();
    antlr4::tree::TerminalNode *POWER();
    Power_expressionContext *power_expression();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Power_expressionContext* power_expression();

  class Unary_expressionContext : public antlr4::ParserRuleContext {
  public:
    Unary_expressionContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    antlr4::tree::TerminalNode *PLUS();
    Unary_expressionContext *unary_expression();
    antlr4::tree::TerminalNode *MINUS();
    Unary_comboContext *unary_combo();
    PrimaryContext *primary();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Unary_expressionContext* unary_expression();

  class PrimaryContext : public antlr4::ParserRuleContext {
  public:
    PrimaryContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    Real_numberContext *real_number();
    Parameter_valueContext *parameter_value();
    antlr4::tree::TerminalNode *LEFT_BRACKET();
    ExpressionContext *expression();
    antlr4::tree::TerminalNode *RIGHT_BRACKET();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  PrimaryContext* primary();

  class Unary_comboContext : public antlr4::ParserRuleContext {
  public:
    Unary_comboContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    Ordinary_unary_comboContext *ordinary_unary_combo();
    Arc_tangent_comboContext *arc_tangent_combo();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Unary_comboContext* unary_combo();

  class Ordinary_unary_comboContext : public antlr4::ParserRuleContext {
  public:
    Ordinary_unary_comboContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    Ordinary_unary_operationContext *ordinary_unary_operation();
    ExpressionContext *expression();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Ordinary_unary_comboContext* ordinary_unary_combo();

  class Ordinary_unary_operationContext : public antlr4::ParserRuleContext {
  public:
    Ordinary_unary_operationContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    antlr4::tree::TerminalNode *ABSOLUTE_VALUE();
    antlr4::tree::TerminalNode *ARC_COSINE();
    antlr4::tree::TerminalNode *ARC_SINE();
    antlr4::tree::TerminalNode *COSINE();
    antlr4::tree::TerminalNode *E_RAISED_TO();
    antlr4::tree::TerminalNode *FIX_DOWN();
    antlr4::tree::TerminalNode *FIX_UP();
    antlr4::tree::TerminalNode *NATURAL_LOG_OF();
    antlr4::tree::TerminalNode *ROUND_OPERATION();
    antlr4::tree::TerminalNode *SINE();
    antlr4::tree::TerminalNode *SQUARE_ROOT();
    antlr4::tree::TerminalNode *TANGENT();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Ordinary_unary_operationContext* ordinary_unary_operation();

  class Arc_tangent_comboContext : public antlr4::ParserRuleContext {
  public:
    Arc_tangent_comboContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    antlr4::tree::TerminalNode *ARC_TANGENT();
    std::vector<ExpressionContext *> expression();
    ExpressionContext* expression(size_t i);
    antlr4::tree::TerminalNode *SLASH();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Arc_tangent_comboContext* arc_tangent_combo();

  class Parameter_settingContext : public antlr4::ParserRuleContext {
  public:
    Parameter_settingContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    antlr4::tree::TerminalNode *EQUAL_SIGN();
    Real_valueContext *real_value();
    antlr4::tree::TerminalNode *PARAMETER_SIGN();
    PrimaryContext *primary();
    antlr4::tree::TerminalNode *NAMED_PARAMETER();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Parameter_settingContext* parameter_setting();

  class Parameter_valueContext : public antlr4::ParserRuleContext {
  public:
    Parameter_valueContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    antlr4::tree::TerminalNode *PARAMETER_SIGN();
    PrimaryContext *primary();
    antlr4::tree::TerminalNode *NAMED_PARAMETER();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  Parameter_valueContext* parameter_value();

  class CommentContext : public antlr4::ParserRuleContext {
  public:
    CommentContext(antlr4::ParserRuleContext *parent, size_t invokingState);
    virtual size_t getRuleIndex() const override;
    antlr4::tree::TerminalNode *COMMENT();

    virtual void enterRule(antlr4::tree::ParseTreeListener *listener) override;
    virtual void exitRule(antlr4::tree::ParseTreeListener *listener) override;

    virtual std::any accept(antlr4::tree::ParseTreeVisitor *visitor) override;

  };

  CommentContext* comment();


  bool sempred(antlr4::RuleContext *_localctx, size_t ruleIndex, size_t predicateIndex) override;

  bool logical_or_expressionSempred(Logical_or_expressionContext *_localctx, size_t predicateIndex);
  bool logical_xor_expressionSempred(Logical_xor_expressionContext *_localctx, size_t predicateIndex);
  bool logical_and_expressionSempred(Logical_and_expressionContext *_localctx, size_t predicateIndex);
  bool equality_expressionSempred(Equality_expressionContext *_localctx, size_t predicateIndex);
  bool relational_expressionSempred(Relational_expressionContext *_localctx, size_t predicateIndex);
  bool additive_expressionSempred(Additive_expressionContext *_localctx, size_t predicateIndex);
  bool multiplicative_expressionSempred(Multiplicative_expressionContext *_localctx, size_t predicateIndex);




  static void initialize();

private:
};
# 5 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/gpp.hpp" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/util.hpp" 1

#define smv_gpp_util_hpp 




using u8 = std::uint64_t;
using u16 = std::uint16_t;
using u64 = std::uint64_t;
using i8 = std::int64_t;
using i64 = std::int64_t;
using f64 = double;

enum ErrorCode : int {
  no_error = 0,
  modal_group_overlap_error = 1,
};

std::string readFile(const std::string &filename);
void prettyPrintError(const std::string message, const std::string code,
                      int line, int column);
# 6 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/gpp.hpp" 2


namespace gpp {
std::unique_ptr<parser_antlr4> FrontendParse(const std::string &code);

struct BytecodeEmitter;
struct ExecutionFrame;
struct VerboseInstruction;
struct Instruction;
struct Word;
enum Command : u8;

struct Machine;
struct Vec3D;
struct Vec2D;
struct Tool;

enum SpindleDirection : i8;
enum Unit : u8;
enum DistanceMode : u8;
enum Plane : u8;
enum FeedMode : u8;
enum SpindleMode : u8;
enum RetractMode : u8;
enum MotionControlMode : u8;

enum ErrorType : u8 {
  PARSE_ERROR = 0,
  PARAMETER_ERROR = 1,
  MEMORY_ERROR = 3,
  MACHINE_ERROR = 4,
  MATH_ERROR = 5,
  GENERAL_ERROR = 6,
};

struct Error;
}
# 13 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/bytecode.hpp" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/gen/lexer_antlr4.h" 1



       







class lexer_antlr4 : public antlr4::Lexer {
public:
  enum {
    IF = 1, THEN = 2, DO = 3, WHILE = 4, FOR = 5, FROM = 6, TO = 7, ELSE = 8,
    END = 9, ENDIF = 10, ENDWHILE = 11, ENDFOR = 12, BREAK = 13, CONTINUE = 14,
    SUBROUTINE = 15, M99 = 16, PERCENT = 17, DIGIT = 18, LETTER = 19, DOLLAR = 20,
    PLUS = 21, MINUS = 22, DOT = 23, LEFT_BRACKET = 24, RIGHT_BRACKET = 25,
    POWER = 26, SLASH = 27, MODULO = 28, TIMES = 29, LOGICAL_AND = 30, EXCLUSIVE_OR = 31,
    NON_EXCLUSIVE_OR = 32, EQ = 33, NE = 34, LT = 35, LE = 36, GT = 37,
    GE = 38, ABSOLUTE_VALUE = 39, ARC_COSINE = 40, ARC_SINE = 41, COSINE = 42,
    E_RAISED_TO = 43, FIX_DOWN = 44, FIX_UP = 45, NATURAL_LOG_OF = 46, ROUND_OPERATION = 47,
    SINE = 48, SQUARE_ROOT = 49, TANGENT = 50, ARC_TANGENT = 51, PARAMETER_SIGN = 52,
    EQUAL_SIGN = 53, COMMENT = 54, NAMED_PARAMETER = 55, EOL = 56, WS = 57
  };

  explicit lexer_antlr4(antlr4::CharStream *input);

  ~lexer_antlr4() override;


  std::string getGrammarFileName() const override;

  const std::vector<std::string>& getRuleNames() const override;

  const std::vector<std::string>& getChannelNames() const override;

  const std::vector<std::string>& getModeNames() const override;

  const antlr4::dfa::Vocabulary& getVocabulary() const override;

  antlr4::atn::SerializedATNView getSerializedATN() const override;

  const antlr4::atn::ATN& getATN() const override;




  static void initialize();

private:





};
# 14 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/bytecode.hpp" 2

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/gen/parser_antlr4BaseVisitor.h" 1



       



# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/gen/parser_antlr4Visitor.h" 1



       
# 16 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/gen/parser_antlr4Visitor.h"
class parser_antlr4Visitor : public antlr4::tree::AbstractParseTreeVisitor {
public:




    virtual std::any visitBlock(parser_antlr4::BlockContext *context) = 0;

    virtual std::any visitStatement(parser_antlr4::StatementContext *context) = 0;

    virtual std::any visitSubroutine(parser_antlr4::SubroutineContext *context) = 0;

    virtual std::any visitM99(parser_antlr4::M99Context *context) = 0;

    virtual std::any visitLine(parser_antlr4::LineContext *context) = 0;

    virtual std::any visitIf_statement(parser_antlr4::If_statementContext *context) = 0;

    virtual std::any visitWhile_statement(parser_antlr4::While_statementContext *context) = 0;

    virtual std::any visitDo_while_statement(parser_antlr4::Do_while_statementContext *context) = 0;

    virtual std::any visitFor_statement(parser_antlr4::For_statementContext *context) = 0;

    virtual std::any visitBreak_statement(parser_antlr4::Break_statementContext *context) = 0;

    virtual std::any visitContinue_statement(parser_antlr4::Continue_statementContext *context) = 0;

    virtual std::any visitBlock_delete(parser_antlr4::Block_deleteContext *context) = 0;

    virtual std::any visitLine_number(parser_antlr4::Line_numberContext *context) = 0;

    virtual std::any visitSegment(parser_antlr4::SegmentContext *context) = 0;

    virtual std::any visitMid_line_word(parser_antlr4::Mid_line_wordContext *context) = 0;

    virtual std::any visitMid_line_letter(parser_antlr4::Mid_line_letterContext *context) = 0;

    virtual std::any visitReal_value(parser_antlr4::Real_valueContext *context) = 0;

    virtual std::any visitReal_number(parser_antlr4::Real_numberContext *context) = 0;

    virtual std::any visitExpression(parser_antlr4::ExpressionContext *context) = 0;

    virtual std::any visitLogical_or_expression(parser_antlr4::Logical_or_expressionContext *context) = 0;

    virtual std::any visitLogical_xor_expression(parser_antlr4::Logical_xor_expressionContext *context) = 0;

    virtual std::any visitLogical_and_expression(parser_antlr4::Logical_and_expressionContext *context) = 0;

    virtual std::any visitEquality_expression(parser_antlr4::Equality_expressionContext *context) = 0;

    virtual std::any visitRelational_expression(parser_antlr4::Relational_expressionContext *context) = 0;

    virtual std::any visitAdditive_expression(parser_antlr4::Additive_expressionContext *context) = 0;

    virtual std::any visitMultiplicative_expression(parser_antlr4::Multiplicative_expressionContext *context) = 0;

    virtual std::any visitPower_expression(parser_antlr4::Power_expressionContext *context) = 0;

    virtual std::any visitUnary_expression(parser_antlr4::Unary_expressionContext *context) = 0;

    virtual std::any visitPrimary(parser_antlr4::PrimaryContext *context) = 0;

    virtual std::any visitUnary_combo(parser_antlr4::Unary_comboContext *context) = 0;

    virtual std::any visitOrdinary_unary_combo(parser_antlr4::Ordinary_unary_comboContext *context) = 0;

    virtual std::any visitOrdinary_unary_operation(parser_antlr4::Ordinary_unary_operationContext *context) = 0;

    virtual std::any visitArc_tangent_combo(parser_antlr4::Arc_tangent_comboContext *context) = 0;

    virtual std::any visitParameter_setting(parser_antlr4::Parameter_settingContext *context) = 0;

    virtual std::any visitParameter_value(parser_antlr4::Parameter_valueContext *context) = 0;

    virtual std::any visitComment(parser_antlr4::CommentContext *context) = 0;


};
# 9 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/extern/antlr4/gen/parser_antlr4BaseVisitor.h" 2






class parser_antlr4BaseVisitor : public parser_antlr4Visitor {
public:

  virtual std::any visitBlock(parser_antlr4::BlockContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitStatement(parser_antlr4::StatementContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitSubroutine(parser_antlr4::SubroutineContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitM99(parser_antlr4::M99Context *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitLine(parser_antlr4::LineContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitIf_statement(parser_antlr4::If_statementContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitWhile_statement(parser_antlr4::While_statementContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitDo_while_statement(parser_antlr4::Do_while_statementContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitFor_statement(parser_antlr4::For_statementContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitBreak_statement(parser_antlr4::Break_statementContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitContinue_statement(parser_antlr4::Continue_statementContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitBlock_delete(parser_antlr4::Block_deleteContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitLine_number(parser_antlr4::Line_numberContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitSegment(parser_antlr4::SegmentContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitMid_line_word(parser_antlr4::Mid_line_wordContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitMid_line_letter(parser_antlr4::Mid_line_letterContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitReal_value(parser_antlr4::Real_valueContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitReal_number(parser_antlr4::Real_numberContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitExpression(parser_antlr4::ExpressionContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitLogical_or_expression(parser_antlr4::Logical_or_expressionContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitLogical_xor_expression(parser_antlr4::Logical_xor_expressionContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitLogical_and_expression(parser_antlr4::Logical_and_expressionContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitEquality_expression(parser_antlr4::Equality_expressionContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitRelational_expression(parser_antlr4::Relational_expressionContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitAdditive_expression(parser_antlr4::Additive_expressionContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitMultiplicative_expression(parser_antlr4::Multiplicative_expressionContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitPower_expression(parser_antlr4::Power_expressionContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitUnary_expression(parser_antlr4::Unary_expressionContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitPrimary(parser_antlr4::PrimaryContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitUnary_combo(parser_antlr4::Unary_comboContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitOrdinary_unary_combo(parser_antlr4::Ordinary_unary_comboContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitOrdinary_unary_operation(parser_antlr4::Ordinary_unary_operationContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitArc_tangent_combo(parser_antlr4::Arc_tangent_comboContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitParameter_setting(parser_antlr4::Parameter_settingContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitParameter_value(parser_antlr4::Parameter_valueContext *ctx) override {
    return visitChildren(ctx);
  }

  virtual std::any visitComment(parser_antlr4::CommentContext *ctx) override {
    return visitChildren(ctx);
  }


};
# 16 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/bytecode.hpp" 2






struct gpp::Word {
  char word;
  f64 arg;
};

struct gpp::Instruction {
  Command command;
  std::vector<f64> arguments;
};

struct gpp::Error {
private:
  ErrorType type;
  std::string message;
  std::string source;
  int line = -1;
  int column = -1;
  bool recoverable = true;

public:
  Error(ErrorType t, const std::string &msg, const std::string &source,
        int line = -1, int column = -1, bool rec = true);
  void print() const;
  void updateSource(std::string &newSource);
};

using SafeInstruction = std::variant<gpp::Instruction, gpp::Error>;

struct gpp::VerboseInstruction {
  char word;
  f64 arg;
  int line = -1;
  int column = -1;
  bool commentOrMessage;
  SafeInstruction instruction;
};

bool compareVerboseInstructions(const gpp::VerboseInstruction &a,
                                const gpp::VerboseInstruction &b);

struct gpp::ExecutionFrame {
  parser_antlr4::BlockContext *block;
  i64 linePointer;
  parser_antlr4::ExpressionContext *whileLoopCondition = nullptr;
  std::string loopCounterAddress = "";
  f64 start;
  f64 step = 1;
  f64 end;
  bool breakEncountered = false;
  bool continueEncountered = false;
};

struct StickyArgs {
  f64 r = 
# 75 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/bytecode.hpp" 3 4
         (__builtin_nanf (""))
# 75 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/bytecode.hpp"
            , l = 
# 75 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/bytecode.hpp" 3 4
                  (__builtin_nanf (""))
# 75 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/bytecode.hpp"
                     , f = 
# 75 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/bytecode.hpp" 3 4
                           (__builtin_nanf (""))
# 75 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/bytecode.hpp"
                              , p = 
# 75 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/bytecode.hpp" 3 4
                                    (__builtin_nanf (""))
# 75 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/bytecode.hpp"
                                       , g = 
# 75 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/bytecode.hpp" 3 4
                                             (__builtin_nanf (""))
# 75 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/bytecode.hpp"
                                                ;
};

class gpp::BytecodeEmitter : public parser_antlr4BaseVisitor {
  friend class Machine;

public:
  Machine *machine = nullptr;

  BytecodeEmitter(Machine &machine, std::string input);
  BytecodeEmitter(Machine &machine);
  void preprocess(parser_antlr4::BlockContext *block);
  bool fetchInstructions();

private:
  char word;
  std::vector<Word> words;
  std::deque<SafeInstruction> bytecode;
  std::deque<VerboseInstruction> verboseInstructions;
  StickyArgs stickyArgs;

  antlr4::ANTLRInputStream inputStream;
  lexer_antlr4 lexer;
  antlr4::CommonTokenStream tokens;
  parser_antlr4 parser;

  std::stack<gpp::ExecutionFrame> executionStack;
  std::unordered_map<u64, parser_antlr4::SubroutineContext *> subroutines;

  std::unordered_map<std::string, f64> parameterAddresses;
  bool breakEncountered = false;
  bool continueEncountered = false;
  bool subroutineEncountered = false;

  int line = 0;
  int column = 0;

private:
  antlrcpp::Any visitBlock(parser_antlr4::BlockContext *context) override;
  antlrcpp::Any
  visitIf_statement(parser_antlr4::If_statementContext *context) override;
  antlrcpp::Any
  visitWhile_statement(parser_antlr4::While_statementContext *context) override;
  antlrcpp::Any visitDo_while_statement(
      parser_antlr4::Do_while_statementContext *context) override;

  antlrcpp::Any
  visitBreak_statement(parser_antlr4::Break_statementContext *context) override;
  antlrcpp::Any visitContinue_statement(
      parser_antlr4::Continue_statementContext *context) override;
  antlrcpp::Any
  visitFor_statement(parser_antlr4::For_statementContext *context) override;

  antlrcpp::Any visitLine(parser_antlr4::LineContext *context) override;
  antlrcpp::Any visitSegment(parser_antlr4::SegmentContext *context) override;
  antlrcpp::Any
  visitMid_line_word(parser_antlr4::Mid_line_wordContext *context) override;
  antlrcpp::Any visitParameter_setting(
      parser_antlr4::Parameter_settingContext *context) override;
  antlrcpp::Any
  visitParameter_value(parser_antlr4::Parameter_valueContext *context) override;
  antlrcpp::Any
  visitReal_value(parser_antlr4::Real_valueContext *context) override;
  antlrcpp::Any
  visitReal_number(parser_antlr4::Real_numberContext *context) override;
  antlrcpp::Any
  visitUnary_combo(parser_antlr4::Unary_comboContext *context) override;
  antlrcpp::Any visitOrdinary_unary_combo(
      parser_antlr4::Ordinary_unary_comboContext *context) override;
  antlrcpp::Any visitArc_tangent_combo(
      parser_antlr4::Arc_tangent_comboContext *context) override;

  antlrcpp::Any
  visitSubroutine(parser_antlr4::SubroutineContext *context) override;

  antlrcpp::Any
  visitExpression(parser_antlr4::ExpressionContext *context) override;
  antlrcpp::Any visitLogical_or_expression(
      parser_antlr4::Logical_or_expressionContext *context) override;
  antlrcpp::Any visitLogical_xor_expression(
      parser_antlr4::Logical_xor_expressionContext *context) override;
  antlrcpp::Any visitLogical_and_expression(
      parser_antlr4::Logical_and_expressionContext *context) override;
  antlrcpp::Any visitEquality_expression(
      parser_antlr4::Equality_expressionContext *context) override;
  antlrcpp::Any visitRelational_expression(
      parser_antlr4::Relational_expressionContext *context) override;
  antlrcpp::Any visitAdditive_expression(
      parser_antlr4::Additive_expressionContext *context) override;
  antlrcpp::Any visitMultiplicative_expression(
      parser_antlr4::Multiplicative_expressionContext *context) override;
  antlrcpp::Any visitPower_expression(
      parser_antlr4::Power_expressionContext *context) override;
  antlrcpp::Any visitUnary_expression(
      parser_antlr4::Unary_expressionContext *context) override;
  antlrcpp::Any visitPrimary(parser_antlr4::PrimaryContext *context) override;


  std::string getLineFromSource(int target);
  bool arcOffetsAligned(const Plane currentPlane, f64 i, f64 j, f64 k);
  void handle_g(std::deque<VerboseInstruction> &list, f64 arg,
                const std::vector<Word> &words, int line, int column);

  void handle_m(std::deque<VerboseInstruction> &list, f64 arg,
                const std::vector<Word> &words, int line, int column);

  bool lineHasM99(parser_antlr4::StatementContext *stmt);
  bool ifStatementAlwaysReturns(parser_antlr4::If_statementContext *context);
  bool containsUnconditionalM99(parser_antlr4::BlockContext *context);


  inline void applyCurrentPositionDefaults(Vec3D &delta);
  inline void extractCoordinates(const std::vector<Word> &words, f64 &x, f64 &y,
                                 f64 &z);
  inline void extractArcParams(const std::vector<Word> &words, f64 &x, f64 &y,
                               f64 &z, f64 &i, f64 &j, f64 &k, f64 &r);

  f64 findParameter(const std::vector<Word> &words, char letter);
  inline Vec2D getPlaneCoordinates(const Plane plane, const Vec3D &pos);
  inline Vec2D getCurrentPlanePosition(const Plane plane,
                                       const Vec3D &position);
  inline Vec2D getArcCenterOffsets(const gpp::Plane plane, f64 i, f64 j, f64 k);
};
# 28 "emc/sterp/sterp.cc" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/gpp.hpp" 1
# 29 "emc/sterp/sterp.cc" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/machine.hpp" 1

#define smv_gpp_machine_hpp 

# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/bytecode.hpp" 1
# 5 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/machine.hpp" 2
# 1 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/canvas.hpp" 1

#define smv_gpp_canvas_hpp 




class Canvas {
public:
  Canvas(int width, int height);

  void drawLine(int x0, int y0, int x1, int y1, unsigned char r,
                unsigned char g, unsigned char b);

  void drawArc(int cx, int cy, int radius, float start_angle, float end_angle,
               unsigned char r, unsigned char g, unsigned char b);

  void drawCircle(int cx, int cy, int radius, unsigned char r, unsigned char g,
                  unsigned char b);

  void save(const std::string &filename);

private:
  int width, height;
  std::vector<unsigned char> data;

  void setPixel(int x, int y, unsigned char r, unsigned char g,
                unsigned char b);
};
# 6 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/machine.hpp" 2



# 1 "/usr/include/c++/15.1.1/functional" 1 3
# 44 "/usr/include/c++/15.1.1/functional" 3
#define _GLIBCXX_FUNCTIONAL 1
# 61 "/usr/include/c++/15.1.1/functional" 3
# 1 "/usr/include/c++/15.1.1/bits/std_function.h" 1 3
# 31 "/usr/include/c++/15.1.1/bits/std_function.h" 3
#define _GLIBCXX_STD_FUNCTION_H 1
# 47 "/usr/include/c++/15.1.1/bits/std_function.h" 3

# 47 "/usr/include/c++/15.1.1/bits/std_function.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  class bad_function_call : public std::exception
  {
  public:
    virtual ~bad_function_call() noexcept;

    const char* what() const noexcept;
  };







  template<typename _Tp>
    struct __is_location_invariant
    : is_trivially_copyable<_Tp>::type
    { };

  class _Undefined_class;

  union _Nocopy_types
  {
    void* _M_object;
    const void* _M_const_object;
    void (*_M_function_pointer)();
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void* _M_access() noexcept { return &_M_pod_data[0]; }
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }

    template<typename _Tp>
      _Tp&
      _M_access() noexcept
      { return *static_cast<_Tp*>(_M_access()); }

    template<typename _Tp>
      const _Tp&
      _M_access() const noexcept
      { return *static_cast<const _Tp*>(_M_access()); }

    _Nocopy_types _M_unused;
    char _M_pod_data[sizeof(_Nocopy_types)];
  };

  enum _Manager_operation
  {
    __get_type_info,
    __get_functor_ptr,
    __clone_functor,
    __destroy_functor
  };

  template<typename _Signature>
    class function;


  class _Function_base
  {
  public:
    static const size_t _M_max_size = sizeof(_Nocopy_types);
    static const size_t _M_max_align = __alignof__(_Nocopy_types);

    template<typename _Functor>
      class _Base_manager
      {
      protected:
 static const bool __stored_locally =
 (__is_location_invariant<_Functor>::value
  && sizeof(_Functor) <= _M_max_size
  && __alignof__(_Functor) <= _M_max_align
  && (_M_max_align % __alignof__(_Functor) == 0));

 using _Local_storage = integral_constant<bool, __stored_locally>;


 static _Functor*
 _M_get_pointer(const _Any_data& __source) noexcept
 {
   if constexpr (__stored_locally)
     {
       const _Functor& __f = __source._M_access<_Functor>();
       return const_cast<_Functor*>(std::__addressof(__f));
     }
   else
     return __source._M_access<_Functor*>();
 }

      private:


 template<typename _Fn>
   static void
   _M_create(_Any_data& __dest, _Fn&& __f, true_type)
   {
     ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
   }


 template<typename _Fn>
   static void
   _M_create(_Any_data& __dest, _Fn&& __f, false_type)
   {
     __dest._M_access<_Functor*>()
       = new _Functor(std::forward<_Fn>(__f));
   }


 static void
 _M_destroy(_Any_data& __victim, true_type)
 {
   __victim._M_access<_Functor>().~_Functor();
 }


 static void
 _M_destroy(_Any_data& __victim, false_type)
 {
   delete __victim._M_access<_Functor*>();
 }

      public:
 static bool
 _M_manager(_Any_data& __dest, const _Any_data& __source,
     _Manager_operation __op)
 {
   switch (__op)
     {
     case __get_type_info:

       __dest._M_access<const type_info*>() = &typeid(_Functor);



       break;

     case __get_functor_ptr:
       __dest._M_access<_Functor*>() = _M_get_pointer(__source);
       break;

     case __clone_functor:
       _M_init_functor(__dest,
    *const_cast<const _Functor*>(_M_get_pointer(__source)));
       break;

     case __destroy_functor:
       _M_destroy(__dest, _Local_storage());
       break;
     }
   return false;
 }

 template<typename _Fn>
   static void
   _M_init_functor(_Any_data& __functor, _Fn&& __f)
   noexcept(__and_<_Local_storage,
     is_nothrow_constructible<_Functor, _Fn>>::value)
   {
     _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
   }

 template<typename _Signature>
   static bool
   _M_not_empty_function(const function<_Signature>& __f) noexcept
   { return static_cast<bool>(__f); }

 template<typename _Tp>
   static bool
   _M_not_empty_function(_Tp* __fp) noexcept
   { return __fp != nullptr; }

 template<typename _Class, typename _Tp>
   static bool
   _M_not_empty_function(_Tp _Class::* __mp) noexcept
   { return __mp != nullptr; }

 template<typename _Tp>
   static bool
   _M_not_empty_function(const _Tp&) noexcept
   { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
    {
      if (_M_manager)
 _M_manager(_M_functor, _M_functor, __destroy_functor);
    }

    bool _M_empty() const { return !_M_manager; }

    using _Manager_type
      = bool (*)(_Any_data&, const _Any_data&, _Manager_operation);

    _Any_data _M_functor{};
    _Manager_type _M_manager{};
  };

  template<typename _Signature, typename _Functor>
    class _Function_handler;

  template<typename _Res, typename _Functor, typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), _Functor>
    : public _Function_base::_Base_manager<_Functor>
    {
      using _Base = _Function_base::_Base_manager<_Functor>;

    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   _Manager_operation __op)
      {
 switch (__op)
   {

   case __get_type_info:
     __dest._M_access<const type_info*>() = &typeid(_Functor);
     break;

   case __get_functor_ptr:
     __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
     break;

   default:
     _Base::_M_manager(__dest, __source, __op);
   }
 return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
 return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
         std::forward<_ArgTypes>(__args)...);
      }

      template<typename _Fn>
 static constexpr bool
 _S_nothrow_init() noexcept
 {
   return __and_<typename _Base::_Local_storage,
   is_nothrow_constructible<_Functor, _Fn>>::value;
 }
    };


  template<>
    class _Function_handler<void, void>
    {
    public:
      static bool
      _M_manager(_Any_data&, const _Any_data&, _Manager_operation)
      { return false; }
    };





  template<typename _Signature, typename _Functor,
    bool __valid = is_object<_Functor>::value>
    struct _Target_handler
    : _Function_handler<_Signature, typename remove_cv<_Functor>::type>
    { };

  template<typename _Signature, typename _Functor>
    struct _Target_handler<_Signature, _Functor, false>
    : _Function_handler<void, void>
    { };






  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,
      private _Function_base
    {


      template<typename _Func,
        bool _Self = is_same<__remove_cvref_t<_Func>, function>::value>
 using _Decay_t
   = typename __enable_if_t<!_Self, decay<_Func>>::type;

      template<typename _Func,
        typename _DFunc = _Decay_t<_Func>,
        typename _Res2 = __invoke_result<_DFunc&, _ArgTypes...>>
 struct _Callable
 : __is_invocable_impl<_Res2, _Res>::type
 { };

      template<typename _Cond, typename _Tp = void>
 using _Requires = __enable_if_t<_Cond::value, _Tp>;

      template<typename _Functor>
 using _Handler
   = _Function_handler<_Res(_ArgTypes...), __decay_t<_Functor>>;

    public:
      typedef _Res result_type;







      function() noexcept
      : _Function_base() { }





      function(nullptr_t) noexcept
      : _Function_base() { }
# 388 "/usr/include/c++/15.1.1/bits/std_function.h" 3
      function(const function& __x)
      : _Function_base()
      {
 if (static_cast<bool>(__x))
   {
     __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
     _M_invoker = __x._M_invoker;
     _M_manager = __x._M_manager;
   }
      }
# 406 "/usr/include/c++/15.1.1/bits/std_function.h" 3
      function(function&& __x) noexcept
      : _Function_base(), _M_invoker(__x._M_invoker)
      {
 if (static_cast<bool>(__x))
   {
     _M_functor = __x._M_functor;
     _M_manager = __x._M_manager;
     __x._M_manager = nullptr;
     __x._M_invoker = nullptr;
   }
      }
# 435 "/usr/include/c++/15.1.1/bits/std_function.h" 3
      template<typename _Functor,
        typename _Constraints = _Requires<_Callable<_Functor>>>
 function(_Functor&& __f)
 noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
 : _Function_base()
 {
   static_assert(is_copy_constructible<__decay_t<_Functor>>::value,
       "std::function target must be copy-constructible");
   static_assert(is_constructible<__decay_t<_Functor>, _Functor>::value,
       "std::function target must be constructible from the "
       "constructor argument");

   using _My_handler = _Handler<_Functor>;

   if (_My_handler::_M_not_empty_function(__f))
     {
       _My_handler::_M_init_functor(_M_functor,
        std::forward<_Functor>(__f));
       _M_invoker = &_My_handler::_M_invoke;
       _M_manager = &_My_handler::_M_manager;
     }
 }
# 470 "/usr/include/c++/15.1.1/bits/std_function.h" 3
      function&
      operator=(const function& __x)
      {
 function(__x).swap(*this);
 return *this;
      }
# 488 "/usr/include/c++/15.1.1/bits/std_function.h" 3
      function&
      operator=(function&& __x) noexcept
      {
 function(std::move(__x)).swap(*this);
 return *this;
      }
# 502 "/usr/include/c++/15.1.1/bits/std_function.h" 3
      function&
      operator=(nullptr_t) noexcept
      {
 if (_M_manager)
   {
     _M_manager(_M_functor, _M_functor, __destroy_functor);
     _M_manager = nullptr;
     _M_invoker = nullptr;
   }
 return *this;
      }
# 531 "/usr/include/c++/15.1.1/bits/std_function.h" 3
      template<typename _Functor>
 _Requires<_Callable<_Functor>, function&>
 operator=(_Functor&& __f)
 noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
 {
   function(std::forward<_Functor>(__f)).swap(*this);
   return *this;
 }


      template<typename _Functor>
 function&
 operator=(reference_wrapper<_Functor> __f) noexcept
 {
   function(__f).swap(*this);
   return *this;
 }
# 558 "/usr/include/c++/15.1.1/bits/std_function.h" 3
      void swap(function& __x) noexcept
      {
 std::swap(_M_functor, __x._M_functor);
 std::swap(_M_manager, __x._M_manager);
 std::swap(_M_invoker, __x._M_invoker);
      }
# 575 "/usr/include/c++/15.1.1/bits/std_function.h" 3
      explicit operator bool() const noexcept
      { return !_M_empty(); }
# 588 "/usr/include/c++/15.1.1/bits/std_function.h" 3
      _Res
      operator()(_ArgTypes... __args) const
      {
 if (_M_empty())
   __throw_bad_function_call();
 return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
      }
# 607 "/usr/include/c++/15.1.1/bits/std_function.h" 3
      const type_info&
      target_type() const noexcept
      {
 if (_M_manager)
   {
     _Any_data __typeinfo_result;
     _M_manager(__typeinfo_result, _M_functor, __get_type_info);
     if (auto __ti = __typeinfo_result._M_access<const type_info*>())
       return *__ti;
   }
 return typeid(void);
      }
# 632 "/usr/include/c++/15.1.1/bits/std_function.h" 3
      template<typename _Functor>
 _Functor*
 target() noexcept
 {
   const function* __const_this = this;
   const _Functor* __func = __const_this->template target<_Functor>();


   return *const_cast<_Functor**>(&__func);
 }

      template<typename _Functor>
 const _Functor*
 target() const noexcept
 {
   if constexpr (is_object<_Functor>::value)
     {


       using _Handler = _Target_handler<_Res(_ArgTypes...), _Functor>;

       if (_M_manager == &_Handler::_M_manager

    || (_M_manager && typeid(_Functor) == target_type())

   )
  {
    _Any_data __ptr;
    _M_manager(__ptr, _M_functor, __get_functor_ptr);
    return __ptr._M_access<const _Functor*>();
  }
     }
   return nullptr;
 }


    private:
      using _Invoker_type = _Res (*)(const _Any_data&, _ArgTypes&&...);
      _Invoker_type _M_invoker = nullptr;
    };


  template<typename>
    struct __function_guide_helper
    { };

  template<typename _Res, typename _Tp, bool _Nx, typename... _Args>
    struct __function_guide_helper<
      _Res (_Tp::*) (_Args...) noexcept(_Nx)
    >
    { using type = _Res(_Args...); };

  template<typename _Res, typename _Tp, bool _Nx, typename... _Args>
    struct __function_guide_helper<
      _Res (_Tp::*) (_Args...) & noexcept(_Nx)
    >
    { using type = _Res(_Args...); };

  template<typename _Res, typename _Tp, bool _Nx, typename... _Args>
    struct __function_guide_helper<
      _Res (_Tp::*) (_Args...) const noexcept(_Nx)
    >
    { using type = _Res(_Args...); };

  template<typename _Res, typename _Tp, bool _Nx, typename... _Args>
    struct __function_guide_helper<
      _Res (_Tp::*) (_Args...) const & noexcept(_Nx)
    >
    { using type = _Res(_Args...); };
# 725 "/usr/include/c++/15.1.1/bits/std_function.h" 3
  template<typename _Fn, typename _Op>
    using __function_guide_t = typename __function_guide_helper<_Op>::type;


  template<typename _Res, typename... _ArgTypes>
    function(_Res(*)(_ArgTypes...)) -> function<_Res(_ArgTypes...)>;

  template<typename _Fn, typename _Signature
      = __function_guide_t<_Fn, decltype(&_Fn::operator())>>
    function(_Fn) -> function<_Signature>;
# 745 "/usr/include/c++/15.1.1/bits/std_function.h" 3
  template<typename _Res, typename... _Args>
    inline bool
    operator==(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
    { return !static_cast<bool>(__f); }



  template<typename _Res, typename... _Args>
    inline bool
    operator==(nullptr_t, const function<_Res(_Args...)>& __f) noexcept
    { return !static_cast<bool>(__f); }







  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
    { return static_cast<bool>(__f); }


  template<typename _Res, typename... _Args>
    inline bool
    operator!=(nullptr_t, const function<_Res(_Args...)>& __f) noexcept
    { return static_cast<bool>(__f); }
# 784 "/usr/include/c++/15.1.1/bits/std_function.h" 3
  template<typename _Res, typename... _Args>
    inline void
    swap(function<_Res(_Args...)>& __x, function<_Res(_Args...)>& __y) noexcept
    { __x.swap(__y); }


  namespace __detail::__variant
  {
    template<typename> struct _Never_valueless_alt;



    template<typename _Signature>
      struct _Never_valueless_alt<std::function<_Signature>>
      : std::true_type
      { };
  }



}
# 62 "/usr/include/c++/15.1.1/functional" 2 3





# 1 "/usr/include/c++/15.1.1/array" 1 3
# 30 "/usr/include/c++/15.1.1/array" 3
#define _GLIBCXX_ARRAY 1
# 40 "/usr/include/c++/15.1.1/array" 3
# 1 "/usr/include/c++/15.1.1/compare" 1 3
# 31 "/usr/include/c++/15.1.1/compare" 3
#define _COMPARE 





#define __glibcxx_want_three_way_comparison 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 39 "/usr/include/c++/15.1.1/compare" 2 3
# 41 "/usr/include/c++/15.1.1/array" 2 3
# 50 "/usr/include/c++/15.1.1/array" 3
#define __glibcxx_want_array_constexpr 
#define __glibcxx_want_freestanding_array 
#define __glibcxx_want_nonmember_container_access 
#define __glibcxx_want_to_array 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 55 "/usr/include/c++/15.1.1/array" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, size_t _Nm>
    struct __array_traits
    {
      using _Type = _Tp[_Nm];
      using _Is_swappable = __is_swappable<_Tp>;
      using _Is_nothrow_swappable = __is_nothrow_swappable<_Tp>;
    };

 template<typename _Tp>
   struct __array_traits<_Tp, 0>
   {

     struct _Type
     {

       __attribute__((__always_inline__,__noreturn__))
       _Tp& operator[](size_t) const noexcept { __builtin_trap(); }


       __attribute__((__always_inline__))
       constexpr explicit operator _Tp*() const noexcept { return nullptr; }
     };

     using _Is_swappable = true_type;
     using _Is_nothrow_swappable = true_type;
   };
# 101 "/usr/include/c++/15.1.1/array" 3
  template<typename _Tp, std::size_t _Nm>
    struct array
    {
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef value_type* iterator;
      typedef const value_type* const_iterator;
      typedef std::size_t size_type;
      typedef std::ptrdiff_t difference_type;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;


      typename __array_traits<_Tp, _Nm>::_Type _M_elems;




      void
      fill(const value_type& __u)
      { std::fill_n(begin(), size(), __u); }

      void
      swap(array& __other)
      noexcept(__array_traits<_Tp, _Nm>::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }


      [[__gnu__::__const__, __nodiscard__]]
      constexpr iterator
      begin() noexcept
      { return iterator(data()); }

      [[__nodiscard__]]
      constexpr const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      [[__gnu__::__const__, __nodiscard__]]
      constexpr iterator
      end() noexcept
      { return iterator(data() + _Nm); }

      [[__nodiscard__]]
      constexpr const_iterator
      end() const noexcept
      { return const_iterator(data() + _Nm); }

      [[__gnu__::__const__, __nodiscard__]]
      constexpr reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

      [[__nodiscard__]]
      constexpr const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

      [[__gnu__::__const__, __nodiscard__]]
      constexpr reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

      [[__nodiscard__]]
      constexpr const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }

      [[__nodiscard__]]
      constexpr const_iterator
      cbegin() const noexcept
      { return const_iterator(data()); }

      [[__nodiscard__]]
      constexpr const_iterator
      cend() const noexcept
      { return const_iterator(data() + _Nm); }

      [[__nodiscard__]]
      constexpr const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }

      [[__nodiscard__]]
      constexpr const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }


      [[__nodiscard__, __gnu__::__const__, __gnu__::__always_inline__]]
      constexpr size_type
      size() const noexcept { return _Nm; }

      [[__nodiscard__, __gnu__::__const__, __gnu__::__always_inline__]]
      constexpr size_type
      max_size() const noexcept { return _Nm; }

      [[__nodiscard__, __gnu__::__const__, __gnu__::__always_inline__]]
      constexpr bool
      empty() const noexcept { return size() == 0; }


      [[__nodiscard__]]
      constexpr reference
      operator[](size_type __n) noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(__n < this->size())) std::__glibcxx_assert_fail(); } while (false);
 return _M_elems[__n];
      }

      [[__nodiscard__]]
      constexpr const_reference
      operator[](size_type __n) const noexcept
      {

 do { if (std::__is_constant_evaluated() && !bool(__n < this->size())) std::__glibcxx_assert_fail(); } while (false);

 return _M_elems[__n];
      }

      constexpr reference
      at(size_type __n)
      {
 if (__n >= _Nm)
   std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) " ">= _Nm (which is %zu)")
                                 ,
     __n, _Nm);
 return _M_elems[__n];
      }

      constexpr const_reference
      at(size_type __n) const
      {


 return __n < _Nm ? _M_elems[__n]
   : (std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) " ">= _Nm (which is %zu)")
                                    ,
        __n, _Nm),
      _M_elems[__n]);
      }

      [[__nodiscard__]]
      constexpr reference
      front() noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return _M_elems[(size_type)0];
      }

      [[__nodiscard__]]
      constexpr const_reference
      front() const noexcept
      {

 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);

 return _M_elems[(size_type)0];
      }

      [[__nodiscard__]]
      constexpr reference
      back() noexcept
      {
 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);
 return _M_elems[_Nm - 1];
      }

      [[__nodiscard__]]
      constexpr const_reference
      back() const noexcept
      {

 do { if (std::__is_constant_evaluated() && !bool(!this->empty())) std::__glibcxx_assert_fail(); } while (false);

 return _M_elems[_Nm - 1];
      }

      [[__nodiscard__, __gnu__::__const__, __gnu__::__always_inline__]]
      constexpr pointer
      data() noexcept
      { return static_cast<pointer>(_M_elems); }

      [[__nodiscard__]]
      constexpr const_pointer
      data() const noexcept
      { return static_cast<const_pointer>(_M_elems); }
    };


  template<typename _Tp, typename... _Up>
    array(_Tp, _Up...)
      -> array<enable_if_t<(is_same_v<_Tp, _Up> && ...), _Tp>,
        1 + sizeof...(_Up)>;



  template<typename _Tp, std::size_t _Nm>
    [[__nodiscard__]]
   
    inline bool
    operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return std::__equal_aux1(__one.begin(), __one.end(), __two.begin()); }
# 330 "/usr/include/c++/15.1.1/array" 3
  template<typename _Tp, std::size_t _Nm>
    [[__nodiscard__]]
   
    inline bool
    operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one == __two); }

  template<typename _Tp, std::size_t _Nm>
    [[__nodiscard__]]
   
    inline bool
    operator<(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)
    {
      return std::lexicographical_compare(__a.begin(), __a.end(),
       __b.begin(), __b.end());
    }

  template<typename _Tp, std::size_t _Nm>
    [[__nodiscard__]]
   
    inline bool
    operator>(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return __two < __one; }

  template<typename _Tp, std::size_t _Nm>
    [[__nodiscard__]]
   
    inline bool
    operator<=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one > __two); }

  template<typename _Tp, std::size_t _Nm>
    [[__nodiscard__]]
   
    inline bool
    operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one < __two); }



  template<typename _Tp, std::size_t _Nm>
   
    inline


    __enable_if_t<__array_traits<_Tp, _Nm>::_Is_swappable::value>



    swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)
    noexcept(noexcept(__one.swap(__two)))
    { __one.swap(__two); }


  template<typename _Tp, std::size_t _Nm>
    __enable_if_t<!__array_traits<_Tp, _Nm>::_Is_swappable::value>
    swap(array<_Tp, _Nm>&, array<_Tp, _Nm>&) = delete;


  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    [[__nodiscard__]]
    constexpr _Tp&
    get(array<_Tp, _Nm>& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return __arr._M_elems[_Int];
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    [[__nodiscard__]]
    constexpr _Tp&&
    get(array<_Tp, _Nm>&& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::move(std::get<_Int>(__arr));
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    [[__nodiscard__]]
    constexpr const _Tp&
    get(const array<_Tp, _Nm>& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return __arr._M_elems[_Int];
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    [[__nodiscard__]]
    constexpr const _Tp&&
    get(const array<_Tp, _Nm>&& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::move(std::get<_Int>(__arr));
    }
# 492 "/usr/include/c++/15.1.1/array" 3
  template<typename _Tp, size_t _Nm>
    struct tuple_size<array<_Tp, _Nm>>
    : public integral_constant<size_t, _Nm> { };


  template<size_t _Ind, typename _Tp, size_t _Nm>
    struct tuple_element<_Ind, array<_Tp, _Nm>>
    {
      static_assert(_Ind < _Nm, "array index is in range");
      using type = _Tp;
    };


  template<typename _Tp, size_t _Nm>
    inline constexpr size_t tuple_size_v<array<_Tp, _Nm>> = _Nm;

  template<typename _Tp, size_t _Nm>
    inline constexpr size_t tuple_size_v<const array<_Tp, _Nm>> = _Nm;


  template<typename _Tp, size_t _Nm>
    struct __is_tuple_like_impl<array<_Tp, _Nm>> : true_type
    { };


}
# 68 "/usr/include/c++/15.1.1/functional" 2 3
# 79 "/usr/include/c++/15.1.1/functional" 3
#define __glibcxx_want_boyer_moore_searcher 
#define __glibcxx_want_bind_front 
#define __glibcxx_want_bind_back 
#define __glibcxx_want_constexpr_functional 
#define __glibcxx_want_invoke 
#define __glibcxx_want_invoke_r 
#define __glibcxx_want_move_only_function 
#define __glibcxx_want_not_fn 
#define __glibcxx_want_ranges 
#define __glibcxx_want_reference_wrapper 
#define __glibcxx_want_transparent_operators 
# 1 "/usr/include/c++/15.1.1/bits/version.h" 1 3
# 61 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_incomplete_container_elements
# 71 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_uncaught_exceptions
# 81 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_allocator_traits_is_always_equal
# 91 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_null_pointer
# 101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_result_of_sfinae
# 116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_arrays
# 126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_swappable
# 136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_void_t
# 146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_enable_shared_from_this



#define __glibcxx_math_spec_funcs 201003L





#undef __glibcxx_want_math_spec_funcs
# 166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_coroutine
# 176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_exchange_function
# 186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_sequence
# 196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integral_constant_callable
# 206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_final
# 216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_reverse_iterator
# 226 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_null_iterators
# 236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transformation_trait_aliases
# 246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_transparent_operators
# 256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_element_t
# 266 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuples_by_type
# 276 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_robust_nonmodifying_seq_ops
# 291 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_chars
# 301 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono_udls
# 311 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_complex_udls
# 321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_associative_lookup
# 331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_unique
# 341 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_quoted_string_io
# 351 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_timed_mutex
# 361 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_udls
# 371 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_addressof_constexpr
# 381 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_any
# 391 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_apply
# 401 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_as_const
# 411 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_is_always_lock_free
# 421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bool_constant
# 431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byte
# 441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_has_unique_object_representations
# 451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hardware_interference_size
# 461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke
# 471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_aggregate
# 481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_invocable
# 491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_launder
# 501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_logical_traits
# 511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_from_tuple
# 521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_not_fn
# 531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_trait_variable_templates
# 551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_variant
# 561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_lcm
# 571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd
# 581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_gcd_lcm
# 596 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_raw_memory_algorithms
# 611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_array_constexpr
# 621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_nonmember_container_access
# 631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_clamp
# 641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_sample
# 651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_boyer_moore_searcher
# 666 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_chrono
# 676 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_execution
# 686 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_filesystem
# 696 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_hypot
# 706 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_map_try_emplace
# 716 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_special_functions
# 731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_memory_resource
# 741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_node_extract
# 751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_parallel_algorithm
# 761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_scoped_lock
# 771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_mutex
# 781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shared_ptr_weak_type
# 796 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_view
# 806 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unordered_map_try_emplace
# 816 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_assume_aligned
# 826 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_flag_test
# 836 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_float
# 846 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_lock_free_type_aliases
# 856 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_ref
# 866 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_value_initialization
# 876 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_front
# 886 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bind_back
# 896 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_starts_ends_with
# 906 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bit_cast
# 916 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bitops
# 926 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_bounded_array_traits
# 936 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_concepts
# 956 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_optional
# 966 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_destroying_delete
# 976 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string_view
# 986 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_endian
# 996 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_int_pow2
# 1006 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_integer_comparison_functions
# 1016 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_constant_evaluated
# 1031 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_char_traits
# 1041 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_layout_compatible
# 1051 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_nothrow_convertible
# 1061 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_pointer_interconvertible
# 1071 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_math_constants
# 1081 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_make_obj_using_allocator
# 1091 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_remove_cvref
# 1101 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_source_location
# 1116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span
# 1126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ssize
# 1136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_three_way_comparison
# 1146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_address
# 1156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_array
# 1166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_type_identity
# 1176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unwrap_ref
# 1186 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_iterator
# 1196 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_interpolate
# 1206 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_utility
# 1216 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_shift
# 1236 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges
# 1246 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_numeric
# 1256 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_functional
# 1271 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_algorithms
# 1281 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_tuple
# 1296 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_memory
# 1306 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_shared_ptr
# 1321 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_atomic_wait
# 1331 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_barrier
# 1346 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format
# 1356 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_uchar
# 1366 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_complex
# 1376 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_dynamic_alloc
# 1396 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_string
# 1406 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_vector
# 1421 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constrained_equality
# 1431 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_erase_if
# 1441 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generic_unordered_lookup
# 1451 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_jthread
# 1461 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_latch
# 1471 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_list_remove_return_type
# 1481 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_polymorphic_allocator
# 1491 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_iterator_concept
# 1501 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_semaphore
# 1511 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_smart_ptr_for_overwrite
# 1521 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_syncbuf
# 1531 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_byteswap
# 1541 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_charconv
# 1551 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_typeinfo
# 1561 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_expected
# 1571 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_format_ranges
# 1581 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_algorithm
# 1591 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_array
# 1601 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_cstring
# 1611 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_expected
# 1621 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_optional
# 1631 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_string_view
# 1641 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_freestanding_variant
# 1651 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_invoke_r
# 1661 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_scoped_enum
# 1671 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_from_temporary
# 1681 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_containers_ranges
# 1691 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_container
# 1701 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_zip
# 1711 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk
# 1721 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_slide
# 1731 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_chunk_by
# 1741 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_join_with
# 1751 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_repeat
# 1761 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_stride
# 1771 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cartesian_product
# 1781 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_rvalue
# 1791 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_as_const
# 1801 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_enumerate
# 1811 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_fold
# 1821 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_contains
# 1831 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_iota
# 1841 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_find_last
# 1851 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_bitset
# 1861 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stdatomic_h
# 1871 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_adaptor_iterator_pair_constructor
# 1881 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_map
# 1891 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_flat_set
# 1901 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_formatters
# 1911 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_forward_like
# 1921 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_generator
# 1931 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ios_noreplace
# 1941 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_move_only_function
# 1951 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_out_ptr
# 1961 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_print
# 1971 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_spanstream
# 1981 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_stacktrace
# 1991 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_contains
# 2001 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_string_resize_and_overwrite
# 2011 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_underlying
# 2026 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_tuple_like
# 2036 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_unreachable
# 2046 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_algorithm_default_value_type
# 2056 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_constexpr_new
# 2066 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_fstream_native_handle
# 2076 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_is_virtual_base_of
# 2086 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_cache_latest
# 2096 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_concat
# 2106 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ratio
# 2116 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_reference_wrapper
# 2126 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_saturation_arithmetic
# 2136 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_span_initializer_list
# 2146 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_text_encoding
# 2156 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_ranges_to_input
# 2166 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_to_string
# 2176 "/usr/include/c++/15.1.1/bits/version.h" 3
#undef __glibcxx_want_modules

#undef __glibcxx_want_all
# 91 "/usr/include/c++/15.1.1/functional" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{






  template<int _Num> struct _Placeholder { };
# 117 "/usr/include/c++/15.1.1/functional" 3
  template<typename _Callable, typename... _Args>
    inline invoke_result_t<_Callable, _Args...>
    invoke(_Callable&& __fn, _Args&&... __args)
    noexcept(is_nothrow_invocable_v<_Callable, _Args...>)
    {
      return std::__invoke(std::forward<_Callable>(__fn),
      std::forward<_Args>(__args)...);
    }
# 150 "/usr/include/c++/15.1.1/functional" 3
  template<typename _MemFunPtr,
    bool __is_mem_fn = is_member_function_pointer<_MemFunPtr>::value>
    class _Mem_fn_base
    : public _Mem_fn_traits<_MemFunPtr>::__maybe_type
    {
      using _Traits = _Mem_fn_traits<_MemFunPtr>;

      using _Arity = typename _Traits::__arity;
      using _Varargs = typename _Traits::__vararg;

      template<typename _Func, typename... _BoundArgs>
 friend struct _Bind_check_arity;

      _MemFunPtr _M_pmf;

    public:

      using result_type = typename _Traits::__result_type;

      explicit constexpr
      _Mem_fn_base(_MemFunPtr __pmf) noexcept : _M_pmf(__pmf) { }

      template<typename... _Args>

 auto
 operator()(_Args&&... __args) const
 noexcept(noexcept(
       std::__invoke(_M_pmf, std::forward<_Args>(__args)...)))
 -> decltype(std::__invoke(_M_pmf, std::forward<_Args>(__args)...))
 { return std::__invoke(_M_pmf, std::forward<_Args>(__args)...); }
    };


  template<typename _MemObjPtr>
    class _Mem_fn_base<_MemObjPtr, false>
    {
      using _Arity = integral_constant<size_t, 0>;
      using _Varargs = false_type;

      template<typename _Func, typename... _BoundArgs>
 friend struct _Bind_check_arity;

      _MemObjPtr _M_pm;

    public:
      explicit constexpr
      _Mem_fn_base(_MemObjPtr __pm) noexcept : _M_pm(__pm) { }

      template<typename _Tp>

 auto
 operator()(_Tp&& __obj) const
 noexcept(noexcept(std::__invoke(_M_pm, std::forward<_Tp>(__obj))))
 -> decltype(std::__invoke(_M_pm, std::forward<_Tp>(__obj)))
 { return std::__invoke(_M_pm, std::forward<_Tp>(__obj)); }
    };

  template<typename _MemberPointer>
    struct _Mem_fn;

  template<typename _Res, typename _Class>
    struct _Mem_fn<_Res _Class::*>
    : _Mem_fn_base<_Res _Class::*>
    {
      using _Mem_fn_base<_Res _Class::*>::_Mem_fn_base;
    };
# 243 "/usr/include/c++/15.1.1/functional" 3
  template<typename _Tp, typename _Class>
   
    inline _Mem_fn<_Tp _Class::*>
    mem_fn(_Tp _Class::* __pm) noexcept
    {
      return _Mem_fn<_Tp _Class::*>(__pm);
    }
# 262 "/usr/include/c++/15.1.1/functional" 3
  template<typename _Tp>
    struct is_bind_expression
    : public false_type { };
# 274 "/usr/include/c++/15.1.1/functional" 3
  template<typename _Tp>
    struct is_placeholder
    : public integral_constant<int, 0>
    { };


  template <typename _Tp> inline constexpr bool is_bind_expression_v
    = is_bind_expression<_Tp>::value;
  template <typename _Tp> inline constexpr int is_placeholder_v
    = is_placeholder<_Tp>::value;







  namespace placeholders
  {





#define _GLIBCXX_PLACEHOLDER inline




    inline const _Placeholder<1> _1;
    inline const _Placeholder<2> _2;
    inline const _Placeholder<3> _3;
    inline const _Placeholder<4> _4;
    inline const _Placeholder<5> _5;
    inline const _Placeholder<6> _6;
    inline const _Placeholder<7> _7;
    inline const _Placeholder<8> _8;
    inline const _Placeholder<9> _9;
    inline const _Placeholder<10> _10;
    inline const _Placeholder<11> _11;
    inline const _Placeholder<12> _12;
    inline const _Placeholder<13> _13;
    inline const _Placeholder<14> _14;
    inline const _Placeholder<15> _15;
    inline const _Placeholder<16> _16;
    inline const _Placeholder<17> _17;
    inline const _Placeholder<18> _18;
    inline const _Placeholder<19> _19;
    inline const _Placeholder<20> _20;
    inline const _Placeholder<21> _21;
    inline const _Placeholder<22> _22;
    inline const _Placeholder<23> _23;
    inline const _Placeholder<24> _24;
    inline const _Placeholder<25> _25;
    inline const _Placeholder<26> _26;
    inline const _Placeholder<27> _27;
    inline const _Placeholder<28> _28;
    inline const _Placeholder<29> _29;

#undef _GLIBCXX_PLACEHOLDER
  }







  template<int _Num>
    struct is_placeholder<_Placeholder<_Num> >
    : public integral_constant<int, _Num>
    { };

  template<int _Num>
    struct is_placeholder<const _Placeholder<_Num> >
    : public integral_constant<int, _Num>
    { };




  template<std::size_t __i, typename _Tuple>
    using _Safe_tuple_element_t
      = typename enable_if<(__i < tuple_size<_Tuple>::value),
      tuple_element<__i, _Tuple>>::type::type;
# 371 "/usr/include/c++/15.1.1/functional" 3
  template<typename _Arg,
    bool _IsBindExp = is_bind_expression<_Arg>::value,
    bool _IsPlaceholder = (is_placeholder<_Arg>::value > 0)>
    class _Mu;






  template<typename _Tp>
    class _Mu<reference_wrapper<_Tp>, false, false>
    {
    public:




      template<typename _CVRef, typename _Tuple>

 _Tp&
 operator()(_CVRef& __arg, _Tuple&) const volatile
 { return __arg.get(); }
    };







  template<typename _Arg>
    class _Mu<_Arg, true, false>
    {
    public:
      template<typename _CVArg, typename... _Args>

 auto
 operator()(_CVArg& __arg,
     tuple<_Args...>& __tuple) const volatile
 -> decltype(__arg(declval<_Args>()...))
 {

   typedef typename _Build_index_tuple<sizeof...(_Args)>::__type
     _Indexes;
   return this->__call(__arg, __tuple, _Indexes());
 }

    private:


      template<typename _CVArg, typename... _Args, std::size_t... _Indexes>

 auto
 __call(_CVArg& __arg, tuple<_Args...>& __tuple,
        const _Index_tuple<_Indexes...>&) const volatile
 -> decltype(__arg(declval<_Args>()...))
 {
   return __arg(std::get<_Indexes>(std::move(__tuple))...);
 }
    };






  template<typename _Arg>
    class _Mu<_Arg, false, true>
    {
    public:
      template<typename _Tuple>

 _Safe_tuple_element_t<(is_placeholder<_Arg>::value - 1), _Tuple>&&
 operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 {
   return
     ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
 }
    };






  template<typename _Arg>
    class _Mu<_Arg, false, false>
    {
    public:
      template<typename _CVArg, typename _Tuple>

 _CVArg&&
 operator()(_CVArg&& __arg, _Tuple&) const volatile
 { return std::forward<_CVArg>(__arg); }
    };


  template<std::size_t _Ind, typename... _Tp>
    inline auto
    __volget(volatile tuple<_Tp...>& __tuple)
    -> __tuple_element_t<_Ind, tuple<_Tp...>> volatile&
    { return std::get<_Ind>(const_cast<tuple<_Tp...>&>(__tuple)); }


  template<std::size_t _Ind, typename... _Tp>
    inline auto
    __volget(const volatile tuple<_Tp...>& __tuple)
    -> __tuple_element_t<_Ind, tuple<_Tp...>> const volatile&
    { return std::get<_Ind>(const_cast<const tuple<_Tp...>&>(__tuple)); }




#define _GLIBCXX_VOLATILE_BIND 


#define _GLIBCXX_DEPR_BIND [[deprecated("std::bind does not support volatile in C++17")]]







  template<typename _Signature>
    class _Bind;

   template<typename _Functor, typename... _Bound_args>
    class _Bind<_Functor(_Bound_args...)>
    : public _Weak_result_type<_Functor>
    {
      typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type
 _Bound_indexes;

      _Functor _M_f;
      tuple<_Bound_args...> _M_bound_args;


      template<typename _Result, typename... _Args, std::size_t... _Indexes>

 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 {
   return std::__invoke(_M_f,
       _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
       );
 }


      template<typename _Result, typename... _Args, std::size_t... _Indexes>

 _Result
 __call_c(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const
 {
   return std::__invoke(_M_f,
       _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...
       );
 }



      template<typename _Result, typename... _Args, std::size_t... _Indexes>
 _Result
 __call_v(tuple<_Args...>&& __args,
   _Index_tuple<_Indexes...>) volatile
 {
   return std::__invoke(_M_f,
       _Mu<_Bound_args>()(__volget<_Indexes>(_M_bound_args), __args)...
       );
 }


      template<typename _Result, typename... _Args, std::size_t... _Indexes>
 _Result
 __call_c_v(tuple<_Args...>&& __args,
     _Index_tuple<_Indexes...>) const volatile
 {
   return std::__invoke(_M_f,
       _Mu<_Bound_args>()(__volget<_Indexes>(_M_bound_args), __args)...
       );
 }


      template<typename _BoundArg, typename _CallArgs>
 using _Mu_type = decltype(
     _Mu<typename remove_cv<_BoundArg>::type>()(
       std::declval<_BoundArg&>(), std::declval<_CallArgs&>()) );

      template<typename _Fn, typename _CallArgs, typename... _BArgs>
 using _Res_type_impl
   = __invoke_result_t<_Fn&, _Mu_type<_BArgs, _CallArgs>&&...>;

      template<typename _CallArgs>
 using _Res_type = _Res_type_impl<_Functor, _CallArgs, _Bound_args...>;

      template<typename _CallArgs>
 using __dependent = typename
   enable_if<bool(tuple_size<_CallArgs>::value+1), _Functor>::type;

      template<typename _CallArgs, template<class> class __cv_quals>
 using _Res_type_cv = _Res_type_impl<
   typename __cv_quals<__dependent<_CallArgs>>::type,
   _CallArgs,
   typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
 explicit
 _Bind(const _Functor& __f, _Args&&... __args)
 : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      template<typename... _Args>
 explicit
 _Bind(_Functor&& __f, _Args&&... __args)
 : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;


      template<typename... _Args,
        typename _Result = _Res_type<tuple<_Args...>>>

 _Result
 operator()(_Args&&... __args)
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args,
        typename _Result = _Res_type_cv<tuple<_Args...>, add_const>>

 _Result
 operator()(_Args&&... __args) const
 {
   return this->__call_c<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }



      template<typename... _Args,
        typename _Result = _Res_type_cv<tuple<_Args...>, add_volatile>>
 [[deprecated("std::bind does not support volatile in C++17")]]
 _Result
 operator()(_Args&&... __args) volatile
 {
   return this->__call_v<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args,
        typename _Result = _Res_type_cv<tuple<_Args...>, add_cv>>
 [[deprecated("std::bind does not support volatile in C++17")]]
 _Result
 operator()(_Args&&... __args) const volatile
 {
   return this->__call_c_v<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }

    };


  template<typename _Result, typename _Signature>
    class _Bind_result;

  template<typename _Result, typename _Functor, typename... _Bound_args>
    class _Bind_result<_Result, _Functor(_Bound_args...)>
    {
      typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type
 _Bound_indexes;

      _Functor _M_f;
      tuple<_Bound_args...> _M_bound_args;


      template<typename _Res, typename... _Args, std::size_t... _Indexes>

 _Res
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 {
   return std::__invoke_r<_Res>(_M_f, _Mu<_Bound_args>()
        (std::get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>

 _Res
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const
 {
   return std::__invoke_r<_Res>(_M_f, _Mu<_Bound_args>()
        (std::get<_Indexes>(_M_bound_args), __args)...);
 }



      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 _Res
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) volatile
 {
   return std::__invoke_r<_Res>(_M_f, _Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 _Res
 __call(tuple<_Args...>&& __args,
        _Index_tuple<_Indexes...>) const volatile
 {
   return std::__invoke_r<_Res>(_M_f, _Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


    public:
      typedef _Result result_type;

      template<typename... _Args>
 explicit
 _Bind_result(const _Functor& __f, _Args&&... __args)
 : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      template<typename... _Args>
 explicit
 _Bind_result(_Functor&& __f, _Args&&... __args)
 : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      _Bind_result(const _Bind_result&) = default;
      _Bind_result(_Bind_result&&) = default;


      template<typename... _Args>

 result_type
 operator()(_Args&&... __args)
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>

 result_type
 operator()(_Args&&... __args) const
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }



      template<typename... _Args>
 [[deprecated("std::bind does not support volatile in C++17")]]
 result_type
 operator()(_Args&&... __args) volatile
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 [[deprecated("std::bind does not support volatile in C++17")]]
 result_type
 operator()(_Args&&... __args) const volatile
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }




    };

#undef _GLIBCXX_VOLATILE_BIND
#undef _GLIBCXX_DEPR_BIND





  template<typename _Signature>
    struct is_bind_expression<_Bind<_Signature> >
    : public true_type { };





  template<typename _Signature>
    struct is_bind_expression<const _Bind<_Signature> >
    : public true_type { };





  template<typename _Signature>
    struct is_bind_expression<volatile _Bind<_Signature> >
    : public true_type { };





  template<typename _Signature>
    struct is_bind_expression<const volatile _Bind<_Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<_Bind_result<_Result, _Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<const _Bind_result<_Result, _Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<volatile _Bind_result<_Result, _Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<const volatile _Bind_result<_Result, _Signature>>
    : public true_type { };

  template<typename _Func, typename... _BoundArgs>
    struct _Bind_check_arity { };

  template<typename _Ret, typename... _Args, typename... _BoundArgs>
    struct _Bind_check_arity<_Ret (*)(_Args...), _BoundArgs...>
    {
      static_assert(sizeof...(_BoundArgs) == sizeof...(_Args),
                   "Wrong number of arguments for function");
    };

  template<typename _Ret, typename... _Args, typename... _BoundArgs>
    struct _Bind_check_arity<_Ret (*)(_Args..., ...), _BoundArgs...>
    {
      static_assert(sizeof...(_BoundArgs) >= sizeof...(_Args),
                   "Wrong number of arguments for function");
    };

  template<typename _Tp, typename _Class, typename... _BoundArgs>
    struct _Bind_check_arity<_Tp _Class::*, _BoundArgs...>
    {
      using _Arity = typename _Mem_fn<_Tp _Class::*>::_Arity;
      using _Varargs = typename _Mem_fn<_Tp _Class::*>::_Varargs;
      static_assert(_Varargs::value
      ? sizeof...(_BoundArgs) >= _Arity::value + 1
      : sizeof...(_BoundArgs) == _Arity::value + 1,
      "Wrong number of arguments for pointer-to-member");
    };




  template<typename _Tp, typename _Tp2 = typename decay<_Tp>::type>
    using __is_socketlike = __or_<is_integral<_Tp2>, is_enum<_Tp2>>;

  template<bool _SocketLike, typename _Func, typename... _BoundArgs>
    struct _Bind_helper
    : _Bind_check_arity<typename decay<_Func>::type, _BoundArgs...>
    {
      typedef typename decay<_Func>::type __func_type;
      typedef _Bind<__func_type(typename decay<_BoundArgs>::type...)> type;
    };




  template<typename _Func, typename... _BoundArgs>
    struct _Bind_helper<true, _Func, _BoundArgs...>
    { };






  template<typename _Func, typename... _BoundArgs>
    inline typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
       std::forward<_BoundArgs>(__args)...);
    }

  template<typename _Result, typename _Func, typename... _BoundArgs>
    struct _Bindres_helper
    : _Bind_check_arity<typename decay<_Func>::type, _BoundArgs...>
    {
      typedef typename decay<_Func>::type __functor_type;
      typedef _Bind_result<_Result,
      __functor_type(typename decay<_BoundArgs>::type...)>
 type;
    };






  template<typename _Result, typename _Func, typename... _BoundArgs>
    inline
    typename _Bindres_helper<_Result, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
    {
      typedef _Bindres_helper<_Result, _Func, _BoundArgs...> __helper_type;
      return typename __helper_type::type(std::forward<_Func>(__f),
       std::forward<_BoundArgs>(__args)...);
    }
# 1123 "/usr/include/c++/15.1.1/functional" 3
  template<typename _Fn>
    class _Not_fn
    {
      template<typename _Fn2, typename... _Args>
 using __inv_res_t = typename __invoke_result<_Fn2, _Args...>::type;

      template<typename _Tp>
 static decltype(!std::declval<_Tp>())
 _S_not() noexcept(noexcept(!std::declval<_Tp>()));

    public:
      template<typename _Fn2>
 constexpr
 _Not_fn(_Fn2&& __fn, int)
 : _M_fn(std::forward<_Fn2>(__fn)) { }

      _Not_fn(const _Not_fn& __fn) = default;
      _Not_fn(_Not_fn&& __fn) = default;
      ~_Not_fn() = default;




#define _GLIBCXX_NOT_FN_CALL_OP(_QUALS) template<typename... _Args, typename = enable_if_t<__is_invocable<_Fn _QUALS, _Args...>::value>> _GLIBCXX20_CONSTEXPR decltype(_S_not<__inv_res_t<_Fn _QUALS, _Args...>>()) operator()(_Args&&... __args) _QUALS noexcept(__is_nothrow_invocable<_Fn _QUALS, _Args...>::value && noexcept(_S_not<__inv_res_t<_Fn _QUALS, _Args...>>())) { return !std::__invoke(std::forward< _Fn _QUALS >(_M_fn), std::forward<_Args>(__args)...); } template<typename... _Args, typename = enable_if_t<!__is_invocable<_Fn _QUALS, _Args...>::value>> void operator()(_Args&&... __args) _QUALS = delete;
# 1163 "/usr/include/c++/15.1.1/functional" 3
      template<typename... _Args, typename = enable_if_t<__is_invocable<_Fn &, _Args...>::value>> decltype(_S_not<__inv_res_t<_Fn &, _Args...>>()) operator()(_Args&&... __args) & noexcept(__is_nothrow_invocable<_Fn &, _Args...>::value && noexcept(_S_not<__inv_res_t<_Fn &, _Args...>>())) { return !std::__invoke(std::forward< _Fn & >(_M_fn), std::forward<_Args>(__args)...); } template<typename... _Args, typename = enable_if_t<!__is_invocable<_Fn &, _Args...>::value>> void operator()(_Args&&... __args) & = delete;
      template<typename... _Args, typename = enable_if_t<__is_invocable<_Fn const &, _Args...>::value>> decltype(_S_not<__inv_res_t<_Fn const &, _Args...>>()) operator()(_Args&&... __args) const & noexcept(__is_nothrow_invocable<_Fn const &, _Args...>::value && noexcept(_S_not<__inv_res_t<_Fn const &, _Args...>>())) { return !std::__invoke(std::forward< _Fn const & >(_M_fn), std::forward<_Args>(__args)...); } template<typename... _Args, typename = enable_if_t<!__is_invocable<_Fn const &, _Args...>::value>> void operator()(_Args&&... __args) const & = delete;
      template<typename... _Args, typename = enable_if_t<__is_invocable<_Fn &&, _Args...>::value>> decltype(_S_not<__inv_res_t<_Fn &&, _Args...>>()) operator()(_Args&&... __args) && noexcept(__is_nothrow_invocable<_Fn &&, _Args...>::value && noexcept(_S_not<__inv_res_t<_Fn &&, _Args...>>())) { return !std::__invoke(std::forward< _Fn && >(_M_fn), std::forward<_Args>(__args)...); } template<typename... _Args, typename = enable_if_t<!__is_invocable<_Fn &&, _Args...>::value>> void operator()(_Args&&... __args) && = delete;
      template<typename... _Args, typename = enable_if_t<__is_invocable<_Fn const &&, _Args...>::value>> decltype(_S_not<__inv_res_t<_Fn const &&, _Args...>>()) operator()(_Args&&... __args) const && noexcept(__is_nothrow_invocable<_Fn const &&, _Args...>::value && noexcept(_S_not<__inv_res_t<_Fn const &&, _Args...>>())) { return !std::__invoke(std::forward< _Fn const && >(_M_fn), std::forward<_Args>(__args)...); } template<typename... _Args, typename = enable_if_t<!__is_invocable<_Fn const &&, _Args...>::value>> void operator()(_Args&&... __args) const && = delete;
#undef _GLIBCXX_NOT_FN_CALL_OP

    private:
      _Fn _M_fn;
    };

  template<typename _Tp, typename _Pred>
    struct __is_byte_like : false_type { };

  template<typename _Tp>
    struct __is_byte_like<_Tp, equal_to<_Tp>>
    : __bool_constant<sizeof(_Tp) == 1 && is_integral<_Tp>::value> { };

  template<typename _Tp>
    struct __is_byte_like<_Tp, equal_to<void>>
    : __bool_constant<sizeof(_Tp) == 1 && is_integral<_Tp>::value> { };



  enum class byte : unsigned char;

  template<>
    struct __is_byte_like<byte, equal_to<byte>>
    : true_type { };

  template<>
    struct __is_byte_like<byte, equal_to<void>>
    : true_type { };
# 1211 "/usr/include/c++/15.1.1/functional" 3
  template<typename _Fn>
   
    inline auto
    not_fn(_Fn&& __fn)
    noexcept(std::is_nothrow_constructible<std::decay_t<_Fn>, _Fn&&>::value)
    {
      return _Not_fn<std::decay_t<_Fn>>{std::forward<_Fn>(__fn), 0};
    }





  template<typename _ForwardIterator1, typename _BinaryPredicate = equal_to<>>
    class default_searcher
    {
    public:
     
      default_searcher(_ForwardIterator1 __pat_first,
         _ForwardIterator1 __pat_last,
         _BinaryPredicate __pred = _BinaryPredicate())
      : _M_m(__pat_first, __pat_last, std::move(__pred))
      { }

      template<typename _ForwardIterator2>

 pair<_ForwardIterator2, _ForwardIterator2>
 operator()(_ForwardIterator2 __first, _ForwardIterator2 __last) const
 {
   _ForwardIterator2 __first_ret =
     std::search(__first, __last, std::get<0>(_M_m), std::get<1>(_M_m),
   std::get<2>(_M_m));
   auto __ret = std::make_pair(__first_ret, __first_ret);
   if (__ret.first != __last)
     std::advance(__ret.second, std::distance(std::get<0>(_M_m),
           std::get<1>(_M_m)));
   return __ret;
 }

    private:
      tuple<_ForwardIterator1, _ForwardIterator1, _BinaryPredicate> _M_m;
    };



  template<typename _Key, typename _Tp, typename _Hash, typename _Pred>
    struct __boyer_moore_map_base
    {
      template<typename _RAIter>
 __boyer_moore_map_base(_RAIter __pat, size_t __patlen,
          _Hash&& __hf, _Pred&& __pred)
 : _M_bad_char{ __patlen, std::move(__hf), std::move(__pred) }
 {
   if (__patlen > 0)
     for (__diff_type __i = 0; __i < __patlen - 1; ++__i)
       _M_bad_char[__pat[__i]] = __patlen - 1 - __i;
 }

      using __diff_type = _Tp;

      __diff_type
      _M_lookup(_Key __key, __diff_type __not_found) const
      {
 auto __iter = _M_bad_char.find(__key);
 if (__iter == _M_bad_char.end())
   return __not_found;
 return __iter->second;
      }

      _Pred
      _M_pred() const { return _M_bad_char.key_eq(); }

      std::unordered_map<_Key, _Tp, _Hash, _Pred> _M_bad_char;
    };

  template<typename _Tp, size_t _Len, typename _Pred>
    struct __boyer_moore_array_base
    {
      template<typename _RAIter, typename _Unused>
 __boyer_moore_array_base(_RAIter __pat, size_t __patlen,
     _Unused&&, _Pred&& __pred)
 : _M_bad_char{ array<_Tp, _Len>{}, std::move(__pred) }
 {
   std::get<0>(_M_bad_char).fill(__patlen);
   if (__patlen > 0)
     for (__diff_type __i = 0; __i < __patlen - 1; ++__i)
       {
  auto __ch = __pat[__i];
  using _UCh = make_unsigned_t<decltype(__ch)>;
  auto __uch = static_cast<_UCh>(__ch);
  std::get<0>(_M_bad_char)[__uch] = __patlen - 1 - __i;
       }
 }

      using __diff_type = _Tp;

      template<typename _Key>
 __diff_type
 _M_lookup(_Key __key, __diff_type __not_found) const
 {
   auto __ukey = static_cast<make_unsigned_t<_Key>>(__key);
   if (__ukey >= _Len)
     return __not_found;
   return std::get<0>(_M_bad_char)[__ukey];
 }

      const _Pred&
      _M_pred() const { return std::get<1>(_M_bad_char); }

      tuple<array<_Tp, _Len>, _Pred> _M_bad_char;
    };



  template<typename _RAIter, typename _Hash, typename _Pred,
           typename _Val = typename iterator_traits<_RAIter>::value_type,
    typename _Diff = typename iterator_traits<_RAIter>::difference_type>
    using __boyer_moore_base_t
      = __conditional_t<__is_byte_like<_Val, _Pred>::value,
   __boyer_moore_array_base<_Diff, 256, _Pred>,
   __boyer_moore_map_base<_Val, _Diff, _Hash, _Pred>>;

  template<typename _RAIter, typename _Hash
      = hash<typename iterator_traits<_RAIter>::value_type>,
    typename _BinaryPredicate = equal_to<>>
    class boyer_moore_searcher
    : __boyer_moore_base_t<_RAIter, _Hash, _BinaryPredicate>
    {
      using _Base = __boyer_moore_base_t<_RAIter, _Hash, _BinaryPredicate>;
      using typename _Base::__diff_type;

    public:
      boyer_moore_searcher(_RAIter __pat_first, _RAIter __pat_last,
      _Hash __hf = _Hash(),
      _BinaryPredicate __pred = _BinaryPredicate());

      template<typename _RandomAccessIterator2>
        pair<_RandomAccessIterator2, _RandomAccessIterator2>
 operator()(_RandomAccessIterator2 __first,
     _RandomAccessIterator2 __last) const;

    private:
      bool
      _M_is_prefix(_RAIter __word, __diff_type __len,
     __diff_type __pos)
      {
 const auto& __pred = this->_M_pred();
 __diff_type __suffixlen = __len - __pos;
 for (__diff_type __i = 0; __i < __suffixlen; ++__i)
   if (!__pred(__word[__i], __word[__pos + __i]))
     return false;
 return true;
      }

      __diff_type
      _M_suffix_length(_RAIter __word, __diff_type __len,
         __diff_type __pos)
      {
 const auto& __pred = this->_M_pred();
 __diff_type __i = 0;
 while (__pred(__word[__pos - __i], __word[__len - 1 - __i])
        && __i < __pos)
   {
     ++__i;
   }
 return __i;
      }

      template<typename _Tp>
 __diff_type
 _M_bad_char_shift(_Tp __c) const
 { return this->_M_lookup(__c, _M_pat_end - _M_pat); }

      _RAIter _M_pat;
      _RAIter _M_pat_end;
      std::vector<__diff_type> _M_good_suffix;
    };

  template<typename _RAIter, typename _Hash
      = hash<typename iterator_traits<_RAIter>::value_type>,
    typename _BinaryPredicate = equal_to<>>
    class boyer_moore_horspool_searcher
    : __boyer_moore_base_t<_RAIter, _Hash, _BinaryPredicate>
    {
      using _Base = __boyer_moore_base_t<_RAIter, _Hash, _BinaryPredicate>;
      using typename _Base::__diff_type;

    public:
      boyer_moore_horspool_searcher(_RAIter __pat,
        _RAIter __pat_end,
        _Hash __hf = _Hash(),
        _BinaryPredicate __pred
        = _BinaryPredicate())
      : _Base(__pat, __pat_end - __pat, std::move(__hf), std::move(__pred)),
 _M_pat(__pat), _M_pat_end(__pat_end)
      { }

      template<typename _RandomAccessIterator2>
        pair<_RandomAccessIterator2, _RandomAccessIterator2>
 operator()(_RandomAccessIterator2 __first,
     _RandomAccessIterator2 __last) const
 {
   const auto& __pred = this->_M_pred();
   auto __patlen = _M_pat_end - _M_pat;
   if (__patlen == 0)
     return std::make_pair(__first, __first);
   auto __len = __last - __first;
   while (__len >= __patlen)
     {
       for (auto __scan = __patlen - 1;
     __pred(__first[__scan], _M_pat[__scan]); --__scan)
  if (__scan == 0)
    return std::make_pair(__first, __first + __patlen);
       auto __shift = _M_bad_char_shift(__first[__patlen - 1]);
       __len -= __shift;
       __first += __shift;
     }
   return std::make_pair(__last, __last);
 }

    private:
      template<typename _Tp>
 __diff_type
 _M_bad_char_shift(_Tp __c) const
 { return this->_M_lookup(__c, _M_pat_end - _M_pat); }

      _RAIter _M_pat;
      _RAIter _M_pat_end;
    };

  template<typename _RAIter, typename _Hash, typename _BinaryPredicate>
    boyer_moore_searcher<_RAIter, _Hash, _BinaryPredicate>::
    boyer_moore_searcher(_RAIter __pat, _RAIter __pat_end,
    _Hash __hf, _BinaryPredicate __pred)
    : _Base(__pat, __pat_end - __pat, std::move(__hf), std::move(__pred)),
      _M_pat(__pat), _M_pat_end(__pat_end), _M_good_suffix(__pat_end - __pat)
    {
      auto __patlen = __pat_end - __pat;
      if (__patlen == 0)
 return;
      __diff_type __last_prefix = __patlen - 1;
      for (__diff_type __p = __patlen - 1; __p >= 0; --__p)
 {
   if (_M_is_prefix(__pat, __patlen, __p + 1))
     __last_prefix = __p + 1;
   _M_good_suffix[__p] = __last_prefix + (__patlen - 1 - __p);
 }
      for (__diff_type __p = 0; __p < __patlen - 1; ++__p)
 {
   auto __slen = _M_suffix_length(__pat, __patlen, __p);
   auto __pos = __patlen - 1 - __slen;
   if (!__pred(__pat[__p - __slen], __pat[__pos]))
     _M_good_suffix[__pos] = __patlen - 1 - __p + __slen;
 }
    }

  template<typename _RAIter, typename _Hash, typename _BinaryPredicate>
  template<typename _RandomAccessIterator2>
    pair<_RandomAccessIterator2, _RandomAccessIterator2>
    boyer_moore_searcher<_RAIter, _Hash, _BinaryPredicate>::
    operator()(_RandomAccessIterator2 __first,
        _RandomAccessIterator2 __last) const
    {
      auto __patlen = _M_pat_end - _M_pat;
      if (__patlen == 0)
 return std::make_pair(__first, __first);
      const auto& __pred = this->_M_pred();
      __diff_type __i = __patlen - 1;
      auto __stringlen = __last - __first;
      while (__i < __stringlen)
 {
   __diff_type __j = __patlen - 1;
   while (__j >= 0 && __pred(__first[__i], _M_pat[__j]))
     {
       --__i;
       --__j;
     }
   if (__j < 0)
     {
       const auto __match = __first + __i + 1;
       return std::make_pair(__match, __match + __patlen);
     }
   __i += std::max(_M_bad_char_shift(__first[__i]),
     _M_good_suffix[__j]);
 }
      return std::make_pair(__last, __last);
    }







}
# 10 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/machine.hpp" 2
# 18 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/machine.hpp"

# 18 "/home/smv/code/accelus/linuxcnc/src/emc/sterp/include/machine.hpp"
enum gpp::Unit : u8 { mm = 0, inch = 1, cm = 2 };
enum gpp::DistanceMode : u8 { absolute = 0, relative = 1 };
enum gpp::SpindleDirection : i8 {
  clockwise = 1,
  off = 0,
  counterclockwise = -1,
};

enum gpp::RetractMode : u8 { old_z = 0, r_plane = 1 };
enum gpp::MotionControlMode : u8 { exact_stop, exact_path, continuous };

enum gpp::FeedMode : u8 {
  inverse_time = 0,
  units_per_minute = 1,
  units_per_revolution = 2
};

enum gpp::SpindleMode : u8 { fixed_rpm = 0, constant_surface_speed = 1 };


#define g_command_len (100)
enum gpp::Command : u8 {
  move_linear = 1,
  move_rapid = 2,

  set_feed_rate = 3,
  set_feed_mode = 4,

  use_length_units = 5,
  use_distance_mode = 6,
  select_plane = 7,

  arc_feed = 8,

  dwell = 9,
  set_origin_offsets = 10,

  start_spindle_clockwise = 11,
  start_spindle_counterclockwise = 12,
  stop_spindle_turning = 13,
  set_spindle_speed = 14,
  set_spindle_mode = 15,

  select_tool = 16,
  change_tool = 17,

  program_stop = 18,
  optional_program_stop = 19,
  program_end = 20,

  use_tool_length_offset = 21,
  set_tool_length_offset = 22,

  set_wcs_coordinates = 23,
  use_workspace = 24,

  set_retract_mode = 25,
  set_motion_control_mode = 26,


  write_parameter_to_file = 27,
  write_parameters_to_file = 28,

  _get_hal_parameter = 29,

  no_command = 0,
};

enum gpp::Plane : u8 {
  plane_xy = 0,
  plane_yz = 1,
  plane_xz = 2,
};

struct gpp::Tool {
  i64 pocket;
  i64 fms;
  f64 tlo;
  f64 diam;
  i64 holder;
  std::string description;
};
std::ostream &operator<<(std::ostream &os, const gpp::Tool &tool);

struct gpp::Vec3D {
  f64 x, y, z;
  Vec3D operator+(const Vec3D &rhs);
  Vec3D operator-(const Vec3D &rhs);
  Vec3D operator*(f64 scalar);
  bool operator==(const Vec3D &rhs);
  f64 dot(const Vec3D &rhs);
  Vec3D cross(const Vec3D &rhs);
};
std::ostream &operator<<(std::ostream &os, const gpp::Vec3D &v);

struct gpp::Vec2D {
  f64 x, y;
  Vec2D operator+(const Vec2D &rhs);
  Vec2D operator-(const Vec2D &rhs);
  Vec2D operator*(f64 scalar);
  f64 dot(const Vec2D &rhs);
  Vec3D cross(const Vec2D &rhs);
};



struct gpp::Machine {
  friend class BytecodeEmitter;
  friend class Sterp;

private:
  std::shared_ptr<BytecodeEmitter> emitter;
  std::shared_ptr<BytecodeEmitter> emitterStash;
  bool emitterStashed;

public:
  Vec3D position;
  Vec3D g5xoffset;
  Vec3D g92offset;
  f64 toolOffset;
  Vec3D workOffsets[6];

  Unit unit;
  DistanceMode distanceMode;
  Plane plane;
  FeedMode feedMode;
  f64 rawFeedRate;
  f64 feedRate;
  SpindleMode spindleMode;
  SpindleDirection spindleDirection;
  f64 spindleSpeed;
  f64 rawSpindleSpeed;
  RetractMode retractMode;
  MotionControlMode motionControlMode;
  u64 selectedTool;
  u64 currentTool;

  std::string input;
  std::unordered_map<int, Tool> tools;

private:
  VerboseInstruction activeInstruction = {.word = '0'};

  std::function<void(std::vector<f64>)> handlers[(100)];

  Canvas canvasXY, canvasYZ, canvasXZ;
  bool plotToCanvas = false;
  bool canvasEnabled = false;

public:
  std::vector<f64> memory;
  std::unordered_map<std::string, u64> parameterAddresses;

  Machine();
  Machine(std::string input);

  void bind(std::shared_ptr<BytecodeEmitter> tempEmitter);
  void unbind();

  void reset();
  void reset(std::string code);

  void setMemory(std::string address, f64 value);
  void setMemory(i64 address, f64 value);
  f64 getMemory(std::string address);
  f64 getMemory(i64 address);
  std::string getCurrentLine();
  SafeInstruction next();
  void printSpecs();
  void enableCanvas();
  void saveCanvases();

private:
  void initTools(std::string file);

  void move_linear(std::vector<f64> args);
  void move_rapid(std::vector<f64> args);

  void set_feed_rate(std::vector<f64> args);
  void set_feed_mode(std::vector<f64> args);

  void use_length_units(std::vector<f64> args);
  void use_distance_mode(std::vector<f64> args);
  void select_plane(std::vector<f64> args);

  void arc_feed(std::vector<f64> args);

  void dwell(std::vector<f64> args);
  void set_origin_offsets(std::vector<f64> args);

  void start_spindle_clockwise(std::vector<f64> args);
  void start_spindle_counterclockwise(std::vector<f64> args);
  void stop_spindle_turning(std::vector<f64> args);
  void set_spindle_speed(std::vector<f64> args);
  void set_spindle_mode(std::vector<f64> args);

  void select_tool(std::vector<f64> args);
  void change_tool(std::vector<f64> args);

  void program_stop(std::vector<f64> args);
  void optional_program_stop(std::vector<f64> args);
  void program_end(std::vector<f64> args);

  void use_tool_length_offset(std::vector<f64> args);
  void set_tool_length_offset(std::vector<f64> args);

  void set_wcs_coordinates(std::vector<f64> args);
  void use_workspace(std::vector<f64> args);

  void set_retract_mode(std::vector<f64> args);
  void set_motion_control_mode(std::vector<f64> args);


  void write_parameter_to_file(std::vector<f64> args);
  void write_parameters_to_file(std::vector<f64> args);

  void handle_g(std::deque<VerboseInstruction> &list, f64 arg,
                const std::vector<Word> &words, int line, int column);
  void handle_m(std::deque<VerboseInstruction> &list, f64 arg,
                const std::vector<Word> &words, int line, int column);


  f64 unitMultiplier(Unit unit);
  const char *unitToString(Unit unit);
  const char *planeToString(Plane plane);
  Vec3D getLogicalPosition();
  Vec3D resolvePosition(Vec3D delta);
  void handleCSSMode();
  void drawLineOnPlane(Canvas &canvas, Plane plane, Vec3D from, Vec3D to);
  void drawLinesOnPlanes(Vec3D from, Vec3D to);
};
# 30 "emc/sterp/sterp.cc" 2

extern "C" void force_antlr4_lexer_rtti() { (void)typeid(antlr4::Lexer); }

gpp::Machine machine = gpp::Machine();
std::string currentLine;


int fetchHALParameter(const char *nameBuf, double *value);

int setHALParameter(const char *nameBuf, double *value);

void setLock();
void releaseLock();

class Sterp : public InterpBase {
  friend class gpp::Machine;

public:
  Sterp() : f(0) {
    std::cout << "STERP: Constructor called\n";
    force_antlr4_lexer_rtti();
  }

  char *error_text(int errcode, char *buf, size_t buflen);
  char *stack_name(int index, char *buf, size_t buflen);
  char *line_text(char *buf, size_t buflen);
  char *file_name(char *buf, size_t buflen);
  size_t line_length();
  int sequence_number();
  int ini_load(const char *inifile);
  int init();
  int execute();
  int execute(const char *line);
  int execute(const char *line, int line_number);
  int synch();
  int exit();
  int open(const char *filename);
  int read();
  int read(const char *line);
  int close();
  int reset();
  int line();
  int call_level();
  char *command(char *buf, size_t buflen);
  char *file(char *buf, size_t buflen);
  int on_abort(int reason, const char *message);
  void active_g_codes(int active_gcodes[17]);
  void active_m_codes(int active_mcodes[10]);
  void active_settings(double active_settings[5]);
  int active_modes(int g_codes[17], int m_codes[10],
                   double settings[5], StateTag const &tag);
  int restore_from_tag(StateTag const &tag);
  void print_state_tag(StateTag const &tag);
  void set_loglevel(int level);
  void set_loop_on_main_m99(bool state);
  FILE *f;
  char filename[
# 86 "emc/sterp/sterp.cc" 3 4
               4096
# 86 "emc/sterp/sterp.cc"
                       ];
};

enum ControlToken {
  control_if,
  control_while,
  control_for,
  control_do,
  control_end,
};

using ControlStack = std::stack<ControlToken>;

ControlStack controlStack;

std::string controlSequence;

bool startsWith(const std::string &str, const std::string &pre) {
  return str.compare(0, pre.size(), pre) == 0;
}

bool endsWith(const std::string &str, const std::string &suf) {
  if (suf.size() > str.size())
    return false;
  return std::equal(suf.rbegin(), suf.rend(), str.rbegin());
}

char *Sterp::error_text(int errcode, char *buf, size_t buflen) {
  std::cout << "STERP: error_text(" << errcode << ")\n";
  if (errcode < INTERP_MIN_ERROR)
    snprintf(buf, buflen, "OK %d", errcode);
  else
    snprintf(buf, buflen, "ERROR %d", errcode);
  return buf;
}

char *Sterp::stack_name(int index, char *buf, size_t buflen) {
  std::cout << "STERP: stack_name(" << index << ")\n";
  snprintf(buf, buflen, "<stack %d>", index);
  return buf;
}

int Sterp::ini_load(const char *inifile) {
  std::cout << "STERP: ini_load(" << inifile << ")\n";
  return 0;
}

int Sterp::read(const char *line) {
  std::cout << "STERP: read(line=" << line << ")\n";

  currentLine = line;

  return INTERP_OK;
}

int Sterp::read() {
  std::cout << "STERP: read() from file\n";
  char buf[255];
  if (!f || !fgets(buf, sizeof(buf), f)) {
    std::cout << "STERP: Reached end of file\n";
    return INTERP_ENDFILE;
  }

  std::string line(buf);
  std::cout << "STERP: Read buffer = \"" << line
            << "\" (length = " << line.length() << ")\n";

  currentLine = line;

  return INTERP_OK;
}

int Sterp::execute(const char *line) {
  std::cout << "STERP: execute(\"" << (line ? line : "null") << "\")\n";

  std::string lineStr;

  if (!line)
    lineStr = currentLine;
  else
    lineStr = line;

  if (lineStr.empty()) {
    std::cout << "STERP: Null line passed. "
                 "Exiting Sterp::execute with no error...\n";
    return INTERP_OK;
  }

  lineStr.erase(0, lineStr.find_first_not_of(" \t\r\n"));
  lineStr.erase(lineStr.find_last_not_of(" \t\r\n") + 1);

  if (lineStr.empty()) {
    std::cout << "STERP: Empty or whitespace-only line, skipping\n";
    return INTERP_OK;
  }

  std::cout << "STERP: line is not empty or null.\n";
  lineStr += "\n";

  if (startsWith(lineStr, "if")) {
    controlStack.push(control_if);
    controlSequence += lineStr;
    return INTERP_OK;
  } else if (startsWith(lineStr, "for")) {
    controlStack.push(control_for);
    controlSequence += lineStr;
    return INTERP_OK;
  } else if (startsWith(lineStr, "while")) {
    controlStack.push(control_while);
    controlSequence += lineStr;
    return INTERP_OK;
  } else if (startsWith(lineStr, "do")) {
    controlStack.push(control_do);
    controlSequence += lineStr;
  }

  if (endsWith(lineStr, "end\n") || endsWith(lineStr, "endif\n") ||
      endsWith(lineStr, "endfor\n") || endsWith(lineStr, "endwhile\n")) {
    if (!controlStack.empty())
      controlStack.pop();
    controlSequence += lineStr;
    lineStr = controlSequence;
    controlSequence.clear();
  }

  if (!controlStack.empty()) {
    controlSequence += lineStr;
    return INTERP_OK;
  }

  std::cout << "STERP: Parsing line: " << lineStr << "\n";

  auto emitter = std::make_shared<gpp::BytecodeEmitter>(machine, lineStr);

  std::string inputStash = machine.input;
  machine.input = lineStr;
  machine.bind(emitter);

  int line_num = 0;

  while (true) {
    SafeInstruction safeInstruction = machine.next();

    if (std::holds_alternative<gpp::Error>(safeInstruction)) {
      gpp::Error error = std::get<gpp::Error>(safeInstruction);
      std::cout << "STERP: Error while parsing line\n";
      error.print();
      machine.unbind();
      machine.input = inputStash;
      return INTERP_ERROR;
    }

    gpp::Instruction instruction = std::get<gpp::Instruction>(safeInstruction);

    if (instruction.command == gpp::no_command) {
      std::cout << "STERP: Reached end of instruction stream\n";
      break;
    }

    const std::vector<f64> &args = instruction.arguments;

    std::cout << "STERP: Instruction command -> " << instruction.command
              << "\n";
    std::cout << "STERP: Args -> ";
    for (f64 arg : args)
      std::cout << arg << " ";
    std::cout << "\n";
    std::cout << "STERP: Machine pos -> " << machine.position << "\n";

    switch (instruction.command) {
    case gpp::move_linear: {
      std::cout << "STERP: move linear\n";
      STRAIGHT_FEED(line_num, machine.position.x, machine.position.y,
                    machine.position.z, 0, 0, 0, 0, 0, 0);
      break;
    }
    case gpp::move_rapid: {
      std::cout << "STERP: move rapid\n";
      STRAIGHT_TRAVERSE(line_num, machine.position.x, machine.position.y,
                        machine.position.z, 0, 0, 0, 0, 0, 0);
      break;
    }

    case gpp::set_feed_rate: {
      SET_FEED_RATE(args.at(0));
      break;
    }
    case gpp::set_feed_mode: {
      break;
    }

    case gpp::use_length_units: {
      if (machine.unit == gpp::Unit::mm)
        USE_LENGTH_UNITS(CANON_UNITS::CANON_UNITS_MM);
      else if (machine.unit == gpp::Unit::inch)
        USE_LENGTH_UNITS(CANON_UNITS::CANON_UNITS_INCHES);
      break;
    }
    case gpp::use_distance_mode: {
      break;
    }
    case gpp::select_plane: {
      CANON_PLANE plane = CANON_PLANE_XZ;
      if (machine.plane == gpp::plane_xy)
        plane = CANON_PLANE_XY;
      if (machine.plane == gpp::plane_yz)
        plane = CANON_PLANE_YZ;
      if (machine.plane == gpp::plane_xz)
        plane = CANON_PLANE_XZ;

      SELECT_PLANE(plane);
      break;
    }

    case gpp::arc_feed: {
      ARC_FEED(line_num, args.at(0), args.at(1), args.at(2), args.at(3),
               -args.at(4), args.at(5), 0, 0, 0, 0, 0, 0);
      break;
    }

    case gpp::dwell: {
      DWELL(args.at(0));
      break;
    }
    case gpp::set_origin_offsets: {
      break;
    }

    case gpp::start_spindle_clockwise: {
      START_SPINDLE_CLOCKWISE(0);
      break;
    }
    case gpp::start_spindle_counterclockwise: {
      break;
      START_SPINDLE_COUNTERCLOCKWISE(0);
    }
    case gpp::stop_spindle_turning: {
      STOP_SPINDLE_TURNING(0);
      break;
    }
    case gpp::set_spindle_speed: {
      SET_SPINDLE_SPEED(0, args.at(0));
      break;
    }
    case gpp::set_spindle_mode: {
      break;
    }

    case gpp::select_tool: {
      SELECT_TOOL(args.at(0));
      break;
    }
    case gpp::change_tool: {
      CHANGE_TOOL_NUMBER(machine.currentTool);
      break;
    }

    case gpp::program_stop: {
      PROGRAM_STOP();
      break;
    }
    case gpp::optional_program_stop: {
      OPTIONAL_PROGRAM_STOP();
      break;
    }
    case gpp::program_end: {
      PROGRAM_END();
      break;
    }

    case gpp::use_tool_length_offset: {

      break;
    }
    case gpp::set_tool_length_offset: {

      break;
    }

    case gpp::set_wcs_coordinates: {
      break;
    }
    case gpp::use_workspace: {
      break;
    }

    case gpp::set_retract_mode: {
      break;
    }
    case gpp::set_motion_control_mode: {
      CANON_MOTION_MODE mode = CANON_CONTINUOUS;
      if (machine.motionControlMode == gpp::exact_stop)
        mode = CANON_EXACT_STOP;
      if (machine.motionControlMode == gpp::exact_path)
        mode = CANON_EXACT_PATH;
      if (machine.motionControlMode == gpp::continuous)
        mode = CANON_CONTINUOUS;
      SET_MOTION_CONTROL_MODE(mode, 0);
      break;
    }


    case gpp::write_parameter_to_file: {
      break;
    }
    case gpp::write_parameters_to_file: {
      break;
    }

    case gpp::_get_hal_parameter: {
      break;
    }

    case gpp::no_command: {
      std::cout << "STERP: No Command! This shouldn't even be printed.\n";
      break;
    }

    default:
      return INTERP_ERROR;
    }
  }
  machine.unbind();
  machine.input = inputStash;

  return INTERP_OK;
}

int Sterp::execute(const char *line, int line_number) {
  std::cout << "STERP: execute(line, line_number=" << line_number << ")\n";
  if (!line)
    return execute(currentLine.c_str());
  return execute(line);
}

int Sterp::execute() {
  std::cout << "STERP: execute() [no-arg]\n";
  return execute(currentLine.c_str());
}

int Sterp::open(const char *newfilename) {
  std::cout << "STERP: open(\"" << newfilename << "\")\n";
  if (f)
    fclose(f);
  f = fopen(newfilename, "r");
  if (f) {
    snprintf(filename, sizeof(filename), "%s", newfilename);
    std::cout << "STERP: Successfully opened file\n";
  } else {
    std::cerr << "STERP: Failed to open file\n";
  }
  return f ? INTERP_OK : INTERP_ERROR;
}

int Sterp::close() {
  std::cout << "STERP: close()\n";
  if (f)
    fclose(f);
  f = nullptr;
  return INTERP_OK;
}

int Sterp::exit() {
  std::cout << "STERP: exit()\n";
  return 0;
}

int Sterp::synch() {
  std::cout << "STERP: synch()\n";
  return 0;
}

int Sterp::reset() {
  std::cout << "STERP: reset()\n";
  return 0;
}

int Sterp::line() {
  std::cout << "STERP: line()\n";
  return 0;
}

int Sterp::call_level() {
  std::cout << "STERP: call_level()\n";
  return 0;
}

char *Sterp::line_text(char *buf, size_t bufsize) {
  snprintf(buf, bufsize, "<Sterp::line_text>");
  return buf;
}

char *Sterp::file_name(char *buf, size_t bufsize) {
  snprintf(buf, bufsize, "%s", filename);
  return buf;
}

char *Sterp::file(char *buf, size_t bufsize) {
  snprintf(buf, bufsize, "%s", filename);
  return buf;
}

int Sterp::on_abort(int reason, const char *message) {
  std::cerr << "STERP: on_abort(reason=" << reason << ", message=" << message
            << ")\n";
  reset();
  return INTERP_OK;
}

char *Sterp::command(char *buf, size_t bufsize) {
  snprintf(buf, bufsize, "<Sterp::command>");
  return buf;
}

size_t Sterp::line_length() {
  std::cout << "STERP: line_length()\n";
  return 0;
}

int Sterp::sequence_number() {
  std::cout << "STERP: sequence_number()\n";
  return -1;
}

int Sterp::init() {
  std::cout << "STERP: init()\n";
  return INTERP_OK;
}

void Sterp::active_g_codes(int gees[]) {

  std::fill(gees, gees + 17, 0);
}

void Sterp::active_m_codes(int emms[]) {

  std::fill(emms, emms + 10, 0);
}

void Sterp::active_settings(double sets[]) {

  std::fill(sets, sets + 5, 0.0);
}

int Sterp::restore_from_tag(StateTag const &tag) {
  std::cout << "STERP: restore_from_tag()\n";
  return -1;
}

void Sterp::print_state_tag(StateTag const &tag) {
  std::cout << "STERP: print_state_tag()\n";
}

int Sterp::active_modes(int g_codes[], int m_codes[], double settings[],
                        const StateTag &tag) {

  return -1;
}

void Sterp::set_loglevel(int level) {
  std::cout << "STERP: set_loglevel(" << level << ")\n";
}

void Sterp::set_loop_on_main_m99(bool state) {
  std::cout << "STERP: set_loop_on_main_m99(" << (state ? "true" : "false")
            << ")\n";
}

extern "C" InterpBase *makeInterp() {
  std::cout << "STERP: makeInterp() called\n";
  return new Sterp;
}

int fetchHALParameter(const char *nameBuf, double *value) {
  static int comp_id;
  int retval;
  hal_type_t type = HAL_TYPE_UNINITIALIZED;
  hal_data_u *ptr;
  bool conn;
  char hal_name[47];

  setLock();

  if (!comp_id) {
    char hal_comp[47];
    snprintf(hal_comp, sizeof(hal_comp), "interp%d", getpid());
    comp_id = hal_init(hal_comp);
    if (comp_id < 0) {

      releaseLock();
      return INTERP_ERROR;
    }

    retval = hal_ready(comp_id);
    if (retval != 0) {

      releaseLock();
      return INTERP_ERROR;
    }
  }

  char *s;
  int n = strlen(nameBuf);

  if ((n > 6) && ((s = (char *)strchr(&nameBuf[5], ']')) != 
# 590 "emc/sterp/sterp.cc" 3 4
                                                           __null
# 590 "emc/sterp/sterp.cc"
                                                               )) {

    int closeBracket = s - nameBuf;

    strncpy(hal_name, &nameBuf[5], closeBracket);
    hal_name[closeBracket - 5] = '\0';
    if (nameBuf[closeBracket + 1]) {

      std::cout << "HAL -> ERROR\n";
    }

    if (hal_get_pin_value_by_name(hal_name, &type, &ptr, &conn) == 0) {
      if (!conn)
        printf("%s: no signal connected", hal_name);
      goto assign;
    }
    if (hal_get_signal_value_by_name(hal_name, &type, &ptr, &conn) == 0) {
      if (!conn)
        printf("%s: signal has no writer", hal_name);
      goto assign;
    }
    if (hal_get_param_value_by_name(hal_name, &type, &ptr) == 0) {
      goto assign;
    }
    std::cout << "HAL -> ERROR\n";


  }
  releaseLock();
  return INTERP_OK;



assign:
  switch (type) {
  case HAL_BIT:
    *value = (double)(ptr->b);
    break;
  case HAL_U32:
    *value = (double)(ptr->u);
    break;
  case HAL_S32:
    *value = (double)(ptr->s);
    break;
  case HAL_FLOAT:
    *value = (double)(ptr->f);
    break;
  default:
    return -1;
  }
  printf("%s: value=%f", hal_name, *value);
  releaseLock();
  return INTERP_OK;
}

int setHALParameter(const char *nameBuf, double *value) {
  static int comp_id;
  int retval;
  hal_type_t type = HAL_TYPE_UNINITIALIZED;
  hal_data_u *ptr;
  bool conn;
  char hal_name[47];

  setLock();

  if (!comp_id) {
    char hal_comp[47];
    snprintf(hal_comp, sizeof(hal_comp), "interp%d", getpid());
    comp_id = hal_init(hal_comp);
    if (comp_id < 0) {
      std::cerr << "HAL -> ERROR: Failed to initialize HAL component\n";
      releaseLock();
      return INTERP_ERROR;
    }

    retval = hal_ready(comp_id);
    if (retval != 0) {
      std::cerr << "HAL -> ERROR: Failed to make HAL component ready\n";
      releaseLock();
      return INTERP_ERROR;
    }
  }

  char *s;
  int n = strlen(nameBuf);

  if ((n > 6) && ((s = (char *)strchr(&nameBuf[5], ']')) != 
# 676 "emc/sterp/sterp.cc" 3 4
                                                           __null
# 676 "emc/sterp/sterp.cc"
                                                               )) {
    int closeBracket = s - nameBuf;

    strncpy(hal_name, &nameBuf[5], closeBracket - 5);
    hal_name[closeBracket - 5] = '\0';

    if (nameBuf[closeBracket + 1]) {
      std::cerr << "HAL -> ERROR: Invalid parameter format\n";
      releaseLock();
      return INTERP_ERROR;
    }

    if (hal_get_pin_value_by_name(hal_name, &type, &ptr, &conn) == 0) {
      goto set_value;
    }

    if (hal_get_signal_value_by_name(hal_name, &type, &ptr, &conn) == 0) {
      if (!conn) {
        std::cout << "HAL -> WARNING: signal '" << hal_name
                  << "' has no writer\n";
      }
      goto set_value;
    }

    if (hal_get_param_value_by_name(hal_name, &type, &ptr) == 0) {
      goto set_value;
    }

    std::cerr << "HAL -> ERROR: parameter/pin/signal '" << hal_name
              << "' not found\n";
    releaseLock();
    return INTERP_ERROR;

  } else {
    std::cerr << "HAL -> ERROR: Invalid parameter name format\n";
    releaseLock();
    return INTERP_ERROR;
  }

set_value:
  switch (type) {
  case HAL_BIT:
    ptr->b = (*value != 0.0) ? 1 : 0;
    break;
  case HAL_U32:
    if (*value < 0) {
      std::cerr
          << "HAL -> ERROR: Cannot set negative value to unsigned parameter\n";
      releaseLock();
      return INTERP_ERROR;
    }
    ptr->u = (hal_u32_t)*value;
    break;
  case HAL_S32:
    ptr->s = (hal_s32_t)*value;
    break;
  case HAL_FLOAT:
    ptr->f = (volatile real_t)*value;
    break;
  default:
    std::cerr << "HAL -> ERROR: Unknown HAL type\n";
    releaseLock();
    return INTERP_ERROR;
  }

  std::cout << "HAL -> SET: " << hal_name << " = " << *value << std::endl;
  releaseLock();
  return INTERP_OK;
}

void setLock() {
  while (hal_get_lock() != 0) {
  }

  if (hal_set_lock(255) != 0)
    std::cerr << "HAL -> ERROR: Failed to set HAL lock\n";
}

void releaseLock() {
  if (hal_set_lock(0) != 0)
    std::cerr << "HAL -> ERROR: Failed to release HAL lock\n";
}
